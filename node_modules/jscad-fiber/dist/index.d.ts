import * as react_jsx_runtime from 'react/jsx-runtime';
import * as react from 'react';
import react__default from 'react';
import { Geom3 } from '@jscad/modeling/src/geometries/types';

type CircleProps = {
    radius: number;
};
declare function Circle({ radius }: CircleProps): react_jsx_runtime.JSX.Element;

type ColorizeProps = {
    color: [number, number, number] | string;
    children: React.ReactNode;
};
declare function Colorize({ color, children }: ColorizeProps): react_jsx_runtime.JSX.Element;

interface CenterProps {
    center?: {
        x: number;
        y: number;
        z: number;
    } | [number, number, number];
    offset?: {
        x: number;
        y: number;
        z: number;
    } | [number, number, number];
}

interface ColorProps {
    color?: string;
}

interface CubeProps {
    size: number | [number, number, number];
}
declare const Cube: react.ComponentType<CubeProps & ColorProps & CenterProps>;

type CuboidProps = {
    size: number | [number, number, number];
};
declare const Cuboid: react.ComponentType<CuboidProps & ColorProps & CenterProps>;

type CustomProps = {
    geometry: Geom3;
};
declare function Custom({ geometry }: CustomProps): react_jsx_runtime.JSX.Element;

type Point3 = [number, number, number] | {
    x: number;
    y: number;
    z: number;
};
declare const normalizePointToArray: (point: Point3 | undefined | null) => number[] | null;
type TranslateProps = {
    offset?: Point3;
    center?: Point3;
    x?: number;
    y?: number;
    z?: number;
    children: React.ReactNode;
};
declare function Translate({ offset, center, x, y, z, children, }: TranslateProps): react_jsx_runtime.JSX.Element;

type RotationValue = Point3 | [string | number, string | number, string | number] | string | number;
type RotateProps = {
    rotation?: RotationValue;
    angles?: RotationValue;
    children: React.ReactNode;
};
declare const processRotation: (value: RotateProps["rotation"] | RotateProps["angles"]) => [number, number, number];
declare const Rotate: react.ComponentType<RotateProps & ColorProps & CenterProps>;

interface RotationProps {
    rotation?: RotationValue;
}

type CylinderProps = {
    radius: number;
    height: number;
};
declare const Cylinder: react.ComponentType<CylinderProps & RotationProps & CenterProps & ColorProps>;

type CylinderEllipticProps = {
    height: number;
    radius?: number;
    startRadius: [number, number];
    endRadius: [number, number];
    segments?: number;
    startAngle?: number;
    endAngle?: number;
};
declare const CylinderElliptic: react.ComponentType<CylinderEllipticProps & ColorProps & CenterProps>;

type EllipsoidProps = {
    radius: [number, number, number];
};
declare const Ellipsoid: react.ComponentType<EllipsoidProps & ColorProps & CenterProps>;

type ExtrudeHelicalProps = {
    height: number;
    angle: number;
    startAngle?: number;
    pitch?: number;
    endOffset?: number;
    segmetsPerRotation?: number;
    children: any;
};
declare const ExtrudeHelical: react.ComponentType<ExtrudeHelicalProps & ColorProps & CenterProps>;

type ExtrudeLinearProps = {
    height: number;
    twistAngle?: number;
    twistSteps?: number;
    children: any;
};
declare const ExtrudeLinear: react.ComponentType<ExtrudeLinearProps & ColorProps & CenterProps>;

type ExtrudeRectangularProps = {
    size: number;
    height: number;
    children: any;
};
declare const ExtrudeRectangular: react.ComponentType<ExtrudeRectangularProps & ColorProps & CenterProps>;

type ExtrudeRotateProps = {
    angle: number;
    startAngle?: number;
    segments?: number;
    children: any;
};
declare const ExtrudeRotate: react.ComponentType<ExtrudeRotateProps & ColorProps & CenterProps>;

type GeodesicSphereProps = {
    radius: number;
    frequency: number;
};
declare const GeodesicSphere: react.ComponentType<GeodesicSphereProps & ColorProps & CenterProps>;

type HullProps = {
    children: React.ReactNode;
};
declare const Hull: react.ComponentType<HullProps & ColorProps & CenterProps>;

type HullChainProps = {
    children: React.ReactNode;
};
declare const HullChain: react.ComponentType<HullChainProps & ColorProps & CenterProps>;

type PolygonProps = {
    points: [number, number][];
};
declare function Polygon({ points }: PolygonProps): react_jsx_runtime.JSX.Element;

type ProjectProps = {
    axis: [number, number, number];
    origin: [number, number, number];
    children: any;
};
declare function Project({ axis, origin, children }: ProjectProps): react_jsx_runtime.JSX.Element;

type RectangleProps = {
    size: [number, number];
};
declare function Rectangle({ size }: RectangleProps): react_jsx_runtime.JSX.Element;

type RoundedCuboidProps = {
    size: number | [number, number, number];
    roundRadius: number;
};
declare const RoundedCuboid: react.ComponentType<RoundedCuboidProps & ColorProps & CenterProps>;

type RoundedCylinderProps = {
    radius: number;
    height: number;
    roundRadius: number;
};
declare const RoundedCylinder: react.ComponentType<RoundedCylinderProps & ColorProps & CenterProps>;

type SphereProps = {
    radius: number;
    segments?: number;
};
declare const Sphere: react.ComponentType<SphereProps & CenterProps & ColorProps>;

type SubtractProps = {
    children: React.ReactNode[];
};
declare const Subtract: react.ComponentType<SubtractProps & ColorProps & CenterProps>;

type TorusProps = {
    innerRadius: number;
    outerRadius: number;
    innerSegments?: number;
    outerSegments?: number;
    innerRotation?: number;
    outerRotation?: number;
    startAngle?: number;
};
declare const Torus: react.ComponentType<TorusProps & ColorProps & CenterProps>;

type UnionProps = {
    children: React.ReactNode;
};
declare function Union({ children }: UnionProps): react_jsx_runtime.JSX.Element;

type Slice = {
    edges: Array<[Point3, Point3]>;
};
type ExtrudeFromSlicesProps = {
    numberOfSlices?: number;
    capStart?: boolean;
    capEnd?: boolean;
    close?: boolean;
    repair?: boolean;
    baseSlice: Slice;
    callback?: (progress: number, count: number, base: Slice) => Slice;
};
declare const ExtrudeFromSlices: react.ComponentType<ExtrudeFromSlicesProps & ColorProps & CenterProps>;

interface JSCADModule {
    primitives: {
        polygon: (options: {
            points: [number, number][];
        }) => any;
        cube: (options: {
            size: number | [number, number, number];
        }) => any;
        sphere: (options: {
            radius: number;
            segments?: number;
        }) => any;
        geodesicSphere: (options: {
            radius: number;
            frequency: number;
        }) => any;
        cuboid: (options: {
            size: number | [number, number, number];
        }) => any;
        roundedCuboid: (options: {
            size: number | [number, number, number];
            roundRadius: number;
        }) => any;
        ellipsoid: (options: {
            radius: [number, number, number];
        }) => any;
        cylinder: (options: {
            radius: number;
            height: number;
            startRadius?: number;
            endRadius?: number;
        }) => any;
        roundedCylinder: (options: {
            radius: number;
            height: number;
            roundRadius: number;
        }) => any;
        cylinderElliptic: (options: {
            radius?: number;
            height: number;
            startRadius?: number[];
            endRadius?: number[];
            startAngle?: number;
            endAngle?: number;
        }) => any;
        torus: (options: {
            innerRadius: number;
            outerRadius: number;
            innerSegments?: number;
            outerSegments?: number;
            innerRotation?: number;
            outerRotation?: number;
            startAngle?: number;
        }) => any;
        rectangle: (options: {
            size: [number, number];
        }) => any;
        circle: (options: {
            radius: number;
        }) => any;
    };
    booleans: {
        union: (a: any, b: any) => any;
        subtract: (a: any, b: any) => any;
    };
    maths: {
        slice: {
            fromPoints: (points: Array<[number, number]>) => any;
            transform: (matrix: any, slice: any) => any;
        };
        bezier: {
            create: (points: number[]) => any;
            valueAt: (t: number, curve: any) => number;
        };
        mat4: {
            create: () => any;
            fromTranslation: (out: any, v: [number, number, number]) => any;
            fromScaling: (out: any, v: [number, number, number]) => any;
        };
    };
    transforms: {
        translate: (vector: [number, number, number], object: any) => any;
        rotate: (angles: Point3, object: any) => any;
    };
    extrusions: {
        extrudeLinear: (options: {
            height: number;
            twistAngle?: number;
            twistSteps?: number;
        }, geometry: any) => any;
        extrudeHelical: (options: {
            angle: number;
            pitch?: number;
            segmetsPerRotation?: number;
            startAngle?: number;
            height?: number;
            endOffset?: number;
        }, geometry: any) => any;
        extrudeRotate: (options: {
            angle: number;
            startAngle?: number;
            segments?: number;
        }, geometry: any) => any;
        extrudeRectangular: (options: {
            size: number;
            height: number;
        }, geometry: any) => any;
        project: (options: {
            axis: [number, number, number];
            origin: [number, number, number];
        }, geometry: any) => any;
        extrudeFromSlices: (options: {
            numberOfSlices?: number;
            capStart?: boolean;
            capEnd?: boolean;
            close?: boolean;
            repair?: boolean;
            callback?: (progress: number, count: number, base: Slice) => Slice;
        }, baseSlice: Slice) => any;
    };
    colors: {
        colorize: (options: [number, number, number], geometry: any) => any;
    };
    hulls: {
        hull: (options: {
            geometries: any;
        }) => any;
        hullChain: (options: {
            geometries: any;
        }) => any;
    };
}
type JSCADPrimitive = ReturnType<JSCADModule["primitives"]["cube"]> | ReturnType<JSCADModule["primitives"]["sphere"]> | ReturnType<JSCADModule["primitives"]["cuboid"]> | ReturnType<JSCADModule["primitives"]["roundedCuboid"]> | ReturnType<JSCADModule["primitives"]["geodesicSphere"]> | ReturnType<JSCADModule["primitives"]["ellipsoid"]> | ReturnType<JSCADModule["primitives"]["cylinder"]> | ReturnType<JSCADModule["primitives"]["roundedCylinder"]> | ReturnType<JSCADModule["primitives"]["cylinderElliptic"]> | ReturnType<JSCADModule["primitives"]["torus"]> | ReturnType<JSCADModule["primitives"]["polygon"]> | ReturnType<JSCADModule["primitives"]["circle"]> | ReturnType<JSCADModule["primitives"]["rectangle"]> | ReturnType<JSCADModule["extrusions"]["extrudeLinear"]> | ReturnType<JSCADModule["extrusions"]["extrudeHelical"]> | ReturnType<JSCADModule["extrusions"]["extrudeRotate"]> | ReturnType<JSCADModule["extrusions"]["extrudeRectangular"]> | ReturnType<JSCADModule["extrusions"]["project"]> | ReturnType<JSCADModule["colors"]["colorize"]> | ReturnType<JSCADModule["booleans"]["union"]> | ReturnType<JSCADModule["hulls"]["hull"]>;

/**
 * Renders children and returns jscad plan JSON
 *
 * This is usually used in "tscircuit entrypoints" like <SchematicViewer />,
 * <PcbViewer /> or <3dViewer /> to convert their children into circuit json (soup)
 */
declare const useRenderElementsToJscadPlan: (jscad: any, children: react__default.ReactElement | react__default.ReactElement[]) => {
    loading: boolean;
    jscadElms: any[];
    error: Error | null;
};

declare function createJSCADRenderer(jscad: JSCADModule): {
    createJSCADRoot: (container: JSCADPrimitive[]) => {
        render(element: React.ReactElement): void;
    };
};

export { Circle, type CircleProps, Colorize, type ColorizeProps, Cube, type CubeProps, Cuboid, type CuboidProps, Custom, type CustomProps, Cylinder, CylinderElliptic, type CylinderEllipticProps, type CylinderProps, Ellipsoid, type EllipsoidProps, ExtrudeFromSlices, type ExtrudeFromSlicesProps, ExtrudeHelical, type ExtrudeHelicalProps, ExtrudeLinear, type ExtrudeLinearProps, ExtrudeRectangular, type ExtrudeRectangularProps, ExtrudeRotate, type ExtrudeRotateProps, GeodesicSphere, type GeodesicSphereProps, Hull, HullChain, type HullChainProps, type HullProps, type Point3, Polygon, type PolygonProps, Project, type ProjectProps, Rectangle, type RectangleProps, Rotate, type RotateProps, type RotationValue, RoundedCuboid, type RoundedCuboidProps, RoundedCylinder, type RoundedCylinderProps, type Slice, Sphere, type SphereProps, Subtract, type SubtractProps, Torus, type TorusProps, Translate, type TranslateProps, Union, type UnionProps, createJSCADRenderer, normalizePointToArray, processRotation, useRenderElementsToJscadPlan };
