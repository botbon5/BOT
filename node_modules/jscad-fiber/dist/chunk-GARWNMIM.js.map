{"version":3,"sources":["../lib/index.tsx","../lib/create-host-config.ts","../lib/utils/flattenArray.ts","../lib/utils/singleElementUnnest.ts","../lib/jscad-fns/circle.tsx","../lib/jscad-fns/colorize.tsx","../lib/wrappers/with-color-prop.tsx","../lib/jscad-fns/translate.tsx","../lib/wrappers/with-offset-prop.tsx","../lib/jscad-fns/cube.tsx","../lib/jscad-fns/cuboid.tsx","../lib/jscad-fns/custom.tsx","../lib/jscad-fns/rotate.tsx","../lib/wrappers/with-rotation-prop.tsx","../lib/jscad-fns/cylinder.tsx","../lib/jscad-fns/cylinder-elliptic.tsx","../lib/jscad-fns/ellipsoid.tsx","../lib/jscad-fns/extrude-helical.tsx","../lib/jscad-fns/extrude-linear.tsx","../lib/jscad-fns/extrude-rectangular.tsx","../lib/jscad-fns/extrude-rotate.tsx","../lib/jscad-fns/geodesic-sphere.tsx","../lib/jscad-fns/hull.tsx","../lib/jscad-fns/hull-chain.tsx","../lib/jscad-fns/polygon.tsx","../lib/jscad-fns/project.tsx","../lib/jscad-fns/rectangle.tsx","../lib/jscad-fns/rounded-cuboid.tsx","../lib/jscad-fns/rounded-cylinder.tsx","../lib/jscad-fns/sphere.tsx","../lib/jscad-fns/subtract.tsx","../lib/jscad-fns/torus.tsx","../lib/jscad-fns/union.tsx","../lib/jscad-fns/extrude-from-slices.tsx","../lib/hooks/use-render-elements-to-jscad-plan.ts"],"sourcesContent":["import ReactReconciler from \"react-reconciler\"\nimport { createHostConfig } from \"./create-host-config\"\nimport type { JSCADModule, JSCADPrimitive } from \"./jscad-primitives\"\nexport * from \"./jscad-fns\"\nexport * from \"./hooks/use-render-elements-to-jscad-plan\"\n\n// Create a function that returns the reconciler and root creation function\nexport function createJSCADRenderer(jscad: JSCADModule) {\n  const hostConfig = createHostConfig(jscad)\n\n  function createJSCADRoot(container: JSCADPrimitive[]) {\n    const reconciler = ReactReconciler(hostConfig)\n    const root = reconciler.createContainer(\n      container,\n      0,\n      null,\n      false,\n      null,\n      \"\",\n      (error) => console.error(error),\n      null,\n    )\n    return {\n      render(element: React.ReactElement) {\n        reconciler.updateContainer(element, root, null, () => {})\n      },\n    }\n  }\n\n  return { createJSCADRoot }\n}\n","import type { Geom3 } from \"@jscad/modeling/src/geometries/types\"\nimport type ReactReconciler from \"react-reconciler\"\nimport type { AnyConstructors } from \"three/examples/jsm/nodes/Nodes.js\"\nimport type {\n  CircleProps,\n  ColorizeProps,\n  CubeProps,\n  CuboidProps,\n  CylinderEllipticProps,\n  CylinderProps,\n  EllipsoidProps,\n  ExtrudeFromSlicesProps,\n  ExtrudeHelicalProps,\n  ExtrudeLinearProps,\n  ExtrudeRectangularProps,\n  ExtrudeRotateProps,\n  GeodesicSphereProps,\n  HullChainProps,\n  HullProps,\n  PolygonProps,\n  ProjectProps,\n  RectangleProps,\n  RoundedCuboidProps,\n  RoundedCylinderProps,\n  Slice,\n  SphereProps,\n  SubtractProps,\n  TorusProps,\n  UnionProps,\n} from \"./jscad-fns\"\nimport type { JSCADModule, JSCADPrimitive } from \"./jscad-primitives\"\nimport React from \"react\"\nimport { flattenArray } from \"./utils/flattenArray\"\nimport { singleElementUnnest } from \"./utils/singleElementUnnest\"\nexport function createHostConfig(jscad: JSCADModule) {\n  const createInstance = (\n    type: string | ((props: any) => any),\n    props: any,\n    rootContainerInstance: any,\n    hostContext: any,\n    internalInstanceHandle: any,\n  ) => {\n    const renderChildren = (children: any): any[] => {\n      if (!children) return []\n      if (Array.isArray(children)) {\n        return flattenArray(\n          children\n            .filter(React.isValidElement)\n            .map((child) =>\n              createInstance(\n                child.type as string | ((props: any) => any),\n                child.props,\n                [],\n                hostContext,\n                internalInstanceHandle,\n              ),\n            ),\n        )\n      }\n      if (React.isValidElement(children)) {\n        return [\n          createInstance(\n            children.type as string | ((props: any) => any),\n            children.props,\n            [],\n            hostContext,\n            internalInstanceHandle,\n          ),\n        ]\n      }\n      return []\n    }\n\n    // Handle function components\n    if (typeof type === \"function\") {\n      const element = type(props)\n      return createInstance(\n        element.type,\n        element.props,\n        rootContainerInstance,\n        hostContext,\n        internalInstanceHandle,\n      )\n    }\n\n    switch (type) {\n      case \"cube\":\n        return jscad.primitives.cube({ size: (props as CubeProps).size })\n      case \"sphere\":\n        return jscad.primitives.sphere({\n          radius: (props as SphereProps).radius,\n          segments: (props as SphereProps).segments,\n        })\n      case \"cuboid\":\n        return jscad.primitives.cuboid({\n          size: (props as CuboidProps).size,\n        })\n      case \"roundedCuboid\":\n        return jscad.primitives.roundedCuboid({\n          size: (props as RoundedCuboidProps).size,\n          roundRadius: (props as RoundedCuboidProps).roundRadius,\n        })\n      case \"geodesicSphere\":\n        return jscad.primitives.geodesicSphere({\n          radius: (props as GeodesicSphereProps).radius,\n          frequency: (props as GeodesicSphereProps).frequency,\n        })\n      case \"ellipsoid\":\n        return jscad.primitives.ellipsoid({\n          radius: (props as EllipsoidProps).radius,\n        })\n      case \"cylinder\":\n        return jscad.primitives.cylinder({\n          radius: (props as CylinderProps).radius,\n          height: (props as CylinderProps).height,\n        })\n      case \"roundedCylinder\":\n        return jscad.primitives.roundedCylinder({\n          radius: (props as RoundedCylinderProps).radius,\n          height: (props as RoundedCylinderProps).height,\n          roundRadius: (props as RoundedCylinderProps).roundRadius,\n        })\n      case \"cylinderElliptic\":\n        return jscad.primitives.cylinderElliptic({\n          radius: (props as CylinderEllipticProps).radius,\n          height: (props as CylinderEllipticProps).height,\n          startRadius: (props as CylinderEllipticProps).startRadius,\n          endRadius: (props as CylinderEllipticProps).endRadius,\n          startAngle: (props as CylinderEllipticProps).startAngle,\n          endAngle: (props as CylinderEllipticProps).endAngle,\n        })\n      case \"torus\":\n        return jscad.primitives.torus({\n          innerRadius: (props as TorusProps).innerRadius,\n          outerRadius: (props as TorusProps).outerRadius,\n          innerSegments: (props as TorusProps).innerSegments,\n          outerSegments: (props as TorusProps).outerSegments,\n          innerRotation: (props as TorusProps).innerRotation,\n          outerRotation: (props as TorusProps).outerRotation,\n          startAngle: (props as TorusProps).startAngle,\n        })\n      case \"jscadPolygon\": {\n        return jscad.primitives.polygon({\n          points: (props as PolygonProps).points,\n        })\n      }\n\n      case \"extrudeLinear\": {\n        const { children, ...extrudeProps } = props as ExtrudeLinearProps\n\n        const childrenGeometry = renderChildren(children)\n\n        const extrudedGeometry = jscad.extrusions.extrudeLinear(\n          {\n            height: extrudeProps.height,\n            // twistAngle: extrudeProps.twistAngle,\n            // twistSteps: extrudeProps.twistSteps,\n          },\n          childrenGeometry,\n        )\n\n        return extrudedGeometry\n      }\n      case \"extrudeRotate\": {\n        const { children, ...extrudeProps } = props as ExtrudeRotateProps\n\n        const childrenGeometry = renderChildren(children)\n\n        const extrudedGeometry = jscad.extrusions.extrudeRotate(\n          {\n            angle: extrudeProps.angle,\n            // twistAngle: extrudeProps.twistAngle,\n            // twistSteps: extrudeProps.twistSteps,\n          },\n          childrenGeometry,\n        )\n\n        return extrudedGeometry\n      }\n      case \"extrudeRectangular\": {\n        const { children, ...extrudeProps } = props as ExtrudeRectangularProps\n\n        const childrenGeometry = renderChildren(children)\n\n        const extrudedGeometry = jscad.extrusions.extrudeRectangular(\n          {\n            size: extrudeProps.size,\n            height: extrudeProps.height,\n          },\n          childrenGeometry,\n        )\n\n        return extrudedGeometry\n      }\n      case \"extrudeHelical\": {\n        const { children, ...extrudeProps } = props as ExtrudeHelicalProps\n\n        const childrenGeometry = renderChildren(children)\n\n        const extrudedGeometry = jscad.extrusions.extrudeHelical(\n          {\n            height: extrudeProps.height,\n            angle: extrudeProps.angle,\n            startAngle: extrudeProps.startAngle || 0,\n            pitch: extrudeProps.pitch || 0,\n            endOffset: extrudeProps.endOffset || 0,\n            segmetsPerRotation: extrudeProps.segmetsPerRotation || 32,\n          },\n          childrenGeometry,\n        )\n\n        return extrudedGeometry\n      }\n\n      case \"extrudeFromSlices\": {\n        const { baseSlice, ...extrudeProps } = props as ExtrudeFromSlicesProps\n\n        const extrudedGeometry = jscad.extrusions.extrudeFromSlices(\n          extrudeProps,\n          baseSlice as Slice,\n        )\n\n        return extrudedGeometry\n      }\n\n      case \"project\": {\n        const { children, ...projectProps } = props as ProjectProps\n\n        const childrenGeometry = renderChildren(children)\n\n        const projectedGeometry = jscad.extrusions.project(\n          {\n            axis: projectProps.axis,\n            origin: projectProps.origin,\n          },\n          childrenGeometry,\n        )\n\n        return projectedGeometry\n      }\n      case \"colorize\": {\n        const { children, ...colorizeProps } = props as ColorizeProps\n\n        const childrenGeometry = renderChildren(children)\n\n        // Assert that color is an array\n        const color = colorizeProps.color as unknown as [number, number, number]\n\n        const colorizedGeometry = jscad.colors.colorize(\n          color,\n          singleElementUnnest(childrenGeometry),\n        )\n\n        return colorizedGeometry\n      }\n\n      case \"custom\": {\n        const { geometry } = props as { geometry: Geom3 }\n\n        return geometry\n      }\n\n      case \"union\": {\n        const { children } = props as UnionProps\n        if (!Array.isArray(children) || children.length < 2) {\n          throw new Error(\"Union must have at least two children\")\n        }\n\n        const geometries = children.map((child) =>\n          createInstance(\n            child.type,\n            child.props,\n            rootContainerInstance,\n            hostContext,\n            internalInstanceHandle,\n          ),\n        )\n        return geometries.reduce((acc, curr) => jscad.booleans.union(acc, curr))\n      }\n\n      case \"subtract\": {\n        const { children } = props as SubtractProps\n\n        if (!children || children.length < 2) {\n          throw new Error(\n            \"Subtract must have at least one base component and one component to subtract.\",\n          )\n        }\n\n        // Filter to only include valid React elements\n        const validChildren = React.Children.toArray(children).filter(\n          React.isValidElement,\n        )\n\n        if (validChildren.length < 2) {\n          throw new Error(\n            \"Subtract must have at least one base component and one component to subtract.\",\n          )\n        }\n\n        // Convert the base component (first child) to JSCAD geometry\n        const baseGeometry = createInstance(\n          validChildren[0].type as string | ((props: any) => any),\n          validChildren[0].props,\n          rootContainerInstance,\n          hostContext,\n          internalInstanceHandle,\n        )\n\n        // Convert the rest of the valid children (subtraction components) to JSCAD geometries\n        const subtractGeometries = flattenArray(\n          validChildren\n            .slice(1)\n            .map((child) =>\n              createInstance(\n                child.type as string | ((props: any) => any),\n                child.props,\n                rootContainerInstance,\n                hostContext,\n                internalInstanceHandle,\n              ),\n            ),\n        )\n\n        // Ensure the base and subtract geometries were created successfully\n        if (!baseGeometry || subtractGeometries.some((geo) => geo == null)) {\n          throw new Error(\n            \"One or more geometries could not be processed for subtraction.\",\n          )\n        }\n\n        // Apply JSCAD's subtract operation across the array of subtraction geometries\n        return jscad.booleans.subtract(baseGeometry, subtractGeometries)\n      }\n\n      case \"translate\": {\n        const { args, children } =\n          props as React.JSX.IntrinsicElements[\"translate\"]\n        const childrenGeometries = renderChildren(children)\n        return jscad.transforms.translate(\n          args,\n          singleElementUnnest(childrenGeometries),\n        )\n      }\n\n      case \"rotate\": {\n        const { children, ...rotateProps } =\n          props as React.JSX.IntrinsicElements[\"rotate\"]\n\n        const childrenGeometries = renderChildren(children)\n\n        const rotateGeometry = jscad.transforms.rotate(\n          rotateProps.angles,\n          singleElementUnnest(childrenGeometries),\n        )\n\n        return rotateGeometry\n      }\n\n      case \"hull\": {\n        const { children } = props as HullProps\n\n        if (!Array.isArray(children) || children.length < 2) {\n          throw new Error(\"Hull must have at least two children\")\n        }\n\n        const geometries: any = children.map((child) =>\n          createInstance(\n            child.type,\n            child.props,\n            rootContainerInstance,\n            hostContext,\n            internalInstanceHandle,\n          ),\n        )\n\n        return jscad.hulls.hull(geometries)\n      }\n\n      case \"hullChain\": {\n        const { children } = props as HullChainProps\n\n        if (!Array.isArray(children) || children.length < 2) {\n          throw new Error(\"HullChain must have at least two children\")\n        }\n\n        const geometries: any = children.map((child) =>\n          createInstance(\n            child.type,\n            child.props,\n            rootContainerInstance,\n            hostContext,\n            internalInstanceHandle,\n          ),\n        )\n\n        return jscad.hulls.hullChain(geometries)\n      }\n\n      case \"rectangle\": {\n        const { size } = props as RectangleProps\n\n        return jscad.primitives.rectangle({ size })\n      }\n\n      case \"circle\": {\n        const { radius } = props as CircleProps\n\n        return jscad.primitives.circle({ radius })\n      }\n\n      default:\n        throw new Error(`Unknown element type: ${type}`)\n    }\n  }\n\n  const hostConfig: ReactReconciler.HostConfig<\n    string, // Type\n    any, // Props\n    JSCADPrimitive, // Container\n    JSCADPrimitive, // Instance\n    never, // TextInstance\n    never, // SuspenseInstance\n    never, // HydratableInstance\n    JSCADPrimitive, // PublicInstance\n    object, // HostContext\n    boolean, // UpdatePayload\n    never, // ChildSet\n    number, // TimeoutHandle\n    number // NoTimeout\n  > = {\n    // @ts-ignore\n    now: Date.now,\n    supportsMutation: true,\n    supportsPersistence: false,\n    supportsHydration: false,\n\n    createInstance: createInstance,\n\n    createTextInstance() {\n      throw new Error(\"Text elements are not supported in JSCAD\")\n    },\n\n    appendInitialChild(parentInstance: JSCADPrimitive, child: JSCADPrimitive) {\n      return parentInstance\n    },\n\n    appendChild(parentInstance: JSCADPrimitive, child: JSCADPrimitive) {\n      return parentInstance\n    },\n\n    removeChild(parentInstance: JSCADPrimitive, child: JSCADPrimitive) {\n      return parentInstance\n    },\n\n    appendChildToContainer(container: JSCADPrimitive[], child: JSCADPrimitive) {\n      container.push(child)\n    },\n\n    removeChildFromContainer(\n      container: JSCADPrimitive[],\n      child: JSCADPrimitive,\n    ) {\n      const index = container.indexOf(child)\n      if (index !== -1) container.splice(index, 1)\n    },\n\n    prepareUpdate() {\n      return true\n    },\n\n    commitUpdate(\n      instance: JSCADPrimitive,\n      updatePayload: any,\n      type: string,\n      oldProps: any,\n      newProps: any,\n    ) {\n      // Re-create the instance with new props\n      const newInstance = createInstance(type, newProps, instance, {}, null)\n\n      // Clear properties of the old instance\n      for (const key in instance) {\n        delete instance[key]\n      }\n\n      // Assign new properties to the old instance\n      Object.assign(instance, newInstance)\n    },\n\n    finalizeInitialChildren() {\n      return false\n    },\n\n    prepareForCommit() {\n      return null\n    },\n    resetAfterCommit() {},\n    getPublicInstance(instance: JSCADPrimitive) {\n      return instance\n    },\n    getRootHostContext() {\n      return {}\n    },\n    getChildHostContext() {\n      return {}\n    },\n    shouldSetTextContent() {\n      return false\n    },\n    clearContainer() {},\n    scheduleTimeout: setTimeout,\n    cancelTimeout: clearTimeout,\n    noTimeout: -1,\n    isPrimaryRenderer: true,\n    getCurrentEventPriority: () => 99,\n    getInstanceFromNode: () => null,\n    beforeActiveInstanceBlur: () => {},\n    afterActiveInstanceBlur: () => {},\n    prepareScopeUpdate: () => {},\n    getInstanceFromScope: () => null,\n    detachDeletedInstance: () => {},\n  }\n  return hostConfig\n}\n","export function flattenArray(arr: any[]): any[] {\n  return arr.reduce(\n    (flat, item) =>\n      flat.concat(Array.isArray(item) ? flattenArray(item) : item),\n    [],\n  )\n}\n","export const singleElementUnnest = <T>(element: T | T[]): T | T[] => {\n  if (Array.isArray(element) && element.length === 1) {\n    return element[0]\n  }\n\n  return element\n}\n","export type CircleProps = {\n  radius: number\n}\n\nexport function Circle({ radius }: CircleProps) {\n  return <circle radius={radius} />\n}\n","import Color from \"color\"\n\nexport type ColorizeProps = {\n  color: [number, number, number] | string\n  children: React.ReactNode\n}\n\nexport function Colorize({ color, children }: ColorizeProps) {\n  if (!Array.isArray(color)) {\n    color = Color(color)\n      .rgb()\n      .array()\n      .map((v) => v / 255)\n  }\n  return <colorize color={color}>{children}</colorize>\n}\n","import { Colorize } from \"../jscad-fns/colorize\"\n\nexport interface ColorProps {\n  color?: string\n}\n\nexport function withColorProp<P extends object>(\n  WrappedComponent: React.ComponentType<P>,\n): React.ComponentType<P & ColorProps> {\n  // Create a new component that includes the color prop\n  const WithColor: React.ComponentType<P & ColorProps> = (props) => {\n    const { color, ...restProps } = props\n    if (!color) {\n      return <WrappedComponent {...(restProps as P)} />\n    }\n\n    return (\n      <Colorize color={color}>\n        <WrappedComponent {...(restProps as P)} />\n      </Colorize>\n    )\n  }\n\n  // Set the display name for easier debugging\n  WithColor.displayName = `WithColor(${\n    WrappedComponent.displayName || WrappedComponent.name || \"Component\"\n  })`\n\n  return WithColor\n}\n","export type Point3 =\n  | [number, number, number]\n  | { x: number; y: number; z: number }\n\nexport const normalizePointToArray = (\n  point: Point3 | undefined | null,\n): number[] | null => {\n  if (!point) return null\n  if (Array.isArray(point)) {\n    return point\n  }\n  return [point.x, point.y, point.z]\n}\n\nexport type TranslateProps = {\n  offset?: Point3\n  center?: Point3\n  x?: number\n  y?: number\n  z?: number\n  children: React.ReactNode\n}\n\nexport function Translate({\n  offset,\n  center,\n  x,\n  y,\n  z,\n  children,\n}: TranslateProps) {\n  const offsetNorm = normalizePointToArray(offset)\n  const centerNorm = normalizePointToArray(center)\n\n  const args: [number, number, number] = [\n    offsetNorm?.[0] || centerNorm?.[0] || x || 0,\n    offsetNorm?.[1] || centerNorm?.[1] || y || 0,\n    offsetNorm?.[2] || centerNorm?.[2] || z || 0,\n  ]\n\n  return <translate args={args}>{children}</translate>\n}\n","import { Translate } from \"../jscad-fns/translate\"\n\nexport interface CenterProps {\n  center?: { x: number; y: number; z: number } | [number, number, number]\n  offset?: { x: number; y: number; z: number } | [number, number, number]\n}\n\nexport function withOffsetProp<P extends object>(\n  WrappedComponent: React.ComponentType<P>,\n): React.ComponentType<P & CenterProps> {\n  // Create a new component that includes the color prop\n  const WithOffset: React.ComponentType<P & CenterProps> = (props) => {\n    const { center, offset, ...restProps } = props\n    if (!center && !offset) {\n      return <WrappedComponent {...(restProps as P)} />\n    }\n\n    return (\n      <Translate offset={center || offset}>\n        <WrappedComponent {...(restProps as P)} />\n      </Translate>\n    )\n  }\n\n  // Set the display name for easier debugging\n  WithOffset.displayName = `WithOffset(${\n    WrappedComponent.displayName || WrappedComponent.name || \"Component\"\n  })`\n\n  return WithOffset\n}\n","import { withColorProp } from \"lib/wrappers/with-color-prop\"\nimport { withOffsetProp } from \"lib/wrappers/with-offset-prop\"\n\nexport interface CubeProps {\n  size: number | [number, number, number]\n}\n\nconst CubeBase = ({ size }: CubeProps) => {\n  return <cube size={size} />\n}\n\nexport const Cube = withOffsetProp(withColorProp(CubeBase))\n","import { withColorProp } from \"../wrappers/with-color-prop\"\nimport { withOffsetProp } from \"../wrappers/with-offset-prop\"\n\nexport type CuboidProps = {\n  size: number | [number, number, number]\n}\n\nconst CuboidBase = ({ size }: CuboidProps) => {\n  return <cuboid size={size} />\n}\n\nexport const Cuboid = withOffsetProp(withColorProp(CuboidBase))\n","import type { Geom3 } from \"@jscad/modeling/src/geometries/types\"\n\nexport type CustomProps = {\n  geometry: Geom3\n}\n\nexport function Custom({ geometry }: CustomProps) {\n  return <custom geometry={geometry} />\n}\n","import { withColorProp } from \"lib/wrappers/with-color-prop\"\nimport { withOffsetProp } from \"lib/wrappers/with-offset-prop\"\nimport type { Point3 } from \"./translate\"\n\nexport type RotationValue =\n  | Point3\n  | [string | number, string | number, string | number]\n  | string\n  | number\n\nexport type RotateProps = {\n  rotation?: RotationValue\n  angles?: RotationValue\n  children: React.ReactNode\n}\n\nconst convertToRadians = (value: string | number): number => {\n  if (typeof value === \"string\") {\n    const numericValue = value.replace(/[^\\d.-]/g, \"\")\n    const parsedValue = parseFloat(numericValue)\n    if (!isNaN(parsedValue)) {\n      if (value.toLowerCase().includes(\"deg\")) {\n        return (parsedValue * Math.PI) / 180\n      }\n      return parsedValue\n    }\n    throw new Error(`Invalid rotation value: ${value}`)\n  }\n  return value\n}\n\nexport const processRotation = (\n  value: RotateProps[\"rotation\"] | RotateProps[\"angles\"],\n): [number, number, number] => {\n  if (typeof value === \"string\" || typeof value === \"number\") {\n    const angle = convertToRadians(value)\n    return [0, 0, angle]\n  } else if (Array.isArray(value)) {\n    return value.map(convertToRadians) as [number, number, number]\n  } else if (value && typeof value === \"object\") {\n    return [\n      convertToRadians(value.x),\n      convertToRadians(value.y),\n      convertToRadians(value.z),\n    ]\n  }\n  return [0, 0, 0]\n}\n\nconst RotateBase = ({ rotation, angles, children }: RotateProps) => {\n  const finalRotation = rotation\n    ? processRotation(rotation)\n    : processRotation(angles)\n\n  return <rotate angles={finalRotation}>{children}</rotate>\n}\n\nexport const Rotate = withOffsetProp(withColorProp(RotateBase))\n","import { Rotate, type RotationValue } from \"lib/jscad-fns/rotate\"\n\nexport interface RotationProps {\n  rotation?: RotationValue\n}\n\nexport function withRotationProp<P extends object>(\n  WrappedComponent: React.ComponentType<P>,\n): React.ComponentType<P & RotationProps> {\n  // Create a new component that includes the color prop\n  const WithRotation: React.ComponentType<P & RotationProps> = (props) => {\n    const { rotation, ...restProps } = props\n    if (!rotation) {\n      return <WrappedComponent {...(restProps as P)} />\n    }\n\n    return (\n      <Rotate rotation={rotation}>\n        <WrappedComponent {...(restProps as P)} />\n      </Rotate>\n    )\n  }\n\n  // Set the display name for easier debugging\n  WithRotation.displayName = `WithRotation(${\n    WrappedComponent.displayName || WrappedComponent.name || \"Component\"\n  })`\n\n  return WithRotation\n}\n","import { withColorProp } from \"lib/wrappers/with-color-prop\"\nimport { withOffsetProp } from \"lib/wrappers/with-offset-prop\"\nimport { withRotationProp } from \"lib/wrappers/with-rotation-prop\"\n\nexport type CylinderProps = {\n  radius: number\n  height: number\n}\n\nconst CylinderBase = ({ radius, height }: CylinderProps) => {\n  return <cylinder radius={radius} height={height} />\n}\n\nexport const Cylinder = withColorProp(\n  withOffsetProp(withRotationProp(CylinderBase)),\n)\n","import { withColorProp } from \"lib/wrappers/with-color-prop\"\nimport { withOffsetProp } from \"lib/wrappers/with-offset-prop\"\n\nexport type CylinderEllipticProps = {\n  height: number\n  radius?: number\n  startRadius: [number, number]\n  endRadius: [number, number]\n  segments?: number\n  startAngle?: number\n  endAngle?: number\n}\n\nconst CylinderEllipticBase = ({\n  height,\n  startRadius,\n  endRadius,\n  segments = 32,\n  startAngle = 0,\n  endAngle = Math.PI * 2,\n}: CylinderEllipticProps) => {\n  return (\n    <cylinderElliptic\n      height={height}\n      startRadius={startRadius}\n      endRadius={endRadius}\n      segments={segments}\n      startAngle={startAngle}\n      endAngle={endAngle}\n    />\n  )\n}\n\nexport const CylinderElliptic = withOffsetProp(\n  withColorProp(CylinderEllipticBase),\n)\n","import { withColorProp } from \"lib/wrappers/with-color-prop\"\nimport { withOffsetProp } from \"lib/wrappers/with-offset-prop\"\n\nexport type EllipsoidProps = {\n  radius: [number, number, number]\n}\n\nconst EllipsoidBase = ({ radius }: EllipsoidProps) => {\n  return <ellipsoid radius={radius} />\n}\n\nexport const Ellipsoid = withOffsetProp(withColorProp(EllipsoidBase))\n","import { withColorProp } from \"../wrappers/with-color-prop\"\nimport { withOffsetProp } from \"../wrappers/with-offset-prop\"\n\nexport type ExtrudeHelicalProps = {\n  height: number\n  angle: number\n  startAngle?: number\n  pitch?: number\n  endOffset?: number\n  segmetsPerRotation?: number\n  children: any\n}\n\nconst ExtrudeHelicalBase = ({\n  height,\n  angle,\n  startAngle,\n  pitch,\n  endOffset,\n  segmetsPerRotation,\n  children,\n}: ExtrudeHelicalProps) => {\n  return (\n    <extrudeHelical\n      height={height}\n      angle={angle}\n      startAngle={startAngle}\n      pitch={pitch}\n      endOffset={endOffset}\n      segmetsPerRotation={segmetsPerRotation}\n    >\n      {children}\n    </extrudeHelical>\n  )\n}\n\nexport const ExtrudeHelical = withOffsetProp(withColorProp(ExtrudeHelicalBase))\n","import { withColorProp } from \"lib/wrappers/with-color-prop\"\nimport { withOffsetProp } from \"lib/wrappers/with-offset-prop\"\n\nexport type ExtrudeLinearProps = {\n  height: number\n  twistAngle?: number\n  twistSteps?: number\n  children: any\n}\n\nconst ExtrudeLinearBase = ({\n  height,\n  twistAngle,\n  twistSteps,\n  children,\n}: ExtrudeLinearProps) => {\n  return (\n    <extrudeLinear\n      height={height}\n      twistAngle={twistAngle}\n      twistSteps={twistSteps}\n    >\n      {children}\n    </extrudeLinear>\n  )\n}\n\nexport const ExtrudeLinear = withOffsetProp(withColorProp(ExtrudeLinearBase))\n","import { withColorProp } from \"lib/wrappers/with-color-prop\"\nimport { withOffsetProp } from \"lib/wrappers/with-offset-prop\"\n\nexport type ExtrudeRectangularProps = {\n  size: number\n  height: number\n  children: any\n}\n\nconst ExtrudeRectangularBase = ({\n  size,\n  height,\n  children,\n}: ExtrudeRectangularProps) => {\n  return (\n    <extrudeRectangular size={size} height={height}>\n      {children}\n    </extrudeRectangular>\n  )\n}\n\nexport const ExtrudeRectangular = withOffsetProp(\n  withColorProp(ExtrudeRectangularBase),\n)\n","import { withColorProp } from \"lib/wrappers/with-color-prop\"\nimport { withOffsetProp } from \"lib/wrappers/with-offset-prop\"\n\nexport type ExtrudeRotateProps = {\n  angle: number\n  startAngle?: number\n  segments?: number\n  children: any\n}\n\nconst ExtrudeRotateBase = ({\n  angle,\n  startAngle,\n  segments,\n  children,\n}: ExtrudeRotateProps) => {\n  return (\n    <extrudeRotate angle={angle} startAngle={startAngle} segments={segments}>\n      {children}\n    </extrudeRotate>\n  )\n}\n\nexport const ExtrudeRotate = withOffsetProp(withColorProp(ExtrudeRotateBase))\n","import { withColorProp } from \"lib/wrappers/with-color-prop\"\nimport { withOffsetProp } from \"lib/wrappers/with-offset-prop\"\n\nexport type GeodesicSphereProps = {\n  radius: number\n  frequency: number\n}\n\nconst GeodesicSphereBase = ({ radius, frequency }: GeodesicSphereProps) => {\n  return <geodesicSphere radius={radius} frequency={frequency} />\n}\n\nexport const GeodesicSphere = withOffsetProp(withColorProp(GeodesicSphereBase))\n","import { withColorProp } from \"lib/wrappers/with-color-prop\"\nimport { withOffsetProp } from \"lib/wrappers/with-offset-prop\"\n\nexport type HullProps = {\n  children: React.ReactNode\n}\n\nconst HullBase = ({ children }: HullProps) => {\n  return <hull>{children}</hull>\n}\n\nexport const Hull = withOffsetProp(withColorProp(HullBase))\n","import { withColorProp } from \"lib/wrappers/with-color-prop\"\nimport { withOffsetProp } from \"lib/wrappers/with-offset-prop\"\n\nexport type HullChainProps = {\n  children: React.ReactNode\n}\n\nconst HullChainBase = ({ children }: HullChainProps) => {\n  return <hullChain>{children}</hullChain>\n}\n\nexport const HullChain = withOffsetProp(withColorProp(HullChainBase))\n","export type PolygonProps = {\n  points: [number, number][]\n}\n\nexport function Polygon({ points }: PolygonProps) {\n  return <jscadPolygon points={points} />\n}\n","export type ProjectProps = {\n  axis: [number, number, number]\n  origin: [number, number, number]\n  children: any\n}\n\nexport function Project({ axis, origin, children }: ProjectProps) {\n  return (\n    <project axis={axis} origin={origin}>\n      {children}\n    </project>\n  )\n}\n","export type RectangleProps = {\n  size: [number, number]\n}\n\nexport function Rectangle({ size }: RectangleProps) {\n  return <rectangle size={size} />\n}\n","import { withColorProp } from \"../wrappers/with-color-prop\"\nimport { withOffsetProp } from \"../wrappers/with-offset-prop\"\n\nexport type RoundedCuboidProps = {\n  size: number | [number, number, number]\n  roundRadius: number\n}\n\nconst RoundedCuboidBase = ({ size, roundRadius }: RoundedCuboidProps) => {\n  return <roundedCuboid size={size} roundRadius={roundRadius} />\n}\n\nexport const RoundedCuboid = withOffsetProp(withColorProp(RoundedCuboidBase))\n","import { withColorProp } from \"lib/wrappers/with-color-prop\"\nimport { withOffsetProp } from \"lib/wrappers/with-offset-prop\"\n\nexport type RoundedCylinderProps = {\n  radius: number\n  height: number\n  roundRadius: number\n}\n\nconst RoundedCylinderBase = ({\n  radius,\n  height,\n  roundRadius,\n}: RoundedCylinderProps) => {\n  return (\n    <roundedCylinder\n      radius={radius}\n      height={height}\n      roundRadius={roundRadius}\n    />\n  )\n}\n\nexport const RoundedCylinder = withOffsetProp(\n  withColorProp(RoundedCylinderBase),\n)\n","import { withOffsetProp } from \"lib/wrappers/with-offset-prop\"\nimport { withColorProp } from \"../wrappers/with-color-prop\"\n\nexport type SphereProps = {\n  radius: number\n  segments?: number\n}\n\nconst SphereBase = ({ radius, segments }: SphereProps) => {\n  return <sphere radius={radius} segments={segments || 32} />\n}\n\nexport const Sphere = withColorProp(withOffsetProp(SphereBase))\n","import { withColorProp } from \"lib/wrappers/with-color-prop\"\nimport { withOffsetProp } from \"lib/wrappers/with-offset-prop\"\n\nexport type SubtractProps = {\n  children: React.ReactNode[]\n}\n\nconst SubtractBase = ({ children }: SubtractProps) => {\n  if (!Array.isArray(children) || children.length < 2) {\n    throw new Error(\"Subtract must have at least two children\")\n  }\n  return <subtract>{children}</subtract>\n}\n\nexport const Subtract = withOffsetProp(withColorProp(SubtractBase))\n","import { withColorProp } from \"lib/wrappers/with-color-prop\"\nimport { withOffsetProp } from \"lib/wrappers/with-offset-prop\"\n\nexport type TorusProps = {\n  innerRadius: number\n  outerRadius: number\n  innerSegments?: number\n  outerSegments?: number\n  innerRotation?: number\n  outerRotation?: number\n  startAngle?: number\n}\n\nconst TorusBase = ({\n  innerRadius,\n  outerRadius,\n  innerSegments = 32,\n  outerSegments = 32,\n  innerRotation = 0,\n  outerRotation = 1,\n  startAngle = 0,\n}: TorusProps) => {\n  return (\n    <torus\n      innerRadius={innerRadius}\n      outerRadius={outerRadius}\n      innerSegments={innerSegments}\n      outerSegments={outerSegments}\n      innerRotation={innerRotation}\n      outerRotation={outerRotation}\n      startAngle={startAngle}\n    />\n  )\n}\n\nexport const Torus = withOffsetProp(withColorProp(TorusBase))\n","export type UnionProps = {\n  children: React.ReactNode\n}\n\nexport function Union({ children }: UnionProps) {\n  return <union>{children}</union>\n}\n","import { withColorProp } from \"lib/wrappers/with-color-prop\"\nimport { withOffsetProp } from \"lib/wrappers/with-offset-prop\"\nimport type { Point3 } from \"./translate\"\n\nexport type Slice = {\n  edges: Array<[Point3, Point3]>\n}\n\nexport type ExtrudeFromSlicesProps = {\n  numberOfSlices?: number\n  capStart?: boolean\n  capEnd?: boolean\n  close?: boolean\n  repair?: boolean\n  baseSlice: Slice\n  callback?: (progress: number, count: number, base: Slice) => Slice\n}\n\nconst ExtrudeFromSlicesBase = ({\n  numberOfSlices,\n  capStart,\n  capEnd,\n  close,\n  repair,\n  baseSlice,\n  callback,\n}: ExtrudeFromSlicesProps) => {\n  return (\n    <extrudeFromSlices\n      numberOfSlices={numberOfSlices}\n      capStart={capStart}\n      capEnd={capEnd}\n      close={close}\n      repair={repair}\n      baseSlice={baseSlice}\n      callback={callback}\n    ></extrudeFromSlices>\n  )\n}\n\nexport const ExtrudeFromSlices = withOffsetProp(\n  withColorProp(ExtrudeFromSlicesBase),\n)\n","import React from \"react\"\nimport { createJSCADRenderer } from \"..\"\nimport { createHostConfig } from \"../create-host-config\"\n\n/**\n * Renders children and returns jscad plan JSON\n *\n * This is usually used in \"tscircuit entrypoints\" like <SchematicViewer />,\n * <PcbViewer /> or <3dViewer /> to convert their children into circuit json (soup)\n */\nexport const useRenderElementsToJscadPlan = (\n  jscad: any,\n  children: React.ReactElement | React.ReactElement[],\n) => {\n  const { renderer } = React.useMemo(() => {\n    const renderer = createJSCADRenderer(jscad)\n    return { renderer }\n  }, [jscad])\n  const [error, setError] = React.useState<Error | null>(null)\n  const [loading, setLoading] = React.useState(true)\n\n  const jscadElms = React.useMemo(() => {\n    setLoading(true)\n    const jscadElms: any[] = []\n    const root = renderer.createJSCADRoot(jscadElms)\n\n    try {\n      root.render(children as any)\n      setLoading(false)\n      setError(null)\n    } catch (err: any) {\n      setError(err)\n    }\n\n    return jscadElms\n  }, [children])\n\n  return { loading, jscadElms, error }\n}\n"],"mappings":"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","names":["jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","jsx","React","React","renderer","jscadElms"]}