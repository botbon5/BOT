type Color = [number, number, number];
type Vector2D = [number, number];
type Vector3D = [number, number, number];
interface OperationBase {
    type: string;
}
interface IntersectOperation extends OperationBase {
    type: "intersect";
    shapes: JscadOperation[];
}
interface SubtractOperation extends OperationBase {
    type: "subtract";
    shapes: JscadOperation[];
}
interface UnionOperation extends OperationBase {
    type: "union";
    shapes: JscadOperation[];
}
interface HullOperation extends OperationBase {
    type: "hull";
    shapes: JscadOperation[];
}
interface HullChainOperation extends OperationBase {
    type: "hullChain";
    shapes: JscadOperation[];
}
interface ColorizeOperation extends OperationBase {
    type: "colorize";
    color: Color;
    shape: JscadOperation;
}
interface CubeOperation extends OperationBase {
    type: "cube";
    size?: number | number[];
    center?: Vector3D;
}
interface SphereOperation extends OperationBase {
    type: "sphere";
    radius?: number;
    center?: Vector3D;
    resolution?: number;
}
interface CylinderOperation extends OperationBase {
    type: "cylinder";
    radius?: number;
    height?: number;
    center?: Vector3D;
    resolution?: number;
}
interface PolygonOperation extends OperationBase {
    type: "polygon";
    points: Vector2D[] | Vector2D[][];
    paths?: number[] | number[][];
}
interface PolygonOperation extends OperationBase {
    type: "polygon";
    points: Vector2D[] | Vector2D[][];
    paths?: number[] | number[][];
}
interface RotateOperation extends OperationBase {
    type: "rotate";
    angles: number[];
    shape: JscadOperation;
}
interface ScaleOperation extends OperationBase {
    type: "scale";
    factors: number[];
    shape: JscadOperation;
}
interface TranslateOperation extends OperationBase {
    type: "translate";
    vector: number[];
    shape: JscadOperation;
}
interface ExtrudeLinearOperation extends OperationBase {
    type: "extrudeLinear";
    options: {
        height: number;
        twistAngle?: number;
        twistSteps?: number;
    };
    shape: JscadOperation;
}
interface ExtrudeRotateOperation extends OperationBase {
    type: "extrudeRotate";
    options: {
        angle?: number;
        startAngle?: number;
        segments?: number;
    };
    shape: JscadOperation;
}
interface CreateGeom2Operation extends OperationBase {
    type: "createGeom2";
    points: Vector2D[];
}
interface CreateGeom3Operation extends OperationBase {
    type: "createGeom3";
    polygons: any[];
}
interface CreatePath2Operation extends OperationBase {
    type: "createPath2";
    points: Vector2D[];
}
interface MeasureBoundingBoxOperation extends OperationBase {
    type: "measureBoundingBox";
    shape: JscadOperation;
}
interface MeasureAreaOperation extends OperationBase {
    type: "measureArea";
    shape: JscadOperation;
}
interface MeasureVolumeOperation extends OperationBase {
    type: "measureVolume";
    shape: JscadOperation;
}
interface DegToRadOperation extends OperationBase {
    type: "degToRad";
    degrees: number;
}
interface RadToDegOperation extends OperationBase {
    type: "radToDeg";
    radians: number;
}
interface CuboidOperation extends OperationBase {
    type: "cuboid";
    size: [number, number, number];
}
interface RoundedCuboidOperation extends OperationBase {
    type: "roundedCuboid";
    size: [number, number, number];
    roundRadius: number;
    segments?: number;
}
type JscadOperation = IntersectOperation | SubtractOperation | UnionOperation | HullOperation | HullChainOperation | ColorizeOperation | CubeOperation | SphereOperation | CylinderOperation | PolygonOperation | RotateOperation | ScaleOperation | TranslateOperation | ExtrudeLinearOperation | ExtrudeRotateOperation | CreateGeom2Operation | CreateGeom3Operation | CreatePath2Operation | MeasureBoundingBoxOperation | MeasureAreaOperation | MeasureVolumeOperation | DegToRadOperation | RadToDegOperation | CuboidOperation | RoundedCuboidOperation;

interface JscadImplementation<ShapeOrOp = any, MeasurementT = number> {
    booleans: {
        intersect: (...geometries: ShapeOrOp[]) => ShapeOrOp;
        subtract: (...geometries: ShapeOrOp[]) => ShapeOrOp;
        union: (...geometries: ShapeOrOp[]) => ShapeOrOp;
    };
    hulls: {
        hull: (...geometries: (ShapeOrOp | ShapeOrOp[])[]) => ShapeOrOp;
        hullChain: (...geometries: (ShapeOrOp | ShapeOrOp[])[]) => ShapeOrOp;
    };
    colors: {
        colorize: (color: Color, ...geometries: ShapeOrOp[]) => ShapeOrOp;
    };
    primitives: {
        cube: (options?: {
            size?: number | number[];
            center?: Vector3D;
        }) => ShapeOrOp;
        sphere: (options?: {
            radius?: number;
            center?: Vector3D;
            resolution?: number;
        }) => ShapeOrOp;
        cylinder: (options?: {
            radius?: number;
            height?: number;
            center?: Vector3D;
            resolution?: number;
        }) => ShapeOrOp;
        polygon: (options: {
            points: Vector2D[] | Vector2D[][];
            paths?: number[] | number[][];
        }) => ShapeOrOp;
        cuboid: (options: {
            size: [number, number, number];
        }) => ShapeOrOp;
        roundedCuboid: (options: {
            size: [number, number, number];
            roundRadius: number;
            segments?: number;
        }) => ShapeOrOp;
    };
    transforms: {
        rotate: (angles: number[], geometry: ShapeOrOp) => ShapeOrOp;
        scale: (factors: number[], geometry: ShapeOrOp) => ShapeOrOp;
        translate: (vector: number[], geometry: ShapeOrOp) => ShapeOrOp;
    };
    extrusions: {
        extrudeLinear: (options: {
            height: number;
            twistAngle?: number;
            twistSteps?: number;
        }, geometry: ShapeOrOp) => ShapeOrOp;
        extrudeRotate: (options: {
            angle?: number;
            startAngle?: number;
            segments?: number;
        }, geometry: ShapeOrOp) => ShapeOrOp;
    };
    maths: {
        vec2: {
            create: (x: number, y: number) => number[];
            fromValues: (x: number, y: number) => number[];
        };
        vec3: {
            create: (x: number, y: number, z: number) => number[];
            fromValues: (x: number, y: number, z: number) => number[];
        };
    };
    geometries: {
        geom2: {
            create: (points: Vector2D[]) => ShapeOrOp;
        };
        geom3: {
            create: (polygons: Vector3D[][]) => ShapeOrOp;
        };
        path2: {
            create: (points: Vector2D[]) => ShapeOrOp;
        };
    };
    measurements: {
        measureBoundingBox: (geometry: ShapeOrOp) => MeasurementT extends number ? number[][] : MeasurementT;
        measureArea: (geometry: ShapeOrOp) => MeasurementT;
        measureVolume: (geometry: ShapeOrOp) => MeasurementT;
    };
    utils: {
        degToRad: (degrees: number) => number;
        radToDeg: (radians: number) => number;
    };
}

declare const jscadPlanner: JscadImplementation<JscadOperation, JscadOperation>;

declare const executeJscadOperations: <ShapeOrOp = any, MeasurementT = number>(jscad: JscadImplementation<ShapeOrOp, MeasurementT>, operation: JscadOperation) => any;

export { type Color, type ColorizeOperation, type CreateGeom2Operation, type CreateGeom3Operation, type CreatePath2Operation, type CubeOperation, type CuboidOperation, type CylinderOperation, type DegToRadOperation, type ExtrudeLinearOperation, type ExtrudeRotateOperation, type HullChainOperation, type HullOperation, type IntersectOperation, type JscadImplementation, type JscadOperation, type MeasureAreaOperation, type MeasureBoundingBoxOperation, type MeasureVolumeOperation, type OperationBase, type PolygonOperation, type RadToDegOperation, type RotateOperation, type RoundedCuboidOperation, type ScaleOperation, type SphereOperation, type SubtractOperation, type TranslateOperation, type UnionOperation, type Vector2D, type Vector3D, executeJscadOperations, jscadPlanner };
