{"version":3,"sources":["../lib/index.ts","../lib/jscad-planner.ts","../lib/execute-jscad-operations.ts"],"sourcesContent":["export * from \"./jscad-planner\"\nexport * from \"./jscad-implementation-types\"\nexport * from \"./jscad-operations-types\"\nexport * from \"./execute-jscad-operations\"\n","import type { JscadImplementation } from \"./jscad-implementation-types\"\nimport type {\n  JscadOperation,\n  Color,\n  Vector2D,\n  Vector3D,\n} from \"./jscad-operations-types\"\n\nexport const jscadPlanner: JscadImplementation<JscadOperation, JscadOperation> =\n  {\n    booleans: {\n      intersect: (...shapes: JscadOperation[]): JscadOperation => ({\n        type: \"intersect\",\n        shapes,\n      }),\n      subtract: (...shapes: JscadOperation[]): JscadOperation => ({\n        type: \"subtract\",\n        shapes,\n      }),\n      union: (...shapes: JscadOperation[]): JscadOperation => ({\n        type: \"union\",\n        shapes,\n      }),\n    },\n    hulls: {\n      hull: (\n        ...shapes: (JscadOperation | JscadOperation[])[]\n      ): JscadOperation => ({\n        type: \"hull\",\n        shapes: shapes.flat(),\n      }),\n      hullChain: (\n        ...shapes: (JscadOperation | JscadOperation[])[]\n      ): JscadOperation => ({\n        type: \"hullChain\",\n        shapes: shapes.flat(),\n      }),\n    },\n    colors: {\n      colorize: (color: Color, shape: JscadOperation): JscadOperation => ({\n        type: \"colorize\",\n        color,\n        shape,\n      }),\n    },\n    primitives: {\n      cube: (options?: {\n        size?: number | number[]\n        center?: Vector3D\n      }): JscadOperation => ({\n        type: \"cube\",\n        ...options,\n      }),\n      sphere: (options?: {\n        radius?: number\n        center?: Vector3D\n        resolution?: number\n      }): JscadOperation => ({\n        type: \"sphere\",\n        ...options,\n      }),\n      cylinder: (options?: {\n        radius?: number\n        height?: number\n        center?: Vector3D\n        resolution?: number\n      }): JscadOperation => ({\n        type: \"cylinder\",\n        ...options,\n      }),\n      polygon: (options: {\n        points: Vector2D[] | Vector2D[][]\n        paths?: number[] | number[][]\n      }): JscadOperation => ({\n        type: \"polygon\" as const,\n        ...options,\n      }),\n      cuboid: (options: {\n        size: [number, number, number]\n      }): JscadOperation => ({\n        type: \"cuboid\",\n        ...options,\n      }),\n      roundedCuboid: (options: {\n        size: [number, number, number]\n        roundRadius: number\n        segments?: number\n      }): JscadOperation => ({\n        type: \"roundedCuboid\",\n        ...options,\n      }),\n    },\n    transforms: {\n      rotate: (angles: number[], shape: JscadOperation): JscadOperation => ({\n        type: \"rotate\",\n        angles,\n        shape,\n      }),\n      scale: (factors: number[], shape: JscadOperation): JscadOperation => ({\n        type: \"scale\",\n        factors,\n        shape,\n      }),\n      translate: (vector: number[], shape: JscadOperation): JscadOperation => ({\n        type: \"translate\",\n        vector,\n        shape,\n      }),\n    },\n    extrusions: {\n      extrudeLinear: (options: any, shape: JscadOperation): JscadOperation => ({\n        type: \"extrudeLinear\",\n        options,\n        shape,\n      }),\n      extrudeRotate: (options: any, shape: JscadOperation): JscadOperation => ({\n        type: \"extrudeRotate\",\n        options,\n        shape,\n      }),\n    },\n    maths: {\n      vec2: {\n        create: (x: number, y: number): Vector2D => [x, y],\n        fromValues: (x: number, y: number): Vector2D => [x, y],\n      },\n      vec3: {\n        create: (x: number, y: number, z: number): Vector3D => [x, y, z],\n        fromValues: (x: number, y: number, z: number): Vector3D => [x, y, z],\n      },\n    },\n    geometries: {\n      geom2: {\n        create: (points: Vector2D[]): JscadOperation => ({\n          type: \"createGeom2\",\n          points,\n        }),\n      },\n      geom3: {\n        create: (polygons: any[]): JscadOperation => ({\n          type: \"createGeom3\",\n          polygons,\n        }),\n      },\n      path2: {\n        create: (points: Vector2D[]): JscadOperation => ({\n          type: \"createPath2\",\n          points,\n        }),\n      },\n    },\n\n    measurements: {\n      measureBoundingBox: (shape: JscadOperation): JscadOperation => ({\n        type: \"measureBoundingBox\",\n        shape,\n      }),\n      measureArea: (shape: JscadOperation): JscadOperation => ({\n        type: \"measureArea\",\n        shape,\n      }),\n      measureVolume: (shape: JscadOperation): JscadOperation => ({\n        type: \"measureVolume\",\n        shape,\n      }),\n    },\n    utils: {\n      degToRad: (degrees: number) => (degrees * Math.PI) / 180,\n      radToDeg: (radians: number) => (radians * 180) / Math.PI,\n    },\n  }\n","import type { JscadImplementation } from \"./jscad-implementation-types\"\nimport type {\n  CubeOperation,\n  CylinderOperation,\n  JscadOperation,\n  SphereOperation,\n  PolygonOperation,\n  CuboidOperation,\n  RoundedCuboidOperation,\n} from \"./jscad-operations-types\"\n\nexport const executeJscadOperations = <ShapeOrOp = any, MeasurementT = number>(\n  jscad: JscadImplementation<ShapeOrOp, MeasurementT>,\n  operation: JscadOperation,\n): any => {\n  if (Array.isArray(operation) && operation.length === 1) {\n    return executeJscadOperations(jscad, operation[0])\n  }\n  if (Array.isArray(operation)) {\n    throw new Error(\n      `executeJscadOperations currently doesn't support Array<JscadOperation>, try adding a root union or or executing each element individually`,\n    )\n  }\n  const recurse = (op: JscadOperation) => executeJscadOperations(jscad, op)\n\n  const { type, ...params } = operation\n\n  switch (type) {\n    case \"intersect\":\n      return jscad.booleans.intersect(...operation.shapes.map(recurse))\n    case \"subtract\":\n      return jscad.booleans.subtract(...operation.shapes.map(recurse))\n    case \"union\":\n      return jscad.booleans.union(...operation.shapes.map(recurse))\n    case \"hull\":\n      return jscad.hulls.hull(...operation.shapes.map(recurse))\n    case \"hullChain\":\n      return jscad.hulls.hullChain(...operation.shapes.map(recurse))\n    case \"colorize\":\n      return jscad.colors.colorize(operation.color, recurse(operation.shape))\n    case \"cube\":\n      return jscad.primitives.cube(params as CubeOperation)\n    case \"sphere\":\n      return jscad.primitives.sphere(params as SphereOperation)\n    case \"cylinder\":\n      return jscad.primitives.cylinder(params as CylinderOperation)\n    case \"polygon\":\n      return jscad.primitives.polygon(params as PolygonOperation)\n    case \"cuboid\":\n      return jscad.primitives.cuboid(params as CuboidOperation)\n    case \"roundedCuboid\":\n      return jscad.primitives.roundedCuboid(params as RoundedCuboidOperation)\n    case \"rotate\":\n      return jscad.transforms.rotate(operation.angles, recurse(operation.shape))\n    case \"scale\":\n      return jscad.transforms.scale(operation.factors, recurse(operation.shape))\n    case \"translate\":\n      return jscad.transforms.translate(\n        operation.vector,\n        recurse(operation.shape),\n      )\n    case \"extrudeLinear\":\n      return jscad.extrusions.extrudeLinear(\n        operation.options,\n        recurse(operation.shape),\n      )\n    case \"extrudeRotate\":\n      return jscad.extrusions.extrudeRotate(\n        operation.options,\n        recurse(operation.shape),\n      )\n    case \"createGeom2\":\n      return jscad.geometries.geom2.create(operation.points)\n    case \"createGeom3\":\n      return jscad.geometries.geom3.create(operation.polygons)\n    case \"createPath2\":\n      return jscad.geometries.path2.create(operation.points)\n    case \"measureBoundingBox\":\n      return jscad.measurements.measureBoundingBox(recurse(operation.shape))\n    case \"measureArea\":\n      return jscad.measurements.measureArea(recurse(operation.shape))\n    case \"measureVolume\":\n      return jscad.measurements.measureVolume(recurse(operation.shape))\n    case \"degToRad\":\n      return jscad.utils.degToRad(operation.degrees)\n    case \"radToDeg\":\n      return jscad.utils.radToDeg(operation.radians)\n    default:\n      if ((operation as any).type === undefined) {\n        throw new Error(\n          `Operation type is undefined. This usually means the operation object is malformed or not properly initialized. Operation: ${JSON.stringify(operation, null, 2).slice(0, 200)}...`,\n        )\n      }\n      throw new Error(\n        `Unsupported operation type: ${(operation as any).type}. Operation: ${JSON.stringify(operation, null, 2)}`,\n      )\n  }\n}\n"],"mappings":"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","names":[]}