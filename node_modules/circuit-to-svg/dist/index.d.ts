import { AnyCircuitElement, SchematicComponent } from 'circuit-json';
import { Matrix } from 'transformation-matrix';
import { INode } from 'svgson';

interface PcbColorMap {
    copper: {
        top: string;
        bottom: string;
    };
    drill: string;
    silkscreen: {
        top: string;
        bottom: string;
    };
    boardOutline: string;
    soldermask: {
        top: string;
        bottom: string;
    };
    debugComponent: {
        fill: string | null;
        stroke: string | null;
    };
}
interface PcbColorOverrides {
    copper?: Partial<PcbColorMap["copper"]>;
    drill?: string;
    silkscreen?: Partial<PcbColorMap["silkscreen"]>;
    boardOutline?: string;
    soldermask?: Partial<PcbColorMap["soldermask"]>;
    debugComponent?: Partial<PcbColorMap["debugComponent"]>;
}

interface Options$3 {
    colorOverrides?: PcbColorOverrides;
    width?: number;
    height?: number;
    shouldDrawErrors?: boolean;
    shouldDrawRatsNest?: boolean;
    layer?: "top" | "bottom";
    matchBoardAspectRatio?: boolean;
    backgroundColor?: string;
    drawPaddingOutsideBoard?: boolean;
    includeVersion?: boolean;
}
interface PcbContext {
    transform: Matrix;
    layer?: "top" | "bottom";
    shouldDrawErrors?: boolean;
    drawPaddingOutsideBoard?: boolean;
    colorMap: PcbColorMap;
}
declare function convertCircuitJsonToPcbSvg(circuitJson: AnyCircuitElement[], options?: Options$3): string;
/**
 * @deprecated use `convertCircuitJsonToPcbSvg` instead
 */
declare const circuitJsonToPcbSvg: typeof convertCircuitJsonToPcbSvg;

interface Options$2 {
    width?: number;
    height?: number;
    includeVersion?: boolean;
}
interface AssemblySvgContext {
    transform: Matrix;
}
declare function convertCircuitJsonToAssemblySvg(soup: AnyCircuitElement[], options?: Options$2): string;

declare const colorMap: {
    "3d_viewer": {
        background_bottom: string;
        background_top: string;
        board: string;
        copper: string;
        silkscreen_bottom: string;
        silkscreen_top: string;
        soldermask: string;
        solderpaste: string;
    };
    board: {
        anchor: string;
        aux_items: string;
        b_adhes: string;
        b_crtyd: string;
        b_fab: string;
        b_mask: string;
        b_paste: string;
        b_silks: string;
        background: string;
        cmts_user: string;
        copper: {
            b: string;
            f: string;
            in1: string;
            in10: string;
            in11: string;
            in12: string;
            in13: string;
            in14: string;
            in15: string;
            in16: string;
            in17: string;
            in18: string;
            in19: string;
            in2: string;
            in20: string;
            in21: string;
            in22: string;
            in23: string;
            in24: string;
            in25: string;
            in26: string;
            in27: string;
            in28: string;
            in29: string;
            in3: string;
            in30: string;
            in4: string;
            in5: string;
            in6: string;
            in7: string;
            in8: string;
            in9: string;
        };
        cursor: string;
        drc: string;
        drc_error: string;
        drc_exclusion: string;
        drc_warning: string;
        dwgs_user: string;
        eco1_user: string;
        eco2_user: string;
        edge_cuts: string;
        f_adhes: string;
        f_crtyd: string;
        f_fab: string;
        f_mask: string;
        f_paste: string;
        f_silks: string;
        footprint_text_back: string;
        footprint_text_front: string;
        footprint_text_invisible: string;
        grid: string;
        grid_axes: string;
        margin: string;
        microvia: string;
        no_connect: string;
        pad_back: string;
        pad_front: string;
        pad_plated_hole: string;
        pad_through_hole: string;
        plated_hole: string;
        ratsnest: string;
        select_overlay: string;
        through_via: string;
        user_1: string;
        user_2: string;
        user_3: string;
        user_4: string;
        user_5: string;
        user_6: string;
        user_7: string;
        user_8: string;
        user_9: string;
        via_blind_buried: string;
        via_hole: string;
        via_micro: string;
        via_through: string;
        worksheet: string;
    };
    gerbview: {
        axes: string;
        background: string;
        dcodes: string;
        grid: string;
        layers: string[];
        negative_objects: string;
        worksheet: string;
    };
    meta: {
        filename: string;
        name: string;
        version: number;
    };
    palette: string[];
    schematic: {
        aux_items: string;
        background: string;
        brightened: string;
        bus: string;
        bus_junction: string;
        component_body: string;
        component_outline: string;
        cursor: string;
        erc_error: string;
        erc_warning: string;
        fields: string;
        grid: string;
        grid_axes: string;
        hidden: string;
        junction: string;
        label_global: string;
        label_background: string;
        label_hier: string;
        label_local: string;
        net_name: string;
        no_connect: string;
        note: string;
        override_item_colors: boolean;
        pin: string;
        pin_name: string;
        pin_number: string;
        reference: string;
        shadow: string;
        sheet: string;
        sheet_background: string;
        sheet_fields: string;
        sheet_filename: string;
        sheet_label: string;
        sheet_name: string;
        table: string;
        value: string;
        wire: string;
        wire_crossing: string;
        worksheet: string;
    };
};
type ColorMap = typeof colorMap;

type ColorOverrides = {
    schematic?: Partial<ColorMap["schematic"]>;
};
interface Options$1 {
    colorOverrides?: ColorOverrides;
    width?: number;
    height?: number;
    grid?: boolean | {
        cellSize?: number;
        labelCells?: boolean;
    };
    labeledPoints?: Array<{
        x: number;
        y: number;
        label: string;
    }>;
    includeVersion?: boolean;
}
declare function convertCircuitJsonToSchematicSvg(circuitJson: AnyCircuitElement[], options?: Options$1): string;
/**
 * @deprecated use `convertCircuitJsonToSchematicSvg` instead
 */
declare const circuitJsonToSchematicSvg: typeof convertCircuitJsonToSchematicSvg;

interface Options {
    layer: "top" | "bottom";
    width?: number;
    height?: number;
    includeVersion?: boolean;
}
declare function convertCircuitJsonToSolderPasteMask(circuitJson: AnyCircuitElement[], options: Options): string;

declare function getSoftwareUsedString(circuitJson: AnyCircuitElement[]): string | undefined;

declare const CIRCUIT_TO_SVG_VERSION: string;

declare const createSvgObjectsForSchComponentPortHovers: ({ component, transform, circuitJson, }: {
    component: SchematicComponent;
    transform: Matrix;
    circuitJson: AnyCircuitElement[];
}) => INode[];

export { type AssemblySvgContext, CIRCUIT_TO_SVG_VERSION, type ColorMap, type ColorOverrides, type PcbColorMap, type PcbColorOverrides, type PcbContext, circuitJsonToPcbSvg, circuitJsonToSchematicSvg, convertCircuitJsonToAssemblySvg, convertCircuitJsonToPcbSvg, convertCircuitJsonToSchematicSvg, convertCircuitJsonToSolderPasteMask, createSvgObjectsForSchComponentPortHovers, getSoftwareUsedString };
