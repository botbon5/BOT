{"version":3,"sources":["../../cli/cli.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { parseArgs } from \"node:util\"\nimport { readFileSync } from \"node:fs\"\nimport { writeFileSync } from \"node:fs\"\nimport {\n  getSvgsFromLogString,\n  getHtmlFromLogString,\n  getGraphicsObjectsFromLogString,\n} from \"../lib\"\n\nasync function getInput(): Promise<string> {\n  // Check if there's data being piped in\n  if (process.stdin.isTTY && process.stderr.isTTY) {\n    console.error(\n      \"Error: No input provided. Pipe in content with graphics objects.\",\n    )\n    process.exit(1)\n  }\n\n  const chunks = []\n\n  // Read from stdin if available\n  if (!process.stdin.isTTY) {\n    for await (const chunk of process.stdin) {\n      chunks.push(chunk)\n    }\n  }\n\n  return chunks.join(\"\")\n}\n\nasync function main() {\n  const { values } = parseArgs({\n    options: {\n      html: { type: \"boolean\" },\n      url: { type: \"boolean\" },\n      help: { type: \"boolean\" },\n    },\n  })\n\n  if (values.help) {\n    console.log(`\nUsage: graphics-debug [options]\n\nOptions:\n  --html    Output a single HTML file with all graphics\n  --url     Print a url to view the graphics in a browser\n  --help    Show this help message\n\nExamples:\n  cat debug.log | graphics-debug\n  echo '{ graphics: { points: [{x: 0, y: 0}] } }' | graphics-debug --html\n    `)\n    process.exit(0)\n  }\n\n  const input = await getInput()\n\n  if (values.html) {\n    const html = getHtmlFromLogString(input)\n    writeFileSync(\"graphicsdebug.debug.html\", html)\n    console.log('Wrote to \"graphicsdebug.debug.html\"')\n  } else if (values.url) {\n    const graphicsObjects = getGraphicsObjectsFromLogString(input)\n    if (graphicsObjects.length === 0) {\n      console.error(\"No graphics objects found in input\")\n      process.exit(0)\n    }\n\n    const { url } = await fetch(\"https://gdstore.seve.workers.dev/store\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        graphicsObjects: getGraphicsObjectsFromLogString(input),\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    }).then((res) => res.json())\n\n    const token = url.split(\"/get/\").pop()\n\n    console.log(`https://graphicsdebug.com/t/${token}`)\n  } else {\n    const svgs = getSvgsFromLogString(input)\n    svgs.forEach((svg, i) => {\n      const filename = `${svg.title.toLowerCase().replace(/\\s+/g, \"-\")}-${i + 1}.debug.svg`\n      writeFileSync(filename, svg.svg)\n      console.log(`Wrote to \"${filename}\"`)\n    })\n  }\n}\n\nmain().catch((err) => {\n  console.error(\"Error:\", err)\n  process.exit(1)\n})\n"],"mappings":";;;;;;;;;;;;;;;;AACA,SAAS,iBAAiB;AAE1B,SAAS,qBAAqB;AAO9B,eAAe,WAA4B;AAEzC,MAAI,QAAQ,MAAM,SAAS,QAAQ,OAAO,OAAO;AAC/C,YAAQ;AAAA,MACN;AAAA,IACF;AACA,YAAQ,KAAK,CAAC;AAAA,EAChB;AAEA,QAAM,SAAS,CAAC;AAGhB,MAAI,CAAC,QAAQ,MAAM,OAAO;AACxB,qBAAiB,SAAS,QAAQ,OAAO;AACvC,aAAO,KAAK,KAAK;AAAA,IACnB;AAAA,EACF;AAEA,SAAO,OAAO,KAAK,EAAE;AACvB;AAEA,eAAe,OAAO;AACpB,QAAM,EAAE,OAAO,IAAI,UAAU;AAAA,IAC3B,SAAS;AAAA,MACP,MAAM,EAAE,MAAM,UAAU;AAAA,MACxB,KAAK,EAAE,MAAM,UAAU;AAAA,MACvB,MAAM,EAAE,MAAM,UAAU;AAAA,IAC1B;AAAA,EACF,CAAC;AAED,MAAI,OAAO,MAAM;AACf,YAAQ,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWX;AACD,YAAQ,KAAK,CAAC;AAAA,EAChB;AAEA,QAAM,QAAQ,MAAM,SAAS;AAE7B,MAAI,OAAO,MAAM;AACf,UAAM,OAAO,qBAAqB,KAAK;AACvC,kBAAc,4BAA4B,IAAI;AAC9C,YAAQ,IAAI,qCAAqC;AAAA,EACnD,WAAW,OAAO,KAAK;AACrB,UAAM,kBAAkB,gCAAgC,KAAK;AAC7D,QAAI,gBAAgB,WAAW,GAAG;AAChC,cAAQ,MAAM,oCAAoC;AAClD,cAAQ,KAAK,CAAC;AAAA,IAChB;AAEA,UAAM,EAAE,IAAI,IAAI,MAAM,MAAM,0CAA0C;AAAA,MACpE,QAAQ;AAAA,MACR,MAAM,KAAK,UAAU;AAAA,QACnB,iBAAiB,gCAAgC,KAAK;AAAA,MACxD,CAAC;AAAA,MACD,SAAS;AAAA,QACP,gBAAgB;AAAA,MAClB;AAAA,IACF,CAAC,EAAE,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC;AAE3B,UAAM,QAAQ,IAAI,MAAM,OAAO,EAAE,IAAI;AAErC,YAAQ,IAAI,+BAA+B,KAAK,EAAE;AAAA,EACpD,OAAO;AACL,UAAM,OAAO,qBAAqB,KAAK;AACvC,SAAK,QAAQ,CAAC,KAAK,MAAM;AACvB,YAAM,WAAW,GAAG,IAAI,MAAM,YAAY,EAAE,QAAQ,QAAQ,GAAG,CAAC,IAAI,IAAI,CAAC;AACzE,oBAAc,UAAU,IAAI,GAAG;AAC/B,cAAQ,IAAI,aAAa,QAAQ,GAAG;AAAA,IACtC,CAAC;AAAA,EACH;AACF;AAEA,KAAK,EAAE,MAAM,CAAC,QAAQ;AACpB,UAAQ,MAAM,UAAU,GAAG;AAC3B,UAAQ,KAAK,CAAC;AAChB,CAAC;","names":[]}