{"version":3,"sources":["../lib/getGraphicsObjectsFromLogString.ts"],"sourcesContent":["import type { GraphicsObject } from \"./types\"\n\n/**\n * Extracts graphics objects from a debug log string\n * Handles both well-formatted JSON and relaxed JSON syntax (unquoted keys)\n */\nexport function getGraphicsObjectsFromLogString(\n  logString: string,\n): GraphicsObject[] {\n  const results: GraphicsObject[] = []\n\n  // Match both {graphics: ...} and :graphics {...} patterns\n  const graphicsRegex =\n    /(?:\\{[\\s]*(?:\"graphics\"|graphics)[\\s]*:[\\s]*\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\}[\\s]*\\})|(?::graphics\\s+\\{(?:[^{}]|\\{(?:[^{}]|\\{[^{}]*\\})*\\})*\\})/g\n  const matches = logString.match(graphicsRegex)\n\n  if (!matches) return results\n\n  for (const match of matches) {\n    try {\n      // First try parsing as regular JSON\n      // Extract just the JSON part if it's a debug line\n      const jsonPart = match.includes(\":graphics\")\n        ? match.substring(match.indexOf(\"{\"))\n        : match\n\n      const parsed = JSON.parse(jsonPart)\n\n      // Wrap non-graphics objects in a graphics wrapper\n      if (parsed.graphics) {\n        results.push(parsed.graphics)\n      } else {\n        results.push(parsed)\n      }\n    } catch (e) {\n      try {\n        // If that fails, fix JSON formatting issues:\n        // 1. Add quotes around unquoted keys\n        // 2. Handle potential trailing commas\n        const fixed = match\n          .replace(/(\\b\\w+)(?=\\s*:)/g, '\"$1\"') // Quote unquoted keys more precisely\n          .replace(/,(\\s*[}\\]])/g, \"$1\") // Remove trailing commas\n          .replace(/:\\s*'([^']*)'/g, ':\"$1\"') // Convert single quotes to double quotes\n\n        const parsed = JSON.parse(fixed)\n        if (parsed.graphics) {\n          results.push(parsed.graphics)\n        } else {\n          results.push(parsed)\n        }\n      } catch (e) {\n        // Skip invalid entries but log the error and the problematic match\n        console.warn(\"Failed to parse graphics object:\", match, e)\n      }\n    }\n  }\n\n  return results\n}\n"],"mappings":";AAMO,SAAS,gCACd,WACkB;AAClB,QAAM,UAA4B,CAAC;AAGnC,QAAM,gBACJ;AACF,QAAM,UAAU,UAAU,MAAM,aAAa;AAE7C,MAAI,CAAC,QAAS,QAAO;AAErB,aAAW,SAAS,SAAS;AAC3B,QAAI;AAGF,YAAM,WAAW,MAAM,SAAS,WAAW,IACvC,MAAM,UAAU,MAAM,QAAQ,GAAG,CAAC,IAClC;AAEJ,YAAM,SAAS,KAAK,MAAM,QAAQ;AAGlC,UAAI,OAAO,UAAU;AACnB,gBAAQ,KAAK,OAAO,QAAQ;AAAA,MAC9B,OAAO;AACL,gBAAQ,KAAK,MAAM;AAAA,MACrB;AAAA,IACF,SAAS,GAAG;AACV,UAAI;AAIF,cAAM,QAAQ,MACX,QAAQ,oBAAoB,MAAM,EAClC,QAAQ,gBAAgB,IAAI,EAC5B,QAAQ,kBAAkB,OAAO;AAEpC,cAAM,SAAS,KAAK,MAAM,KAAK;AAC/B,YAAI,OAAO,UAAU;AACnB,kBAAQ,KAAK,OAAO,QAAQ;AAAA,QAC9B,OAAO;AACL,kBAAQ,KAAK,MAAM;AAAA,QACrB;AAAA,MACF,SAASA,IAAG;AAEV,gBAAQ,KAAK,oCAAoC,OAAOA,EAAC;AAAA,MAC3D;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AACT;","names":["e"]}