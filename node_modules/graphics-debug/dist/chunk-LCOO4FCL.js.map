{"version":3,"sources":["../lib/getSvgFromGraphicsObject.ts"],"sourcesContent":["import {\n  transform,\n  compose,\n  translate,\n  scale,\n  applyToPoint,\n  identity,\n  type Matrix,\n} from \"transformation-matrix\"\nimport type { GraphicsObject, Point } from \"./types\"\nimport { stringify } from \"svgson\"\nimport pretty from \"pretty\"\nimport { FONT_SIZE_WIDTH_RATIO, FONT_SIZE_HEIGHT_RATIO } from \"./constants\"\n\nconst DEFAULT_SVG_SIZE = 640\nconst PADDING = 40\n\ninterface Bounds {\n  minX: number\n  maxX: number\n  minY: number\n  maxY: number\n}\n\nfunction getBounds(graphics: GraphicsObject): Bounds {\n  const points: Point[] = [\n    ...(graphics.points || []),\n    ...(graphics.lines || []).flatMap((line) => line.points),\n    ...(graphics.rects || []).flatMap((rect) => {\n      const halfWidth = rect.width / 2\n      const halfHeight = rect.height / 2\n      return [\n        { x: rect.center.x - halfWidth, y: rect.center.y - halfHeight },\n        { x: rect.center.x + halfWidth, y: rect.center.y - halfHeight },\n        { x: rect.center.x - halfWidth, y: rect.center.y + halfHeight },\n        { x: rect.center.x + halfWidth, y: rect.center.y + halfHeight },\n      ]\n    }),\n    ...(graphics.circles || []).flatMap((circle) => [\n      { x: circle.center.x - circle.radius, y: circle.center.y }, // left\n      { x: circle.center.x + circle.radius, y: circle.center.y }, // right\n      { x: circle.center.x, y: circle.center.y - circle.radius }, // top\n      { x: circle.center.x, y: circle.center.y + circle.radius }, // bottom\n    ]),\n    ...(graphics.texts || []).flatMap((t) => {\n      const fontSize = t.fontSize ?? 12\n      const width = t.text.length * fontSize * FONT_SIZE_WIDTH_RATIO\n      const height = fontSize * FONT_SIZE_HEIGHT_RATIO\n      const anchor = t.anchorSide ?? \"center\"\n      const offsetMap: Record<string, { dx: number; dy: number }> = {\n        top_left: { dx: 0, dy: 0 },\n        top_center: { dx: -width / 2, dy: 0 },\n        top_right: { dx: -width, dy: 0 },\n        center_left: { dx: 0, dy: -height / 2 },\n        center: { dx: -width / 2, dy: -height / 2 },\n        center_right: { dx: -width, dy: -height / 2 },\n        bottom_left: { dx: 0, dy: -height },\n        bottom_center: { dx: -width / 2, dy: -height },\n        bottom_right: { dx: -width, dy: -height },\n      }\n      const { dx, dy } = offsetMap[anchor]\n      const x0 = t.x + dx\n      const y0 = t.y + dy\n      return [\n        { x: x0, y: y0 },\n        { x: x0 + width, y: y0 + height },\n      ]\n    }),\n  ]\n\n  if (points.length === 0) {\n    return { minX: -1, maxX: 1, minY: -1, maxY: 1 }\n  }\n\n  return points.reduce(\n    (bounds, point) => ({\n      minX: Math.min(bounds.minX, point.x),\n      maxX: Math.max(bounds.maxX, point.x),\n      minY: Math.min(bounds.minY, point.y),\n      maxY: Math.max(bounds.maxY, point.y),\n    }),\n    { minX: Infinity, maxX: -Infinity, minY: Infinity, maxY: -Infinity },\n  )\n}\n\nfunction getProjectionMatrix(\n  bounds: Bounds,\n  coordinateSystem: GraphicsObject[\"coordinateSystem\"],\n  svgWidth: number,\n  svgHeight: number,\n) {\n  const width = bounds.maxX - bounds.minX || 1\n  const height = bounds.maxY - bounds.minY || 1\n\n  const scale_factor = Math.min(\n    (svgWidth - 2 * PADDING) / width,\n    (svgHeight - 2 * PADDING) / height,\n  )\n\n  const yFlip = coordinateSystem === \"screen\" ? 1 : -1\n\n  return compose(\n    translate(svgWidth / 2, svgHeight / 2),\n    scale(scale_factor, yFlip * scale_factor),\n    translate(-(bounds.minX + width / 2), -(bounds.minY + height / 2)),\n  )\n}\n\nfunction projectPoint(point: Point, matrix: Matrix) {\n  const projected = applyToPoint(matrix, { x: point.x, y: point.y })\n  return { ...point, ...projected }\n}\n\nexport function getSvgFromGraphicsObject(\n  graphics: GraphicsObject,\n  {\n    includeTextLabels = false,\n    backgroundColor,\n    svgWidth = DEFAULT_SVG_SIZE,\n    svgHeight = DEFAULT_SVG_SIZE,\n  }: {\n    includeTextLabels?: boolean | Array<\"points\" | \"lines\" | \"rects\">\n    backgroundColor?: string\n    svgWidth?: number\n    svgHeight?: number\n  } = {},\n): string {\n  const bounds = getBounds(graphics)\n  const matrix = getProjectionMatrix(\n    bounds,\n    graphics.coordinateSystem,\n    svgWidth,\n    svgHeight,\n  )\n\n  const shouldRenderLabel = (type: \"points\" | \"lines\" | \"rects\"): boolean => {\n    if (typeof includeTextLabels === \"boolean\") {\n      return includeTextLabels\n    }\n    if (Array.isArray(includeTextLabels)) {\n      return includeTextLabels.includes(type)\n    }\n    return false\n  }\n\n  const svgObject = {\n    name: \"svg\",\n    type: \"element\",\n    attributes: {\n      width: svgWidth.toString(),\n      height: svgHeight.toString(),\n      viewBox: `0 0 ${svgWidth} ${svgHeight}`,\n      xmlns: \"http://www.w3.org/2000/svg\",\n    },\n    children: [\n      // Background rectangle (optional)\n      ...(backgroundColor\n        ? [\n            {\n              name: \"rect\",\n              type: \"element\",\n              attributes: {\n                width: \"100%\",\n                height: \"100%\",\n                fill: backgroundColor,\n              },\n            },\n          ]\n        : []),\n      // Points\n      ...(graphics.points || []).map((point) => {\n        const projected = projectPoint(point, matrix)\n        return {\n          name: \"g\",\n          type: \"element\",\n          attributes: {},\n          children: [\n            {\n              name: \"circle\",\n              type: \"element\",\n              attributes: {\n                \"data-type\": \"point\",\n                \"data-label\": point.label || \"\",\n                \"data-x\": point.x.toString(),\n                \"data-y\": point.y.toString(),\n                cx: projected.x.toString(),\n                cy: projected.y.toString(),\n                r: \"3\",\n                fill: point.color || \"black\",\n              },\n            },\n            ...(shouldRenderLabel(\"points\") && point.label\n              ? [\n                  {\n                    name: \"text\",\n                    type: \"element\",\n                    attributes: {\n                      x: (projected.x + 5).toString(),\n                      y: (projected.y - 5).toString(),\n                      \"font-family\": \"sans-serif\",\n                      \"font-size\": \"12\",\n                    },\n                    children: [{ type: \"text\", value: point.label }],\n                  },\n                ]\n              : []),\n          ],\n        }\n      }),\n      // Lines\n      ...(graphics.lines || []).map((line) => {\n        const projectedPoints = line.points.map((p) => projectPoint(p, matrix))\n        return {\n          name: \"g\",\n          type: \"element\",\n          attributes: {},\n          children: [\n            {\n              name: \"polyline\",\n              type: \"element\",\n              attributes: {\n                \"data-points\": line.points\n                  .map((p) => `${p.x},${p.y}`)\n                  .join(\" \"),\n                \"data-type\": \"line\",\n                \"data-label\": line.label || \"\",\n                points: projectedPoints.map((p) => `${p.x},${p.y}`).join(\" \"),\n                fill: \"none\",\n                stroke: line.strokeColor || \"black\",\n                \"stroke-width\": (line.strokeWidth ?? 1).toString(),\n                ...(line.strokeDash && {\n                  \"stroke-dasharray\": Array.isArray(line.strokeDash)\n                    ? line.strokeDash.join(\" \")\n                    : line.strokeDash,\n                }),\n              },\n            },\n            ...(shouldRenderLabel(\"lines\") &&\n            line.label &&\n            projectedPoints.length > 0\n              ? [\n                  {\n                    name: \"text\",\n                    type: \"element\",\n                    attributes: {\n                      x: (projectedPoints[0].x + 5).toString(),\n                      y: (projectedPoints[0].y - 5).toString(),\n                      \"font-family\": \"sans-serif\",\n                      \"font-size\": \"12\",\n                      fill: line.strokeColor || \"black\",\n                    },\n                    children: [{ type: \"text\", value: line.label }],\n                  },\n                ]\n              : []),\n          ],\n        }\n      }),\n      // Rectangles\n      ...(graphics.rects || []).map((rect) => {\n        const corner1 = {\n          x: rect.center.x - rect.width / 2,\n          y: rect.center.y - rect.height / 2,\n        }\n        const projectedCorner1 = projectPoint(corner1, matrix)\n        const corner2 = {\n          x: rect.center.x + rect.width / 2,\n          y: rect.center.y + rect.height / 2,\n        }\n        const projectedCorner2 = projectPoint(corner2, matrix)\n        const scaledWidth = Math.abs(projectedCorner2.x - projectedCorner1.x)\n        const scaledHeight = Math.abs(projectedCorner2.y - projectedCorner1.y)\n        const rectX = Math.min(projectedCorner1.x, projectedCorner2.x)\n        const rectY = Math.min(projectedCorner1.y, projectedCorner2.y)\n\n        return {\n          name: \"g\",\n          type: \"element\",\n          attributes: {},\n          children: [\n            {\n              name: \"rect\",\n              type: \"element\",\n              attributes: {\n                \"data-type\": \"rect\",\n                \"data-label\": rect.label || \"\",\n                \"data-x\": rect.center.x.toString(),\n                \"data-y\": rect.center.y.toString(),\n                x: rectX.toString(),\n                y: rectY.toString(),\n                width: scaledWidth.toString(),\n                height: scaledHeight.toString(),\n                fill: rect.fill || \"none\",\n                stroke: rect.stroke || \"black\",\n                \"stroke-width\": Math.abs(1 / matrix.a).toString(), // Consider scaling stroke width like lines if needed\n              },\n            },\n            ...(shouldRenderLabel(\"rects\") && rect.label\n              ? [\n                  {\n                    name: \"text\",\n                    type: \"element\",\n                    attributes: {\n                      x: (rectX + 5).toString(),\n                      y: rectY.toString(),\n                      \"font-family\": \"sans-serif\",\n                      \"dominant-baseline\": \"text-before-edge\",\n                      \"font-size\": (\n                        ((scaledWidth + scaledHeight) / 2) *\n                        0.06\n                      ).toString(),\n                      fill: rect.stroke || \"black\", // Default to stroke color for label\n                    },\n                    children: [{ type: \"text\", value: rect.label }],\n                  },\n                ]\n              : []),\n          ],\n        }\n      }),\n      // Circles\n      ...(graphics.circles || []).map((circle) => {\n        const projected = projectPoint(circle.center, matrix)\n        const scaledRadius = circle.radius * Math.abs(matrix.a)\n        return {\n          name: \"circle\",\n          type: \"element\",\n          attributes: {\n            \"data-type\": \"circle\",\n            \"data-label\": \"\",\n            \"data-x\": circle.center.x.toString(),\n            \"data-y\": circle.center.y.toString(),\n            cx: projected.x.toString(),\n            cy: projected.y.toString(),\n            r: scaledRadius.toString(),\n            fill: circle.fill || \"none\",\n            stroke: circle.stroke || \"black\",\n            \"stroke-width\": Math.abs(1 / matrix.a).toString(),\n          },\n        }\n      }),\n      // Texts\n      ...(graphics.texts || []).map((txt) => {\n        const projected = projectPoint({ x: txt.x, y: txt.y }, matrix)\n        const anchor = txt.anchorSide ?? \"center\"\n        const alignMap: Record<string, string> = {\n          top_left: \"start\",\n          center_left: \"start\",\n          bottom_left: \"start\",\n          top_center: \"middle\",\n          center: \"middle\",\n          bottom_center: \"middle\",\n          top_right: \"end\",\n          center_right: \"end\",\n          bottom_right: \"end\",\n        }\n        const baselineMap: Record<string, string> = {\n          top_left: \"text-before-edge\",\n          top_center: \"text-before-edge\",\n          top_right: \"text-before-edge\",\n          center_left: \"central\",\n          center: \"central\",\n          center_right: \"central\",\n          bottom_left: \"text-after-edge\",\n          bottom_center: \"text-after-edge\",\n          bottom_right: \"text-after-edge\",\n        }\n        return {\n          name: \"text\",\n          type: \"element\",\n          attributes: {\n            \"data-type\": \"text\",\n            \"data-label\": txt.text,\n            \"data-x\": txt.x.toString(),\n            \"data-y\": txt.y.toString(),\n            x: projected.x.toString(),\n            y: projected.y.toString(),\n            fill: txt.color || \"black\",\n            \"font-size\": ((txt.fontSize ?? 12) * Math.abs(matrix.a)).toString(),\n            \"font-family\": \"sans-serif\",\n            \"text-anchor\": alignMap[anchor],\n            \"dominant-baseline\": baselineMap[anchor],\n          },\n          children: [{ type: \"text\", value: txt.text }],\n        }\n      }),\n      // Crosshair lines and coordinates (initially hidden)\n      {\n        name: \"g\",\n        type: \"element\",\n        attributes: {\n          id: \"crosshair\",\n          style: \"display: none\",\n        },\n        children: [\n          {\n            name: \"line\",\n            type: \"element\",\n            attributes: {\n              id: \"crosshair-h\",\n              y1: \"0\",\n              y2: svgHeight.toString(),\n              stroke: \"#666\",\n              \"stroke-width\": \"0.5\",\n            },\n          },\n          {\n            name: \"line\",\n            type: \"element\",\n            attributes: {\n              id: \"crosshair-v\",\n              x1: \"0\",\n              x2: svgWidth.toString(),\n              stroke: \"#666\",\n              \"stroke-width\": \"0.5\",\n            },\n          },\n          {\n            name: \"text\",\n            type: \"element\",\n            attributes: {\n              id: \"coordinates\",\n              \"font-family\": \"monospace\",\n              \"font-size\": \"12\",\n              fill: \"#666\",\n            },\n            children: [{ type: \"text\", value: \"\" }],\n          },\n        ],\n      },\n      // Mouse tracking script\n      {\n        name: \"script\",\n        type: \"element\",\n        children: [\n          {\n            type: \"text\",\n            value: `\n              document.currentScript.parentElement.addEventListener('mousemove', (e) => {\n                const svg = e.currentTarget;\n                const rect = svg.getBoundingClientRect();\n                const x = e.clientX - rect.left;\n                const y = e.clientY - rect.top;\n                const crosshair = svg.getElementById('crosshair');\n                const h = svg.getElementById('crosshair-h');\n                const v = svg.getElementById('crosshair-v');\n                const coords = svg.getElementById('coordinates');\n                \n                crosshair.style.display = 'block';\n                h.setAttribute('x1', '0');\n                h.setAttribute('x2', '${svgWidth}');\n                h.setAttribute('y1', y);\n                h.setAttribute('y2', y);\n                v.setAttribute('x1', x);\n                v.setAttribute('x2', x);\n                v.setAttribute('y1', '0');\n                v.setAttribute('y2', '${svgHeight}');\n\n                // Calculate real coordinates using inverse transformation\n                const matrix = ${JSON.stringify(matrix)};\n                // Manually invert and apply the affine transform\n                // Since we only use translate and scale, we can directly compute:\n                // x' = (x - tx) / sx\n                // y' = (y - ty) / sy\n                const sx = matrix.a;\n                const sy = matrix.d;\n                const tx = matrix.e; \n                const ty = matrix.f;\n                const realPoint = {\n                  x: (x - tx) / sx,\n                  y: (y - ty) / sy // Flip y back since we used negative scale\n                }\n                \n                coords.textContent = \\`(\\${realPoint.x.toFixed(2)}, \\${realPoint.y.toFixed(2)})\\`;\n                coords.setAttribute('x', (x + 5).toString());\n                coords.setAttribute('y', (y - 5).toString());\n              });\n              document.currentScript.parentElement.addEventListener('mouseleave', () => {\n                document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';\n              });\n            `,\n          },\n        ],\n      },\n    ],\n  }\n\n  // biome-ignore lint/suspicious/noExplicitAny: TODO\n  return pretty(stringify(svgObject as any))\n}\n"],"mappings":"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","names":[]}