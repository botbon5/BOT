{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import {\n  Matrix,\n  identity,\n  translate,\n  compose,\n  applyToPoint,\n  scale,\n} from \"transformation-matrix\"\n// import { fromTwoMovingPoints } from \"transformation-matrix\" // Not used currently\nimport { useCallback, useEffect, useReducer, useRef, useState } from \"react\"\nimport { computePinchTransform } from \"./computePinchTransform\"\n\ntype Point = { x: number; y: number }\n\ninterface Props {\n  canvasElm?: HTMLElement\n  transform?: Matrix\n  initialTransform?: Matrix\n  onSetTransform?: (transform: Matrix) => any\n  enabled?: boolean\n  shouldDrag?: (e: MouseEvent | TouchEvent | WheelEvent) => boolean\n}\n\nexport const useMouseMatrixTransform = (props: Props = {}) => {\n  const extRef = useRef<any>(null)\n  const [lastDragCancelTime, setLastDragCancelTime] = useState(0)\n  const outerCanvasElm = props.canvasElm ?? extRef.current\n  const [internalTransform, setInternalTransform] = useState<Matrix>(\n    props.initialTransform ?? identity(),\n  )\n  const [waitCounter, setWaitCounter] = useState(0)\n  const [extChangeCounter, incExtChangeCounter] = useReducer((s) => s + 1, 0)\n\n  const setTransform = useCallback(\n    (newTransform: Matrix) => {\n      if (props.onSetTransform) {\n        props.onSetTransform(newTransform)\n      }\n      if (!props.transform) {\n        setInternalTransform(newTransform)\n      }\n    },\n    [props.onSetTransform, setInternalTransform],\n  )\n\n  const setTransformExt = useCallback(\n    (newTransform: Matrix) => {\n      setTransform(newTransform)\n      incExtChangeCounter()\n    },\n    [setTransform],\n  )\n\n  const transform = props.transform ?? internalTransform\n\n  const cancelDrag = useCallback(() => {\n    setLastDragCancelTime(Date.now())\n  }, [])\n\n  const gestureModeRef = useRef<\"none\" | \"drag\" | \"pinch\">(\"none\")\n  // const lastTouchRef = useRef<{ x: number; y: number } | null>(null) // No longer needed for delta calculation\n  const dragDataRef = useRef<{\n    initialTransform: Matrix\n    initialTouch: Point\n  } | null>(null)\n  const pinchDataRef = useRef<{\n    initialTransform: Matrix\n    initialTouch1: Point\n    initialTouch2: Point\n    finalTouch1: Point | null\n    finalTouch2: Point | null\n  } | null>(null)\n\n  useEffect(() => {\n    const canvasElm: HTMLCanvasElement | null =\n      props.canvasElm ?? extRef.current\n    if (canvasElm && !outerCanvasElm) {\n      setWaitCounter(waitCounter + 1)\n      return\n    }\n    if (!canvasElm) {\n      const timeout = setTimeout(() => {\n        setWaitCounter(waitCounter + 1)\n      }, 100)\n      return () => clearTimeout(timeout)\n    }\n    let init_tf = props.transform ?? internalTransform\n\n    let m0: Point = { x: 0, y: 0 },\n      m1: Point = { x: 0, y: 0 },\n      md = false,\n      mlastrel: Point = { x: 0, y: 0 }\n\n    const getMousePos = (e: MouseEvent) => {\n      return {\n        x: e.pageX - canvasElm.getBoundingClientRect().left - window.scrollX,\n        y: e.pageY - canvasElm.getBoundingClientRect().top - window.scrollY,\n      }\n    }\n\n    function handleMouseDown(e: MouseEvent) {\n      if (props.enabled === false) return\n      if (props.shouldDrag && !props.shouldDrag(e)) return\n      m0 = getMousePos(e)\n      if (Date.now() - lastDragCancelTime < 100) return\n      md = true\n      e.preventDefault()\n    }\n    function handleMouseUp(e: MouseEvent) {\n      if (!md || props.enabled === false) return\n      if (props.shouldDrag && !props.shouldDrag(e)) return\n      m1 = getMousePos(e)\n\n      const new_tf = compose(translate(m1.x - m0.x, m1.y - m0.y), init_tf)\n      setTransform(new_tf)\n      init_tf = new_tf\n\n      md = false\n    }\n    function handleMouseMove(e: MouseEvent) {\n      mlastrel = getMousePos(e)\n      if (!md || props.enabled === false) return\n      if (props.shouldDrag && !props.shouldDrag(e)) return\n      m1 = getMousePos(e)\n      const new_tf = compose(translate(m1.x - m0.x, m1.y - m0.y), init_tf)\n      setTransform(new_tf)\n    }\n    function handleMouseWheel(e: WheelEvent) {\n      if (props.enabled === false) return\n      if (props.shouldDrag && !props.shouldDrag(e)) return\n      const center = getMousePos(e)\n      const new_tf = compose(\n        translate(center.x, center.y),\n        scale(1 - e.deltaY / 1000, 1 - e.deltaY / 1000),\n        translate(-center.x, -center.y),\n        init_tf,\n      )\n      setTransform(new_tf)\n      init_tf = new_tf\n      e.preventDefault()\n    }\n    function handleMouseOut(e: MouseEvent) {\n      if (!md) return\n      if (props.shouldDrag && !props.shouldDrag(e)) return\n\n      if (canvasElm) {\n        const boundingBox = canvasElm.getBoundingClientRect()\n        if (\n          e.clientX >= boundingBox.left + 10 &&\n          e.clientX <= boundingBox.right - 10 &&\n          e.clientY >= boundingBox.top + 10 &&\n          e.clientY <= boundingBox.bottom - 10\n        ) {\n          return\n        }\n      }\n\n      md = false\n      m1 = getMousePos(e)\n      const new_tf = compose(translate(m1.x - m0.x, m1.y - m0.y), init_tf)\n      setTransform(new_tf)\n      init_tf = new_tf\n    }\n\n    function handleTouchStart(e: TouchEvent) {\n      e.preventDefault()\n      if (props.enabled === false) return\n      if (e.touches.length === 1) {\n        // Start Drag\n        gestureModeRef.current = \"drag\"\n        const touch = e.touches[0]\n        dragDataRef.current = {\n          initialTransform: init_tf, // Capture transform before drag starts\n          initialTouch: { x: touch.clientX, y: touch.clientY },\n        }\n      } else if (e.touches.length === 2) {\n        // Start Pinch\n        gestureModeRef.current = \"pinch\"\n        const touch1 = e.touches[0]\n        const touch2 = e.touches[1]\n        pinchDataRef.current = {\n          initialTransform: init_tf, // Store the transform at the start of the pinch\n          initialTouch1: { x: touch1.clientX, y: touch1.clientY },\n          initialTouch2: { x: touch2.clientX, y: touch2.clientY },\n          finalTouch1: null,\n          finalTouch2: null,\n        }\n      }\n    }\n\n    function handleTouchMove(e: TouchEvent) {\n      e.preventDefault()\n      if (props.enabled === false) return\n      if (\n        gestureModeRef.current === \"drag\" &&\n        e.touches.length === 1 &&\n        dragDataRef.current // Check if drag has started\n      ) {\n        // Handle Drag Move\n        const touch = e.touches[0]\n        const currentTouch = { x: touch.clientX, y: touch.clientY }\n        const deltaX = currentTouch.x - dragDataRef.current.initialTouch.x\n        const deltaY = currentTouch.y - dragDataRef.current.initialTouch.y\n\n        // Apply delta to the transform that existed *before* the drag started\n        const new_tf = compose(\n          translate(deltaX, deltaY),\n          dragDataRef.current.initialTransform,\n        )\n        setTransform(new_tf)\n        // Do not update init_tf here\n      } else if (\n        gestureModeRef.current === \"pinch\" &&\n        e.touches.length === 2 &&\n        pinchDataRef.current\n      ) {\n        const touch1 = e.touches[0]\n        const touch2 = e.touches[1]\n\n        pinchDataRef.current.finalTouch1 = {\n          x: touch1.clientX,\n          y: touch1.clientY,\n        }\n        pinchDataRef.current.finalTouch2 = {\n          x: touch2.clientX,\n          y: touch2.clientY,\n        }\n\n        const new_tf = computePinchTransform(pinchDataRef.current)\n        setTransform(new_tf)\n        // Don't update init_tf here, only on touch end\n      }\n    }\n\n    function handleTouchEnd(e: TouchEvent) {\n      e.preventDefault()\n\n      // Use changedTouches to get the final position of the lifted finger(s)\n      const finalTouch = e.changedTouches[0]\n\n      if (\n        gestureModeRef.current === \"drag\" &&\n        dragDataRef.current && // Check if drag was active\n        finalTouch // Ensure we have the final touch info\n      ) {\n        // Drag End\n        const finalTouchPos = { x: finalTouch.clientX, y: finalTouch.clientY }\n        const deltaX = finalTouchPos.x - dragDataRef.current.initialTouch.x\n        const deltaY = finalTouchPos.y - dragDataRef.current.initialTouch.y\n\n        // Calculate the final transform based on the total delta\n        const new_tf = compose(\n          translate(deltaX, deltaY),\n          dragDataRef.current.initialTransform,\n        )\n        setTransform(new_tf) // Update the visual state\n        init_tf = new_tf // Lock in the transform for the next gesture\n      } else if (gestureModeRef.current === \"pinch\" && pinchDataRef.current) {\n        const new_tf = computePinchTransform(pinchDataRef.current)\n        setTransform(new_tf) // Ensure the final state is set\n        init_tf = new_tf // Update init_tf\n      }\n\n      // Reset gesture state and data refs\n      gestureModeRef.current = \"none\"\n      // lastTouchRef.current = null // No longer used\n      dragDataRef.current = null\n      pinchDataRef.current = null\n    }\n\n    canvasElm.addEventListener(\"mousedown\", handleMouseDown)\n    canvasElm.addEventListener(\"mouseup\", handleMouseUp)\n    window.addEventListener(\"mousemove\", handleMouseMove)\n    canvasElm.addEventListener(\"mouseout\", handleMouseOut)\n    canvasElm.addEventListener(\"wheel\", handleMouseWheel)\n\n    canvasElm.addEventListener(\"touchstart\", handleTouchStart, {\n      passive: false,\n    })\n    canvasElm.addEventListener(\"touchmove\", handleTouchMove, {\n      passive: false,\n    })\n    canvasElm.addEventListener(\"touchend\", handleTouchEnd, { passive: false })\n    canvasElm.addEventListener(\"touchcancel\", handleTouchEnd, {\n      passive: false,\n    })\n\n    return () => {\n      canvasElm.removeEventListener(\"mousedown\", handleMouseDown)\n      canvasElm.removeEventListener(\"mouseup\", handleMouseUp)\n      window.removeEventListener(\"mousemove\", handleMouseMove)\n      canvasElm.removeEventListener(\"mouseout\", handleMouseOut)\n      canvasElm.removeEventListener(\"wheel\", handleMouseWheel)\n\n      canvasElm.removeEventListener(\"touchstart\", handleTouchStart)\n      canvasElm.removeEventListener(\"touchmove\", handleTouchMove)\n      canvasElm.removeEventListener(\"touchend\", handleTouchEnd)\n      canvasElm.removeEventListener(\"touchcancel\", handleTouchEnd)\n    }\n  }, [\n    outerCanvasElm,\n    waitCounter,\n    extChangeCounter,\n    lastDragCancelTime,\n    props.enabled,\n    props.shouldDrag,\n  ])\n\n  const applyTransformToPoint = useCallback(\n    (obj: Point | [number, number]) => applyToPoint(transform, obj),\n    [transform],\n  )\n\n  return {\n    ref: extRef,\n    transform,\n    applyTransformToPoint,\n    setTransform: setTransformExt,\n    cancelDrag,\n  }\n}\n\nexport default useMouseMatrixTransform\n"],"mappings":"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","names":[]}