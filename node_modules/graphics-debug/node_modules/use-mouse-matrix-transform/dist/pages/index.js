import {
  useMouseMatrixTransform
} from "../chunk-24EXXVA4.js";
import "../chunk-TGYMZPTI.js";

// src/pages/index.tsx
import { useState } from "react";
"use client";
var pages_default = () => {
  const { ref, applyTransformToPoint, transform, cancelDrag } = useMouseMatrixTransform();
  const [offCenter, setOffCenter] = useState(false);
  const gridSize = 10;
  const spacing = 50;
  const squareSize = 25;
  const gridElements = [];
  for (let row = 0; row < gridSize; row++) {
    for (let col = 0; col < gridSize; col++) {
      const originalX = 100 + col * spacing;
      const originalY = 100 + row * spacing;
      const { x: left, y: top } = applyTransformToPoint({
        x: originalX,
        y: originalY
      });
      const currentSize = squareSize * transform.d;
      gridElements.push(
        <div
          key={`${row}-${col}`}
          style={{
            position: "absolute",
            left,
            top,
            width: currentSize,
            height: currentSize,
            backgroundColor: `hsl(${row * 360 / gridSize}, 70%, 60%)`,
            border: `${1 * transform.d}px solid black`,
            boxSizing: "border-box"
          }}
        />
      );
    }
  }
  const { x: cancelLeft, y: cancelTop } = applyTransformToPoint({
    x: 100 + (gridSize - 1) * spacing + 100,
    y: 100
  });
  return <div style={{ height: 2e3 }}>
    <div
      ref={ref}
      style={{
        marginTop: offCenter ? 400 : 0,
        marginLeft: offCenter ? 400 : 0,
        position: "relative",
        backgroundColor: "#eee",
        height: 600,
        width: 600,
        overflow: "hidden",
        border: "1px solid #ccc"
      }}
    >
      {gridElements}
      <div
        style={{
          position: "absolute",
          left: cancelLeft,
          top: cancelTop,
          padding: `${8 * transform.d}px`,
          fontSize: `${12 * transform.d}px`,
          color: "white",
          cursor: "pointer",
          backgroundColor: "blue",
          fontFamily: "monospace",
          whiteSpace: "nowrap"
        }}
        onMouseDown={(e) => {
          e.stopPropagation();
          cancelDrag();
        }}
        onTouchStart={(e) => {
          e.stopPropagation();
        }}
      >cancelDrag</div>
    </div>
    <div>
      <input
        type="checkbox"
        checked={offCenter}
        onChange={() => setOffCenter(!offCenter)}
      />
      {" "}
      {"off center"}
    </div>
    <div style={{ marginTop: 20 }}>Try dragging the canvas above around</div>
  </div>;
};
export {
  pages_default as default
};
//# sourceMappingURL=index.js.map