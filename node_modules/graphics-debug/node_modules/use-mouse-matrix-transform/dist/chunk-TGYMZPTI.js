// src/computePinchTransform.ts
import { compose, translate, scale } from "transformation-matrix";
var computePinchTransform = ({
  initialTransform,
  initialTouch1,
  initialTouch2,
  finalTouch1,
  finalTouch2
}) => {
  if (!finalTouch1 || !finalTouch2) {
    return initialTransform;
  }
  const initialCenter = {
    x: (initialTouch1.x + initialTouch2.x) / 2,
    y: (initialTouch1.y + initialTouch2.y) / 2
  };
  const currentCenter = {
    x: (finalTouch1.x + finalTouch2.x) / 2,
    y: (finalTouch1.y + finalTouch2.y) / 2
  };
  const initialDist = Math.hypot(
    initialTouch2.x - initialTouch1.x,
    initialTouch2.y - initialTouch1.y
  );
  const currentDist = Math.hypot(
    finalTouch2.x - finalTouch1.x,
    finalTouch2.y - finalTouch1.y
  );
  const s = initialDist === 0 ? 1 : currentDist / initialDist;
  const deltaX = currentCenter.x - initialCenter.x;
  const deltaY = currentCenter.y - initialCenter.y;
  const pinchTransform = compose(
    translate(deltaX, deltaY),
    translate(initialCenter.x, initialCenter.y),
    scale(s, s),
    translate(-initialCenter.x, -initialCenter.y),
    initialTransform
  );
  return pinchTransform;
};

export {
  computePinchTransform
};
//# sourceMappingURL=chunk-TGYMZPTI.js.map