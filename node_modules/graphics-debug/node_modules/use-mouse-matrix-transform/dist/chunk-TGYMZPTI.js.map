{"version":3,"sources":["../src/computePinchTransform.ts"],"sourcesContent":["import { Matrix, compose, translate, scale } from \"transformation-matrix\"\n\ntype Point = { x: number; y: number }\n\ninterface PinchInput {\n  initialTransform: Matrix\n  initialTouch1: Point\n  initialTouch2: Point\n  finalTouch1: Point | null\n  finalTouch2: Point | null\n}\n\nexport const computePinchTransform = ({\n  initialTransform,\n  initialTouch1,\n  initialTouch2,\n  finalTouch1,\n  finalTouch2,\n}: PinchInput): Matrix => {\n  if (!finalTouch1 || !finalTouch2) {\n    return initialTransform\n  }\n  // Calculate initial and current centers\n  const initialCenter = {\n    x: (initialTouch1.x + initialTouch2.x) / 2,\n    y: (initialTouch1.y + initialTouch2.y) / 2,\n  }\n  const currentCenter = {\n    x: (finalTouch1.x + finalTouch2.x) / 2,\n    y: (finalTouch1.y + finalTouch2.y) / 2,\n  }\n\n  // Calculate initial and current distances between touch points\n  const initialDist = Math.hypot(\n    initialTouch2.x - initialTouch1.x,\n    initialTouch2.y - initialTouch1.y,\n  )\n  const currentDist = Math.hypot(\n    finalTouch2.x - finalTouch1.x,\n    finalTouch2.y - finalTouch1.y,\n  )\n\n  // Calculate the scaling factor, prevent division by zero\n  const s = initialDist === 0 ? 1 : currentDist / initialDist\n\n  // Calculate the translation delta\n  const deltaX = currentCenter.x - initialCenter.x\n  const deltaY = currentCenter.y - initialCenter.y\n\n  // Compose the transformation matrix\n  // 1. Translate by the delta movement of the center\n  // 2. Translate to the initial center\n  // 3. Scale around the initial center\n  // 4. Translate back from the initial center\n  // 5. Apply the initial transform before the pinch started\n  const pinchTransform = compose(\n    translate(deltaX, deltaY),\n    translate(initialCenter.x, initialCenter.y),\n    scale(s, s),\n    translate(-initialCenter.x, -initialCenter.y),\n    initialTransform,\n  )\n\n  return pinchTransform\n}\n"],"mappings":";AAAA,SAAiB,SAAS,WAAW,aAAa;AAY3C,IAAM,wBAAwB,CAAC;AAAA,EACpC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAA0B;AACxB,MAAI,CAAC,eAAe,CAAC,aAAa;AAChC,WAAO;AAAA,EACT;AAEA,QAAM,gBAAgB;AAAA,IACpB,IAAI,cAAc,IAAI,cAAc,KAAK;AAAA,IACzC,IAAI,cAAc,IAAI,cAAc,KAAK;AAAA,EAC3C;AACA,QAAM,gBAAgB;AAAA,IACpB,IAAI,YAAY,IAAI,YAAY,KAAK;AAAA,IACrC,IAAI,YAAY,IAAI,YAAY,KAAK;AAAA,EACvC;AAGA,QAAM,cAAc,KAAK;AAAA,IACvB,cAAc,IAAI,cAAc;AAAA,IAChC,cAAc,IAAI,cAAc;AAAA,EAClC;AACA,QAAM,cAAc,KAAK;AAAA,IACvB,YAAY,IAAI,YAAY;AAAA,IAC5B,YAAY,IAAI,YAAY;AAAA,EAC9B;AAGA,QAAM,IAAI,gBAAgB,IAAI,IAAI,cAAc;AAGhD,QAAM,SAAS,cAAc,IAAI,cAAc;AAC/C,QAAM,SAAS,cAAc,IAAI,cAAc;AAQ/C,QAAM,iBAAiB;AAAA,IACrB,UAAU,QAAQ,MAAM;AAAA,IACxB,UAAU,cAAc,GAAG,cAAc,CAAC;AAAA,IAC1C,MAAM,GAAG,CAAC;AAAA,IACV,UAAU,CAAC,cAAc,GAAG,CAAC,cAAc,CAAC;AAAA,IAC5C;AAAA,EACF;AAEA,SAAO;AACT;","names":[]}