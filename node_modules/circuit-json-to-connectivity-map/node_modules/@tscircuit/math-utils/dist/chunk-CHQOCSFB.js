// src/line-intersections.ts
function doesLineIntersectLine([a1, a2], [b1, b2], {
  lineThickness = 0
} = {}) {
  if (lineThickness === 0) {
    return doSegmentsIntersect(a1, a2, b1, b2);
  }
  const minDist = segmentsDistance(a1, a2, b1, b2);
  return minDist <= lineThickness;
}
function doSegmentsIntersect(p1, q1, p2, q2) {
  const o1 = orientation(p1, q1, p2);
  const o2 = orientation(p1, q1, q2);
  const o3 = orientation(p2, q2, p1);
  const o4 = orientation(p2, q2, q1);
  if (o1 !== o2 && o3 !== o4) {
    return true;
  }
  if (o1 === 0 && onSegment(p1, p2, q1)) return true;
  if (o2 === 0 && onSegment(p1, q2, q1)) return true;
  if (o3 === 0 && onSegment(p2, p1, q2)) return true;
  if (o4 === 0 && onSegment(p2, q1, q2)) return true;
  return false;
}
function orientation(p, q, r) {
  const val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);
  if (val === 0) return 0;
  return val > 0 ? 1 : 2;
}
function onSegment(p, q, r) {
  return q.x <= Math.max(p.x, r.x) && q.x >= Math.min(p.x, r.x) && q.y <= Math.max(p.y, r.y) && q.y >= Math.min(p.y, r.y);
}
function segmentsDistance(a1, a2, b1, b2) {
  if (a1.x === a2.x && a1.y === a2.y) {
    return pointToSegmentDistance(a1, b1, b2);
  }
  if (b1.x === b2.x && b1.y === b2.y) {
    return pointToSegmentDistance(b1, a1, a2);
  }
  if (doSegmentsIntersect(a1, a2, b1, b2)) {
    return 0;
  }
  const distances = [
    pointToSegmentDistance(a1, b1, b2),
    pointToSegmentDistance(a2, b1, b2),
    pointToSegmentDistance(b1, a1, a2),
    pointToSegmentDistance(b2, a1, a2)
  ];
  return Math.min(...distances);
}
function pointToSegmentDistance(p, v, w) {
  const l2 = (w.x - v.x) ** 2 + (w.y - v.y) ** 2;
  if (l2 === 0) return distance(p, v);
  let t = ((p.x - v.x) * (w.x - v.x) + (p.y - v.y) * (w.y - v.y)) / l2;
  t = Math.max(0, Math.min(1, t));
  const projection = {
    x: v.x + t * (w.x - v.x),
    y: v.y + t * (w.y - v.y)
  };
  return distance(p, projection);
}
function distance(p1, p2) {
  const dx = p1.x - p2.x;
  const dy = p1.y - p2.y;
  return Math.sqrt(dx * dx + dy * dy);
}

export {
  doesLineIntersectLine,
  doSegmentsIntersect,
  orientation,
  onSegment,
  pointToSegmentDistance,
  distance
};
//# sourceMappingURL=chunk-CHQOCSFB.js.map