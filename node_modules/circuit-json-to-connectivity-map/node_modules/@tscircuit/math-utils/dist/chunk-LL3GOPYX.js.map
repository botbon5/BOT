{"version":3,"sources":["../src/grid.ts"],"sourcesContent":["import type { Point } from \"./common\"\n\nexport type GridCellPositions = {\n  index: number\n  center: Point\n  topLeft: Point\n  bottomRight: Point\n}\n\nexport type GridOptions = {\n  rows: number\n  cols: number\n  xSpacing?: number\n  ySpacing?: number\n  width?: number\n  height?: number\n  offsetX?: number\n  offsetY?: number\n  yDirection?: \"cartesian\" | \"up-is-negative\"\n  centered?: boolean\n}\n\nexport function grid({\n  rows,\n  cols,\n  xSpacing,\n  ySpacing,\n  width,\n  height,\n  offsetX = 0,\n  offsetY = 0,\n  yDirection = \"cartesian\",\n  centered = true,\n}: GridOptions): GridCellPositions[] {\n  // Set default spacing if neither spacing nor dimensions are specified\n  const effectiveXSpacing = xSpacing ?? 1\n  const effectiveYSpacing = ySpacing ?? 1\n\n  // Calculate cell dimensions\n  const totalWidth = width ?? cols * effectiveXSpacing\n  const totalHeight = height ?? rows * effectiveYSpacing\n\n  // Calculate centering offsets if needed\n  const centeringOffsetX = centered ? -totalWidth / 2 : 0\n  const centeringOffsetY = centered ? -totalHeight / 2 : 0\n\n  const cellWidth = width ? width / cols : effectiveXSpacing\n  const cellHeight = height ? height / rows : effectiveYSpacing\n\n  const cells: GridCellPositions[] = []\n\n  for (let row = 0; row < rows; row++) {\n    for (let col = 0; col < cols; col++) {\n      const index = row * cols + col\n\n      // Calculate center position\n      const centerX =\n        offsetX + centeringOffsetX + col * cellWidth + cellWidth / 2\n      const rawCenterY = offsetY + row * cellHeight + cellHeight / 2\n\n      // Adjust Y coordinate based on yDirection\n      const centerY =\n        yDirection === \"cartesian\"\n          ? offsetY +\n            centeringOffsetY +\n            (rows - 1 - row) * cellHeight +\n            cellHeight / 2\n          : offsetY + centeringOffsetY + row * cellHeight + cellHeight / 2\n\n      cells.push({\n        index,\n        center: { x: centerX, y: centerY },\n        topLeft: {\n          x: centerX - cellWidth / 2,\n          y: centerY + cellHeight / 2,\n        },\n        bottomRight: {\n          x: centerX + cellWidth / 2,\n          y: centerY - cellHeight / 2,\n        },\n      })\n    }\n  }\n\n  return cells\n}\n"],"mappings":";AAsBO,SAAS,KAAK;AAAA,EACnB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,UAAU;AAAA,EACV,UAAU;AAAA,EACV,aAAa;AAAA,EACb,WAAW;AACb,GAAqC;AAEnC,QAAM,oBAAoB,YAAY;AACtC,QAAM,oBAAoB,YAAY;AAGtC,QAAM,aAAa,SAAS,OAAO;AACnC,QAAM,cAAc,UAAU,OAAO;AAGrC,QAAM,mBAAmB,WAAW,CAAC,aAAa,IAAI;AACtD,QAAM,mBAAmB,WAAW,CAAC,cAAc,IAAI;AAEvD,QAAM,YAAY,QAAQ,QAAQ,OAAO;AACzC,QAAM,aAAa,SAAS,SAAS,OAAO;AAE5C,QAAM,QAA6B,CAAC;AAEpC,WAAS,MAAM,GAAG,MAAM,MAAM,OAAO;AACnC,aAAS,MAAM,GAAG,MAAM,MAAM,OAAO;AACnC,YAAM,QAAQ,MAAM,OAAO;AAG3B,YAAM,UACJ,UAAU,mBAAmB,MAAM,YAAY,YAAY;AAC7D,YAAM,aAAa,UAAU,MAAM,aAAa,aAAa;AAG7D,YAAM,UACJ,eAAe,cACX,UACA,oBACC,OAAO,IAAI,OAAO,aACnB,aAAa,IACb,UAAU,mBAAmB,MAAM,aAAa,aAAa;AAEnE,YAAM,KAAK;AAAA,QACT;AAAA,QACA,QAAQ,EAAE,GAAG,SAAS,GAAG,QAAQ;AAAA,QACjC,SAAS;AAAA,UACP,GAAG,UAAU,YAAY;AAAA,UACzB,GAAG,UAAU,aAAa;AAAA,QAC5B;AAAA,QACA,aAAa;AAAA,UACX,GAAG,UAAU,YAAY;AAAA,UACzB,GAAG,UAAU,aAAa;AAAA,QAC5B;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAEA,SAAO;AACT;","names":[]}