import { c } from 'react-compiler-runtime';
import { CheckIcon } from '@primer/octicons-react';
import React from 'react';
import { isValidElementType } from 'react-is';
import { get } from '../../constants.js';
import sx from '../../sx.js';
import styled from 'styled-components';
import { StyledHeader } from './Header.js';
import { StyledDivider } from './Divider.js';
import { useTheme } from '../../ThemeProvider.js';
import { isActiveDescendantAttribute, activeDescendantActivatedDirectly, activeDescendantActivatedIndirectly } from '@primer/behaviors';
import { useId } from '../../hooks/useId.js';
import { jsx, Fragment, jsxs } from 'react/jsx-runtime';
import Truncate from '../../Truncate/Truncate.js';

const getItemVariant = (variant = 'default', disabled) => {
  if (disabled) {
    return {
      color: get('colors.primer.fg.disabled'),
      iconColor: get('colors.primer.fg.disabled'),
      annotationColor: get('colors.primer.fg.disabled'),
      hoverCursor: 'default'
    };
  }
  switch (variant) {
    case 'danger':
      return {
        color: get('colors.danger.fg'),
        iconColor: get('colors.danger.fg'),
        annotationColor: get('colors.fg.muted'),
        hoverCursor: 'pointer',
        hoverBg: get('colors.actionListItem.danger.hoverBg'),
        focusBg: get('colors.actionListItem.danger.activeBg'),
        hoverText: get('colors.actionListItem.danger.hoverText')
      };
    default:
      return {
        color: get('colors.fg.default'),
        iconColor: get('colors.fg.muted'),
        annotationColor: get('colors.fg.muted'),
        hoverCursor: 'pointer',
        hoverBg: get('colors.actionListItem.default.hoverBg'),
        focusBg: get('colors.actionListItem.default.activeBg')
      };
  }
};
const DividedContent = styled.div.withConfig({
  displayName: "Item__DividedContent",
  componentId: "sc-y6iv6t-0"
})(["display:flex;min-width:0;position:relative;flex-grow:1;"]);
const MainContent = styled.div.withConfig({
  displayName: "Item__MainContent",
  componentId: "sc-y6iv6t-1"
})(["align-items:baseline;display:flex;min-width:0;flex-direction:var(--main-content-flex-direction);flex-grow:1;"]);
const StyledItem = styled.div.withConfig({
  displayName: "Item__StyledItem",
  componentId: "sc-y6iv6t-2"
})(["padding:6px ", ";display:flex;border-radius:", ";color:", ";transition:background 33.333ms linear;text-decoration:none;@media (hover:hover) and (pointer:fine){:hover{background:var( --item-hover-bg-override,", " );color:", ";cursor:", ";}}:not(:first-of-type):not(", " + &):not(", " + &){margin-top:", ";", "::before{content:' ';display:block;position:absolute;width:100%;top:-7px;border:0 solid ", ";border-top-width:", ";}}&:hover ", "::before,:hover + * ", "::before{border-color:var(--item-hover-divider-border-color-override,transparent) !important;}&:focus ", "::before,:focus + * ", "::before,&[", "] ", "::before,[", "] + & ", "::before{border-color:transparent !important;}&[", "='", "']{background:", ";}&[", "='", "']{background:", ";}&:focus{background:", ";outline:none;}&:active{background:", ";}", ""], get('space.2'), get('radii.2'), ({
  variant,
  item
}) => getItemVariant(variant, item === null || item === void 0 ? void 0 : item.disabled).color, ({
  variant,
  item
}) => getItemVariant(variant, item === null || item === void 0 ? void 0 : item.disabled).hoverBg, ({
  variant,
  item
}) => getItemVariant(variant, item === null || item === void 0 ? void 0 : item.disabled).hoverText, ({
  variant,
  item
}) => getItemVariant(variant, item === null || item === void 0 ? void 0 : item.disabled).hoverCursor, StyledDivider, StyledHeader, ({
  showDivider
}) => showDivider ? `1px` : '0', DividedContent, get('colors.border.muted'), ({
  showDivider
}) => showDivider ? `1px` : '0', DividedContent, DividedContent, DividedContent, DividedContent, isActiveDescendantAttribute, DividedContent, isActiveDescendantAttribute, DividedContent, isActiveDescendantAttribute, activeDescendantActivatedDirectly, ({
  variant,
  item
}) => getItemVariant(variant, item === null || item === void 0 ? void 0 : item.disabled).focusBg, isActiveDescendantAttribute, activeDescendantActivatedIndirectly, ({
  variant,
  item
}) => getItemVariant(variant, item === null || item === void 0 ? void 0 : item.disabled).hoverBg, ({
  variant,
  item
}) => getItemVariant(variant, item === null || item === void 0 ? void 0 : item.disabled).focusBg, ({
  variant,
  item
}) => getItemVariant(variant, item === null || item === void 0 ? void 0 : item.disabled).focusBg, sx);
const TextContainer = styled.span.withConfig({
  displayName: "Item__TextContainer",
  componentId: "sc-y6iv6t-3"
})([""]);
const BaseVisualContainer = styled.div.withConfig({
  displayName: "Item__BaseVisualContainer",
  componentId: "sc-y6iv6t-4"
})(["height:20px;width:", ";margin-right:", ";display:flex;justify-content:center;align-items:center;flex-shrink:0;"], get('space.3'), get('space.2'));
const ColoredVisualContainer = styled(BaseVisualContainer).withConfig({
  displayName: "Item__ColoredVisualContainer",
  componentId: "sc-y6iv6t-5"
})(["svg{fill:", ";font-size:", ";}"], ({
  variant,
  disabled
}) => getItemVariant(variant, disabled).iconColor, get('fontSizes.0'));
const LeadingVisualContainer = styled(ColoredVisualContainer).withConfig({
  displayName: "Item__LeadingVisualContainer",
  componentId: "sc-y6iv6t-6"
})(["display:flex;flex-direction:column;justify-content:center;"]);
const TrailingContent = styled(ColoredVisualContainer).withConfig({
  displayName: "Item__TrailingContent",
  componentId: "sc-y6iv6t-7"
})(["color:", ";margin-left:", ";margin-right:0;width:auto;div:nth-child(2){margin-left:", ";}"], ({
  variant,
  disabled
}) => getItemVariant(variant, disabled).annotationColor, get('space.2'), get('space.2'));
const DescriptionContainer = styled.span.withConfig({
  displayName: "Item__DescriptionContainer",
  componentId: "sc-y6iv6t-8"
})(["color:", ";font-size:", ";line-height:16px;margin-left:var(--description-container-margin-left);min-width:0;flex-grow:1;flex-basis:var(--description-container-flex-basis);"], get('colors.fg.muted'), get('fontSizes.0'));
const MultiSelectIcon = styled.svg.withConfig({
  displayName: "Item__MultiSelectIcon",
  componentId: "sc-y6iv6t-9"
})(["rect{fill:", ";stroke:", ";shape-rendering:auto;}path{fill:", ";boxshadow:", ";opacity:", ";}"], ({
  selected
}) => selected ? get('colors.accent.fg') : get('colors.canvas.default'), ({
  selected
}) => selected ? get('colors.accent.fg') : get('colors.border.default'), get('colors.fg.onEmphasis'), get('shadow.small'), ({
  selected
}) => selected ? 1 : 0);

/**
 * An actionable or selectable `Item` with an optional icon and description.
 */
const Item = /*#__PURE__*/React.forwardRef((itemProps, ref) => {
  const $ = c(78);
  let Component;
  let LeadingVisual;
  let TrailingIcon;
  let TrailingVisual;
  let children;
  let description;
  let disabled;
  let id;
  let onAction;
  let onClick;
  let onKeyPress;
  let props;
  let selected;
  let selectionVariant;
  let showDivider;
  let t0;
  let t1;
  let text;
  let trailingText;
  if ($[0] !== itemProps) {
    ({
      as: Component,
      text,
      description,
      descriptionVariant: t0,
      selected,
      selectionVariant,
      leadingVisual: LeadingVisual,
      trailingIcon: TrailingIcon,
      trailingVisual: TrailingVisual,
      trailingText,
      variant: t1,
      showDivider,
      disabled,
      onAction,
      onKeyPress,
      children,
      onClick,
      id,
      ...props
    } = itemProps);
    $[0] = itemProps;
    $[1] = Component;
    $[2] = LeadingVisual;
    $[3] = TrailingIcon;
    $[4] = TrailingVisual;
    $[5] = children;
    $[6] = description;
    $[7] = disabled;
    $[8] = id;
    $[9] = onAction;
    $[10] = onClick;
    $[11] = onKeyPress;
    $[12] = props;
    $[13] = selected;
    $[14] = selectionVariant;
    $[15] = showDivider;
    $[16] = t0;
    $[17] = t1;
    $[18] = text;
    $[19] = trailingText;
  } else {
    Component = $[1];
    LeadingVisual = $[2];
    TrailingIcon = $[3];
    TrailingVisual = $[4];
    children = $[5];
    description = $[6];
    disabled = $[7];
    id = $[8];
    onAction = $[9];
    onClick = $[10];
    onKeyPress = $[11];
    props = $[12];
    selected = $[13];
    selectionVariant = $[14];
    showDivider = $[15];
    t0 = $[16];
    t1 = $[17];
    text = $[18];
    trailingText = $[19];
  }
  const descriptionVariant = t0 === undefined ? "inline" : t0;
  const variant = t1 === undefined ? "default" : t1;
  const labelId = useId();
  const descriptionId = useId();
  let t2;
  if ($[20] !== disabled || $[21] !== itemProps || $[22] !== onAction || $[23] !== onKeyPress) {
    t2 = event => {
      var _onKeyPress;
      if (disabled) {
        return;
      }
      (_onKeyPress = onKeyPress) === null || _onKeyPress === void 0 ? void 0 : _onKeyPress(event);
      if (!event.defaultPrevented && [" ", "Enter"].includes(event.key)) {
        var _onAction;
        (_onAction = onAction) === null || _onAction === void 0 ? void 0 : _onAction(itemProps, event);
      }
    };
    $[20] = disabled;
    $[21] = itemProps;
    $[22] = onAction;
    $[23] = onKeyPress;
    $[24] = t2;
  } else {
    t2 = $[24];
  }
  const keyPressHandler = t2;
  let t3;
  if ($[25] !== disabled || $[26] !== itemProps || $[27] !== onAction || $[28] !== onClick) {
    t3 = event_0 => {
      var _onClick;
      if (disabled) {
        return;
      }
      (_onClick = onClick) === null || _onClick === void 0 ? void 0 : _onClick(event_0);
      if (!event_0.defaultPrevented) {
        var _onAction2;
        (_onAction2 = onAction) === null || _onAction2 === void 0 ? void 0 : _onAction2(itemProps, event_0);
      }
    };
    $[25] = disabled;
    $[26] = itemProps;
    $[27] = onAction;
    $[28] = onClick;
    $[29] = t3;
  } else {
    t3 = $[29];
  }
  const clickHandler = t3;
  const {
    theme
  } = useTheme();
  const t4 = disabled ? undefined : -1;
  const t5 = text ? labelId : undefined;
  const t6 = description ? descriptionId : undefined;
  let t7;
  if ($[30] !== selected || $[31] !== selectionVariant || $[32] !== (theme === null || theme === void 0 ? void 0 : theme.colors)) {
    t7 = !!selected === selected && /*#__PURE__*/jsx(BaseVisualContainer, {
      children: selectionVariant === "multiple" ? /*#__PURE__*/jsx(Fragment, {
        children: /*#__PURE__*/jsxs(MultiSelectIcon, {
          selected: selected,
          width: "16",
          height: "16",
          viewBox: "0 0 16 16",
          xmlns: "http://www.w3.org/2000/svg",
          "aria-hidden": "true",
          children: [/*#__PURE__*/jsx("rect", {
            x: "2",
            y: "2",
            width: "12",
            height: "12",
            rx: "4"
          }), /*#__PURE__*/jsx("path", {
            fillRule: "evenodd",
            strokeWidth: "0",
            d: "M4.03231 8.69862C3.84775 8.20646 4.49385 7.77554 4.95539 7.77554C5.41693 7.77554 6.80154 9.85246 6.80154 9.85246C6.80154 9.85246 10.2631 4.314 10.4938 4.08323C10.7246 3.85246 11.8785 4.08323 11.4169 5.00631C11.0081 5.82388 7.26308 11.4678 7.26308 11.4678C7.26308 11.4678 6.80154 12.1602 6.34 11.4678C5.87846 10.7755 4.21687 9.19077 4.03231 8.69862Z"
          })]
        })
      }) : selected && /*#__PURE__*/jsx(CheckIcon, {
        fill: theme === null || theme === void 0 ? void 0 : theme.colors.fg.default
      })
    });
    $[30] = selected;
    $[31] = selectionVariant;
    $[32] = theme === null || theme === void 0 ? void 0 : theme.colors;
    $[33] = t7;
  } else {
    t7 = $[33];
  }
  let t8;
  if ($[34] !== LeadingVisual || $[35] !== disabled || $[36] !== variant) {
    t8 = LeadingVisual && /*#__PURE__*/jsx(LeadingVisualContainer, {
      variant: variant,
      disabled: disabled,
      children: /*#__PURE__*/jsx(LeadingVisual, {})
    });
    $[34] = LeadingVisual;
    $[35] = disabled;
    $[36] = variant;
    $[37] = t8;
  } else {
    t8 = $[37];
  }
  const t9 = descriptionVariant === "inline" ? "row" : "column";
  let t10;
  if ($[38] !== t9) {
    t10 = {
      "--main-content-flex-direction": t9
    };
    $[38] = t9;
    $[39] = t10;
  } else {
    t10 = $[39];
  }
  const t11 = t10;
  let t12;
  if ($[40] !== labelId || $[41] !== text) {
    t12 = text ? /*#__PURE__*/jsx(TextContainer, {
      id: labelId,
      children: text
    }) : null;
    $[40] = labelId;
    $[41] = text;
    $[42] = t12;
  } else {
    t12 = $[42];
  }
  let t13;
  if ($[43] !== description || $[44] !== descriptionId || $[45] !== descriptionVariant || $[46] !== theme) {
    t13 = description ? /*#__PURE__*/jsx(DescriptionContainer, {
      id: descriptionId,
      style: {
        "--description-container-margin-left": descriptionVariant === "inline" ? get("space.2")(theme) : 0,
        "--description-container-flex-basis": descriptionVariant === "inline" ? 0 : "auto"
      },
      children: descriptionVariant === "block" ? description : /*#__PURE__*/jsx(Truncate, {
        title: description,
        inline: true,
        maxWidth: "100%",
        children: description
      })
    }) : null;
    $[43] = description;
    $[44] = descriptionId;
    $[45] = descriptionVariant;
    $[46] = theme;
    $[47] = t13;
  } else {
    t13 = $[47];
  }
  let t14;
  if ($[48] !== children || $[49] !== t11 || $[50] !== t12 || $[51] !== t13) {
    t14 = /*#__PURE__*/jsxs(MainContent, {
      style: t11,
      children: [children, t12, t13]
    });
    $[48] = children;
    $[49] = t11;
    $[50] = t12;
    $[51] = t13;
    $[52] = t14;
  } else {
    t14 = $[52];
  }
  let t15;
  if ($[53] !== TrailingIcon || $[54] !== TrailingVisual || $[55] !== disabled || $[56] !== trailingText || $[57] !== variant) {
    t15 = TrailingVisual ? /*#__PURE__*/jsx(TrailingContent, {
      variant: variant,
      disabled: disabled,
      children: typeof TrailingVisual !== "string" && isValidElementType(TrailingVisual) ? /*#__PURE__*/jsx(TrailingVisual, {}) : TrailingVisual
    }) : TrailingIcon || trailingText ? /*#__PURE__*/jsxs(TrailingContent, {
      variant: variant,
      disabled: disabled,
      children: [trailingText, TrailingIcon && /*#__PURE__*/jsx(TrailingIcon, {})]
    }) : null;
    $[53] = TrailingIcon;
    $[54] = TrailingVisual;
    $[55] = disabled;
    $[56] = trailingText;
    $[57] = variant;
    $[58] = t15;
  } else {
    t15 = $[58];
  }
  let t16;
  if ($[59] !== t14 || $[60] !== t15) {
    t16 = /*#__PURE__*/jsxs(DividedContent, {
      children: [t14, t15]
    });
    $[59] = t14;
    $[60] = t15;
    $[61] = t16;
  } else {
    t16 = $[61];
  }
  let t17;
  if ($[62] !== Component || $[63] !== clickHandler || $[64] !== id || $[65] !== keyPressHandler || $[66] !== props || $[67] !== ref || $[68] !== selected || $[69] !== showDivider || $[70] !== t16 || $[71] !== t4 || $[72] !== t5 || $[73] !== t6 || $[74] !== t7 || $[75] !== t8 || $[76] !== variant) {
    t17 = /*#__PURE__*/jsxs(StyledItem, {
      ref: ref,
      as: Component,
      tabIndex: t4,
      variant: variant,
      showDivider: showDivider,
      "aria-selected": selected,
      "aria-labelledby": t5,
      "aria-describedby": t6,
      ...props,
      "data-id": id,
      onKeyPress: keyPressHandler,
      onClick: clickHandler,
      children: [t7, t8, t16]
    });
    $[62] = Component;
    $[63] = clickHandler;
    $[64] = id;
    $[65] = keyPressHandler;
    $[66] = props;
    $[67] = ref;
    $[68] = selected;
    $[69] = showDivider;
    $[70] = t16;
    $[71] = t4;
    $[72] = t5;
    $[73] = t6;
    $[74] = t7;
    $[75] = t8;
    $[76] = variant;
    $[77] = t17;
  } else {
    t17 = $[77];
  }
  return t17;
});
Item.displayName = 'ActionList.Item';

export { Item, TextContainer };
