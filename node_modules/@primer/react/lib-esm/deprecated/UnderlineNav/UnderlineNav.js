import { c } from 'react-compiler-runtime';
import { clsx } from 'clsx';
import styled from 'styled-components';
import { get } from '../../constants.js';
import sx from '../../sx.js';
import getGlobalFocusStyles from '../../internal/utils/getGlobalFocusStyles.js';
import { jsxs, jsx } from 'react/jsx-runtime';

const ITEM_CLASS = 'PRC-UnderlineNav-item';
const SELECTED_CLASS = 'PRC-selected';
const UnderlineNavBase = styled.nav.withConfig({
  displayName: "UnderlineNav__UnderlineNavBase",
  componentId: "sc-11ejk33-0"
})(["display:flex;justify-content:space-between;border-bottom:1px solid ", ";&.PRC-UnderlineNav--right{justify-content:flex-end;.PRC-UnderlineNav-item{margin-right:0;margin-left:", ";}.PRC-UnderlineNav-actions{flex:1 1 auto;}}&.PRC-UnderlineNav--full{display:block;}.PRC-UnderlineNav-body{display:flex;margin-bottom:-1px;}.PRC-UnderlineNav-actions{align-self:center;}", ";"], get('colors.border.muted'), get('space.3'), sx);
function UnderlineNav(t0) {
  const $ = c(24);
  let actions;
  let align;
  let children;
  let className;
  let full;
  let label;
  let rest;
  let theme;
  if ($[0] !== t0) {
    ({
      actions,
      className,
      align,
      children,
      full,
      label,
      theme,
      ...rest
    } = t0);
    $[0] = t0;
    $[1] = actions;
    $[2] = align;
    $[3] = children;
    $[4] = className;
    $[5] = full;
    $[6] = label;
    $[7] = rest;
    $[8] = theme;
  } else {
    actions = $[1];
    align = $[2];
    children = $[3];
    className = $[4];
    full = $[5];
    label = $[6];
    rest = $[7];
    theme = $[8];
  }
  const t1 = align && `PRC-UnderlineNav--${align}`;
  const t2 = full && "PRC-UnderlineNav--full";
  let t3;
  if ($[9] !== className || $[10] !== t1 || $[11] !== t2) {
    t3 = clsx(className, "PRC-UnderlineNav", t1, t2);
    $[9] = className;
    $[10] = t1;
    $[11] = t2;
    $[12] = t3;
  } else {
    t3 = $[12];
  }
  const classes = t3;
  let t4;
  if ($[13] !== children) {
    t4 = /*#__PURE__*/jsx("div", {
      className: "PRC-UnderlineNav-body",
      children: children
    });
    $[13] = children;
    $[14] = t4;
  } else {
    t4 = $[14];
  }
  let t5;
  if ($[15] !== actions) {
    t5 = actions && /*#__PURE__*/jsx("div", {
      className: "PRC-UnderlineNav-actions",
      children: actions
    });
    $[15] = actions;
    $[16] = t5;
  } else {
    t5 = $[16];
  }
  let t6;
  if ($[17] !== classes || $[18] !== label || $[19] !== rest || $[20] !== t4 || $[21] !== t5 || $[22] !== theme) {
    t6 = /*#__PURE__*/jsxs(UnderlineNavBase, {
      className: classes,
      "aria-label": label,
      theme: theme,
      ...rest,
      children: [t4, t5]
    });
    $[17] = classes;
    $[18] = label;
    $[19] = rest;
    $[20] = t4;
    $[21] = t5;
    $[22] = theme;
    $[23] = t6;
  } else {
    t6 = $[23];
  }
  return t6;
}
const UnderlineNavLink = styled.a.attrs(props => ({
  className: clsx(ITEM_CLASS, props.selected && SELECTED_CLASS, props.className)
})).withConfig({
  displayName: "UnderlineNav__UnderlineNavLink",
  componentId: "sc-11ejk33-1"
})(["padding:", " ", ";margin-right:", ";font-size:", ";line-height:", ";color:", ";text-align:center;border-bottom:2px solid transparent;text-decoration:none;&:hover,&:focus{color:", ";text-decoration:none;border-bottom-color:", ";transition:border-bottom-color 0.2s ease;.PRC-UnderlineNav-octicon{color:", ";}}&.PRC-selected{color:", ";border-bottom-color:", ";.PRC-UnderlineNav-octicon{color:", ";}}", ";", ";"], get('space.3'), get('space.2'), get('space.3'), get('fontSizes.1'), get('lineHeights.default'), get('colors.fg.default'), get('colors.fg.default'), get('colors.neutral.muted'), get('colors.fg.muted'), get('colors.fg.default'), get('colors.primer.border.active'), get('colors.fg.default'), getGlobalFocusStyles('-8px'), sx);
UnderlineNavLink.displayName = 'UnderlineNav.Link';
/**
 * @deprecated UnderlineNav is deprecated and will be replaced by the draft `UnderlineNav` in the next major release. See https://primer.style/react/drafts/UnderlineNav2 for more details.
 */
var UnderlineNav$1 = Object.assign(UnderlineNav, {
  Link: UnderlineNavLink
});

export { UnderlineNav$1 as default };
