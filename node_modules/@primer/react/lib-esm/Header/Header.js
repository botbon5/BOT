import { c } from 'react-compiler-runtime';
import React from 'react';
import { clsx } from 'clsx';
import classes from './Header.module.css.js';
import { BoxWithFallback } from '../internal/components/BoxWithFallback.js';
import { jsx } from 'react/jsx-runtime';

const Header = /*#__PURE__*/React.forwardRef(function Header(t0, forwardRef) {
  const $ = c(13);
  let children;
  let className;
  let rest;
  let t1;
  if ($[0] !== t0) {
    ({
      children,
      className,
      as: t1,
      ...rest
    } = t0);
    $[0] = t0;
    $[1] = children;
    $[2] = className;
    $[3] = rest;
    $[4] = t1;
  } else {
    children = $[1];
    className = $[2];
    rest = $[3];
    t1 = $[4];
  }
  const as = t1 === undefined ? "header" : t1;
  let t2;
  if ($[5] !== className) {
    t2 = clsx(className, classes.Header);
    $[5] = className;
    $[6] = t2;
  } else {
    t2 = $[6];
  }
  let t3;
  if ($[7] !== as || $[8] !== children || $[9] !== forwardRef || $[10] !== rest || $[11] !== t2) {
    t3 = /*#__PURE__*/jsx(BoxWithFallback, {
      as: as,
      ref: forwardRef,
      className: t2,
      ...rest,
      children: children
    });
    $[7] = as;
    $[8] = children;
    $[9] = forwardRef;
    $[10] = rest;
    $[11] = t2;
    $[12] = t3;
  } else {
    t3 = $[12];
  }
  return t3;
});
Header.displayName = 'Header';
const HeaderItem = /*#__PURE__*/React.forwardRef(function HeaderItem(t0, forwardRef) {
  const $ = c(13);
  let children;
  let className;
  let full;
  let rest;
  if ($[0] !== t0) {
    ({
      children,
      className,
      full,
      ...rest
    } = t0);
    $[0] = t0;
    $[1] = children;
    $[2] = className;
    $[3] = full;
    $[4] = rest;
  } else {
    children = $[1];
    className = $[2];
    full = $[3];
    rest = $[4];
  }
  let t1;
  if ($[5] !== className) {
    t1 = clsx(className, classes.HeaderItem);
    $[5] = className;
    $[6] = t1;
  } else {
    t1 = $[6];
  }
  let t2;
  if ($[7] !== children || $[8] !== forwardRef || $[9] !== full || $[10] !== rest || $[11] !== t1) {
    t2 = /*#__PURE__*/jsx(BoxWithFallback, {
      ref: forwardRef,
      className: t1,
      "data-full": full,
      ...rest,
      children: children
    });
    $[7] = children;
    $[8] = forwardRef;
    $[9] = full;
    $[10] = rest;
    $[11] = t1;
    $[12] = t2;
  } else {
    t2 = $[12];
  }
  return t2;
});
HeaderItem.displayName = 'Header.Item';
const HeaderLink = /*#__PURE__*/React.forwardRef(function HeaderLink(t0, forwardRef) {
  const $ = c(13);
  let children;
  let className;
  let rest;
  let t1;
  if ($[0] !== t0) {
    ({
      children,
      className,
      as: t1,
      ...rest
    } = t0);
    $[0] = t0;
    $[1] = children;
    $[2] = className;
    $[3] = rest;
    $[4] = t1;
  } else {
    children = $[1];
    className = $[2];
    rest = $[3];
    t1 = $[4];
  }
  const as = t1 === undefined ? "a" : t1;
  let t2;
  if ($[5] !== className) {
    t2 = clsx(className, classes.HeaderLink);
    $[5] = className;
    $[6] = t2;
  } else {
    t2 = $[6];
  }
  let t3;
  if ($[7] !== as || $[8] !== children || $[9] !== forwardRef || $[10] !== rest || $[11] !== t2) {
    t3 = /*#__PURE__*/jsx(BoxWithFallback, {
      as: as,
      ref: forwardRef,
      className: t2,
      ...rest,
      children: children
    });
    $[7] = as;
    $[8] = children;
    $[9] = forwardRef;
    $[10] = rest;
    $[11] = t2;
    $[12] = t3;
  } else {
    t3 = $[12];
  }
  return t3;
});
HeaderLink.displayName = 'Header.Link';
var Header$1 = Object.assign(Header, {
  Link: HeaderLink,
  Item: HeaderItem
});

export { Header$1 as default };
