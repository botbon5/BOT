import { c } from 'react-compiler-runtime';
import React, { forwardRef, useRef } from 'react';
import { IconButton } from '../Button/IconButton.js';
import useDialog from '../hooks/useDialog.js';
import { useRefObjectAsForwardedRef } from '../hooks/useRefObjectAsForwardedRef.js';
import { XIcon } from '@primer/octicons-react';
import { clsx } from 'clsx';
import classes from './Dialog.module.css.js';
import { BoxWithFallback } from '../internal/components/BoxWithFallback.js';
import { jsxs, Fragment, jsx } from 'react/jsx-runtime';

const noop = () => null;
function DialogHeader(t0) {
  const $ = c(12);
  let children;
  let className;
  let rest;
  if ($[0] !== t0) {
    ({
      children,
      className,
      ...rest
    } = t0);
    $[0] = t0;
    $[1] = children;
    $[2] = className;
    $[3] = rest;
  } else {
    children = $[1];
    className = $[2];
    rest = $[3];
  }
  if (React.Children.toArray(children).every(_temp)) {
    let t1;
    if ($[4] !== children) {
      t1 = /*#__PURE__*/jsx("span", {
        className: classes.HeaderChild,
        children: children
      });
      $[4] = children;
      $[5] = t1;
    } else {
      t1 = $[5];
    }
    children = t1;
  }
  const t1 = rest;
  let t2;
  if ($[6] !== className) {
    t2 = clsx(classes.Header, className);
    $[6] = className;
    $[7] = t2;
  } else {
    t2 = $[7];
  }
  let t3;
  if ($[8] !== children || $[9] !== rest || $[10] !== t2) {
    t3 = /*#__PURE__*/jsx(BoxWithFallback, {
      as: "div",
      ...t1,
      className: t2,
      children: children
    });
    $[8] = children;
    $[9] = rest;
    $[10] = t2;
    $[11] = t3;
  } else {
    t3 = $[11];
  }
  return t3;
}
function _temp(ch) {
  return typeof ch === "string";
}
const Dialog = /*#__PURE__*/forwardRef((t0, forwardedRef) => {
  const $ = c(23);
  let children;
  let className;
  let initialFocusRef;
  let isOpen;
  let props;
  let returnFocusRef;
  let t1;
  if ($[0] !== t0) {
    ({
      children,
      onDismiss: t1,
      isOpen,
      initialFocusRef,
      returnFocusRef,
      className,
      ...props
    } = t0);
    $[0] = t0;
    $[1] = children;
    $[2] = className;
    $[3] = initialFocusRef;
    $[4] = isOpen;
    $[5] = props;
    $[6] = returnFocusRef;
    $[7] = t1;
  } else {
    children = $[1];
    className = $[2];
    initialFocusRef = $[3];
    isOpen = $[4];
    props = $[5];
    returnFocusRef = $[6];
    t1 = $[7];
  }
  const onDismiss = t1 === undefined ? noop : t1;
  const overlayRef = useRef(null);
  const modalRef = useRef(null);
  useRefObjectAsForwardedRef(forwardedRef, modalRef);
  const closeButtonRef = useRef(null);
  let t2;
  if ($[8] !== onDismiss || $[9] !== returnFocusRef) {
    t2 = () => {
      onDismiss();
      if (returnFocusRef && returnFocusRef.current) {
        returnFocusRef.current.focus();
      }
    };
    $[8] = onDismiss;
    $[9] = returnFocusRef;
    $[10] = t2;
  } else {
    t2 = $[10];
  }
  const onCloseClick = t2;
  let t3;
  if ($[11] !== initialFocusRef || $[12] !== isOpen || $[13] !== onCloseClick || $[14] !== returnFocusRef) {
    t3 = {
      modalRef,
      onDismiss: onCloseClick,
      isOpen,
      initialFocusRef,
      closeButtonRef,
      returnFocusRef,
      overlayRef
    };
    $[11] = initialFocusRef;
    $[12] = isOpen;
    $[13] = onCloseClick;
    $[14] = returnFocusRef;
    $[15] = t3;
  } else {
    t3 = $[15];
  }
  const {
    getDialogProps
  } = useDialog(t3);
  let t4;
  if ($[16] !== children || $[17] !== className || $[18] !== getDialogProps || $[19] !== isOpen || $[20] !== onCloseClick || $[21] !== props) {
    t4 = isOpen ? /*#__PURE__*/jsxs(Fragment, {
      children: [/*#__PURE__*/jsx(BoxWithFallback, {
        as: "span",
        className: classes.Overlay,
        ref: overlayRef
      }), /*#__PURE__*/jsxs(BoxWithFallback, {
        as: "div",
        tabIndex: -1,
        ref: modalRef,
        role: "dialog",
        "aria-modal": "true",
        ...props,
        ...getDialogProps(),
        className: clsx(classes.Dialog, className),
        "data-width": props.wide ? "wide" : props.narrow ? "narrow" : "default",
        children: [/*#__PURE__*/jsx(IconButton, {
          icon: XIcon,
          ref: closeButtonRef,
          onClick: onCloseClick,
          "aria-label": "Close",
          variant: "invisible",
          className: classes.CloseIcon
        }), children]
      })]
    }) : null;
    $[16] = children;
    $[17] = className;
    $[18] = getDialogProps;
    $[19] = isOpen;
    $[20] = onCloseClick;
    $[21] = props;
    $[22] = t4;
  } else {
    t4 = $[22];
  }
  return t4;
});
DialogHeader.displayName = 'Dialog.Header';
Dialog.displayName = 'Dialog';
var Dialog$1 = Object.assign(Dialog, {
  Header: DialogHeader
});

export { Dialog$1 as default };
