import { c } from 'react-compiler-runtime';
import React from 'react';
import classes from './ButtonGroup.module.css.js';
import { clsx } from 'clsx';
import { useFocusZone } from '../hooks/useFocusZone.js';
import { BoxWithFallback } from '../internal/components/BoxWithFallback.js';
import { jsx } from 'react/jsx-runtime';
import { useProvidedRefOrCreate } from '../hooks/useProvidedRefOrCreate.js';
import { FocusKeys } from '@primer/behaviors';

const ButtonGroup = /*#__PURE__*/React.forwardRef(function ButtonGroup(t0, forwardRef) {
  const $ = c(18);
  let children;
  let className;
  let rest;
  let role;
  if ($[0] !== t0) {
    ({
      children,
      className,
      role,
      ...rest
    } = t0);
    $[0] = t0;
    $[1] = children;
    $[2] = className;
    $[3] = rest;
    $[4] = role;
  } else {
    children = $[1];
    className = $[2];
    rest = $[3];
    role = $[4];
  }
  let t1;
  if ($[5] !== children) {
    t1 = React.Children.map(children, _temp);
    $[5] = children;
    $[6] = t1;
  } else {
    t1 = $[6];
  }
  const buttons = t1;
  const buttonRef = useProvidedRefOrCreate(forwardRef);
  const t2 = role !== "toolbar";
  let t3;
  if ($[7] !== buttonRef || $[8] !== t2) {
    t3 = {
      containerRef: buttonRef,
      disabled: t2,
      bindKeys: FocusKeys.ArrowHorizontal,
      focusOutBehavior: "wrap"
    };
    $[7] = buttonRef;
    $[8] = t2;
    $[9] = t3;
  } else {
    t3 = $[9];
  }
  useFocusZone(t3);
  let t4;
  if ($[10] !== className) {
    t4 = clsx(className, classes.ButtonGroup);
    $[10] = className;
    $[11] = t4;
  } else {
    t4 = $[11];
  }
  let t5;
  if ($[12] !== buttonRef || $[13] !== buttons || $[14] !== rest || $[15] !== role || $[16] !== t4) {
    t5 = /*#__PURE__*/jsx(BoxWithFallback, {
      ref: buttonRef,
      className: t4,
      role: role,
      ...rest,
      children: buttons
    });
    $[12] = buttonRef;
    $[13] = buttons;
    $[14] = rest;
    $[15] = role;
    $[16] = t4;
    $[17] = t5;
  } else {
    t5 = $[17];
  }
  return t5;
});
ButtonGroup.displayName = 'ButtonGroup';
function _temp(child, index) {
  return /*#__PURE__*/jsx("div", {
    children: child
  }, index);
}
_temp.displayName = "_temp";

export { ButtonGroup as default };
