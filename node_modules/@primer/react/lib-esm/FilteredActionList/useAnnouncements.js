import { c } from 'react-compiler-runtime';
import { announce } from '@primer/live-region-element';
import { useEffect, useRef } from 'react';

// we add a delay so that it does not interrupt default screen reader announcement and queues after it
const delayMs = 500;
const useFirstRender = () => {
  const firstRender = useRef(true);
  useEffect(() => {
    firstRender.current = false;
  }, []);
  return firstRender.current;
};
const getItemWithActiveDescendant = (listRef, items) => {
  const listElement = listRef.current;
  const activeItemElement = listElement === null || listElement === void 0 ? void 0 : listElement.querySelector('[data-is-active-descendant]');
  if (!listElement || !(activeItemElement !== null && activeItemElement !== void 0 && activeItemElement.textContent)) return;
  const optionElements = listElement.querySelectorAll('[role="option"]');
  const index = Array.from(optionElements).indexOf(activeItemElement);
  const activeItem = items[index];
  const text = activeItem === null || activeItem === void 0 ? void 0 : activeItem.text;
  const selected = activeItem === null || activeItem === void 0 ? void 0 : activeItem.selected;
  return {
    index,
    text,
    selected
  };
};
const useAnnouncements = (items, listContainerRef, inputRef, t0, t1, message) => {
  const $ = c(28);
  const enabled = t0 === undefined ? true : t0;
  const loading = t1 === undefined ? false : t1;
  let t2;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = document.querySelector("live-region");
    $[0] = t2;
  } else {
    t2 = $[0];
  }
  const liveRegion = t2;
  let t3;
  if ($[1] !== enabled) {
    t3 = (...t4) => {
      const args = t4;
      if (enabled) {
        return announce(...args);
      }
    };
    $[1] = enabled;
    $[2] = t3;
  } else {
    t3 = $[2];
  }
  const announce$1 = t3;
  let t4;
  if ($[3] !== announce$1 || $[4] !== inputRef.current || $[5] !== items || $[6] !== listContainerRef) {
    t4 = function announceInitialFocus() {
      const focusHandler = () => {
        window.requestAnimationFrame(() => {
          const activeItem = getItemWithActiveDescendant(listContainerRef, items);
          if (!activeItem) {
            return;
          }
          const {
            index,
            text,
            selected
          } = activeItem;
          const announcementText = ["Focus on filter text box and list of items", `Focused item: ${text}`, `${selected ? "selected" : "not selected"}`, `${index + 1} of ${items.length}`].join(", ");
          announce$1(announcementText, {
            delayMs,
            from: liveRegion ? liveRegion : undefined
          });
        });
      };
      const inputElement = inputRef.current;
      inputElement === null || inputElement === void 0 ? void 0 : inputElement.addEventListener("focus", focusHandler);
      return () => inputElement === null || inputElement === void 0 ? void 0 : inputElement.removeEventListener("focus", focusHandler);
    };
    $[3] = announce$1;
    $[4] = inputRef.current;
    $[5] = items;
    $[6] = listContainerRef;
    $[7] = t4;
  } else {
    t4 = $[7];
  }
  let t5;
  if ($[8] !== announce$1 || $[9] !== inputRef || $[10] !== items || $[11] !== listContainerRef) {
    t5 = [listContainerRef, inputRef, items, liveRegion, announce$1];
    $[8] = announce$1;
    $[9] = inputRef;
    $[10] = items;
    $[11] = listContainerRef;
    $[12] = t5;
  } else {
    t5 = $[12];
  }
  useEffect(t4, t5);
  const isFirstRender = useFirstRender();
  let t6;
  if ($[13] !== announce$1 || $[14] !== isFirstRender || $[15] !== items || $[16] !== listContainerRef || $[17] !== loading || $[18] !== (message === null || message === void 0 ? void 0 : message.description) || $[19] !== (message === null || message === void 0 ? void 0 : message.title)) {
    t6 = function announceListUpdates() {
      if (isFirstRender) {
        return;
      }
      liveRegion === null || liveRegion === void 0 ? void 0 : liveRegion.clear();
      if (items.length === 0 && !loading) {
        announce$1(`${message === null || message === void 0 ? void 0 : message.title}. ${message === null || message === void 0 ? void 0 : message.description}`, {
          delayMs
        });
        return;
      }
      window.requestAnimationFrame(() => {
        const activeItem_0 = getItemWithActiveDescendant(listContainerRef, items);
        if (!activeItem_0) {
          return;
        }
        const {
          index: index_0,
          text: text_0,
          selected: selected_0
        } = activeItem_0;
        const announcementText_0 = ["List updated", `Focused item: ${text_0}`, `${selected_0 ? "selected" : "not selected"}`, `${index_0 + 1} of ${items.length}`].join(", ");
        announce$1(announcementText_0, {
          delayMs,
          from: liveRegion ? liveRegion : undefined
        });
      });
    };
    $[13] = announce$1;
    $[14] = isFirstRender;
    $[15] = items;
    $[16] = listContainerRef;
    $[17] = loading;
    $[18] = message === null || message === void 0 ? void 0 : message.description;
    $[19] = message === null || message === void 0 ? void 0 : message.title;
    $[20] = t6;
  } else {
    t6 = $[20];
  }
  let t7;
  if ($[21] !== announce$1 || $[22] !== isFirstRender || $[23] !== items || $[24] !== listContainerRef || $[25] !== loading || $[26] !== message) {
    t7 = [announce$1, isFirstRender, items, listContainerRef, liveRegion, loading, message];
    $[21] = announce$1;
    $[22] = isFirstRender;
    $[23] = items;
    $[24] = listContainerRef;
    $[25] = loading;
    $[26] = message;
    $[27] = t7;
  } else {
    t7 = $[27];
  }
  useEffect(t6, t7);
};

export { useAnnouncements };
