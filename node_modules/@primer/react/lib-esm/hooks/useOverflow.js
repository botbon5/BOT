import { c } from 'react-compiler-runtime';
import { useState, useEffect } from 'react';

function useOverflow(ref) {
  const $ = c(4);
  const [hasOverflow, setHasOverflow] = useState(false);
  let t0;
  if ($[0] !== ref.current) {
    t0 = () => {
      if (ref.current === null) {
        return;
      }
      const observer = new ResizeObserver(entries => {
        for (const entry of entries) {
          if (entry.target.scrollHeight > entry.target.clientHeight || entry.target.scrollWidth > entry.target.clientWidth) {
            setHasOverflow(true);
            break;
          }
        }
      });
      observer.observe(ref.current);
      return () => {
        observer.disconnect();
      };
    };
    $[0] = ref.current;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  let t1;
  if ($[2] !== ref) {
    t1 = [ref];
    $[2] = ref;
    $[3] = t1;
  } else {
    t1 = $[3];
  }
  useEffect(t0, t1);
  return hasOverflow;
}

export { useOverflow };
