'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var reactCompilerRuntime = require('react-compiler-runtime');
var clsx = require('clsx');
var React = require('react');
var styled = require('styled-components');
var constants = require('../constants.js');
var sx = require('../sx.js');
var jsxRuntime = require('react/jsx-runtime');
var useId = require('../hooks/useId.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);
var styled__default = /*#__PURE__*/_interopDefault(styled);

const TooltipBase = styled__default.default.span.withConfig({
  displayName: "Tooltip__TooltipBase",
  componentId: "sc-17tf59c-0"
})(["position:relative;display:inline-block;&::after{position:absolute;z-index:1000000;display:none;padding:0.5em 0.75em;font:normal normal 11px/1.5 ", ";-webkit-font-smoothing:subpixel-antialiased;color:var(--tooltip-fgColor,", ");text-align:center;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-wrap:break-word;white-space:pre;pointer-events:none;content:attr(aria-label);background:var(--tooltip-bgColor,", ");border-radius:", ";opacity:0;}@keyframes tooltip-appear{from{opacity:0;}to{opacity:1;}}&:hover,&:active,&:focus,&:focus-within{&::after{display:inline-block;text-decoration:none;animation-name:tooltip-appear;animation-duration:0.1s;animation-fill-mode:forwards;animation-timing-function:ease-in;animation-delay:0s;}}&.tooltipped-no-delay:hover,&.tooltipped-no-delay:active,&.tooltipped-no-delay:focus,&.tooltipped-no-delay:focus-within{&::after{animation-delay:0s;}}&.tooltipped-multiline:hover,&.tooltipped-multiline:active,&.tooltipped-multiline:focus,&.tooltipped-multiline:focus-within{&::after{display:table-cell;}}&.tooltipped-s,&.tooltipped-se,&.tooltipped-sw{&::after{top:100%;right:50%;margin-top:6px;}}&.tooltipped-se{&::after{right:auto;left:50%;margin-left:-", ";}}&.tooltipped-sw::after{margin-right:-", ";}&.tooltipped-n,&.tooltipped-ne,&.tooltipped-nw{&::after{right:50%;bottom:100%;margin-bottom:6px;}}&.tooltipped-ne{&::after{right:auto;left:50%;margin-left:-", ";}}&.tooltipped-nw::after{margin-right:-", ";}&.tooltipped-s::after,&.tooltipped-n::after{transform:translateX(50%);}&.tooltipped-w{&::after{right:100%;bottom:50%;margin-right:6px;transform:translateY(50%);}}&.tooltipped-e{&::after{bottom:50%;left:100%;margin-left:6px;transform:translateY(50%);}}&.tooltipped-multiline{&::after{width:max-content;max-width:250px;word-wrap:break-word;white-space:pre-line;border-collapse:separate;}&.tooltipped-s::after,&.tooltipped-n::after{right:auto;left:50%;transform:translateX(-50%);}&.tooltipped-w::after,&.tooltipped-e::after{right:100%;}}&.tooltipped-align-right-2::after{right:0;margin-right:0;}&.tooltipped-align-left-2::after{left:0;margin-left:0;}", ";"], constants.get('fonts.normal'), constants.get('colors.fg.onEmphasis'), constants.get('colors.neutral.emphasisPlus'), constants.get('radii.2'), constants.get('space.3'), constants.get('space.3'), constants.get('space.3'), constants.get('space.3'), sx.default);

/**
 * @deprecated
 */

const TooltipContext = /*#__PURE__*/React__default.default.createContext({});

/**
 * @deprecated
 */
function Tooltip(t0) {
  const $ = reactCompilerRuntime.c(27);
  let align;
  let children;
  let className;
  let id;
  let noDelay;
  let rest;
  let t1;
  let text;
  let wrap;
  if ($[0] !== t0) {
    ({
      direction: t1,
      children,
      className,
      text,
      noDelay,
      align,
      wrap,
      id,
      ...rest
    } = t0);
    $[0] = t0;
    $[1] = align;
    $[2] = children;
    $[3] = className;
    $[4] = id;
    $[5] = noDelay;
    $[6] = rest;
    $[7] = t1;
    $[8] = text;
    $[9] = wrap;
  } else {
    align = $[1];
    children = $[2];
    className = $[3];
    id = $[4];
    noDelay = $[5];
    rest = $[6];
    t1 = $[7];
    text = $[8];
    wrap = $[9];
  }
  const direction = t1 === undefined ? "n" : t1;
  const tooltipId = useId.useId(id);
  const t2 = `tooltipped-${direction}`;
  const t3 = align && `tooltipped-align-${align}-2`;
  const t4 = noDelay && "tooltipped-no-delay";
  const t5 = wrap && "tooltipped-multiline";
  let t6;
  if ($[10] !== className || $[11] !== t2 || $[12] !== t3 || $[13] !== t4 || $[14] !== t5) {
    t6 = clsx.clsx(className, t2, t3, t4, t5);
    $[10] = className;
    $[11] = t2;
    $[12] = t3;
    $[13] = t4;
    $[14] = t5;
    $[15] = t6;
  } else {
    t6 = $[15];
  }
  const classes = t6;
  let t7;
  let t8;
  if ($[16] !== tooltipId) {
    t8 = {
      tooltipId
    };
    $[16] = tooltipId;
    $[17] = t8;
  } else {
    t8 = $[17];
  }
  t7 = t8;
  const value = t7;
  let t9;
  if ($[18] !== children || $[19] !== classes || $[20] !== rest || $[21] !== text || $[22] !== tooltipId) {
    t9 = /*#__PURE__*/jsxRuntime.jsx(TooltipBase, {
      role: "tooltip",
      "aria-label": text,
      id: tooltipId,
      ...rest,
      className: classes,
      children: children
    });
    $[18] = children;
    $[19] = classes;
    $[20] = rest;
    $[21] = text;
    $[22] = tooltipId;
    $[23] = t9;
  } else {
    t9 = $[23];
  }
  let t10;
  if ($[24] !== t9 || $[25] !== value) {
    t10 = /*#__PURE__*/jsxRuntime.jsx(TooltipContext.Provider, {
      value: value,
      children: t9
    });
    $[24] = t9;
    $[25] = value;
    $[26] = t10;
  } else {
    t10 = $[26];
  }
  return t10;
}
Tooltip.alignments = ['left', 'right'];
Tooltip.directions = ['n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw'];

exports.TooltipContext = TooltipContext;
exports.default = Tooltip;
