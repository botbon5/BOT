'use strict';

var React = require('react');
var shared = require('./shared.js');
var ActionList_module = require('./ActionList.module.css.js');
var BoxWithFallback = require('../internal/components/BoxWithFallback.js');
var clsx = require('clsx');
var jsxRuntime = require('react/jsx-runtime');
var Truncate = require('../Truncate/Truncate.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const Description = ({
  variant = 'inline',
  sx,
  className,
  truncate,
  ...props
}) => {
  const {
    blockDescriptionId,
    inlineDescriptionId
  } = React__default.default.useContext(shared.ItemContext);
  const containerRef = React__default.default.useRef(null);
  const [computedTitle, setComputedTitle] = React__default.default.useState('');

  // Extract text content from rendered DOM for tooltip
  React__default.default.useEffect(() => {
    if (truncate && containerRef.current) {
      const textContent = containerRef.current.textContent || '';
      setComputedTitle(textContent);
    }
  }, [truncate, props.children]);
  const effectiveTitle = typeof props.children === 'string' ? props.children : computedTitle;
  if (variant === 'block' || !truncate) {
    return /*#__PURE__*/jsxRuntime.jsx(BoxWithFallback.BoxWithFallback, {
      as: "span",
      sx: sx,
      id: variant === 'block' ? blockDescriptionId : inlineDescriptionId,
      className: clsx.clsx(className, ActionList_module.Description),
      "data-component": "ActionList.Description",
      children: props.children
    });
  } else {
    return /*#__PURE__*/jsxRuntime.jsx(Truncate, {
      ref: containerRef,
      id: inlineDescriptionId,
      className: clsx.clsx(className, ActionList_module.Description),
      sx: sx,
      title: effectiveTitle,
      inline: true,
      maxWidth: "100%",
      "data-component": "ActionList.Description",
      children: props.children
    });
  }
};

exports.Description = Description;
