'use strict';

var reactCompilerRuntime = require('react-compiler-runtime');
var clsx = require('clsx');
var React = require('react');
var Timeline_module = require('./Timeline.module.css.js');
var BoxWithFallback = require('../internal/components/BoxWithFallback.js');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const Timeline = /*#__PURE__*/React__default.default.forwardRef((t0, forwardRef) => {
  const $ = reactCompilerRuntime.c(11);
  let className;
  let clipSidebar;
  let props;
  if ($[0] !== t0) {
    ({
      clipSidebar,
      className,
      ...props
    } = t0);
    $[0] = t0;
    $[1] = className;
    $[2] = clipSidebar;
    $[3] = props;
  } else {
    className = $[1];
    clipSidebar = $[2];
    props = $[3];
  }
  let t1;
  if ($[4] !== className) {
    t1 = clsx.clsx(className, Timeline_module.Timeline);
    $[4] = className;
    $[5] = t1;
  } else {
    t1 = $[5];
  }
  const t2 = clipSidebar ? "" : undefined;
  let t3;
  if ($[6] !== forwardRef || $[7] !== props || $[8] !== t1 || $[9] !== t2) {
    t3 = /*#__PURE__*/jsxRuntime.jsx(BoxWithFallback.BoxWithFallback, {
      ...props,
      className: t1,
      ref: forwardRef,
      "data-clip-sidebar": t2
    });
    $[6] = forwardRef;
    $[7] = props;
    $[8] = t1;
    $[9] = t2;
    $[10] = t3;
  } else {
    t3 = $[10];
  }
  return t3;
});
Timeline.displayName = 'Timeline';

/**
 * @deprecated Use the `TimelineItemProps` type instead
 */

const TimelineItem = /*#__PURE__*/React__default.default.forwardRef((t0, forwardRef) => {
  const $ = reactCompilerRuntime.c(11);
  let className;
  let condensed;
  let props;
  if ($[0] !== t0) {
    ({
      condensed,
      className,
      ...props
    } = t0);
    $[0] = t0;
    $[1] = className;
    $[2] = condensed;
    $[3] = props;
  } else {
    className = $[1];
    condensed = $[2];
    props = $[3];
  }
  let t1;
  if ($[4] !== className) {
    t1 = clsx.clsx(className, "Timeline-Item", Timeline_module.TimelineItem);
    $[4] = className;
    $[5] = t1;
  } else {
    t1 = $[5];
  }
  const t2 = condensed ? "" : undefined;
  let t3;
  if ($[6] !== forwardRef || $[7] !== props || $[8] !== t1 || $[9] !== t2) {
    t3 = /*#__PURE__*/jsxRuntime.jsx(BoxWithFallback.BoxWithFallback, {
      ...props,
      className: t1,
      ref: forwardRef,
      "data-condensed": t2
    });
    $[6] = forwardRef;
    $[7] = props;
    $[8] = t1;
    $[9] = t2;
    $[10] = t3;
  } else {
    t3 = $[10];
  }
  return t3;
});
TimelineItem.displayName = 'TimelineItem';
const TimelineBadge = t0 => {
  const $ = reactCompilerRuntime.c(8);
  let className;
  let props;
  if ($[0] !== t0) {
    ({
      className,
      ...props
    } = t0);
    $[0] = t0;
    $[1] = className;
    $[2] = props;
  } else {
    className = $[1];
    props = $[2];
  }
  let t1;
  if ($[3] !== className) {
    t1 = clsx.clsx(className, Timeline_module.TimelineBadge);
    $[3] = className;
    $[4] = t1;
  } else {
    t1 = $[4];
  }
  let t2;
  if ($[5] !== props || $[6] !== t1) {
    t2 = /*#__PURE__*/jsxRuntime.jsx("div", {
      className: Timeline_module.TimelineBadgeWrapper,
      children: /*#__PURE__*/jsxRuntime.jsx(BoxWithFallback.BoxWithFallback, {
        ...props,
        className: t1
      })
    });
    $[5] = props;
    $[6] = t1;
    $[7] = t2;
  } else {
    t2 = $[7];
  }
  return t2;
};
TimelineBadge.displayName = 'Timeline.Badge';
const TimelineBody = /*#__PURE__*/React__default.default.forwardRef((t0, forwardRef) => {
  const $ = reactCompilerRuntime.c(9);
  let className;
  let props;
  if ($[0] !== t0) {
    ({
      className,
      ...props
    } = t0);
    $[0] = t0;
    $[1] = className;
    $[2] = props;
  } else {
    className = $[1];
    props = $[2];
  }
  let t1;
  if ($[3] !== className) {
    t1 = clsx.clsx(className, Timeline_module.TimelineBody);
    $[3] = className;
    $[4] = t1;
  } else {
    t1 = $[4];
  }
  let t2;
  if ($[5] !== forwardRef || $[6] !== props || $[7] !== t1) {
    t2 = /*#__PURE__*/jsxRuntime.jsx(BoxWithFallback.BoxWithFallback, {
      ...props,
      className: t1,
      ref: forwardRef
    });
    $[5] = forwardRef;
    $[6] = props;
    $[7] = t1;
    $[8] = t2;
  } else {
    t2 = $[8];
  }
  return t2;
});
TimelineBody.displayName = 'TimelineBody';
const TimelineBreak = /*#__PURE__*/React__default.default.forwardRef((t0, forwardRef) => {
  const $ = reactCompilerRuntime.c(9);
  let className;
  let props;
  if ($[0] !== t0) {
    ({
      className,
      ...props
    } = t0);
    $[0] = t0;
    $[1] = className;
    $[2] = props;
  } else {
    className = $[1];
    props = $[2];
  }
  let t1;
  if ($[3] !== className) {
    t1 = clsx.clsx(className, Timeline_module.TimelineBreak);
    $[3] = className;
    $[4] = t1;
  } else {
    t1 = $[4];
  }
  let t2;
  if ($[5] !== forwardRef || $[6] !== props || $[7] !== t1) {
    t2 = /*#__PURE__*/jsxRuntime.jsx(BoxWithFallback.BoxWithFallback, {
      ...props,
      className: t1,
      ref: forwardRef
    });
    $[5] = forwardRef;
    $[6] = props;
    $[7] = t1;
    $[8] = t2;
  } else {
    t2 = $[8];
  }
  return t2;
});
TimelineBreak.displayName = 'TimelineBreak';
var Timeline$1 = Object.assign(Timeline, {
  Item: TimelineItem,
  Badge: TimelineBadge,
  Body: TimelineBody,
  Break: TimelineBreak
});

module.exports = Timeline$1;
