'use strict';

var reactCompilerRuntime = require('react-compiler-runtime');
var clsx = require('clsx');
var React = require('react');
var SubNav_module = require('./SubNav.module.css.js');
var BoxWithFallback = require('../internal/components/BoxWithFallback.js');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const SubNav = /*#__PURE__*/React__default.default.forwardRef(function SubNav(t0, forwardRef) {
  const $ = reactCompilerRuntime.c(20);
  let actions;
  let children;
  let className;
  let label;
  let rest;
  if ($[0] !== t0) {
    ({
      actions,
      className,
      children,
      label,
      ...rest
    } = t0);
    $[0] = t0;
    $[1] = actions;
    $[2] = children;
    $[3] = className;
    $[4] = label;
    $[5] = rest;
  } else {
    actions = $[1];
    children = $[2];
    className = $[3];
    label = $[4];
    rest = $[5];
  }
  let t1;
  if ($[6] !== className) {
    t1 = clsx.clsx(className, "SubNav", SubNav_module.SubNav);
    $[6] = className;
    $[7] = t1;
  } else {
    t1 = $[7];
  }
  let t2;
  if ($[8] === Symbol.for("react.memo_cache_sentinel")) {
    t2 = clsx.clsx("SubNav-body", SubNav_module.Body);
    $[8] = t2;
  } else {
    t2 = $[8];
  }
  let t3;
  if ($[9] !== children) {
    t3 = /*#__PURE__*/jsxRuntime.jsx("div", {
      className: t2,
      children: children
    });
    $[9] = children;
    $[10] = t3;
  } else {
    t3 = $[10];
  }
  let t4;
  if ($[11] !== actions) {
    t4 = actions && /*#__PURE__*/jsxRuntime.jsx("div", {
      className: clsx.clsx("SubNav-actions", SubNav_module.Actions),
      children: actions
    });
    $[11] = actions;
    $[12] = t4;
  } else {
    t4 = $[12];
  }
  let t5;
  if ($[13] !== forwardRef || $[14] !== label || $[15] !== rest || $[16] !== t1 || $[17] !== t3 || $[18] !== t4) {
    t5 = /*#__PURE__*/jsxRuntime.jsxs(BoxWithFallback.BoxWithFallback, {
      as: "nav",
      ref: forwardRef,
      className: t1,
      "aria-label": label,
      ...rest,
      children: [t3, t4]
    });
    $[13] = forwardRef;
    $[14] = label;
    $[15] = rest;
    $[16] = t1;
    $[17] = t3;
    $[18] = t4;
    $[19] = t5;
  } else {
    t5 = $[19];
  }
  return t5;
});
SubNav.displayName = 'SubNav';

// SubNav.Links

const SubNavLinks = /*#__PURE__*/React__default.default.forwardRef((t0, forwardRef) => {
  const $ = reactCompilerRuntime.c(11);
  let children;
  let className;
  let rest;
  if ($[0] !== t0) {
    ({
      children,
      className,
      ...rest
    } = t0);
    $[0] = t0;
    $[1] = children;
    $[2] = className;
    $[3] = rest;
  } else {
    children = $[1];
    className = $[2];
    rest = $[3];
  }
  let t1;
  if ($[4] !== className) {
    t1 = clsx.clsx(className, SubNav_module.Links);
    $[4] = className;
    $[5] = t1;
  } else {
    t1 = $[5];
  }
  let t2;
  if ($[6] !== children || $[7] !== forwardRef || $[8] !== rest || $[9] !== t1) {
    t2 = /*#__PURE__*/jsxRuntime.jsx(BoxWithFallback.BoxWithFallback, {
      ref: forwardRef,
      className: t1,
      ...rest,
      children: children
    });
    $[6] = children;
    $[7] = forwardRef;
    $[8] = rest;
    $[9] = t1;
    $[10] = t2;
  } else {
    t2 = $[10];
  }
  return t2;
});
SubNavLinks.displayName = 'SubNav.Links';

// SubNav.Link

const SubNavLink = /*#__PURE__*/React__default.default.forwardRef((t0, forwardRef) => {
  const $ = reactCompilerRuntime.c(11);
  let children;
  let className;
  let rest;
  if ($[0] !== t0) {
    ({
      children,
      className,
      ...rest
    } = t0);
    $[0] = t0;
    $[1] = children;
    $[2] = className;
    $[3] = rest;
  } else {
    children = $[1];
    className = $[2];
    rest = $[3];
  }
  let t1;
  if ($[4] !== className) {
    t1 = clsx.clsx(className, SubNav_module.Link);
    $[4] = className;
    $[5] = t1;
  } else {
    t1 = $[5];
  }
  let t2;
  if ($[6] !== children || $[7] !== forwardRef || $[8] !== rest || $[9] !== t1) {
    t2 = /*#__PURE__*/jsxRuntime.jsx(BoxWithFallback.BoxWithFallback, {
      as: "a",
      ref: forwardRef,
      className: t1,
      "data-selected": rest.selected,
      "aria-current": rest.selected,
      ...rest,
      children: children
    });
    $[6] = children;
    $[7] = forwardRef;
    $[8] = rest;
    $[9] = t1;
    $[10] = t2;
  } else {
    t2 = $[10];
  }
  return t2;
});
SubNavLink.displayName = 'SubNav.Link';
var SubNav$1 = Object.assign(SubNav, {
  Link: SubNavLink,
  Links: SubNavLinks
});

module.exports = SubNav$1;
