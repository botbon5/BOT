'use strict';

var reactCompilerRuntime = require('react-compiler-runtime');
var React = require('react');
var TokenBase = require('./TokenBase.js');
var Token = require('./Token.js');
var AvatarToken_module = require('./AvatarToken.module.css.js');
var clsx = require('clsx');
var jsxRuntime = require('react/jsx-runtime');
var Avatar = require('../Avatar/Avatar.js');

const AvatarToken = /*#__PURE__*/React.forwardRef((t0, forwardedRef) => {
  const $ = reactCompilerRuntime.c(20);
  let avatarSrc;
  let className;
  let id;
  let rest;
  let t1;
  if ($[0] !== t0) {
    ({
      avatarSrc,
      id,
      size: t1,
      className,
      ...rest
    } = t0);
    $[0] = t0;
    $[1] = avatarSrc;
    $[2] = className;
    $[3] = id;
    $[4] = rest;
    $[5] = t1;
  } else {
    avatarSrc = $[1];
    className = $[2];
    id = $[3];
    rest = $[4];
    t1 = $[5];
  }
  const size = t1 === undefined ? TokenBase.defaultTokenSize : t1;
  let t2;
  if ($[6] !== avatarSrc || $[7] !== size) {
    t2 = () => /*#__PURE__*/jsxRuntime.jsx("span", {
      className: AvatarToken_module.AvatarContainer,
      "data-size": size,
      children: /*#__PURE__*/jsxRuntime.jsx(Avatar.default, {
        src: avatarSrc,
        size: parseInt(TokenBase.tokenSizes[size], 10),
        className: AvatarToken_module.Avatar
      })
    });
    $[6] = avatarSrc;
    $[7] = size;
    $[8] = t2;
  } else {
    t2 = $[8];
  }
  let t3;
  if ($[9] !== id) {
    var _id;
    t3 = (_id = id) === null || _id === void 0 ? void 0 : _id.toString();
    $[9] = id;
    $[10] = t3;
  } else {
    t3 = $[10];
  }
  let t4;
  if ($[11] !== className) {
    t4 = clsx.clsx(AvatarToken_module.Token, className);
    $[11] = className;
    $[12] = t4;
  } else {
    t4 = $[12];
  }
  let t5;
  if ($[13] !== forwardedRef || $[14] !== rest || $[15] !== size || $[16] !== t2 || $[17] !== t3 || $[18] !== t4) {
    t5 = /*#__PURE__*/jsxRuntime.jsx(Token, {
      leadingVisual: t2,
      size: size,
      id: t3,
      className: t4,
      ...rest,
      ref: forwardedRef
    });
    $[13] = forwardedRef;
    $[14] = rest;
    $[15] = size;
    $[16] = t2;
    $[17] = t3;
    $[18] = t4;
    $[19] = t5;
  } else {
    t5 = $[19];
  }
  return t5;
});
AvatarToken.displayName = 'AvatarToken';

module.exports = AvatarToken;
