'use strict';

var reactCompilerRuntime = require('react-compiler-runtime');
var clsx = require('clsx');
var Label_module = require('./Label.module.css.js');
var React = require('react');
var jsxRuntime = require('react/jsx-runtime');
var Box = require('../Box/Box.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const Label = /*#__PURE__*/React__default.default.forwardRef(function Label(t0, ref) {
  const $ = reactCompilerRuntime.c(23);
  let as;
  let className;
  let rest;
  let t1;
  let t2;
  if ($[0] !== t0) {
    ({
      as,
      size: t1,
      variant: t2,
      className,
      ...rest
    } = t0);
    $[0] = t0;
    $[1] = as;
    $[2] = className;
    $[3] = rest;
    $[4] = t1;
    $[5] = t2;
  } else {
    as = $[1];
    className = $[2];
    rest = $[3];
    t1 = $[4];
    t2 = $[5];
  }
  const size = t1 === undefined ? "small" : t1;
  const variant = t2 === undefined ? "default" : t2;
  const Component = as || "span";
  if (rest.sx) {
    let t3;
    if ($[6] !== className) {
      t3 = clsx.clsx(className, Label_module.Label);
      $[6] = className;
      $[7] = t3;
    } else {
      t3 = $[7];
    }
    let t4;
    if ($[8] !== Component || $[9] !== ref || $[10] !== rest || $[11] !== size || $[12] !== t3 || $[13] !== variant) {
      t4 = /*#__PURE__*/jsxRuntime.jsx(Box, {
        as: Component,
        className: t3,
        "data-size": size,
        "data-variant": variant,
        ref: ref,
        ...rest
      });
      $[8] = Component;
      $[9] = ref;
      $[10] = rest;
      $[11] = size;
      $[12] = t3;
      $[13] = variant;
      $[14] = t4;
    } else {
      t4 = $[14];
    }
    return t4;
  }
  let t3;
  if ($[15] !== className) {
    t3 = clsx.clsx(className, Label_module.Label);
    $[15] = className;
    $[16] = t3;
  } else {
    t3 = $[16];
  }
  let t4;
  if ($[17] !== Component || $[18] !== rest || $[19] !== size || $[20] !== t3 || $[21] !== variant) {
    t4 = /*#__PURE__*/jsxRuntime.jsx(Component, {
      className: t3,
      "data-size": size,
      "data-variant": variant,
      ...rest
    });
    $[17] = Component;
    $[18] = rest;
    $[19] = size;
    $[20] = t3;
    $[21] = variant;
    $[22] = t4;
  } else {
    t4 = $[22];
  }
  return t4;
});

module.exports = Label;
