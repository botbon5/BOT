'use strict';

var reactCompilerRuntime = require('react-compiler-runtime');
var React = require('react');
var styled = require('styled-components');
var styledSystem = require('styled-system');
var constants = require('../constants.js');
var sx = require('../sx.js');
var getGlobalFocusStyles = require('../internal/utils/getGlobalFocusStyles.js');
var jsxRuntime = require('react/jsx-runtime');
var useProvidedStateOrCreate = require('../hooks/useProvidedStateOrCreate.js');
var Box = require('../Box/Box.js');
var Spinner = require('../Spinner/Spinner.js');
var Text = require('../Text/Text.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);
var styled__default = /*#__PURE__*/_interopDefault(styled);

const TRANSITION_DURATION = '80ms';
const EASE_OUT_QUAD_CURVE = 'cubic-bezier(0.5, 1, 0.89, 1)';
const sizeVariants = styledSystem.variant({
  prop: 'size',
  variants: {
    small: {
      height: '24px',
      width: '48px'
    }
  }
});
const CircleIcon = t0 => {
  const $ = reactCompilerRuntime.c(4);
  const {
    size
  } = t0;
  const t1 = size === "small" ? "12" : "16";
  const t2 = size === "small" ? "12" : "16";
  let t3;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t3 = /*#__PURE__*/jsxRuntime.jsx("path", {
      fillRule: "evenodd",
      d: "M8 12.5a4.5 4.5 0 1 0 0-9 4.5 4.5 0 0 0 0 9ZM8 14A6 6 0 1 0 8 2a6 6 0 0 0 0 12Z"
    });
    $[0] = t3;
  } else {
    t3 = $[0];
  }
  let t4;
  if ($[1] !== t1 || $[2] !== t2) {
    t4 = /*#__PURE__*/jsxRuntime.jsx("svg", {
      "aria-hidden": "true",
      width: t1,
      height: t2,
      viewBox: "0 0 16 16",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      children: t3
    });
    $[1] = t1;
    $[2] = t2;
    $[3] = t4;
  } else {
    t4 = $[3];
  }
  return t4;
};
const LineIcon = t0 => {
  const $ = reactCompilerRuntime.c(4);
  const {
    size
  } = t0;
  const t1 = size === "small" ? "12" : "16";
  const t2 = size === "small" ? "12" : "16";
  let t3;
  if ($[0] === Symbol.for("react.memo_cache_sentinel")) {
    t3 = /*#__PURE__*/jsxRuntime.jsx("path", {
      fillRule: "evenodd",
      d: "M8 2a.75.75 0 0 1 .75.75v11.5a.75.75 0 0 1-1.5 0V2.75A.75.75 0 0 1 8 2Z"
    });
    $[0] = t3;
  } else {
    t3 = $[0];
  }
  let t4;
  if ($[1] !== t1 || $[2] !== t2) {
    t4 = /*#__PURE__*/jsxRuntime.jsx("svg", {
      "aria-hidden": "true",
      width: t1,
      height: t2,
      viewBox: "0 0 16 16",
      fill: "currentColor",
      xmlns: "http://www.w3.org/2000/svg",
      children: t3
    });
    $[1] = t1;
    $[2] = t2;
    $[3] = t4;
  } else {
    t4 = $[3];
  }
  return t4;
};
const SwitchButton = styled__default.default.button.withConfig({
  displayName: "ToggleSwitch__SwitchButton",
  componentId: "sc-e6gszy-0"
})(["vertical-align:middle;cursor:pointer;user-select:none;appearance:none;text-decoration:none;padding:0;transition-property:background-color,border-color;transition-duration:", ";transition-timing-function:", ";border-radius:", ";border-style:solid;border-width:1px;display:block;height:32px;width:64px;position:relative;overflow:hidden;", ";@media (pointer:coarse){&:before{content:'';position:absolute;left:0;right:0;transform:translateY(-50%);top:50%;min-height:44px;}}@media (prefers-reduced-motion){transition:none;*{transition:none;}}&:hover:not(:disabled),&:focus:focus-visible{background-color:", ";}&:active,&:active:focus-visible{background-color:", ";}", " ", " ", ""], TRANSITION_DURATION, EASE_OUT_QUAD_CURVE, constants.get('radii.2'), getGlobalFocusStyles('3px'), constants.get('colors.switchTrack.hoverBg'), constants.get('colors.switchTrack.activeBg'), props => {
  if (props.disabled) {
    return styled.css(["background-color:", ";border-color:transparent;cursor:not-allowed;transition-property:none;"], constants.get('colors.switchTrack.disabledBg'));
  }
  if (props.checked) {
    return styled.css(["background-color:", ";border-color:var(--control-checked-borderColor-rest,transparent);&:hover:not(:disabled),&:focus:focus-visible{background-color:", ";}&:active,&:active:focus-visible{background-color:", ";}"], constants.get('colors.switchTrack.checked.bg'), constants.get('colors.switchTrack.checked.hoverBg'), constants.get('colors.switchTrack.checked.activeBg'));
  } else {
    return styled.css(["background-color:", ";border-color:var(--controlTrack-borderColor-rest,transparent);&:active{background-color:", ";}"], constants.get('colors.switchTrack.bg'), constants.get('colors.switchTrack.activeBg'));
  }
}, sx.default, sizeVariants);
const ToggleKnob = styled__default.default.div.withConfig({
  displayName: "ToggleSwitch__ToggleKnob",
  componentId: "sc-e6gszy-1"
})(["background-color:", ";border-width:1px;border-style:solid;border-color:", ";border-radius:calc(", " - 1px);width:50%;position:absolute;top:0;bottom:0;transition-property:transform;transition-duration:", ";transition-timing-function:", ";transform:", ";z-index:1;@media (prefers-reduced-motion){transition:none;}", ""], constants.get('colors.switchKnob.bg'), props => props.disabled ? constants.get('colors.switchTrack.disabledBg') : constants.get('colors.switchKnob.border'), constants.get('radii.2'), TRANSITION_DURATION, EASE_OUT_QUAD_CURVE, props => `translateX(${props.checked ? '100%' : '0px'})`, props => {
  if (props.disabled) {
    return styled.css(["border-color:", ";"], constants.get('colors.switchTrack.disabledBg'));
  }
  if (props.checked) {
    return styled.css(["border-color:", ";"], constants.get('colors.switchKnob.checked.border'));
  }
});
const hiddenTextStyles = {
  visibility: 'hidden',
  height: 0
};
const ToggleSwitch = /*#__PURE__*/React__default.default.forwardRef(function ToggleSwitch(props, ref) {
  const $ = reactCompilerRuntime.c(81);
  let ariaDescribedby;
  let ariaLabelledby;
  let checked;
  let defaultChecked;
  let disabled;
  let loading;
  let onChange;
  let onClick;
  let rest;
  let sxProp;
  let t0;
  let t1;
  let t2;
  if ($[0] !== props) {
    ({
      "aria-labelledby": ariaLabelledby,
      "aria-describedby": ariaDescribedby,
      defaultChecked,
      disabled,
      loading,
      checked,
      onChange,
      onClick,
      buttonType: t0,
      size: t1,
      statusLabelPosition: t2,
      sx: sxProp,
      ...rest
    } = props);
    $[0] = props;
    $[1] = ariaDescribedby;
    $[2] = ariaLabelledby;
    $[3] = checked;
    $[4] = defaultChecked;
    $[5] = disabled;
    $[6] = loading;
    $[7] = onChange;
    $[8] = onClick;
    $[9] = rest;
    $[10] = sxProp;
    $[11] = t0;
    $[12] = t1;
    $[13] = t2;
  } else {
    ariaDescribedby = $[1];
    ariaLabelledby = $[2];
    checked = $[3];
    defaultChecked = $[4];
    disabled = $[5];
    loading = $[6];
    onChange = $[7];
    onClick = $[8];
    rest = $[9];
    sxProp = $[10];
    t0 = $[11];
    t1 = $[12];
    t2 = $[13];
  }
  const buttonType = t0 === undefined ? "button" : t0;
  const size = t1 === undefined ? "medium" : t1;
  const statusLabelPosition = t2 === undefined ? "start" : t2;
  const isControlled = typeof checked !== "undefined";
  const [isOn, setIsOn] = useProvidedStateOrCreate.useProvidedStateOrCreate(checked, onChange, Boolean(defaultChecked));
  const acceptsInteraction = !disabled && !loading;
  let t3;
  if ($[14] !== isControlled || $[15] !== isOn || $[16] !== onClick || $[17] !== setIsOn) {
    t3 = e => {
      if (!isControlled) {
        setIsOn(!isOn);
      }
      onClick && onClick(e);
    };
    $[14] = isControlled;
    $[15] = isOn;
    $[16] = onClick;
    $[17] = setIsOn;
    $[18] = t3;
  } else {
    t3 = $[18];
  }
  const handleToggleClick = t3;
  let t4;
  if ($[19] !== checked || $[20] !== isControlled || $[21] !== onChange) {
    t4 = () => {
      if (onChange && isControlled) {
        onChange(Boolean(checked));
      }
    };
    $[19] = checked;
    $[20] = isControlled;
    $[21] = onChange;
    $[22] = t4;
  } else {
    t4 = $[22];
  }
  let t5;
  if ($[23] !== buttonType || $[24] !== checked || $[25] !== isControlled || $[26] !== onChange) {
    t5 = [onChange, checked, isControlled, buttonType];
    $[23] = buttonType;
    $[24] = checked;
    $[25] = isControlled;
    $[26] = onChange;
    $[27] = t5;
  } else {
    t5 = $[27];
  }
  React.useEffect(t4, t5);
  const t6 = statusLabelPosition === "start" ? "row" : "row-reverse";
  let t7;
  if ($[28] !== loading) {
    t7 = loading ? /*#__PURE__*/jsxRuntime.jsx(Spinner, {
      size: "small"
    }) : null;
    $[28] = loading;
    $[29] = t7;
  } else {
    t7 = $[29];
  }
  const t8 = acceptsInteraction ? "fg.default" : "fg.muted";
  const t9 = size === "small" ? 0 : 1;
  let t10;
  if ($[30] === Symbol.for("react.memo_cache_sentinel")) {
    t10 = {
      position: "relative",
      cursor: "pointer"
    };
    $[30] = t10;
  } else {
    t10 = $[30];
  }
  const t11 = isOn ? null : hiddenTextStyles;
  let t12;
  if ($[31] !== t11) {
    t12 = /*#__PURE__*/jsxRuntime.jsx(Box, {
      textAlign: "right",
      sx: t11,
      children: "On"
    });
    $[31] = t11;
    $[32] = t12;
  } else {
    t12 = $[32];
  }
  const t13 = isOn ? hiddenTextStyles : null;
  let t14;
  if ($[33] !== t13) {
    t14 = /*#__PURE__*/jsxRuntime.jsx(Box, {
      textAlign: "right",
      sx: t13,
      children: "Off"
    });
    $[33] = t13;
    $[34] = t14;
  } else {
    t14 = $[34];
  }
  let t15;
  if ($[35] !== handleToggleClick || $[36] !== t12 || $[37] !== t14 || $[38] !== t8 || $[39] !== t9) {
    t15 = /*#__PURE__*/jsxRuntime.jsxs(Text, {
      color: t8,
      fontSize: t9,
      mx: 2,
      "aria-hidden": "true",
      sx: t10,
      onClick: handleToggleClick,
      children: [t12, t14]
    });
    $[35] = handleToggleClick;
    $[36] = t12;
    $[37] = t14;
    $[38] = t8;
    $[39] = t9;
    $[40] = t15;
  } else {
    t15 = $[40];
  }
  const t16 = !acceptsInteraction;
  const t17 = acceptsInteraction ? "switchTrack.checked.fg" : "switchTrack.checked.disabledFg";
  const t18 = `translateX(${isOn ? "0" : "-100%"})`;
  let t19;
  if ($[41] !== t18) {
    t19 = {
      transform: t18,
      transitionProperty: "transform",
      transitionDuration: TRANSITION_DURATION
    };
    $[41] = t18;
    $[42] = t19;
  } else {
    t19 = $[42];
  }
  let t20;
  if ($[43] !== size) {
    t20 = /*#__PURE__*/jsxRuntime.jsx(LineIcon, {
      size: size
    });
    $[43] = size;
    $[44] = t20;
  } else {
    t20 = $[44];
  }
  let t21;
  if ($[45] !== t17 || $[46] !== t19 || $[47] !== t20) {
    t21 = /*#__PURE__*/jsxRuntime.jsx(Box, {
      flexGrow: 1,
      flexShrink: 0,
      flexBasis: "50%",
      color: t17,
      lineHeight: "0",
      sx: t19,
      children: t20
    });
    $[45] = t17;
    $[46] = t19;
    $[47] = t20;
    $[48] = t21;
  } else {
    t21 = $[48];
  }
  const t22 = acceptsInteraction ? "switchTrack.fg" : "switchTrack.disabledFg";
  const t23 = `translateX(${isOn ? "100%" : "0"})`;
  let t24;
  if ($[49] !== t23) {
    t24 = {
      transform: t23,
      transitionProperty: "transform",
      transitionDuration: TRANSITION_DURATION
    };
    $[49] = t23;
    $[50] = t24;
  } else {
    t24 = $[50];
  }
  let t25;
  if ($[51] !== size) {
    t25 = /*#__PURE__*/jsxRuntime.jsx(CircleIcon, {
      size: size
    });
    $[51] = size;
    $[52] = t25;
  } else {
    t25 = $[52];
  }
  let t26;
  if ($[53] !== t22 || $[54] !== t24 || $[55] !== t25) {
    t26 = /*#__PURE__*/jsxRuntime.jsx(Box, {
      flexGrow: 1,
      flexShrink: 0,
      flexBasis: "50%",
      color: t22,
      lineHeight: "0",
      sx: t24,
      children: t25
    });
    $[53] = t22;
    $[54] = t24;
    $[55] = t25;
    $[56] = t26;
  } else {
    t26 = $[56];
  }
  let t27;
  if ($[57] !== t21 || $[58] !== t26) {
    t27 = /*#__PURE__*/jsxRuntime.jsxs(Box, {
      "aria-hidden": "true",
      display: "flex",
      alignItems: "center",
      width: "100%",
      height: "100%",
      overflow: "hidden",
      children: [t21, t26]
    });
    $[57] = t21;
    $[58] = t26;
    $[59] = t27;
  } else {
    t27 = $[59];
  }
  const t28 = !acceptsInteraction;
  let t29;
  if ($[60] !== isOn || $[61] !== t28) {
    t29 = /*#__PURE__*/jsxRuntime.jsx(ToggleKnob, {
      "aria-hidden": "true",
      disabled: t28,
      checked: isOn
    });
    $[60] = isOn;
    $[61] = t28;
    $[62] = t29;
  } else {
    t29 = $[62];
  }
  let t30;
  if ($[63] !== ariaDescribedby || $[64] !== ariaLabelledby || $[65] !== buttonType || $[66] !== handleToggleClick || $[67] !== isOn || $[68] !== ref || $[69] !== size || $[70] !== t16 || $[71] !== t27 || $[72] !== t29) {
    t30 = /*#__PURE__*/jsxRuntime.jsxs(SwitchButton, {
      ref: ref,
      type: buttonType,
      onClick: handleToggleClick,
      "aria-labelledby": ariaLabelledby,
      "aria-describedby": ariaDescribedby,
      "aria-pressed": isOn,
      checked: isOn,
      size: size,
      disabled: t16,
      children: [t27, t29]
    });
    $[63] = ariaDescribedby;
    $[64] = ariaLabelledby;
    $[65] = buttonType;
    $[66] = handleToggleClick;
    $[67] = isOn;
    $[68] = ref;
    $[69] = size;
    $[70] = t16;
    $[71] = t27;
    $[72] = t29;
    $[73] = t30;
  } else {
    t30 = $[73];
  }
  let t31;
  if ($[74] !== rest || $[75] !== sxProp || $[76] !== t15 || $[77] !== t30 || $[78] !== t6 || $[79] !== t7) {
    t31 = /*#__PURE__*/jsxRuntime.jsxs(Box, {
      display: "inline-flex",
      alignItems: "center",
      flexDirection: t6,
      sx: sxProp,
      ...rest,
      children: [t7, t15, t30]
    });
    $[74] = rest;
    $[75] = sxProp;
    $[76] = t15;
    $[77] = t30;
    $[78] = t6;
    $[79] = t7;
    $[80] = t31;
  } else {
    t31 = $[80];
  }
  return t31;
});
if (process.env.NODE_ENV !== "production") {
  ToggleSwitch.displayName = 'ToggleSwitch';
}

module.exports = ToggleSwitch;
