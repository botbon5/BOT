'use strict';

var reactCompilerRuntime = require('react-compiler-runtime');
var getColorFromHex = require('./getColorFromHex.js');
var ThemeProvider = require('../../ThemeProvider.js');
var clsx = require('clsx');
var IssueLabel_module = require('./IssueLabel.module.css.js');
var jsxRuntime = require('react/jsx-runtime');

function IssueLabel(t0) {
  const $ = reactCompilerRuntime.c(48);
  let as;
  let className;
  let fillColor;
  let href;
  let id;
  let onClick;
  let onFocus;
  let rest;
  let t1;
  let text;
  if ($[0] !== t0) {
    ({
      className,
      fillColor,
      variant: t1,
      href,
      onClick,
      onFocus,
      text,
      as,
      id,
      ...rest
    } = t0);
    $[0] = t0;
    $[1] = as;
    $[2] = className;
    $[3] = fillColor;
    $[4] = href;
    $[5] = id;
    $[6] = onClick;
    $[7] = onFocus;
    $[8] = rest;
    $[9] = t1;
    $[10] = text;
  } else {
    as = $[1];
    className = $[2];
    fillColor = $[3];
    href = $[4];
    id = $[5];
    onClick = $[6];
    onFocus = $[7];
    rest = $[8];
    t1 = $[9];
    text = $[10];
  }
  const variant = t1 === undefined ? "gray" : t1;
  if (href && onClick) {
    throw new Error("`href` and `onClick` cannot both be set. Choose either a link (`<a>`) or a button (`<button>`).");
  }
  const {
    resolvedColorScheme
  } = ThemeProvider.useTheme();
  const mode = resolvedColorScheme !== null && resolvedColorScheme !== void 0 && resolvedColorScheme.startsWith("dark") ? "dark" : "light";
  let T0;
  let t2;
  let t3;
  let t4;
  let t5;
  let t6;
  let t7;
  let t8;
  let t9;
  if ($[11] !== as || $[12] !== className || $[13] !== fillColor || $[14] !== href || $[15] !== id || $[16] !== mode || $[17] !== onClick || $[18] !== onFocus || $[19] !== resolvedColorScheme || $[20] !== rest || $[21] !== variant) {
    const bgColors = {
      light: "#ffffff",
      dark: "#0d1117"
    };
    let Component = "span";
    if (as) {
      Component = as;
    } else {
      if (href) {
        Component = "a";
      } else {
        if (onClick) {
          Component = "button";
        }
      }
    }
    let t10;
    if ($[31] !== href) {
      t10 = href ? {
        href
      } : {};
      $[31] = href;
      $[32] = t10;
    } else {
      t10 = $[32];
    }
    const anchorProps = t10;
    T0 = Component;
    t2 = rest;
    t3 = anchorProps;
    t4 = onClick;
    t5 = onFocus;
    if ($[33] !== id) {
      var _id;
      t6 = (_id = id) === null || _id === void 0 ? void 0 : _id.toString();
      $[33] = id;
      $[34] = t6;
    } else {
      t6 = $[34];
    }
    if ($[35] !== className) {
      t7 = clsx.clsx(IssueLabel_module.IssueLabel, className);
      $[35] = className;
      $[36] = t7;
    } else {
      t7 = $[36];
    }
    t8 = fillColor ? undefined : variant;
    t9 = fillColor ? getColorFromHex.getColorsFromHex(fillColor, resolvedColorScheme, bgColors[mode]) : undefined;
    $[11] = as;
    $[12] = className;
    $[13] = fillColor;
    $[14] = href;
    $[15] = id;
    $[16] = mode;
    $[17] = onClick;
    $[18] = onFocus;
    $[19] = resolvedColorScheme;
    $[20] = rest;
    $[21] = variant;
    $[22] = T0;
    $[23] = t2;
    $[24] = t3;
    $[25] = t4;
    $[26] = t5;
    $[27] = t6;
    $[28] = t7;
    $[29] = t8;
    $[30] = t9;
  } else {
    T0 = $[22];
    t2 = $[23];
    t3 = $[24];
    t4 = $[25];
    t5 = $[26];
    t6 = $[27];
    t7 = $[28];
    t8 = $[29];
    t9 = $[30];
  }
  let t10;
  if ($[37] !== T0 || $[38] !== t2 || $[39] !== t3 || $[40] !== t4 || $[41] !== t5 || $[42] !== t6 || $[43] !== t7 || $[44] !== t8 || $[45] !== t9 || $[46] !== text) {
    t10 = /*#__PURE__*/jsxRuntime.jsx(T0, {
      ...t2,
      ...t3,
      onClick: t4,
      onFocus: t5,
      id: t6,
      className: t7,
      "data-variant": t8,
      style: t9,
      children: text
    });
    $[37] = T0;
    $[38] = t2;
    $[39] = t3;
    $[40] = t4;
    $[41] = t5;
    $[42] = t6;
    $[43] = t7;
    $[44] = t8;
    $[45] = t9;
    $[46] = text;
    $[47] = t10;
  } else {
    t10 = $[47];
  }
  return t10;
}

exports.IssueLabel = IssueLabel;
