'use strict';

var reactCompilerRuntime = require('react-compiler-runtime');
var styled = require('styled-components');
var constants = require('../../constants.js');
var sx = require('../../sx.js');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var styled__default = /*#__PURE__*/_interopDefault(styled);

const StyledHeader = styled__default.default.div.withConfig({
  displayName: "Header__StyledHeader",
  componentId: "sc-cjezay-0"
})(["{}padding:6px ", ";font-size:", ";font-weight:", ";color:", ";", " ", ""], constants.get('space.3'), constants.get('fontSizes.0'), constants.get('fontWeights.bold'), constants.get('colors.fg.muted'), ({
  variant
}) => variant === 'filled' && styled.css(["background:", ";margin:", " 0;border-top:1px solid ", ";border-bottom:1px solid ", ";&:first-child{margin-top:0;}"], constants.get('colors.canvas.subtle'), constants.get('space.2'), constants.get('colors.neutral.muted'), constants.get('colors.neutral.muted')), sx.default);

/**
 * Displays the name and description of a `Group`.
 */
function Header(t0) {
  const $ = reactCompilerRuntime.c(12);
  let auxiliaryText;
  let props;
  let t1;
  let title;
  if ($[0] !== t0) {
    const {
      variant: t2,
      title: t3,
      auxiliaryText: t4,
      children: _children,
      ...t5
    } = t0;
    t1 = t2;
    title = t3;
    auxiliaryText = t4;
    props = t5;
    $[0] = t0;
    $[1] = auxiliaryText;
    $[2] = props;
    $[3] = t1;
    $[4] = title;
  } else {
    auxiliaryText = $[1];
    props = $[2];
    t1 = $[3];
    title = $[4];
  }
  const variant = t1 === undefined ? "subtle" : t1;
  let t2;
  if ($[5] !== auxiliaryText) {
    t2 = auxiliaryText && /*#__PURE__*/jsxRuntime.jsx("span", {
      children: auxiliaryText
    });
    $[5] = auxiliaryText;
    $[6] = t2;
  } else {
    t2 = $[6];
  }
  let t3;
  if ($[7] !== props || $[8] !== t2 || $[9] !== title || $[10] !== variant) {
    t3 = /*#__PURE__*/jsxRuntime.jsxs(StyledHeader, {
      role: "heading",
      variant: variant,
      ...props,
      children: [title, t2]
    });
    $[7] = props;
    $[8] = t2;
    $[9] = title;
    $[10] = variant;
    $[11] = t3;
  } else {
    t3 = $[11];
  }
  return t3;
}

exports.Header = Header;
exports.StyledHeader = StyledHeader;
