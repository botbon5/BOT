'use strict';

var reactCompilerRuntime = require('react-compiler-runtime');
var React = require('react');
var Group = require('./Group.js');
var Item = require('./Item.js');
var Divider = require('./Divider.js');
var styled = require('styled-components');
var constants = require('../../constants.js');
var behaviors = require('@primer/behaviors');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);
var styled__default = /*#__PURE__*/_interopDefault(styled);

/**
 * Asserts that the given value fulfills the `GroupedListProps` contract.
 * @param props A value which fulfills either the `ListPropsBase` or the `GroupedListProps` contract.
 */
function isGroupedListProps(props) {
  return 'groupMetadata' in props;
}

/**
 * Contract for props passed to the `List` component.
 */

const StyledList = styled__default.default.div.withConfig({
  displayName: "List__StyledList",
  componentId: "sc-hkz3q0-0"
})(["font-size:", ";line-height:20px;&[", "],&:focus-within{--item-hover-bg-override:none;--item-hover-divider-border-color-override:", ";}"], constants.get('fontSizes.1'), behaviors.hasActiveDescendantAttribute, constants.get('colors.border.muted'));

/**
 * Returns `sx` prop values for `List` children matching the given `List` style variation.
 * @param variant `List` style variation.
 */
function useListVariant(variant = 'inset') {
  switch (variant) {
    case 'full':
      return {
        headerStyle: {
          paddingX: constants.get('space.2')
        },
        itemStyle: {
          borderRadius: 0
        }
      };
    default:
      return {
        firstGroupStyle: {
          marginTop: constants.get('space.2')
        },
        lastGroupStyle: {
          marginBottom: constants.get('space.2')
        },
        itemStyle: {
          marginX: constants.get('space.2')
        }
      };
  }
}

/**
 * Lists `Item`s, either grouped or ungrouped, with a `Divider` between each `Group`.
 */
const List = /*#__PURE__*/React__default.default.forwardRef((props, forwardedRef) => {
  const $ = reactCompilerRuntime.c(25);
  const {
    firstGroupStyle,
    lastGroupStyle,
    headerStyle,
    itemStyle
  } = useListVariant(props.variant);
  let t0;
  if ($[0] !== props.renderGroup) {
    t0 = groupProps => {
      var _ref;
      const GroupComponent = ((_ref = "renderGroup" in groupProps && groupProps.renderGroup) !== null && _ref !== void 0 ? _ref : props.renderGroup) || Group.Group;
      return /*#__PURE__*/React.createElement(GroupComponent, {
        ...groupProps,
        key: groupProps.groupId
      });
    };
    $[0] = props.renderGroup;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  const renderGroup = t0;
  let t1;
  if ($[2] !== itemStyle || $[3] !== props.renderItem || $[4] !== props.selectionVariant || $[5] !== props.showItemDividers) {
    t1 = (itemProps, item, itemIndex) => {
      var _ref2, _ref3, _itemProps$id;
      const ItemComponent = "renderItem" in itemProps && itemProps.renderItem || props.renderItem || Item.Item;
      const key = (_ref2 = (_ref3 = "key" in itemProps ? itemProps.key : undefined) !== null && _ref3 !== void 0 ? _ref3 : (_itemProps$id = itemProps.id) === null || _itemProps$id === void 0 ? void 0 : _itemProps$id.toString()) !== null && _ref2 !== void 0 ? _ref2 : itemIndex.toString();
      return /*#__PURE__*/React.createElement(ItemComponent, {
        showDivider: props.showItemDividers,
        selectionVariant: props.selectionVariant,
        ...itemProps,
        key: key,
        sx: {
          ...itemStyle,
          ...itemProps.sx
        },
        item: item
      });
    };
    $[2] = itemStyle;
    $[3] = props.renderItem;
    $[4] = props.selectionVariant;
    $[5] = props.showItemDividers;
    $[6] = t1;
  } else {
    t1 = $[6];
  }
  const renderItem = t1;
  let T0;
  let t2;
  let t3;
  let t4;
  if ($[7] !== firstGroupStyle || $[8] !== forwardedRef || $[9] !== headerStyle || $[10] !== lastGroupStyle || $[11] !== props || $[12] !== renderGroup || $[13] !== renderItem) {
    let groups = [];
    if (!isGroupedListProps(props)) {
      let t5;
      if ($[18] !== renderItem) {
        t5 = (item_0, index) => renderItem(item_0, item_0, index);
        $[18] = renderItem;
        $[19] = t5;
      } else {
        t5 = $[19];
      }
      groups = [{
        items: props.items.map(t5),
        groupId: "0"
      }];
    } else {
      const groupMap = props.groupMetadata.reduce(_temp, new Map());
      for (const itemProps_0 of props.items) {
        var _group$items$length, _group$items, _group$items2;
        const group = groupMap.get(itemProps_0.groupId);
        const itemIndex_0 = (_group$items$length = group === null || group === void 0 ? void 0 : (_group$items = group.items) === null || _group$items === void 0 ? void 0 : _group$items.length) !== null && _group$items$length !== void 0 ? _group$items$length : 0;
        groupMap.set(itemProps_0.groupId, {
          ...group,
          items: [...((_group$items2 = group === null || group === void 0 ? void 0 : group.items) !== null && _group$items2 !== void 0 ? _group$items2 : []), renderItem({
            showDivider: group === null || group === void 0 ? void 0 : group.showItemDividers,
            ...(group && "renderItem" in group && {
              renderItem: group.renderItem
            }),
            ...itemProps_0
          }, itemProps_0, itemIndex_0)]
        });
      }
      groups = [...groupMap.values()];
    }
    T0 = StyledList;
    t2 = props;
    t3 = forwardedRef;
    t4 = groups.map((t5, index_0) => {
      const {
        header,
        ...groupProps_0
      } = t5;
      const hasFilledHeader = (header === null || header === void 0 ? void 0 : header.variant) === "filled";
      const shouldShowDivider = index_0 > 0 && !hasFilledHeader;
      return /*#__PURE__*/jsxRuntime.jsxs(React__default.default.Fragment, {
        children: [shouldShowDivider ? /*#__PURE__*/jsxRuntime.jsx(Divider.Divider, {}, `${groupProps_0.groupId}-divider`) : null, renderGroup({
          sx: {
            ...(index_0 === 0 && firstGroupStyle),
            ...(index_0 === groups.length - 1 && lastGroupStyle),
            ...(index_0 > 0 && !shouldShowDivider && {
              mt: 2
            })
          },
          ...(header && {
            header: {
              ...header,
              sx: {
                ...headerStyle,
                ...header.sx
              }
            }
          }),
          ...groupProps_0
        })]
      }, groupProps_0.groupId);
    });
    $[7] = firstGroupStyle;
    $[8] = forwardedRef;
    $[9] = headerStyle;
    $[10] = lastGroupStyle;
    $[11] = props;
    $[12] = renderGroup;
    $[13] = renderItem;
    $[14] = T0;
    $[15] = t2;
    $[16] = t3;
    $[17] = t4;
  } else {
    T0 = $[14];
    t2 = $[15];
    t3 = $[16];
    t4 = $[17];
  }
  let t5;
  if ($[20] !== T0 || $[21] !== t2 || $[22] !== t3 || $[23] !== t4) {
    t5 = /*#__PURE__*/jsxRuntime.jsx(T0, {
      ...t2,
      ref: t3,
      children: t4
    });
    $[20] = T0;
    $[21] = t2;
    $[22] = t3;
    $[23] = t4;
    $[24] = t5;
  } else {
    t5 = $[24];
  }
  return t5;
});
List.displayName = 'ActionList';
function _temp(groupAccumulator, groupMetadata) {
  return groupAccumulator.set(groupMetadata.groupId, groupMetadata);
}

exports.List = List;
