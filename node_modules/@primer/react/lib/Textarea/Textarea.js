'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var reactCompilerRuntime = require('react-compiler-runtime');
var React = require('react');
var TextInputWrapper = require('../internal/components/TextInputWrapper.js');
var TextArea_module = require('./TextArea.module.css.js');
var jsxRuntime = require('react/jsx-runtime');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const DEFAULT_TEXTAREA_ROWS = 7;
const DEFAULT_TEXTAREA_COLS = 30;
const DEFAULT_TEXTAREA_RESIZE = 'both';
/**
 * An accessible, native textarea component that supports validation states.
 * This component accepts all native HTML <textarea> attributes as props.
 */
const Textarea = /*#__PURE__*/React__default.default.forwardRef((t0, ref) => {
  const $ = reactCompilerRuntime.c(31);
  let block;
  let className;
  let contrast;
  let disabled;
  let required;
  let rest;
  let sxProp;
  let t1;
  let t2;
  let t3;
  let validationStatus;
  let value;
  if ($[0] !== t0) {
    ({
      value,
      disabled,
      sx: sxProp,
      required,
      validationStatus,
      rows: t1,
      cols: t2,
      resize: t3,
      block,
      contrast,
      className,
      ...rest
    } = t0);
    $[0] = t0;
    $[1] = block;
    $[2] = className;
    $[3] = contrast;
    $[4] = disabled;
    $[5] = required;
    $[6] = rest;
    $[7] = sxProp;
    $[8] = t1;
    $[9] = t2;
    $[10] = t3;
    $[11] = validationStatus;
    $[12] = value;
  } else {
    block = $[1];
    className = $[2];
    contrast = $[3];
    disabled = $[4];
    required = $[5];
    rest = $[6];
    sxProp = $[7];
    t1 = $[8];
    t2 = $[9];
    t3 = $[10];
    validationStatus = $[11];
    value = $[12];
  }
  const rows = t1 === undefined ? DEFAULT_TEXTAREA_ROWS : t1;
  const cols = t2 === undefined ? DEFAULT_TEXTAREA_COLS : t2;
  const resize = t3 === undefined ? DEFAULT_TEXTAREA_RESIZE : t3;
  const t4 = validationStatus === "error" ? "true" : "false";
  let t5;
  if ($[13] !== cols || $[14] !== disabled || $[15] !== ref || $[16] !== required || $[17] !== resize || $[18] !== rest || $[19] !== rows || $[20] !== t4 || $[21] !== value) {
    t5 = /*#__PURE__*/jsxRuntime.jsx("textarea", {
      value: value,
      "data-resize": resize,
      "aria-required": required,
      "aria-invalid": t4,
      ref: ref,
      disabled: disabled,
      rows: rows,
      cols: cols,
      className: TextArea_module.TextArea,
      ...rest
    });
    $[13] = cols;
    $[14] = disabled;
    $[15] = ref;
    $[16] = required;
    $[17] = resize;
    $[18] = rest;
    $[19] = rows;
    $[20] = t4;
    $[21] = value;
    $[22] = t5;
  } else {
    t5 = $[22];
  }
  let t6;
  if ($[23] !== block || $[24] !== className || $[25] !== contrast || $[26] !== disabled || $[27] !== sxProp || $[28] !== t5 || $[29] !== validationStatus) {
    t6 = /*#__PURE__*/jsxRuntime.jsx(TextInputWrapper.TextInputBaseWrapper, {
      sx: sxProp,
      validationStatus: validationStatus,
      disabled: disabled,
      block: block,
      contrast: contrast,
      className: className,
      children: t5
    });
    $[23] = block;
    $[24] = className;
    $[25] = contrast;
    $[26] = disabled;
    $[27] = sxProp;
    $[28] = t5;
    $[29] = validationStatus;
    $[30] = t6;
  } else {
    t6 = $[30];
  }
  return t6;
});
Textarea.displayName = 'Textarea';

exports.DEFAULT_TEXTAREA_COLS = DEFAULT_TEXTAREA_COLS;
exports.DEFAULT_TEXTAREA_RESIZE = DEFAULT_TEXTAREA_RESIZE;
exports.DEFAULT_TEXTAREA_ROWS = DEFAULT_TEXTAREA_ROWS;
exports.default = Textarea;
