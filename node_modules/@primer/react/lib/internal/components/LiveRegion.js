'use strict';

var reactCompilerRuntime = require('react-compiler-runtime');
var React = require('react');
var jsxRuntime = require('react/jsx-runtime');
var VisuallyHidden = require('../../VisuallyHidden/VisuallyHidden.js');

function _interopDefault (e) { return e && e.__esModule ? e : { default: e }; }

var React__default = /*#__PURE__*/_interopDefault(React);

const LiveRegionContext = /*#__PURE__*/React__default.default.createContext(null);
function useLiveRegion() {
  const context = React__default.default.useContext(LiveRegionContext);
  if (!context) {
    throw new Error("useLiveRegion() must be used within a <LiveRegion>");
  }
  return context;
}
function LiveRegion(t0) {
  const $ = reactCompilerRuntime.c(5);
  const {
    children
  } = t0;
  const [message, setMessage] = React__default.default.useState("");
  let t1;
  let t2;
  if ($[0] !== message) {
    t2 = {
      announce: setMessage,
      message
    };
    $[0] = message;
    $[1] = t2;
  } else {
    t2 = $[1];
  }
  t1 = t2;
  const value = t1;
  let t3;
  if ($[2] !== children || $[3] !== value) {
    t3 = /*#__PURE__*/jsxRuntime.jsx(LiveRegionContext.Provider, {
      value: value,
      children: children
    });
    $[2] = children;
    $[3] = value;
    $[4] = t3;
  } else {
    t3 = $[4];
  }
  return t3;
}
function LiveRegionOutlet() {
  const $ = reactCompilerRuntime.c(2);
  const liveRegion = useLiveRegion();
  let t0;
  if ($[0] !== liveRegion.message) {
    t0 = /*#__PURE__*/jsxRuntime.jsx(VisuallyHidden.VisuallyHidden, {
      role: "status",
      "aria-live": "polite",
      "aria-atomic": true,
      children: liveRegion.message
    });
    $[0] = liveRegion.message;
    $[1] = t0;
  } else {
    t0 = $[1];
  }
  return t0;
}
function Message(t0) {
  const $ = reactCompilerRuntime.c(8);
  const {
    value
  } = t0;
  const liveRegion = useLiveRegion();
  const savedLiveRegion = React__default.default.useRef(liveRegion);
  const committedRef = React__default.default.useRef(false);
  let t1;
  let t2;
  if ($[0] !== liveRegion) {
    t1 = () => {
      savedLiveRegion.current = liveRegion;
    };
    t2 = [liveRegion];
    $[0] = liveRegion;
    $[1] = t1;
    $[2] = t2;
  } else {
    t1 = $[1];
    t2 = $[2];
  }
  React__default.default.useEffect(t1, t2);
  let t3;
  let t4;
  if ($[3] !== value) {
    t3 = () => {
      if (committedRef.current !== true) {
        return;
      }
      const timeoutId = setTimeout(() => {
        savedLiveRegion.current.announce(value);
      }, 750);
      return () => {
        clearTimeout(timeoutId);
      };
    };
    t4 = [value];
    $[3] = value;
    $[4] = t3;
    $[5] = t4;
  } else {
    t3 = $[4];
    t4 = $[5];
  }
  React__default.default.useEffect(t3, t4);
  let t5;
  let t6;
  if ($[6] === Symbol.for("react.memo_cache_sentinel")) {
    t5 = () => {
      committedRef.current = true;
      return () => {
        committedRef.current = false;
      };
    };
    t6 = [];
    $[6] = t5;
    $[7] = t6;
  } else {
    t5 = $[6];
    t6 = $[7];
  }
  React__default.default.useEffect(t5, t6);
  return null;
}

exports.LiveRegion = LiveRegion;
exports.LiveRegionOutlet = LiveRegionOutlet;
exports.Message = Message;
exports.useLiveRegion = useLiveRegion;
