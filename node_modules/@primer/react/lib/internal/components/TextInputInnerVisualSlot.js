'use strict';

var reactCompilerRuntime = require('react-compiler-runtime');
var clsx = require('clsx');
var TextInputInnerVisualSlot_module = require('./TextInputInnerVisualSlot.module.css.js');
var jsxRuntime = require('react/jsx-runtime');
var Spinner = require('../../Spinner/Spinner.js');

const TextInputInnerVisualSlot = t0 => {
  const $ = reactCompilerRuntime.c(17);
  const {
    children,
    hasLoadingIndicator,
    showLoadingIndicator,
    visualPosition,
    id
  } = t0;
  const isLeading = visualPosition === "leading";
  if (!children && !hasLoadingIndicator || isLeading && !children && !showLoadingIndicator) {
    return null;
  }
  if (!hasLoadingIndicator) {
    let t1;
    if ($[0] !== children || $[1] !== id) {
      t1 = /*#__PURE__*/jsxRuntime.jsx("span", {
        className: "TextInput-icon",
        id: id,
        "aria-hidden": "true",
        children: children
      });
      $[0] = children;
      $[1] = id;
      $[2] = t1;
    } else {
      t1 = $[2];
    }
    return t1;
  }
  let t1;
  if ($[3] !== children || $[4] !== showLoadingIndicator) {
    t1 = children && /*#__PURE__*/jsxRuntime.jsx("div", {
      className: clsx.clsx(showLoadingIndicator ? TextInputInnerVisualSlot_module.SpinnerHidden : TextInputInnerVisualSlot_module.SpinnerVisible),
      children: children
    });
    $[3] = children;
    $[4] = showLoadingIndicator;
    $[5] = t1;
  } else {
    t1 = $[5];
  }
  const t2 = showLoadingIndicator ? TextInputInnerVisualSlot_module.SpinnerVisible : TextInputInnerVisualSlot_module.SpinnerHidden;
  const t3 = children && TextInputInnerVisualSlot_module.Spinner;
  const t4 = children && isLeading && TextInputInnerVisualSlot_module.SpinnerLeading;
  let t5;
  if ($[6] !== t2 || $[7] !== t3 || $[8] !== t4) {
    t5 = clsx.clsx(t2, t3, t4);
    $[6] = t2;
    $[7] = t3;
    $[8] = t4;
    $[9] = t5;
  } else {
    t5 = $[9];
  }
  const t6 = children ? undefined : "small";
  let t7;
  if ($[10] !== t5 || $[11] !== t6) {
    t7 = /*#__PURE__*/jsxRuntime.jsx(Spinner, {
      srText: null,
      className: t5,
      size: t6
    });
    $[10] = t5;
    $[11] = t6;
    $[12] = t7;
  } else {
    t7 = $[12];
  }
  let t8;
  if ($[13] !== id || $[14] !== t1 || $[15] !== t7) {
    t8 = /*#__PURE__*/jsxRuntime.jsx("span", {
      className: "TextInput-icon",
      children: /*#__PURE__*/jsxRuntime.jsxs("div", {
        className: TextInputInnerVisualSlot_module.Box,
        id: id,
        children: [t1, t7]
      })
    });
    $[13] = id;
    $[14] = t1;
    $[15] = t7;
    $[16] = t8;
  } else {
    t8 = $[16];
  }
  return t8;
};

module.exports = TextInputInnerVisualSlot;
