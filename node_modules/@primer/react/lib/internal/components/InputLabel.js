'use strict';

var reactCompilerRuntime = require('react-compiler-runtime');
var clsx = require('clsx');
var InputLabel_module = require('./InputLabel.module.css.js');
var BoxWithFallback = require('./BoxWithFallback.js');
var jsxRuntime = require('react/jsx-runtime');

function InputLabel(t0) {
  const $ = reactCompilerRuntime.c(30);
  let children;
  let className;
  let disabled;
  let htmlFor;
  let id;
  let props;
  let required;
  let requiredIndicator;
  let requiredText;
  let sx;
  let t1;
  let visuallyHidden;
  if ($[0] !== t0) {
    ({
      children,
      disabled,
      htmlFor,
      id,
      required,
      requiredText,
      requiredIndicator,
      visuallyHidden,
      sx,
      as: t1,
      className,
      ...props
    } = t0);
    $[0] = t0;
    $[1] = children;
    $[2] = className;
    $[3] = disabled;
    $[4] = htmlFor;
    $[5] = id;
    $[6] = props;
    $[7] = required;
    $[8] = requiredIndicator;
    $[9] = requiredText;
    $[10] = sx;
    $[11] = t1;
    $[12] = visuallyHidden;
  } else {
    children = $[1];
    className = $[2];
    disabled = $[3];
    htmlFor = $[4];
    id = $[5];
    props = $[6];
    required = $[7];
    requiredIndicator = $[8];
    requiredText = $[9];
    sx = $[10];
    t1 = $[11];
    visuallyHidden = $[12];
  }
  const as = t1 === undefined ? "label" : t1;
  const t2 = disabled ? "" : undefined;
  const t3 = visuallyHidden ? "" : undefined;
  let t4;
  if ($[13] !== className) {
    t4 = clsx.clsx(className, InputLabel_module.Label);
    $[13] = className;
    $[14] = t4;
  } else {
    t4 = $[14];
  }
  let t5;
  if ($[15] !== children || $[16] !== required || $[17] !== requiredIndicator || $[18] !== requiredText) {
    var _requiredText;
    t5 = required || requiredText ? /*#__PURE__*/jsxRuntime.jsxs("span", {
      className: InputLabel_module.RequiredText,
      children: [/*#__PURE__*/jsxRuntime.jsx("span", {
        children: children
      }), /*#__PURE__*/jsxRuntime.jsx("span", {
        "aria-hidden": requiredIndicator ? undefined : true,
        children: (_requiredText = requiredText) !== null && _requiredText !== void 0 ? _requiredText : "*"
      })]
    }) : children;
    $[15] = children;
    $[16] = required;
    $[17] = requiredIndicator;
    $[18] = requiredText;
    $[19] = t5;
  } else {
    t5 = $[19];
  }
  let t6;
  if ($[20] !== as || $[21] !== htmlFor || $[22] !== id || $[23] !== props || $[24] !== sx || $[25] !== t2 || $[26] !== t3 || $[27] !== t4 || $[28] !== t5) {
    t6 = /*#__PURE__*/jsxRuntime.jsx(BoxWithFallback.BoxWithFallback, {
      as: as,
      sx: sx,
      "data-control-disabled": t2,
      "data-visually-hidden": t3,
      htmlFor: htmlFor,
      id: id,
      className: t4,
      ...props,
      children: t5
    });
    $[20] = as;
    $[21] = htmlFor;
    $[22] = id;
    $[23] = props;
    $[24] = sx;
    $[25] = t2;
    $[26] = t3;
    $[27] = t4;
    $[28] = t5;
    $[29] = t6;
  } else {
    t6 = $[29];
  }
  return t6;
}

exports.InputLabel = InputLabel;
