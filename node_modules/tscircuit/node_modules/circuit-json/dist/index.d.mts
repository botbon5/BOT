import { z } from 'zod';

declare const resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
declare const capacitance: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, number, string | number>;
declare const inductance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
declare const voltage: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
declare const length: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
declare const frequency: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
/**
 * Length in meters
 */
type Length = number;
type Distance = number;
declare const distance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
declare const current: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
declare const time: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
/**
 * Rotation is always converted to degrees
 */
declare const rotation: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
declare const battery_capacity: z.ZodEffects<z.ZodUnion<[z.ZodNumber, z.ZodString]>, number, string | number>;
type InputRotation = number | string;
type Rotation = number;

declare const point: z.ZodObject<{
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
}, {
    x: string | number;
    y: string | number;
}>;
declare const position: z.ZodObject<{
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
}, {
    x: string | number;
    y: string | number;
}>;
type InputPoint = z.input<typeof point>;
type InputPosition = z.input<typeof position>;
interface Point {
    x: number;
    y: number;
}
interface Position {
    x: number;
    y: number;
}

declare const point3: z.ZodObject<{
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    z: number;
}, {
    x: string | number;
    y: string | number;
    z: string | number;
}>;
declare const position3: z.ZodObject<{
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    z: number;
}, {
    x: string | number;
    y: string | number;
    z: string | number;
}>;
interface Point3 {
    x: number;
    y: number;
    z: number;
}

declare const size: z.ZodObject<{
    width: z.ZodNumber;
    height: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    width: number;
    height: number;
}, {
    width: number;
    height: number;
}>;
type SizeInput = z.input<typeof size>;
interface Size {
    width: number;
    height: number;
}

/**
 * Use this for primary keys for any circuit element
 */
declare const getZodPrefixedIdWithDefault: (prefix: string) => z.ZodDefault<z.ZodOptional<z.ZodString>>;

declare const all_layers: readonly ["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"];
declare const layer_string: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
declare const layer_ref: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
    name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
}, "strip", z.ZodTypeAny, {
    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
}, {
    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
}>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
}>;
type LayerRefInput = z.input<typeof layer_ref>;
type LayerRef = (typeof all_layers)[number];
declare const visible_layer: z.ZodEnum<["top", "bottom"]>;
type VisibleLayerRef = z.infer<typeof visible_layer>;
type VisibleLayer = z.infer<typeof visible_layer>;

declare const pcb_route_hint: z.ZodObject<{
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    via: z.ZodOptional<z.ZodBoolean>;
    via_to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    via?: boolean | undefined;
    via_to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
}, {
    x: string | number;
    y: string | number;
    via?: boolean | undefined;
    via_to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
}>;
declare const pcb_route_hints: z.ZodArray<z.ZodObject<{
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    via: z.ZodOptional<z.ZodBoolean>;
    via_to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    via?: boolean | undefined;
    via_to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
}, {
    x: string | number;
    y: string | number;
    via?: boolean | undefined;
    via_to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
}>, "many">;
type PcbRouteHintInput = z.input<typeof pcb_route_hint>;
type PcbRouteHintsInput = z.input<typeof pcb_route_hints>;
interface PcbRouteHint {
    x: number;
    y: number;
    via?: boolean;
    via_to_layer?: LayerRef;
}
type PcbRouteHints = PcbRouteHint[];

declare const supplier_name: z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>;
type SupplierName = "jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc";

declare const route_hint_point: z.ZodObject<{
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    via: z.ZodOptional<z.ZodBoolean>;
    to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    via?: boolean | undefined;
    to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    trace_width?: number | undefined;
}, {
    x: string | number;
    y: string | number;
    via?: boolean | undefined;
    to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    trace_width?: string | number | undefined;
}>;
type RouteHintPointInput = z.input<typeof route_hint_point>;
interface RouteHintPoint {
    x: number;
    y: number;
    via?: boolean;
    to_layer?: LayerRef;
    trace_width?: number;
}

declare const pcb_component: z.ZodObject<{
    type: z.ZodLiteral<"pcb_component">;
    pcb_component_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    source_component_id: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    rotation: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_component";
    width: number;
    height: number;
    pcb_component_id: string;
    source_component_id: string;
    center: {
        x: number;
        y: number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    rotation: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_component";
    width: string | number;
    height: string | number;
    source_component_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    rotation: string | number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}>;
type PcbComponentInput = z.input<typeof pcb_component>;
/**
 * Defines a component on the PCB
 */
interface PcbComponent {
    type: "pcb_component";
    pcb_component_id: string;
    source_component_id: string;
    subcircuit_id?: string;
    center: Point;
    layer: LayerRef;
    rotation: Rotation;
    width: Length;
    height: Length;
    pcb_group_id?: string;
}
/**
 * @deprecated use PcbComponent
 */
type PCBComponent = PcbComponent;

declare const pcb_hole_circle_or_square: z.ZodObject<{
    type: z.ZodLiteral<"pcb_hole">;
    pcb_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    hole_shape: z.ZodEnum<["circle", "square"]>;
    hole_diameter: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_hole";
    pcb_hole_id: string;
    hole_shape: "circle" | "square";
    hole_diameter: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_hole";
    hole_shape: "circle" | "square";
    hole_diameter: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_hole_id?: string | undefined;
}>;
declare const pcb_hole_circle_or_square_shape: z.ZodObject<{
    type: z.ZodLiteral<"pcb_hole">;
    pcb_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    hole_shape: z.ZodEnum<["circle", "square"]>;
    hole_diameter: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_hole";
    pcb_hole_id: string;
    hole_shape: "circle" | "square";
    hole_diameter: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_hole";
    hole_shape: "circle" | "square";
    hole_diameter: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_hole_id?: string | undefined;
}>;
type PcbHoleCircleOrSquareInput = z.input<typeof pcb_hole_circle_or_square>;
/**
 * Defines a circular or square hole on the PCB
 */
interface PcbHoleCircleOrSquare {
    type: "pcb_hole";
    pcb_hole_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    hole_shape: "circle" | "square";
    hole_diameter: number;
    x: Distance;
    y: Distance;
}
declare const pcb_hole_oval: z.ZodObject<{
    type: z.ZodLiteral<"pcb_hole">;
    pcb_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    hole_shape: z.ZodLiteral<"oval">;
    hole_width: z.ZodNumber;
    hole_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_hole";
    pcb_hole_id: string;
    hole_shape: "oval";
    hole_width: number;
    hole_height: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_hole";
    hole_shape: "oval";
    hole_width: number;
    hole_height: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_hole_id?: string | undefined;
}>;
declare const pcb_hole_oval_shape: z.ZodObject<{
    type: z.ZodLiteral<"pcb_hole">;
    pcb_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    hole_shape: z.ZodLiteral<"oval">;
    hole_width: z.ZodNumber;
    hole_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_hole";
    pcb_hole_id: string;
    hole_shape: "oval";
    hole_width: number;
    hole_height: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_hole";
    hole_shape: "oval";
    hole_width: number;
    hole_height: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_hole_id?: string | undefined;
}>;
type PcbHoleOvalInput = z.input<typeof pcb_hole_oval>;
/**
 * Defines an oval hole on the PCB
 */
interface PcbHoleOval {
    type: "pcb_hole";
    pcb_hole_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    hole_shape: "oval";
    hole_width: number;
    hole_height: number;
    x: Distance;
    y: Distance;
}
declare const pcb_hole: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"pcb_hole">;
    pcb_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    hole_shape: z.ZodEnum<["circle", "square"]>;
    hole_diameter: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_hole";
    pcb_hole_id: string;
    hole_shape: "circle" | "square";
    hole_diameter: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_hole";
    hole_shape: "circle" | "square";
    hole_diameter: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_hole_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_hole">;
    pcb_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    hole_shape: z.ZodLiteral<"oval">;
    hole_width: z.ZodNumber;
    hole_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_hole";
    pcb_hole_id: string;
    hole_shape: "oval";
    hole_width: number;
    hole_height: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_hole";
    hole_shape: "oval";
    hole_width: number;
    hole_height: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_hole_id?: string | undefined;
}>]>;
/**
 * @deprecated Use PcbHoleCircleOrSquare or PcbHoleOval
 */
type PCBHoleInput = z.input<typeof pcb_hole>;
/**
 * @deprecated Use PcbHoleCircleOrSquare or PcbHoleOval
 */
type PCBHole = z.infer<typeof pcb_hole>;
type PcbHole = PcbHoleCircleOrSquare | PcbHoleOval;

/**
 * Defines a circular plated hole on the PCB
 */
interface PcbPlatedHoleCircle {
    type: "pcb_plated_hole";
    shape: "circle";
    pcb_group_id?: string;
    subcircuit_id?: string;
    outer_diameter: number;
    hole_diameter: number;
    x: Distance;
    y: Distance;
    layers: LayerRef[];
    port_hints?: string[];
    pcb_component_id?: string;
    pcb_port_id?: string;
    pcb_plated_hole_id: string;
}
/**
 * Defines an oval or pill-shaped plated hole on the PCB
 */
interface PcbPlatedHoleOval {
    type: "pcb_plated_hole";
    shape: "oval" | "pill";
    pcb_group_id?: string;
    subcircuit_id?: string;
    outer_width: number;
    outer_height: number;
    hole_width: number;
    hole_height: number;
    x: Distance;
    y: Distance;
    layers: LayerRef[];
    port_hints?: string[];
    pcb_component_id?: string;
    pcb_port_id?: string;
    pcb_plated_hole_id: string;
}
interface PcbHolePillWithRectPad {
    type: "pcb_plated_hole";
    shape: "pill_hole_with_rect_pad";
    pcb_group_id?: string;
    subcircuit_id?: string;
    hole_shape: "pill";
    pad_shape: "rect";
    hole_width: number;
    hole_height: number;
    rect_pad_width: number;
    rect_pad_height: number;
    x: Distance;
    y: Distance;
    layers: LayerRef[];
    port_hints?: string[];
    pcb_component_id?: string;
    pcb_port_id?: string;
    pcb_plated_hole_id: string;
}
interface PcbHoleCircularWithRectPad {
    type: "pcb_plated_hole";
    shape: "circular_hole_with_rect_pad";
    pcb_group_id?: string;
    subcircuit_id?: string;
    hole_shape: "circle";
    pad_shape: "rect";
    hole_diameter: number;
    rect_pad_width: number;
    rect_pad_height: number;
    x: Distance;
    y: Distance;
    layers: LayerRef[];
    port_hints?: string[];
    pcb_component_id?: string;
    pcb_port_id?: string;
    pcb_plated_hole_id: string;
}
declare const pcb_plated_hole: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"pcb_plated_hole">;
    shape: z.ZodLiteral<"circle">;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    outer_diameter: z.ZodNumber;
    hole_diameter: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
    pcb_plated_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_plated_hole";
    hole_diameter: number;
    shape: "circle";
    outer_diameter: number;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_plated_hole_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_plated_hole";
    hole_diameter: number;
    shape: "circle";
    outer_diameter: number;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_plated_hole">;
    shape: z.ZodEnum<["oval", "pill"]>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    outer_width: z.ZodNumber;
    outer_height: z.ZodNumber;
    hole_width: z.ZodNumber;
    hole_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
    pcb_plated_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_plated_hole";
    hole_width: number;
    hole_height: number;
    shape: "oval" | "pill";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_plated_hole_id: string;
    outer_width: number;
    outer_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_plated_hole";
    hole_width: number;
    hole_height: number;
    shape: "oval" | "pill";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    outer_width: number;
    outer_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_plated_hole">;
    shape: z.ZodLiteral<"circular_hole_with_rect_pad">;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    hole_shape: z.ZodLiteral<"circle">;
    pad_shape: z.ZodLiteral<"rect">;
    hole_diameter: z.ZodNumber;
    rect_pad_width: z.ZodNumber;
    rect_pad_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
    pcb_plated_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_plated_hole";
    hole_shape: "circle";
    hole_diameter: number;
    shape: "circular_hole_with_rect_pad";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_plated_hole_id: string;
    pad_shape: "rect";
    rect_pad_width: number;
    rect_pad_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_plated_hole";
    hole_shape: "circle";
    hole_diameter: number;
    shape: "circular_hole_with_rect_pad";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    pad_shape: "rect";
    rect_pad_width: number;
    rect_pad_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_plated_hole">;
    shape: z.ZodLiteral<"pill_hole_with_rect_pad">;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    hole_shape: z.ZodLiteral<"pill">;
    pad_shape: z.ZodLiteral<"rect">;
    hole_width: z.ZodNumber;
    hole_height: z.ZodNumber;
    rect_pad_width: z.ZodNumber;
    rect_pad_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
    pcb_plated_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_plated_hole";
    hole_shape: "pill";
    hole_width: number;
    hole_height: number;
    shape: "pill_hole_with_rect_pad";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_plated_hole_id: string;
    pad_shape: "rect";
    rect_pad_width: number;
    rect_pad_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_plated_hole";
    hole_shape: "pill";
    hole_width: number;
    hole_height: number;
    shape: "pill_hole_with_rect_pad";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    pad_shape: "rect";
    rect_pad_width: number;
    rect_pad_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
}>]>;
type PcbPlatedHole = PcbPlatedHoleCircle | PcbPlatedHoleOval | PcbHoleCircularWithRectPad | PcbHolePillWithRectPad;
/**
 * @deprecated use PcbPlatedHole
 */
type PCBPlatedHole = PcbPlatedHole;
/**
 * @deprecated use PcbPlatedHoleInput
 */
type PCBPlatedHoleInput = z.input<typeof pcb_plated_hole>;
type PcbPlatedHoleInput = z.input<typeof pcb_plated_hole>;

declare const pcb_port: z.ZodObject<{
    type: z.ZodLiteral<"pcb_port">;
    pcb_port_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    source_port_id: z.ZodString;
    pcb_component_id: z.ZodString;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_port";
    pcb_component_id: string;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_port_id: string;
    source_port_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_port";
    pcb_component_id: string;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    source_port_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_port_id?: string | undefined;
}>;
type PcbPortInput = z.input<typeof pcb_port>;
/**
 * Defines a port on the PCB
 */
interface PcbPort {
    type: "pcb_port";
    pcb_port_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    source_port_id: string;
    pcb_component_id: string;
    x: Distance;
    y: Distance;
    layers: LayerRef[];
}
/**
 * @deprecated use PcbPort
 */
type PCBPort = PcbPort;
/**
 * @deprecated use PcbPortInput
 */
type PCBPortInput = PcbPortInput;

declare const pcb_smtpad_pill: z.ZodObject<{
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"pill">;
    pcb_smtpad_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    radius: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "pill";
    pcb_smtpad_id: string;
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "pill";
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}>;
declare const pcb_smtpad: z.ZodDiscriminatedUnion<"shape", [z.ZodObject<{
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"circle">;
    pcb_smtpad_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    radius: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_smtpad";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "circle";
    pcb_smtpad_id: string;
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_smtpad";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "circle";
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"rect">;
    pcb_smtpad_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "rect";
    pcb_smtpad_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "rect";
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"rotated_rect">;
    pcb_smtpad_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    ccw_rotation: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "rotated_rect";
    pcb_smtpad_id: string;
    ccw_rotation: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "rotated_rect";
    ccw_rotation: string | number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"pill">;
    pcb_smtpad_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    radius: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "pill";
    pcb_smtpad_id: string;
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "pill";
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"polygon">;
    pcb_smtpad_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_smtpad";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "polygon";
    pcb_smtpad_id: string;
    points: {
        x: number;
        y: number;
    }[];
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    type: "pcb_smtpad";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "polygon";
    points: {
        x: string | number;
        y: string | number;
    }[];
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}>]>;
type PCBSMTPadInput = z.input<typeof pcb_smtpad>;
/**
 * Defines a circular SMT pad on the PCB
 */
interface PcbSmtPadCircle {
    type: "pcb_smtpad";
    shape: "circle";
    pcb_smtpad_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    x: Distance;
    y: Distance;
    radius: number;
    layer: LayerRef;
    port_hints?: string[];
    pcb_component_id?: string;
    pcb_port_id?: string;
}
/**
 * Defines a rectangular SMT pad on the PCB
 */
interface PcbSmtPadRect {
    type: "pcb_smtpad";
    shape: "rect";
    pcb_smtpad_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    x: Distance;
    y: Distance;
    width: number;
    height: number;
    layer: LayerRef;
    port_hints?: string[];
    pcb_component_id?: string;
    pcb_port_id?: string;
}
/**
 * Defines a rotated rectangular SMT pad on the PCB
 */
interface PcbSmtPadRotatedRect {
    type: "pcb_smtpad";
    shape: "rotated_rect";
    pcb_smtpad_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    x: Distance;
    y: Distance;
    width: number;
    height: number;
    ccw_rotation: Rotation;
    layer: LayerRef;
    port_hints?: string[];
    pcb_component_id?: string;
    pcb_port_id?: string;
}
/**
 * Defines a pill-shaped SMT pad on the PCB (rounded rectangle).
 */
interface PcbSmtPadPill {
    type: "pcb_smtpad";
    shape: "pill";
    pcb_smtpad_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    x: Distance;
    y: Distance;
    width: number;
    height: number;
    radius: number;
    layer: LayerRef;
    port_hints?: string[];
    pcb_component_id?: string;
    pcb_port_id?: string;
}
/**
 * Defines a polygonal SMT pad on the PCB
 */
interface PcbSmtPadPolygon {
    type: "pcb_smtpad";
    shape: "polygon";
    pcb_smtpad_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    points: Point[];
    layer: LayerRef;
    port_hints?: string[];
    pcb_component_id?: string;
    pcb_port_id?: string;
}
type PcbSmtPad = PcbSmtPadCircle | PcbSmtPadRect | PcbSmtPadRotatedRect | PcbSmtPadPill | PcbSmtPadPolygon;
/**
 * @deprecated use PcbSmtPad
 */
type PCBSMTPad = PcbSmtPad;

declare const pcb_solder_paste: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"pcb_solder_paste">;
    shape: z.ZodLiteral<"circle">;
    pcb_solder_paste_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    radius: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_smtpad_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_solder_paste";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "circle";
    radius: number;
    pcb_solder_paste_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_solder_paste";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "circle";
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
    pcb_solder_paste_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_solder_paste">;
    shape: z.ZodLiteral<"rect">;
    pcb_solder_paste_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_smtpad_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "rect";
    pcb_solder_paste_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "rect";
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
    pcb_solder_paste_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_solder_paste">;
    shape: z.ZodLiteral<"pill">;
    pcb_solder_paste_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    radius: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_smtpad_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "pill";
    radius: number;
    pcb_solder_paste_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "pill";
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
    pcb_solder_paste_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_solder_paste">;
    shape: z.ZodLiteral<"rotated_rect">;
    pcb_solder_paste_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    ccw_rotation: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_smtpad_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "rotated_rect";
    ccw_rotation: number;
    pcb_solder_paste_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "rotated_rect";
    ccw_rotation: string | number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
    pcb_solder_paste_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_solder_paste">;
    shape: z.ZodLiteral<"oval">;
    pcb_solder_paste_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_smtpad_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "oval";
    pcb_solder_paste_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "oval";
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
    pcb_solder_paste_id?: string | undefined;
}>]>;
type PCBSolderPasteInput = z.input<typeof pcb_solder_paste>;
/**
 * Defines solderpaste on the PCB
 */
interface PcbSolderPasteCircle {
    type: "pcb_solder_paste";
    shape: "circle";
    pcb_solder_paste_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    x: Distance;
    y: Distance;
    radius: number;
    layer: LayerRef;
    pcb_component_id?: string;
    pcb_smtpad_id?: string;
}
/**
 * Defines solderpaste on the PCB
 */
interface PcbSolderPasteRect {
    type: "pcb_solder_paste";
    shape: "rect";
    pcb_solder_paste_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    x: Distance;
    y: Distance;
    width: number;
    height: number;
    layer: LayerRef;
    pcb_component_id?: string;
    pcb_smtpad_id?: string;
}
/**
 * Defines solderpaste on the PCB
 */
interface PcbSolderPastePill {
    type: "pcb_solder_paste";
    shape: "pill";
    pcb_solder_paste_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    x: Distance;
    y: Distance;
    width: number;
    height: number;
    radius: number;
    layer: LayerRef;
    pcb_component_id?: string;
    pcb_smtpad_id?: string;
}
/**
 * Defines solderpaste on the PCB
 */
interface PcbSolderPasteRotatedRect {
    type: "pcb_solder_paste";
    shape: "rotated_rect";
    pcb_solder_paste_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    x: Distance;
    y: Distance;
    width: number;
    height: number;
    ccw_rotation: Distance;
    layer: LayerRef;
    pcb_component_id?: string;
    pcb_smtpad_id?: string;
}
/**
 * Defines solderpaste on the PCB
 */
interface PcbSolderPasteOval {
    type: "pcb_solder_paste";
    shape: "oval";
    pcb_solder_paste_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    x: Distance;
    y: Distance;
    width: number;
    height: number;
    layer: LayerRef;
    pcb_component_id?: string;
    pcb_smtpad_id?: string;
}
type PcbSolderPaste = PcbSolderPasteCircle | PcbSolderPasteRect | PcbSolderPastePill | PcbSolderPasteRotatedRect | PcbSolderPasteOval;

declare const pcb_text: z.ZodObject<{
    type: z.ZodLiteral<"pcb_text">;
    pcb_text_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    text: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    lines: z.ZodNumber;
    align: z.ZodEnum<["bottom-left"]>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_text";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    pcb_text_id: string;
    text: string;
    lines: number;
    align: "bottom-left";
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_text";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    text: string;
    lines: number;
    align: "bottom-left";
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_text_id?: string | undefined;
}>;
type PcbTextInput = z.input<typeof pcb_text>;
/**
 * Defines text on the PCB
 */
interface PcbText {
    type: "pcb_text";
    pcb_text_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    text: string;
    center: Point;
    layer: LayerRef;
    width: Length;
    height: Length;
    lines: number;
    align: "bottom-left";
}
/**
 * @deprecated use PcbText
 */
type PCBText = PcbText;

declare const pcb_trace_route_point_wire: z.ZodObject<{
    route_type: z.ZodLiteral<"wire">;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    start_pcb_port_id: z.ZodOptional<z.ZodString>;
    end_pcb_port_id: z.ZodOptional<z.ZodString>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    width: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    route_type: "wire";
    start_pcb_port_id?: string | undefined;
    end_pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    width: string | number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    route_type: "wire";
    start_pcb_port_id?: string | undefined;
    end_pcb_port_id?: string | undefined;
}>;
declare const pcb_trace_route_point_via: z.ZodObject<{
    route_type: z.ZodLiteral<"via">;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    hole_diameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    outer_diameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    from_layer: z.ZodString;
    to_layer: z.ZodString;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    to_layer: string;
    route_type: "via";
    from_layer: string;
    hole_diameter?: number | undefined;
    outer_diameter?: number | undefined;
}, {
    x: string | number;
    y: string | number;
    to_layer: string;
    route_type: "via";
    from_layer: string;
    hole_diameter?: string | number | undefined;
    outer_diameter?: string | number | undefined;
}>;
declare const pcb_trace_route_point: z.ZodUnion<[z.ZodObject<{
    route_type: z.ZodLiteral<"wire">;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    start_pcb_port_id: z.ZodOptional<z.ZodString>;
    end_pcb_port_id: z.ZodOptional<z.ZodString>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    width: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    route_type: "wire";
    start_pcb_port_id?: string | undefined;
    end_pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    width: string | number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    route_type: "wire";
    start_pcb_port_id?: string | undefined;
    end_pcb_port_id?: string | undefined;
}>, z.ZodObject<{
    route_type: z.ZodLiteral<"via">;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    hole_diameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    outer_diameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    from_layer: z.ZodString;
    to_layer: z.ZodString;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    to_layer: string;
    route_type: "via";
    from_layer: string;
    hole_diameter?: number | undefined;
    outer_diameter?: number | undefined;
}, {
    x: string | number;
    y: string | number;
    to_layer: string;
    route_type: "via";
    from_layer: string;
    hole_diameter?: string | number | undefined;
    outer_diameter?: string | number | undefined;
}>]>;
declare const pcb_trace: z.ZodObject<{
    type: z.ZodLiteral<"pcb_trace">;
    source_trace_id: z.ZodOptional<z.ZodString>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_trace_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    route_thickness_mode: z.ZodOptional<z.ZodDefault<z.ZodEnum<["constant", "interpolated"]>>>;
    route_order_index: z.ZodOptional<z.ZodNumber>;
    should_round_corners: z.ZodOptional<z.ZodBoolean>;
    trace_length: z.ZodOptional<z.ZodNumber>;
    route: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        route_type: z.ZodLiteral<"wire">;
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        start_pcb_port_id: z.ZodOptional<z.ZodString>;
        end_pcb_port_id: z.ZodOptional<z.ZodString>;
        layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        width: number;
        layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    }, {
        x: string | number;
        y: string | number;
        width: string | number;
        layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        };
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    }>, z.ZodObject<{
        route_type: z.ZodLiteral<"via">;
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        hole_diameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        outer_diameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        from_layer: z.ZodString;
        to_layer: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
        hole_diameter?: number | undefined;
        outer_diameter?: number | undefined;
    }, {
        x: string | number;
        y: string | number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
        hole_diameter?: string | number | undefined;
        outer_diameter?: string | number | undefined;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "pcb_trace";
    pcb_trace_id: string;
    route: ({
        x: number;
        y: number;
        width: number;
        layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    } | {
        x: number;
        y: number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
        hole_diameter?: number | undefined;
        outer_diameter?: number | undefined;
    })[];
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    source_trace_id?: string | undefined;
    route_thickness_mode?: "constant" | "interpolated" | undefined;
    route_order_index?: number | undefined;
    should_round_corners?: boolean | undefined;
    trace_length?: number | undefined;
}, {
    type: "pcb_trace";
    route: ({
        x: string | number;
        y: string | number;
        width: string | number;
        layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        };
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    } | {
        x: string | number;
        y: string | number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
        hole_diameter?: string | number | undefined;
        outer_diameter?: string | number | undefined;
    })[];
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    source_trace_id?: string | undefined;
    pcb_trace_id?: string | undefined;
    route_thickness_mode?: "constant" | "interpolated" | undefined;
    route_order_index?: number | undefined;
    should_round_corners?: boolean | undefined;
    trace_length?: number | undefined;
}>;
type PcbTraceInput = z.input<typeof pcb_trace>;
interface PcbTraceRoutePointWire {
    route_type: "wire";
    x: Distance;
    y: Distance;
    width: Distance;
    start_pcb_port_id?: string;
    end_pcb_port_id?: string;
    layer: LayerRef;
}
interface PcbTraceRoutePointVia {
    route_type: "via";
    x: Distance;
    y: Distance;
    hole_diameter?: Distance;
    outer_diameter?: Distance;
    from_layer: string;
    to_layer: string;
}
type PcbTraceRoutePoint = PcbTraceRoutePointWire | PcbTraceRoutePointVia;
/**
 * Defines a trace on the PCB
 */
interface PcbTrace {
    type: "pcb_trace";
    source_trace_id?: string;
    pcb_component_id?: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    pcb_trace_id: string;
    /**
     * The order that this trace was routed in. This can be used to debug the
     * autorouter and to understand the trace path better
     *
     * The route_order_index should be relative to a subcircuit
     */
    route_order_index?: number;
    route_thickness_mode?: "constant" | "interpolated";
    should_round_corners?: boolean;
    trace_length?: number;
    route: Array<PcbTraceRoutePoint>;
}
/**
 * @deprecated use PcbTrace
 */
type PCBTrace = PcbTrace;
/**
 * @deprecated use PcbTraceInput
 */
type PCBTraceInput = PcbTraceInput;

declare const pcb_trace_error: z.ZodObject<{
    type: z.ZodLiteral<"pcb_trace_error">;
    pcb_trace_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_trace_error">>;
    message: z.ZodString;
    center: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>>;
    pcb_trace_id: z.ZodString;
    source_trace_id: z.ZodString;
    pcb_component_ids: z.ZodArray<z.ZodString, "many">;
    pcb_port_ids: z.ZodArray<z.ZodString, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_trace_error";
    source_trace_id: string;
    pcb_trace_id: string;
    pcb_trace_error_id: string;
    error_type: "pcb_trace_error";
    pcb_component_ids: string[];
    pcb_port_ids: string[];
    center?: {
        x: number;
        y: number;
    } | undefined;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "pcb_trace_error";
    source_trace_id: string;
    pcb_trace_id: string;
    pcb_component_ids: string[];
    pcb_port_ids: string[];
    center?: {
        x: string | number;
        y: string | number;
    } | undefined;
    subcircuit_id?: string | undefined;
    pcb_trace_error_id?: string | undefined;
    error_type?: "pcb_trace_error" | undefined;
}>;
type PcbTraceErrorInput = z.input<typeof pcb_trace_error>;
/**
 * Defines a trace error on the PCB
 */
interface PcbTraceError {
    type: "pcb_trace_error";
    pcb_trace_error_id: string;
    error_type: "pcb_trace_error";
    message: string;
    center?: Point;
    pcb_trace_id: string;
    source_trace_id: string;
    pcb_component_ids: string[];
    pcb_port_ids: string[];
    subcircuit_id?: string;
}
/**
 * @deprecated use PcbTraceError
 */
type PCBTraceError = PcbTraceError;

declare const pcb_port_not_matched_error: z.ZodObject<{
    type: z.ZodLiteral<"pcb_port_not_matched_error">;
    pcb_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_port_not_matched_error">>;
    message: z.ZodString;
    pcb_component_ids: z.ZodArray<z.ZodString, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_port_not_matched_error";
    error_type: "pcb_port_not_matched_error";
    pcb_component_ids: string[];
    pcb_error_id: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "pcb_port_not_matched_error";
    pcb_component_ids: string[];
    subcircuit_id?: string | undefined;
    error_type?: "pcb_port_not_matched_error" | undefined;
    pcb_error_id?: string | undefined;
}>;
type PcbPortNotMatchedErrorInput = z.input<typeof pcb_port_not_matched_error>;
/**
 * Defines a trace error on the PCB where a port is not matched
 */
interface PcbPortNotMatchedError {
    type: "pcb_port_not_matched_error";
    pcb_error_id: string;
    error_type: "pcb_port_not_matched_error";
    message: string;
    pcb_component_ids: string[];
    subcircuit_id?: string;
}
/**
 * @deprecated use PcbPortNotMatchedError
 */
type PCBPortNotMatchedError = PcbPortNotMatchedError;

declare const pcb_via: z.ZodObject<{
    type: z.ZodLiteral<"pcb_via">;
    pcb_via_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    outer_diameter: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    hole_diameter: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    /** @deprecated */
    from_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    /** @deprecated */
    to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    pcb_trace_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_via";
    hole_diameter: number;
    outer_diameter: number;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_via_id: string;
    to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    from_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcb_trace_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_via";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    hole_diameter?: string | number | undefined;
    outer_diameter?: string | number | undefined;
    from_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcb_trace_id?: string | undefined;
    pcb_via_id?: string | undefined;
}>;
type PcbViaInput = z.input<typeof pcb_via>;
/**
 * Defines a via on the PCB
 */
interface PcbVia {
    type: "pcb_via";
    pcb_via_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    x: Distance;
    y: Distance;
    outer_diameter: Distance;
    hole_diameter: Distance;
    /** @deprecated */
    from_layer?: LayerRef;
    /** @deprecated */
    to_layer?: LayerRef;
    layers: LayerRef[];
    pcb_trace_id?: string;
}
/**
 * @deprecated use PcbVia
 */
type PCBVia = PcbVia;

declare const pcb_board: z.ZodObject<{
    type: z.ZodLiteral<"pcb_board">;
    pcb_board_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    is_subcircuit: z.ZodOptional<z.ZodBoolean>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    thickness: z.ZodDefault<z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>>;
    num_layers: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    outline: z.ZodOptional<z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">>;
    material: z.ZodDefault<z.ZodEnum<["fr4", "fr1"]>>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_board";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    pcb_board_id: string;
    thickness: number;
    num_layers: number;
    material: "fr4" | "fr1";
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    outline?: {
        x: number;
        y: number;
    }[] | undefined;
}, {
    type: "pcb_board";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    subcircuit_id?: string | undefined;
    pcb_board_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    thickness?: string | number | undefined;
    num_layers?: number | undefined;
    outline?: {
        x: string | number;
        y: string | number;
    }[] | undefined;
    material?: "fr4" | "fr1" | undefined;
}>;
/**
 * Defines the board outline of the PCB
 */
interface PcbBoard {
    type: "pcb_board";
    pcb_board_id: string;
    is_subcircuit?: boolean;
    subcircuit_id?: string;
    width: Length;
    height: Length;
    thickness: Length;
    num_layers: number;
    center: Point;
    outline?: Point[];
    material: "fr4" | "fr1";
}
type PcbBoardInput = z.input<typeof pcb_board>;
/**
 * @deprecated use PcbBoard
 */
type PCBBoard = PcbBoard;

declare const pcb_placement_error: z.ZodObject<{
    type: z.ZodLiteral<"pcb_placement_error">;
    pcb_placement_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_placement_error">>;
    message: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_placement_error";
    error_type: "pcb_placement_error";
    pcb_placement_error_id: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "pcb_placement_error";
    subcircuit_id?: string | undefined;
    error_type?: "pcb_placement_error" | undefined;
    pcb_placement_error_id?: string | undefined;
}>;
type PcbPlacementErrorInput = z.input<typeof pcb_placement_error>;
/**
 * Defines a placement error on the PCB
 */
interface PcbPlacementError {
    type: "pcb_placement_error";
    pcb_placement_error_id: string;
    error_type: "pcb_placement_error";
    message: string;
    subcircuit_id?: string;
}
/**
 * @deprecated use PcbPlacementError
 */
type PCBPlacementError = PcbPlacementError;

/**
 * A hint that can be used during generation of a PCB trace.
 */
interface PcbTraceHint {
    type: "pcb_trace_hint";
    pcb_trace_hint_id: string;
    pcb_port_id: string;
    pcb_component_id: string;
    route: RouteHintPoint[];
    subcircuit_id?: string;
}
declare const pcb_trace_hint: z.ZodObject<{
    type: z.ZodLiteral<"pcb_trace_hint">;
    pcb_trace_hint_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_port_id: z.ZodString;
    pcb_component_id: z.ZodString;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        via: z.ZodOptional<z.ZodBoolean>;
        to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>>;
        trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }, {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }>, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_trace_hint";
    pcb_component_id: string;
    pcb_port_id: string;
    route: {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }[];
    pcb_trace_hint_id: string;
    subcircuit_id?: string | undefined;
}, {
    type: "pcb_trace_hint";
    pcb_component_id: string;
    pcb_port_id: string;
    route: {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }[];
    subcircuit_id?: string | undefined;
    pcb_trace_hint_id?: string | undefined;
}>;
type PcbTraceHintInput = z.input<typeof pcb_trace_hint>;
/**
 * @deprecated use PcbTraceHint
 */
type PCBTraceHint = PcbTraceHint;

declare const pcb_silkscreen_line: z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_line">;
    pcb_silkscreen_line_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    stroke_width: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    x1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    x2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEnum<["top", "bottom"]>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_line";
    pcb_component_id: string;
    layer: "top" | "bottom";
    pcb_silkscreen_line_id: string;
    stroke_width: number;
    x1: number;
    y1: number;
    x2: number;
    y2: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_silkscreen_line";
    pcb_component_id: string;
    layer: "top" | "bottom";
    x1: string | number;
    y1: string | number;
    x2: string | number;
    y2: string | number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_silkscreen_line_id?: string | undefined;
    stroke_width?: string | number | undefined;
}>;
type PcbSilkscreenLineInput = z.input<typeof pcb_silkscreen_line>;
/**
 * Defines a silkscreen line on the PCB
 */
interface PcbSilkscreenLine {
    type: "pcb_silkscreen_line";
    pcb_silkscreen_line_id: string;
    pcb_component_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    stroke_width: Distance;
    x1: Distance;
    y1: Distance;
    x2: Distance;
    y2: Distance;
    layer: VisibleLayer;
}
/**
 * @deprecated use PcbSilkscreenLine
 */
type PCBSilkscreenLine = PcbSilkscreenLine;

declare const pcb_silkscreen_path: z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_path">;
    pcb_silkscreen_path_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    layer: z.ZodEnum<["top", "bottom"]>;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    stroke_width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_path";
    pcb_component_id: string;
    layer: "top" | "bottom";
    route: {
        x: number;
        y: number;
    }[];
    stroke_width: number;
    pcb_silkscreen_path_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_silkscreen_path";
    pcb_component_id: string;
    layer: "top" | "bottom";
    route: {
        x: string | number;
        y: string | number;
    }[];
    stroke_width: string | number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_silkscreen_path_id?: string | undefined;
}>;
type PcbSilkscreenPathInput = z.input<typeof pcb_silkscreen_path>;
/**
 * Defines a silkscreen path on the PCB
 */
interface PcbSilkscreenPath {
    type: "pcb_silkscreen_path";
    pcb_silkscreen_path_id: string;
    pcb_component_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    layer: VisibleLayerRef;
    route: Point[];
    stroke_width: Length;
}
/**
 * @deprecated use PcbSilkscreenPath
 */
type PcbSilkscreenPathDeprecated = PcbSilkscreenPath;

type NinePointAnchor = "top_left" | "top_center" | "top_right" | "center_left" | "center" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right";
declare const ninePointAnchor: z.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>;

declare const pcb_silkscreen_text: z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_text">;
    pcb_silkscreen_text_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    font: z.ZodDefault<z.ZodLiteral<"tscircuit2024">>;
    font_size: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcb_component_id: z.ZodString;
    text: z.ZodString;
    ccw_rotation: z.ZodOptional<z.ZodNumber>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    is_mirrored: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    anchor_position: z.ZodDefault<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>>;
    anchor_alignment: z.ZodDefault<z.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_text";
    pcb_component_id: string;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    text: string;
    pcb_silkscreen_text_id: string;
    font: "tscircuit2024";
    font_size: number;
    anchor_position: {
        x: number;
        y: number;
    };
    anchor_alignment: "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right";
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    ccw_rotation?: number | undefined;
    is_mirrored?: boolean | undefined;
}, {
    type: "pcb_silkscreen_text";
    pcb_component_id: string;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    text: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    ccw_rotation?: number | undefined;
    pcb_silkscreen_text_id?: string | undefined;
    font?: "tscircuit2024" | undefined;
    font_size?: string | number | undefined;
    is_mirrored?: boolean | undefined;
    anchor_position?: {
        x: string | number;
        y: string | number;
    } | undefined;
    anchor_alignment?: "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right" | undefined;
}>;
type PcbSilkscreenTextInput = z.input<typeof pcb_silkscreen_text>;
/**
 * Defines silkscreen text on the PCB
 */
interface PcbSilkscreenText {
    type: "pcb_silkscreen_text";
    pcb_silkscreen_text_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    font: "tscircuit2024";
    font_size: Length;
    pcb_component_id: string;
    text: string;
    ccw_rotation?: number;
    layer: LayerRef;
    is_mirrored?: boolean;
    anchor_position: Point;
    anchor_alignment: NinePointAnchor;
}
/**
 * @deprecated use PcbSilkscreenText
 */
type PCBSilkscreenText = PcbSilkscreenText;

declare const pcb_silkscreen_rect: z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_rect">;
    pcb_silkscreen_rect_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    stroke_width: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    is_filled: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    has_stroke: z.ZodOptional<z.ZodBoolean>;
    is_stroke_dashed: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_rect";
    width: number;
    height: number;
    pcb_component_id: string;
    center: {
        x: number;
        y: number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    stroke_width: number;
    pcb_silkscreen_rect_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    is_filled?: boolean | undefined;
    has_stroke?: boolean | undefined;
    is_stroke_dashed?: boolean | undefined;
}, {
    type: "pcb_silkscreen_rect";
    width: string | number;
    height: string | number;
    pcb_component_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    stroke_width?: string | number | undefined;
    pcb_silkscreen_rect_id?: string | undefined;
    is_filled?: boolean | undefined;
    has_stroke?: boolean | undefined;
    is_stroke_dashed?: boolean | undefined;
}>;
type PcbSilkscreenRectInput = z.input<typeof pcb_silkscreen_rect>;
/**
 * Defines a silkscreen rect on the PCB
 */
interface PcbSilkscreenRect {
    type: "pcb_silkscreen_rect";
    pcb_silkscreen_rect_id: string;
    pcb_component_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    center: Point;
    width: Length;
    height: Length;
    layer: LayerRef;
    stroke_width: Length;
    is_filled?: boolean;
    has_stroke?: boolean;
    is_stroke_dashed?: boolean;
}
/**
 * @deprecated use PcbSilkscreenRect
 */
type PcbSilkscreenRectOld = PcbSilkscreenRect;

declare const pcb_silkscreen_circle: z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_circle">;
    pcb_silkscreen_circle_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEnum<["top", "bottom"]>;
    stroke_width: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_circle";
    pcb_component_id: string;
    center: {
        x: number;
        y: number;
    };
    layer: "top" | "bottom";
    radius: number;
    stroke_width: number;
    pcb_silkscreen_circle_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_silkscreen_circle";
    pcb_component_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    layer: "top" | "bottom";
    radius: string | number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    stroke_width?: string | number | undefined;
    pcb_silkscreen_circle_id?: string | undefined;
}>;
type PcbSilkscreenCircleInput = z.input<typeof pcb_silkscreen_circle>;
/**
 * Defines a silkscreen circle on the PCB
 */
interface PcbSilkscreenCircle {
    type: "pcb_silkscreen_circle";
    pcb_silkscreen_circle_id: string;
    pcb_component_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    center: Point;
    radius: Length;
    layer: VisibleLayer;
    stroke_width: Length;
}

declare const pcb_silkscreen_oval: z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_oval">;
    pcb_silkscreen_oval_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    radius_x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    radius_y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEnum<["top", "bottom"]>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_oval";
    pcb_component_id: string;
    center: {
        x: number;
        y: number;
    };
    layer: "top" | "bottom";
    pcb_silkscreen_oval_id: string;
    radius_x: number;
    radius_y: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_silkscreen_oval";
    pcb_component_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    layer: "top" | "bottom";
    radius_x: string | number;
    radius_y: string | number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_silkscreen_oval_id?: string | undefined;
}>;
type PcbSilkscreenOvalInput = z.input<typeof pcb_silkscreen_oval>;
/**
 * Defines a silkscreen oval on the PCB
 */
interface PcbSilkscreenOval {
    type: "pcb_silkscreen_oval";
    pcb_silkscreen_oval_id: string;
    pcb_component_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    center: Point;
    radius_x: Distance;
    radius_y: Distance;
    layer: VisibleLayer;
}
/**
 * @deprecated use PcbSilkscreenOval
 */
type PcbSilkscreenOvalDeprecated = PcbSilkscreenOval;

declare const pcb_fabrication_note_text: z.ZodObject<{
    type: z.ZodLiteral<"pcb_fabrication_note_text">;
    pcb_fabrication_note_text_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    font: z.ZodDefault<z.ZodLiteral<"tscircuit2024">>;
    font_size: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcb_component_id: z.ZodString;
    text: z.ZodString;
    layer: z.ZodEnum<["top", "bottom"]>;
    anchor_position: z.ZodDefault<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>>;
    anchor_alignment: z.ZodDefault<z.ZodEnum<["center", "top_left", "top_right", "bottom_left", "bottom_right"]>>;
    color: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_fabrication_note_text";
    pcb_component_id: string;
    layer: "top" | "bottom";
    text: string;
    font: "tscircuit2024";
    font_size: number;
    anchor_position: {
        x: number;
        y: number;
    };
    anchor_alignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right";
    pcb_fabrication_note_text_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    color?: string | undefined;
}, {
    type: "pcb_fabrication_note_text";
    pcb_component_id: string;
    layer: "top" | "bottom";
    text: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    font?: "tscircuit2024" | undefined;
    font_size?: string | number | undefined;
    anchor_position?: {
        x: string | number;
        y: string | number;
    } | undefined;
    anchor_alignment?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | undefined;
    pcb_fabrication_note_text_id?: string | undefined;
    color?: string | undefined;
}>;
type PcbFabricationNoteTextInput = z.input<typeof pcb_fabrication_note_text>;
/**
 * Defines a fabrication note in text on the PCB, useful for leaving notes for assemblers or fabricators
 */
interface PcbFabricationNoteText {
    type: "pcb_fabrication_note_text";
    pcb_fabrication_note_text_id: string;
    subcircuit_id?: string;
    pcb_group_id?: string;
    font: "tscircuit2024";
    font_size: Length;
    pcb_component_id: string;
    text: string;
    layer: VisibleLayer;
    anchor_position: Point;
    anchor_alignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right";
    color?: string;
}
/**
 * @deprecated use PcbFabricationNoteText
 */
type PCBFabricationNoteText = PcbFabricationNoteText;

declare const pcb_fabrication_note_path: z.ZodObject<{
    type: z.ZodLiteral<"pcb_fabrication_note_path">;
    pcb_fabrication_note_path_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    stroke_width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    color: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_fabrication_note_path";
    pcb_component_id: string;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    route: {
        x: number;
        y: number;
    }[];
    stroke_width: number;
    pcb_fabrication_note_path_id: string;
    subcircuit_id?: string | undefined;
    color?: string | undefined;
}, {
    type: "pcb_fabrication_note_path";
    pcb_component_id: string;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    route: {
        x: string | number;
        y: string | number;
    }[];
    stroke_width: string | number;
    subcircuit_id?: string | undefined;
    color?: string | undefined;
    pcb_fabrication_note_path_id?: string | undefined;
}>;
type PcbFabricationNotePathInput = z.input<typeof pcb_fabrication_note_path>;
/**
 * Defines a fabrication path on the PCB for fabricators or assemblers
 */
interface PcbFabricationNotePath {
    type: "pcb_fabrication_note_path";
    pcb_fabrication_note_path_id: string;
    pcb_component_id: string;
    subcircuit_id?: string;
    layer: LayerRef;
    route: Point[];
    stroke_width: Length;
    color?: string;
}
/**
 * @deprecated use PcbFabricationNotePath
 */
type PCBFabricationNotePath = PcbFabricationNotePath;

declare const pcb_footprint_overlap_error: z.ZodObject<{
    type: z.ZodLiteral<"pcb_footprint_overlap_error">;
    pcb_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_footprint_overlap_error">>;
    message: z.ZodString;
    pcb_smtpad_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_plated_hole_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_hole_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_keepout_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_footprint_overlap_error";
    error_type: "pcb_footprint_overlap_error";
    pcb_error_id: string;
    pcb_smtpad_ids?: string[] | undefined;
    pcb_plated_hole_ids?: string[] | undefined;
    pcb_hole_ids?: string[] | undefined;
    pcb_keepout_ids?: string[] | undefined;
}, {
    message: string;
    type: "pcb_footprint_overlap_error";
    error_type?: "pcb_footprint_overlap_error" | undefined;
    pcb_error_id?: string | undefined;
    pcb_smtpad_ids?: string[] | undefined;
    pcb_plated_hole_ids?: string[] | undefined;
    pcb_hole_ids?: string[] | undefined;
    pcb_keepout_ids?: string[] | undefined;
}>;
type PcbFootprintOverlapErrorInput = z.input<typeof pcb_footprint_overlap_error>;
/** Error emitted when a pcb footprint overlaps with another element */
interface PcbFootprintOverlapError {
    type: "pcb_footprint_overlap_error";
    pcb_error_id: string;
    error_type: "pcb_footprint_overlap_error";
    message: string;
    pcb_smtpad_ids?: string[];
    pcb_plated_hole_ids?: string[];
    pcb_hole_ids?: string[];
    pcb_keepout_ids?: string[];
}

declare const pcb_keepout: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"pcb_keepout">;
    shape: z.ZodLiteral<"rect">;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    pcb_keepout_id: z.ZodString;
    layers: z.ZodArray<z.ZodString, "many">;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_keepout";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    shape: "rect";
    layers: string[];
    pcb_keepout_id: string;
    description?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_keepout";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "rect";
    layers: string[];
    pcb_keepout_id: string;
    description?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_keepout">;
    shape: z.ZodLiteral<"circle">;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    pcb_keepout_id: z.ZodString;
    layers: z.ZodArray<z.ZodString, "many">;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_keepout";
    center: {
        x: number;
        y: number;
    };
    shape: "circle";
    layers: string[];
    radius: number;
    pcb_keepout_id: string;
    description?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_keepout";
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "circle";
    layers: string[];
    radius: string | number;
    pcb_keepout_id: string;
    description?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}>]>;
type PCBKeepoutInput = z.input<typeof pcb_keepout>;
interface PCBKeepoutRect {
    type: "pcb_keepout";
    shape: "rect";
    pcb_group_id?: string;
    subcircuit_id?: string;
    center: Point;
    width: number;
    height: number;
    pcb_keepout_id: string;
    layers: string[];
    description?: string;
}
interface PCBKeepoutCircle {
    type: "pcb_keepout";
    shape: "circle";
    pcb_group_id?: string;
    subcircuit_id?: string;
    center: Point;
    radius: number;
    pcb_keepout_id: string;
    layers: string[];
    description?: string;
}
type PCBKeepout = PCBKeepoutRect | PCBKeepoutCircle;

declare const pcb_cutout_rect: z.ZodObject<{
    type: z.ZodLiteral<"pcb_cutout">;
    pcb_cutout_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"rect">;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    rotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_cutout";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    shape: "rect";
    pcb_cutout_id: string;
    rotation?: number | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_cutout";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "rect";
    rotation?: string | number | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_cutout_id?: string | undefined;
}>;
type PcbCutoutRectInput = z.input<typeof pcb_cutout_rect>;
/**
 * Defines a rectangular cutout on the PCB.
 */
interface PcbCutoutRect {
    type: "pcb_cutout";
    pcb_cutout_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    shape: "rect";
    center: Point;
    width: Length;
    height: Length;
    rotation?: Rotation;
}
declare const pcb_cutout_circle: z.ZodObject<{
    type: z.ZodLiteral<"pcb_cutout">;
    pcb_cutout_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"circle">;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_cutout";
    center: {
        x: number;
        y: number;
    };
    shape: "circle";
    radius: number;
    pcb_cutout_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_cutout";
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "circle";
    radius: string | number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_cutout_id?: string | undefined;
}>;
type PcbCutoutCircleInput = z.input<typeof pcb_cutout_circle>;
/**
 * Defines a circular cutout on the PCB.
 */
interface PcbCutoutCircle {
    type: "pcb_cutout";
    pcb_cutout_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    shape: "circle";
    center: Point;
    radius: Length;
}
declare const pcb_cutout_polygon: z.ZodObject<{
    type: z.ZodLiteral<"pcb_cutout">;
    pcb_cutout_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"polygon">;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "pcb_cutout";
    shape: "polygon";
    points: {
        x: number;
        y: number;
    }[];
    pcb_cutout_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_cutout";
    shape: "polygon";
    points: {
        x: string | number;
        y: string | number;
    }[];
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_cutout_id?: string | undefined;
}>;
type PcbCutoutPolygonInput = z.input<typeof pcb_cutout_polygon>;
/**
 * Defines a polygonal cutout on the PCB, specified by a list of points.
 * The polygon should be closed (the last point implicitly connects to the first).
 */
interface PcbCutoutPolygon {
    type: "pcb_cutout";
    pcb_cutout_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    shape: "polygon";
    points: Point[];
}
declare const pcb_cutout: z.ZodDiscriminatedUnion<"shape", [z.ZodObject<{
    type: z.ZodLiteral<"pcb_cutout">;
    pcb_cutout_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"rect">;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    rotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_cutout";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    shape: "rect";
    pcb_cutout_id: string;
    rotation?: number | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_cutout";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "rect";
    rotation?: string | number | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_cutout_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_cutout">;
    pcb_cutout_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"circle">;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_cutout";
    center: {
        x: number;
        y: number;
    };
    shape: "circle";
    radius: number;
    pcb_cutout_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_cutout";
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "circle";
    radius: string | number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_cutout_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_cutout">;
    pcb_cutout_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"polygon">;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "pcb_cutout";
    shape: "polygon";
    points: {
        x: number;
        y: number;
    }[];
    pcb_cutout_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_cutout";
    shape: "polygon";
    points: {
        x: string | number;
        y: string | number;
    }[];
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_cutout_id?: string | undefined;
}>]>;
type PcbCutoutInput = z.input<typeof pcb_cutout>;
type PcbCutout = PcbCutoutRect | PcbCutoutCircle | PcbCutoutPolygon;

declare const pcb_missing_footprint_error: z.ZodObject<{
    type: z.ZodLiteral<"pcb_missing_footprint_error">;
    pcb_missing_footprint_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_missing_footprint_error">>;
    source_component_id: z.ZodString;
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_missing_footprint_error";
    source_component_id: string;
    error_type: "pcb_missing_footprint_error";
    pcb_missing_footprint_error_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    message: string;
    type: "pcb_missing_footprint_error";
    source_component_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    error_type?: "pcb_missing_footprint_error" | undefined;
    pcb_missing_footprint_error_id?: string | undefined;
}>;
type PcbMissingFootprintErrorInput = z.input<typeof pcb_missing_footprint_error>;
/**
 * Defines a placement error on the PCB
 */
interface PcbMissingFootprintError {
    type: "pcb_missing_footprint_error";
    pcb_missing_footprint_error_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    error_type: "pcb_missing_footprint_error";
    source_component_id: string;
    message: string;
}
/**
 * @deprecated use PcbMissingFootprintError
 */
type PCBMissingFootprintError = PcbMissingFootprintError;

declare const pcb_group: z.ZodObject<{
    type: z.ZodLiteral<"pcb_group">;
    pcb_group_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    source_group_id: z.ZodString;
    is_subcircuit: z.ZodOptional<z.ZodBoolean>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    pcb_component_ids: z.ZodArray<z.ZodString, "many">;
    name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    autorouter_configuration: z.ZodOptional<z.ZodObject<{
        trace_clearance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        trace_clearance: number;
    }, {
        trace_clearance: string | number;
    }>>;
    autorouter_used_string: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_group";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    pcb_group_id: string;
    pcb_component_ids: string[];
    source_group_id: string;
    description?: string | undefined;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    autorouter_configuration?: {
        trace_clearance: number;
    } | undefined;
    autorouter_used_string?: string | undefined;
}, {
    type: "pcb_group";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    pcb_component_ids: string[];
    source_group_id: string;
    description?: string | undefined;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    autorouter_configuration?: {
        trace_clearance: string | number;
    } | undefined;
    autorouter_used_string?: string | undefined;
}>;
type PcbGroupInput = z.input<typeof pcb_group>;
/**
 * Defines a group of components on the PCB
 */
interface PcbGroup {
    type: "pcb_group";
    pcb_group_id: string;
    source_group_id: string;
    is_subcircuit?: boolean;
    subcircuit_id?: string;
    width: Length;
    height: Length;
    center: Point;
    pcb_component_ids: string[];
    name?: string;
    description?: string;
    autorouter_configuration?: {
        trace_clearance: Length;
    };
    autorouter_used_string?: string;
}

declare const pcb_autorouting_error: z.ZodObject<{
    type: z.ZodLiteral<"pcb_autorouting_error">;
    pcb_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_autorouting_error">>;
    message: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_autorouting_error";
    error_type: "pcb_autorouting_error";
    pcb_error_id: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "pcb_autorouting_error";
    subcircuit_id?: string | undefined;
    error_type?: "pcb_autorouting_error" | undefined;
    pcb_error_id?: string | undefined;
}>;
type PcbAutoroutingErrorInput = z.input<typeof pcb_autorouting_error>;
interface PcbAutoroutingErrorInterface {
    type: "pcb_autorouting_error";
    pcb_error_id: string;
    error_type: "pcb_autorouting_error";
    message: string;
    subcircuit_id?: string;
}
type PcbAutoroutingError = PcbAutoroutingErrorInterface;

declare const pcb_manual_edit_conflict_warning: z.ZodObject<{
    type: z.ZodLiteral<"pcb_manual_edit_conflict_warning">;
    pcb_manual_edit_conflict_warning_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    warning_type: z.ZodDefault<z.ZodLiteral<"pcb_manual_edit_conflict_warning">>;
    message: z.ZodString;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_manual_edit_conflict_warning";
    pcb_component_id: string;
    source_component_id: string;
    pcb_manual_edit_conflict_warning_id: string;
    warning_type: "pcb_manual_edit_conflict_warning";
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    message: string;
    type: "pcb_manual_edit_conflict_warning";
    pcb_component_id: string;
    source_component_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_manual_edit_conflict_warning_id?: string | undefined;
    warning_type?: "pcb_manual_edit_conflict_warning" | undefined;
}>;
type PcbManualEditConflictWarningInput = z.input<typeof pcb_manual_edit_conflict_warning>;
/**
 * Warning emitted when a component has both manual placement (via manualEdits) and explicit pcbX/pcbY coordinates
 */
interface PcbManualEditConflictWarning {
    type: "pcb_manual_edit_conflict_warning";
    pcb_manual_edit_conflict_warning_id: string;
    warning_type: "pcb_manual_edit_conflict_warning";
    message: string;
    pcb_component_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    source_component_id: string;
}

declare const pcb_breakout_point: z.ZodObject<{
    type: z.ZodLiteral<"pcb_breakout_point">;
    pcb_breakout_point_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    source_trace_id: z.ZodOptional<z.ZodString>;
    source_port_id: z.ZodOptional<z.ZodString>;
    source_net_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_breakout_point";
    pcb_group_id: string;
    pcb_breakout_point_id: string;
    subcircuit_id?: string | undefined;
    source_port_id?: string | undefined;
    source_trace_id?: string | undefined;
    source_net_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_breakout_point";
    pcb_group_id: string;
    subcircuit_id?: string | undefined;
    source_port_id?: string | undefined;
    source_trace_id?: string | undefined;
    pcb_breakout_point_id?: string | undefined;
    source_net_id?: string | undefined;
}>;
type PcbBreakoutPointInput = z.input<typeof pcb_breakout_point>;
/**
 * Defines a routing target within a pcb_group for a source_trace or source_net
 */
interface PcbBreakoutPoint {
    type: "pcb_breakout_point";
    pcb_breakout_point_id: string;
    pcb_group_id: string;
    subcircuit_id?: string;
    source_trace_id?: string;
    source_port_id?: string;
    source_net_id?: string;
    x: Distance;
    y: Distance;
}

declare const pcb_ground_plane: z.ZodObject<{
    type: z.ZodLiteral<"pcb_ground_plane">;
    pcb_ground_plane_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    source_pcb_ground_plane_id: z.ZodString;
    source_net_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_ground_plane";
    source_net_id: string;
    pcb_ground_plane_id: string;
    source_pcb_ground_plane_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_ground_plane";
    source_net_id: string;
    source_pcb_ground_plane_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_ground_plane_id?: string | undefined;
}>;
type PcbGroundPlaneInput = z.input<typeof pcb_ground_plane>;
/**
 * Defines a ground plane on the PCB
 */
interface PcbGroundPlane {
    type: "pcb_ground_plane";
    pcb_ground_plane_id: string;
    source_pcb_ground_plane_id: string;
    source_net_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
}

declare const pcb_ground_plane_region: z.ZodObject<{
    type: z.ZodLiteral<"pcb_ground_plane_region">;
    pcb_ground_plane_region_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_ground_plane_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "pcb_ground_plane_region";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    points: {
        x: number;
        y: number;
    }[];
    pcb_ground_plane_id: string;
    pcb_ground_plane_region_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_ground_plane_region";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    points: {
        x: string | number;
        y: string | number;
    }[];
    pcb_ground_plane_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_ground_plane_region_id?: string | undefined;
}>;
type PcbGroundPlaneRegionInput = z.input<typeof pcb_ground_plane_region>;
/**
 * Defines a polygon region of a ground plane
 */
interface PcbGroundPlaneRegion {
    type: "pcb_ground_plane_region";
    pcb_ground_plane_region_id: string;
    pcb_ground_plane_id: string;
    pcb_group_id?: string;
    subcircuit_id?: string;
    layer: LayerRef;
    points: Point[];
}

declare const pcb_thermal_spoke: z.ZodObject<{
    type: z.ZodLiteral<"pcb_thermal_spoke">;
    pcb_thermal_spoke_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_ground_plane_id: z.ZodString;
    shape: z.ZodString;
    spoke_count: z.ZodNumber;
    spoke_thickness: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    spoke_inner_diameter: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    spoke_outer_diameter: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    pcb_plated_hole_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_thermal_spoke";
    shape: string;
    pcb_ground_plane_id: string;
    pcb_thermal_spoke_id: string;
    spoke_count: number;
    spoke_thickness: number;
    spoke_inner_diameter: number;
    spoke_outer_diameter: number;
    subcircuit_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
}, {
    type: "pcb_thermal_spoke";
    shape: string;
    pcb_ground_plane_id: string;
    spoke_count: number;
    spoke_thickness: string | number;
    spoke_inner_diameter: string | number;
    spoke_outer_diameter: string | number;
    subcircuit_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
    pcb_thermal_spoke_id?: string | undefined;
}>;
type PcbThermalSpokeInput = z.input<typeof pcb_thermal_spoke>;
/**
 * Pattern for connecting a ground plane to a plated hole
 */
interface PcbThermalSpoke {
    type: "pcb_thermal_spoke";
    pcb_thermal_spoke_id: string;
    pcb_ground_plane_id: string;
    shape: string;
    spoke_count: number;
    spoke_thickness: Distance;
    spoke_inner_diameter: Distance;
    spoke_outer_diameter: Distance;
    pcb_plated_hole_id?: string;
    subcircuit_id?: string;
}

type PcbCircuitElement = PcbComponent | PcbHole | PcbPlatedHole | PcbPort | PcbSmtPad | PcbSolderPaste | PcbText | PcbTrace | PcbTraceError | PcbMissingFootprintError | PcbManualEditConflictWarning | PcbPortNotMatchedError | PcbVia | PcbBoard | PcbPlacementError | PcbTraceHint | PcbSilkscreenLine | PcbSilkscreenPath | PcbSilkscreenText | PcbSilkscreenRect | PcbSilkscreenCircle | PcbAutoroutingError | PcbFootprintOverlapError | PcbCutout | PcbBreakoutPoint | PcbGroundPlane | PcbGroundPlaneRegion | PcbThermalSpoke;

interface SchematicBox {
    type: "schematic_box";
    schematic_component_id?: string;
    width: number;
    height: number;
    is_dashed: boolean;
    x: number;
    y: number;
    subcircuit_id?: string;
}
declare const schematic_box: z.ZodObject<{
    type: z.ZodLiteral<"schematic_box">;
    schematic_component_id: z.ZodOptional<z.ZodString>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    is_dashed: z.ZodDefault<z.ZodBoolean>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "schematic_box";
    width: number;
    height: number;
    is_dashed: boolean;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "schematic_box";
    width: string | number;
    height: string | number;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
    is_dashed?: boolean | undefined;
}>;
type SchematicBoxInput = z.input<typeof schematic_box>;

interface SchematicPath {
    type: "schematic_path";
    schematic_component_id: string;
    fill_color?: "red" | "blue";
    is_filled?: boolean;
    points: Point[];
    subcircuit_id?: string;
}
declare const schematic_path: z.ZodObject<{
    type: z.ZodLiteral<"schematic_path">;
    schematic_component_id: z.ZodString;
    fill_color: z.ZodOptional<z.ZodEnum<["red", "blue"]>>;
    is_filled: z.ZodOptional<z.ZodBoolean>;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_path";
    points: {
        x: number;
        y: number;
    }[];
    schematic_component_id: string;
    subcircuit_id?: string | undefined;
    is_filled?: boolean | undefined;
    fill_color?: "red" | "blue" | undefined;
}, {
    type: "schematic_path";
    points: {
        x: string | number;
        y: string | number;
    }[];
    schematic_component_id: string;
    subcircuit_id?: string | undefined;
    is_filled?: boolean | undefined;
    fill_color?: "red" | "blue" | undefined;
}>;
type SchematicPathInput = z.input<typeof schematic_path>;

declare const schematic_pin_styles: z.ZodRecord<z.ZodString, z.ZodObject<{
    left_margin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    right_margin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    top_margin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    bottom_margin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    left_margin?: number | undefined;
    right_margin?: number | undefined;
    top_margin?: number | undefined;
    bottom_margin?: number | undefined;
}, {
    left_margin?: string | number | undefined;
    right_margin?: string | number | undefined;
    top_margin?: string | number | undefined;
    bottom_margin?: string | number | undefined;
}>>;
interface SchematicPortArrangementBySize {
    left_size: number;
    right_size: number;
    top_size?: number;
    bottom_size?: number;
}
interface SchematicPortArrangementBySides {
    left_side?: {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top";
    };
    right_side?: {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top";
    };
    top_side?: {
        pins: number[];
        direction?: "left-to-right" | "right-to-left";
    };
    bottom_side?: {
        pins: number[];
        direction?: "left-to-right" | "right-to-left";
    };
}
type SchematicPortArrangement = SchematicPortArrangementBySize | SchematicPortArrangementBySides;
interface SchematicComponent {
    type: "schematic_component";
    size: Size;
    center: Point;
    source_component_id: string;
    schematic_component_id: string;
    pin_spacing?: number;
    pin_styles?: Record<string, {
        left_margin?: number;
        right_margin?: number;
        top_margin?: number;
        bottom_margin?: number;
    }>;
    box_width?: number;
    symbol_name?: string;
    port_arrangement?: SchematicPortArrangement;
    port_labels?: Record<string, string>;
    symbol_display_value?: string;
    subcircuit_id?: string;
    schematic_group_id?: string;
}
declare const schematic_component_port_arrangement_by_size: z.ZodObject<{
    left_size: z.ZodNumber;
    right_size: z.ZodNumber;
    top_size: z.ZodOptional<z.ZodNumber>;
    bottom_size: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    left_size: number;
    right_size: number;
    top_size?: number | undefined;
    bottom_size?: number | undefined;
}, {
    left_size: number;
    right_size: number;
    top_size?: number | undefined;
    bottom_size?: number | undefined;
}>;
declare const schematic_component_port_arrangement_by_sides: z.ZodObject<{
    left_side: z.ZodOptional<z.ZodObject<{
        pins: z.ZodArray<z.ZodNumber, "many">;
        direction: z.ZodOptional<z.ZodEnum<["top-to-bottom", "bottom-to-top"]>>;
    }, "strip", z.ZodTypeAny, {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top" | undefined;
    }, {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top" | undefined;
    }>>;
    right_side: z.ZodOptional<z.ZodObject<{
        pins: z.ZodArray<z.ZodNumber, "many">;
        direction: z.ZodOptional<z.ZodEnum<["top-to-bottom", "bottom-to-top"]>>;
    }, "strip", z.ZodTypeAny, {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top" | undefined;
    }, {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top" | undefined;
    }>>;
    top_side: z.ZodOptional<z.ZodObject<{
        pins: z.ZodArray<z.ZodNumber, "many">;
        direction: z.ZodOptional<z.ZodEnum<["left-to-right", "right-to-left"]>>;
    }, "strip", z.ZodTypeAny, {
        pins: number[];
        direction?: "left-to-right" | "right-to-left" | undefined;
    }, {
        pins: number[];
        direction?: "left-to-right" | "right-to-left" | undefined;
    }>>;
    bottom_side: z.ZodOptional<z.ZodObject<{
        pins: z.ZodArray<z.ZodNumber, "many">;
        direction: z.ZodOptional<z.ZodEnum<["left-to-right", "right-to-left"]>>;
    }, "strip", z.ZodTypeAny, {
        pins: number[];
        direction?: "left-to-right" | "right-to-left" | undefined;
    }, {
        pins: number[];
        direction?: "left-to-right" | "right-to-left" | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    left_side?: {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top" | undefined;
    } | undefined;
    right_side?: {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top" | undefined;
    } | undefined;
    top_side?: {
        pins: number[];
        direction?: "left-to-right" | "right-to-left" | undefined;
    } | undefined;
    bottom_side?: {
        pins: number[];
        direction?: "left-to-right" | "right-to-left" | undefined;
    } | undefined;
}, {
    left_side?: {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top" | undefined;
    } | undefined;
    right_side?: {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top" | undefined;
    } | undefined;
    top_side?: {
        pins: number[];
        direction?: "left-to-right" | "right-to-left" | undefined;
    } | undefined;
    bottom_side?: {
        pins: number[];
        direction?: "left-to-right" | "right-to-left" | undefined;
    } | undefined;
}>;
declare const port_arrangement: z.ZodUnion<[z.ZodObject<{
    left_size: z.ZodNumber;
    right_size: z.ZodNumber;
    top_size: z.ZodOptional<z.ZodNumber>;
    bottom_size: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    left_size: number;
    right_size: number;
    top_size?: number | undefined;
    bottom_size?: number | undefined;
}, {
    left_size: number;
    right_size: number;
    top_size?: number | undefined;
    bottom_size?: number | undefined;
}>, z.ZodObject<{
    left_side: z.ZodOptional<z.ZodObject<{
        pins: z.ZodArray<z.ZodNumber, "many">;
        direction: z.ZodOptional<z.ZodEnum<["top-to-bottom", "bottom-to-top"]>>;
    }, "strip", z.ZodTypeAny, {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top" | undefined;
    }, {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top" | undefined;
    }>>;
    right_side: z.ZodOptional<z.ZodObject<{
        pins: z.ZodArray<z.ZodNumber, "many">;
        direction: z.ZodOptional<z.ZodEnum<["top-to-bottom", "bottom-to-top"]>>;
    }, "strip", z.ZodTypeAny, {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top" | undefined;
    }, {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top" | undefined;
    }>>;
    top_side: z.ZodOptional<z.ZodObject<{
        pins: z.ZodArray<z.ZodNumber, "many">;
        direction: z.ZodOptional<z.ZodEnum<["left-to-right", "right-to-left"]>>;
    }, "strip", z.ZodTypeAny, {
        pins: number[];
        direction?: "left-to-right" | "right-to-left" | undefined;
    }, {
        pins: number[];
        direction?: "left-to-right" | "right-to-left" | undefined;
    }>>;
    bottom_side: z.ZodOptional<z.ZodObject<{
        pins: z.ZodArray<z.ZodNumber, "many">;
        direction: z.ZodOptional<z.ZodEnum<["left-to-right", "right-to-left"]>>;
    }, "strip", z.ZodTypeAny, {
        pins: number[];
        direction?: "left-to-right" | "right-to-left" | undefined;
    }, {
        pins: number[];
        direction?: "left-to-right" | "right-to-left" | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    left_side?: {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top" | undefined;
    } | undefined;
    right_side?: {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top" | undefined;
    } | undefined;
    top_side?: {
        pins: number[];
        direction?: "left-to-right" | "right-to-left" | undefined;
    } | undefined;
    bottom_side?: {
        pins: number[];
        direction?: "left-to-right" | "right-to-left" | undefined;
    } | undefined;
}, {
    left_side?: {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top" | undefined;
    } | undefined;
    right_side?: {
        pins: number[];
        direction?: "top-to-bottom" | "bottom-to-top" | undefined;
    } | undefined;
    top_side?: {
        pins: number[];
        direction?: "left-to-right" | "right-to-left" | undefined;
    } | undefined;
    bottom_side?: {
        pins: number[];
        direction?: "left-to-right" | "right-to-left" | undefined;
    } | undefined;
}>]>;
declare const schematic_component: z.ZodObject<{
    type: z.ZodLiteral<"schematic_component">;
    size: z.ZodObject<{
        width: z.ZodNumber;
        height: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        width: number;
        height: number;
    }, {
        width: number;
        height: number;
    }>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    source_component_id: z.ZodString;
    schematic_component_id: z.ZodString;
    pin_spacing: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pin_styles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        left_margin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        right_margin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        top_margin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        bottom_margin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        left_margin?: number | undefined;
        right_margin?: number | undefined;
        top_margin?: number | undefined;
        bottom_margin?: number | undefined;
    }, {
        left_margin?: string | number | undefined;
        right_margin?: string | number | undefined;
        top_margin?: string | number | undefined;
        bottom_margin?: string | number | undefined;
    }>>>;
    box_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    symbol_name: z.ZodOptional<z.ZodString>;
    port_arrangement: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        left_size: z.ZodNumber;
        right_size: z.ZodNumber;
        top_size: z.ZodOptional<z.ZodNumber>;
        bottom_size: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    }, {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    }>, z.ZodObject<{
        left_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["top-to-bottom", "bottom-to-top"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }>>;
        right_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["top-to-bottom", "bottom-to-top"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }>>;
        top_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["left-to-right", "right-to-left"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }>>;
        bottom_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["left-to-right", "right-to-left"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    }, {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    }>]>>;
    port_labels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    symbol_display_value: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    schematic_group_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_component";
    source_component_id: string;
    center: {
        x: number;
        y: number;
    };
    schematic_component_id: string;
    size: {
        width: number;
        height: number;
    };
    subcircuit_id?: string | undefined;
    pin_spacing?: number | undefined;
    pin_styles?: Record<string, {
        left_margin?: number | undefined;
        right_margin?: number | undefined;
        top_margin?: number | undefined;
        bottom_margin?: number | undefined;
    }> | undefined;
    box_width?: number | undefined;
    symbol_name?: string | undefined;
    port_arrangement?: {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    } | {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    } | undefined;
    port_labels?: Record<string, string> | undefined;
    symbol_display_value?: string | undefined;
    schematic_group_id?: string | undefined;
}, {
    type: "schematic_component";
    source_component_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    schematic_component_id: string;
    size: {
        width: number;
        height: number;
    };
    subcircuit_id?: string | undefined;
    pin_spacing?: string | number | undefined;
    pin_styles?: Record<string, {
        left_margin?: string | number | undefined;
        right_margin?: string | number | undefined;
        top_margin?: string | number | undefined;
        bottom_margin?: string | number | undefined;
    }> | undefined;
    box_width?: string | number | undefined;
    symbol_name?: string | undefined;
    port_arrangement?: {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    } | {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    } | undefined;
    port_labels?: Record<string, string> | undefined;
    symbol_display_value?: string | undefined;
    schematic_group_id?: string | undefined;
}>;
type SchematicComponentInput = z.input<typeof schematic_component>;

/**
 * Defines a line on the schematic, this can be used for adding arbitrary lines
 * to a schematic, but don't use it for drawing traces, schematic boxes or where
 * other schematic elements are more appropriate.
 */
interface SchematicLine {
    type: "schematic_line";
    schematic_component_id: string;
    x1: number;
    x2: number;
    y1: number;
    y2: number;
    subcircuit_id?: string;
}
declare const schematic_line: z.ZodObject<{
    type: z.ZodLiteral<"schematic_line">;
    schematic_component_id: z.ZodString;
    x1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    x2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_line";
    x1: number;
    y1: number;
    x2: number;
    y2: number;
    schematic_component_id: string;
    subcircuit_id?: string | undefined;
}, {
    type: "schematic_line";
    x1: string | number;
    y1: string | number;
    x2: string | number;
    y2: string | number;
    schematic_component_id: string;
    subcircuit_id?: string | undefined;
}>;
type SchematicLineInput = z.input<typeof schematic_line>;

interface SchematicTraceEdge {
    from: {
        x: number;
        y: number;
    };
    to: {
        x: number;
        y: number;
    };
    is_crossing?: boolean;
    from_schematic_port_id?: string;
    to_schematic_port_id?: string;
}
interface SchematicTrace {
    type: "schematic_trace";
    schematic_trace_id: string;
    source_trace_id: string;
    junctions: {
        x: number;
        y: number;
    }[];
    edges: SchematicTraceEdge[];
    subcircuit_id?: string;
}
declare const schematic_trace: z.ZodObject<{
    type: z.ZodLiteral<"schematic_trace">;
    schematic_trace_id: z.ZodString;
    source_trace_id: z.ZodString;
    junctions: z.ZodArray<z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>, "many">;
    edges: z.ZodArray<z.ZodObject<{
        from: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
        to: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
        is_crossing: z.ZodOptional<z.ZodBoolean>;
        from_schematic_port_id: z.ZodOptional<z.ZodString>;
        to_schematic_port_id: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        is_crossing?: boolean | undefined;
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }, {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        is_crossing?: boolean | undefined;
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }>, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_trace";
    source_trace_id: string;
    schematic_trace_id: string;
    junctions: {
        x: number;
        y: number;
    }[];
    edges: {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        is_crossing?: boolean | undefined;
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }[];
    subcircuit_id?: string | undefined;
}, {
    type: "schematic_trace";
    source_trace_id: string;
    schematic_trace_id: string;
    junctions: {
        x: number;
        y: number;
    }[];
    edges: {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        is_crossing?: boolean | undefined;
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }[];
    subcircuit_id?: string | undefined;
}>;
type SchematicTraceInput = z.input<typeof schematic_trace>;

type FivePointAnchor = "center" | "left" | "right" | "top" | "bottom";

interface SchematicText {
    type: "schematic_text";
    schematic_component_id?: string;
    schematic_text_id: string;
    text: string;
    font_size: number;
    position: {
        x: number;
        y: number;
    };
    rotation: number;
    anchor: NinePointAnchor | FivePointAnchor;
    color: string;
    subcircuit_id?: string;
}
declare const schematic_text: z.ZodObject<{
    type: z.ZodLiteral<"schematic_text">;
    schematic_component_id: z.ZodOptional<z.ZodString>;
    schematic_text_id: z.ZodString;
    text: z.ZodString;
    font_size: z.ZodDefault<z.ZodNumber>;
    position: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    rotation: z.ZodDefault<z.ZodNumber>;
    anchor: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["center", "left", "right", "top", "bottom"]>, z.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>]>>;
    color: z.ZodDefault<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    anchor: "top" | "bottom" | "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right" | "left" | "right";
    type: "schematic_text";
    rotation: number;
    text: string;
    font_size: number;
    color: string;
    schematic_text_id: string;
    position: {
        x: number;
        y: number;
    };
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
}, {
    type: "schematic_text";
    text: string;
    schematic_text_id: string;
    position: {
        x: string | number;
        y: string | number;
    };
    anchor?: "top" | "bottom" | "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right" | "left" | "right" | undefined;
    rotation?: number | undefined;
    subcircuit_id?: string | undefined;
    font_size?: number | undefined;
    color?: string | undefined;
    schematic_component_id?: string | undefined;
}>;
type SchematicTextInput = z.input<typeof schematic_text>;

interface SchematicPort {
    type: "schematic_port";
    schematic_port_id: string;
    source_port_id: string;
    schematic_component_id?: string;
    center: Point;
    facing_direction?: "up" | "down" | "left" | "right";
    distance_from_component_edge?: number;
    side_of_component?: "top" | "bottom" | "left" | "right";
    true_ccw_index?: number;
    pin_number?: number;
    display_pin_label?: string;
    subcircuit_id?: string;
    is_connected?: boolean;
}
declare const schematic_port: z.ZodObject<{
    type: z.ZodLiteral<"schematic_port">;
    schematic_port_id: z.ZodString;
    source_port_id: z.ZodString;
    schematic_component_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    facing_direction: z.ZodOptional<z.ZodEnum<["up", "down", "left", "right"]>>;
    distance_from_component_edge: z.ZodOptional<z.ZodNumber>;
    side_of_component: z.ZodOptional<z.ZodEnum<["top", "bottom", "left", "right"]>>;
    true_ccw_index: z.ZodOptional<z.ZodNumber>;
    pin_number: z.ZodOptional<z.ZodNumber>;
    display_pin_label: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    is_connected: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_port";
    center: {
        x: number;
        y: number;
    };
    source_port_id: string;
    schematic_port_id: string;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
    facing_direction?: "left" | "right" | "up" | "down" | undefined;
    distance_from_component_edge?: number | undefined;
    side_of_component?: "top" | "bottom" | "left" | "right" | undefined;
    true_ccw_index?: number | undefined;
    pin_number?: number | undefined;
    display_pin_label?: string | undefined;
    is_connected?: boolean | undefined;
}, {
    type: "schematic_port";
    center: {
        x: string | number;
        y: string | number;
    };
    source_port_id: string;
    schematic_port_id: string;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
    facing_direction?: "left" | "right" | "up" | "down" | undefined;
    distance_from_component_edge?: number | undefined;
    side_of_component?: "top" | "bottom" | "left" | "right" | undefined;
    true_ccw_index?: number | undefined;
    pin_number?: number | undefined;
    display_pin_label?: string | undefined;
    is_connected?: boolean | undefined;
}>;
type SchematicPortInput = z.input<typeof schematic_port>;

interface SchematicNetLabel {
    type: "schematic_net_label";
    schematic_net_label_id: string;
    schematic_trace_id?: string;
    source_trace_id?: string;
    source_net_id: string;
    center: Point;
    anchor_position?: Point | undefined;
    anchor_side: "top" | "bottom" | "left" | "right";
    text: string;
    symbol_name?: string | undefined;
    /**
     * When true the net label can be repositioned. When false the label's
     * position is fixed by the element it is attached to.
     */
    is_movable?: boolean;
    subcircuit_id?: string;
}
declare const schematic_net_label: z.ZodObject<{
    type: z.ZodLiteral<"schematic_net_label">;
    schematic_net_label_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    schematic_trace_id: z.ZodOptional<z.ZodString>;
    source_trace_id: z.ZodOptional<z.ZodString>;
    source_net_id: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    anchor_position: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>>;
    anchor_side: z.ZodEnum<["top", "bottom", "left", "right"]>;
    text: z.ZodString;
    symbol_name: z.ZodOptional<z.ZodString>;
    is_movable: z.ZodOptional<z.ZodBoolean>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_net_label";
    center: {
        x: number;
        y: number;
    };
    text: string;
    source_net_id: string;
    schematic_net_label_id: string;
    anchor_side: "top" | "bottom" | "left" | "right";
    subcircuit_id?: string | undefined;
    source_trace_id?: string | undefined;
    anchor_position?: {
        x: number;
        y: number;
    } | undefined;
    symbol_name?: string | undefined;
    schematic_trace_id?: string | undefined;
    is_movable?: boolean | undefined;
}, {
    type: "schematic_net_label";
    center: {
        x: string | number;
        y: string | number;
    };
    text: string;
    source_net_id: string;
    anchor_side: "top" | "bottom" | "left" | "right";
    subcircuit_id?: string | undefined;
    source_trace_id?: string | undefined;
    anchor_position?: {
        x: string | number;
        y: string | number;
    } | undefined;
    symbol_name?: string | undefined;
    schematic_trace_id?: string | undefined;
    schematic_net_label_id?: string | undefined;
    is_movable?: boolean | undefined;
}>;
type SchematicNetLabelInput = z.input<typeof schematic_net_label>;
type InferredSchematicNetLabel = z.infer<typeof schematic_net_label>;

interface SchematicError {
    type: "schematic_error";
    schematic_error_id: string;
    error_type: "schematic_port_not_found";
    message: string;
    subcircuit_id?: string;
}
declare const schematic_error: z.ZodObject<{
    type: z.ZodLiteral<"schematic_error">;
    schematic_error_id: z.ZodString;
    error_type: z.ZodDefault<z.ZodLiteral<"schematic_port_not_found">>;
    message: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "schematic_error";
    error_type: "schematic_port_not_found";
    schematic_error_id: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "schematic_error";
    schematic_error_id: string;
    subcircuit_id?: string | undefined;
    error_type?: "schematic_port_not_found" | undefined;
}>;
type SchematicErrorInput = z.input<typeof schematic_error>;

declare const schematic_layout_error: z.ZodObject<{
    type: z.ZodLiteral<"schematic_layout_error">;
    schematic_layout_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"schematic_layout_error">>;
    message: z.ZodString;
    source_group_id: z.ZodString;
    schematic_group_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "schematic_layout_error";
    error_type: "schematic_layout_error";
    source_group_id: string;
    schematic_group_id: string;
    schematic_layout_error_id: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "schematic_layout_error";
    source_group_id: string;
    schematic_group_id: string;
    subcircuit_id?: string | undefined;
    error_type?: "schematic_layout_error" | undefined;
    schematic_layout_error_id?: string | undefined;
}>;
type SchematicLayoutErrorInput = z.input<typeof schematic_layout_error>;
interface SchematicLayoutError {
    type: "schematic_layout_error";
    schematic_layout_error_id: string;
    error_type: "schematic_layout_error";
    message: string;
    source_group_id: string;
    schematic_group_id: string;
    subcircuit_id?: string;
}

declare const schematic_debug_object_base: z.ZodObject<{
    type: z.ZodLiteral<"schematic_debug_object">;
    label: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_debug_object";
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}, {
    type: "schematic_debug_object";
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}>;
declare const schematic_debug_rect: z.ZodObject<{
    type: z.ZodLiteral<"schematic_debug_object">;
    label: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"rect">;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    size: z.ZodObject<{
        width: z.ZodNumber;
        height: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        width: number;
        height: number;
    }, {
        width: number;
        height: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_debug_object";
    center: {
        x: number;
        y: number;
    };
    shape: "rect";
    size: {
        width: number;
        height: number;
    };
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}, {
    type: "schematic_debug_object";
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "rect";
    size: {
        width: number;
        height: number;
    };
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}>;
declare const schematic_debug_line: z.ZodObject<{
    type: z.ZodLiteral<"schematic_debug_object">;
    label: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"line">;
    start: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    end: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_debug_object";
    shape: "line";
    start: {
        x: number;
        y: number;
    };
    end: {
        x: number;
        y: number;
    };
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}, {
    type: "schematic_debug_object";
    shape: "line";
    start: {
        x: string | number;
        y: string | number;
    };
    end: {
        x: string | number;
        y: string | number;
    };
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}>;
declare const schematic_debug_point: z.ZodObject<{
    type: z.ZodLiteral<"schematic_debug_object">;
    label: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"point">;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_debug_object";
    center: {
        x: number;
        y: number;
    };
    shape: "point";
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}, {
    type: "schematic_debug_object";
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "point";
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}>;
declare const schematic_debug_object: z.ZodDiscriminatedUnion<"shape", [z.ZodObject<{
    type: z.ZodLiteral<"schematic_debug_object">;
    label: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"rect">;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    size: z.ZodObject<{
        width: z.ZodNumber;
        height: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        width: number;
        height: number;
    }, {
        width: number;
        height: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_debug_object";
    center: {
        x: number;
        y: number;
    };
    shape: "rect";
    size: {
        width: number;
        height: number;
    };
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}, {
    type: "schematic_debug_object";
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "rect";
    size: {
        width: number;
        height: number;
    };
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_debug_object">;
    label: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"line">;
    start: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    end: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_debug_object";
    shape: "line";
    start: {
        x: number;
        y: number;
    };
    end: {
        x: number;
        y: number;
    };
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}, {
    type: "schematic_debug_object";
    shape: "line";
    start: {
        x: string | number;
        y: string | number;
    };
    end: {
        x: string | number;
        y: string | number;
    };
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_debug_object">;
    label: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"point">;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_debug_object";
    center: {
        x: number;
        y: number;
    };
    shape: "point";
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}, {
    type: "schematic_debug_object";
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "point";
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}>]>;
interface SchematicDebugRect {
    type: "schematic_debug_object";
    label?: string;
    shape: "rect";
    center: Point;
    size: Size;
    subcircuit_id?: string;
}
interface SchematicDebugLine {
    type: "schematic_debug_object";
    label?: string;
    shape: "line";
    start: Point;
    end: Point;
    subcircuit_id?: string;
}
interface SchematicDebugPoint {
    type: "schematic_debug_object";
    label?: string;
    shape: "point";
    center: Point;
    subcircuit_id?: string;
}
type SchematicDebugObject = SchematicDebugRect | SchematicDebugLine | SchematicDebugPoint;
type SchematicDebugObjectInput = z.input<typeof schematic_debug_object>;

interface SchematicVoltageProbe {
    type: "schematic_voltage_probe";
    schematic_voltage_probe_id: string;
    position: Point;
    schematic_trace_id: string;
    voltage?: number;
    subcircuit_id?: string;
}
declare const schematic_voltage_probe: z.ZodObject<{
    type: z.ZodLiteral<"schematic_voltage_probe">;
    schematic_voltage_probe_id: z.ZodString;
    position: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    schematic_trace_id: z.ZodString;
    voltage: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_voltage_probe";
    schematic_trace_id: string;
    position: {
        x: number;
        y: number;
    };
    schematic_voltage_probe_id: string;
    subcircuit_id?: string | undefined;
    voltage?: number | undefined;
}, {
    type: "schematic_voltage_probe";
    schematic_trace_id: string;
    position: {
        x: string | number;
        y: string | number;
    };
    schematic_voltage_probe_id: string;
    subcircuit_id?: string | undefined;
    voltage?: string | number | undefined;
}>;
type SchematicVoltageProbeInput = z.input<typeof schematic_voltage_probe>;

declare const schematic_manual_edit_conflict_warning: z.ZodObject<{
    type: z.ZodLiteral<"schematic_manual_edit_conflict_warning">;
    schematic_manual_edit_conflict_warning_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    warning_type: z.ZodDefault<z.ZodLiteral<"schematic_manual_edit_conflict_warning">>;
    message: z.ZodString;
    schematic_component_id: z.ZodString;
    schematic_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "schematic_manual_edit_conflict_warning";
    source_component_id: string;
    warning_type: "schematic_manual_edit_conflict_warning";
    schematic_component_id: string;
    schematic_manual_edit_conflict_warning_id: string;
    subcircuit_id?: string | undefined;
    schematic_group_id?: string | undefined;
}, {
    message: string;
    type: "schematic_manual_edit_conflict_warning";
    source_component_id: string;
    schematic_component_id: string;
    subcircuit_id?: string | undefined;
    warning_type?: "schematic_manual_edit_conflict_warning" | undefined;
    schematic_group_id?: string | undefined;
    schematic_manual_edit_conflict_warning_id?: string | undefined;
}>;
type SchematicManualEditConflictWarningInput = z.input<typeof schematic_manual_edit_conflict_warning>;
/**
 * Warning emitted when a component has both manual placement (via manualEdits) and explicit schX/schY coordinates
 */
interface SchematicManualEditConflictWarning {
    type: "schematic_manual_edit_conflict_warning";
    schematic_manual_edit_conflict_warning_id: string;
    warning_type: "schematic_manual_edit_conflict_warning";
    message: string;
    schematic_component_id: string;
    schematic_group_id?: string;
    subcircuit_id?: string;
    source_component_id: string;
}

declare const schematic_group: z.ZodObject<{
    type: z.ZodLiteral<"schematic_group">;
    schematic_group_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    source_group_id: z.ZodString;
    is_subcircuit: z.ZodOptional<z.ZodBoolean>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    schematic_component_ids: z.ZodArray<z.ZodString, "many">;
    name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_group";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    source_group_id: string;
    schematic_group_id: string;
    schematic_component_ids: string[];
    description?: string | undefined;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
}, {
    type: "schematic_group";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    source_group_id: string;
    schematic_component_ids: string[];
    description?: string | undefined;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    schematic_group_id?: string | undefined;
}>;
type SchematicGroupInput = z.input<typeof schematic_group>;
/**
 * Defines a group of components on the schematic
 */
interface SchematicGroup {
    type: "schematic_group";
    schematic_group_id: string;
    source_group_id: string;
    is_subcircuit?: boolean;
    subcircuit_id?: string;
    width: Length;
    height: Length;
    center: Point;
    schematic_component_ids: string[];
    name?: string;
    description?: string;
}

declare const schematic_table: z.ZodObject<{
    type: z.ZodLiteral<"schematic_table">;
    schematic_table_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    anchor_position: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    column_widths: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, "many">;
    row_heights: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, "many">;
    cell_padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    border_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    schematic_component_id: z.ZodOptional<z.ZodString>;
    anchor: z.ZodOptional<z.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_table";
    anchor_position: {
        x: number;
        y: number;
    };
    schematic_table_id: string;
    column_widths: number[];
    row_heights: number[];
    anchor?: "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right" | undefined;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
    cell_padding?: number | undefined;
    border_width?: number | undefined;
}, {
    type: "schematic_table";
    anchor_position: {
        x: string | number;
        y: string | number;
    };
    column_widths: (string | number)[];
    row_heights: (string | number)[];
    anchor?: "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right" | undefined;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
    schematic_table_id?: string | undefined;
    cell_padding?: string | number | undefined;
    border_width?: string | number | undefined;
}>;
type SchematicTableInput = z.input<typeof schematic_table>;
/**
 * Defines a table on the schematic, useful for displaying data in a structured format.
 */
interface SchematicTable {
    type: "schematic_table";
    schematic_table_id: string;
    anchor_position: Point;
    column_widths: Length[];
    row_heights: Length[];
    cell_padding?: Length;
    border_width?: Length;
    subcircuit_id?: string;
    schematic_component_id?: string;
    anchor?: NinePointAnchor;
}

declare const schematic_table_cell: z.ZodObject<{
    type: z.ZodLiteral<"schematic_table_cell">;
    schematic_table_cell_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    schematic_table_id: z.ZodString;
    start_row_index: z.ZodNumber;
    end_row_index: z.ZodNumber;
    start_column_index: z.ZodNumber;
    end_column_index: z.ZodNumber;
    text: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    horizontal_align: z.ZodOptional<z.ZodEnum<["left", "center", "right"]>>;
    vertical_align: z.ZodOptional<z.ZodEnum<["top", "middle", "bottom"]>>;
    font_size: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_table_cell";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    schematic_table_id: string;
    schematic_table_cell_id: string;
    start_row_index: number;
    end_row_index: number;
    start_column_index: number;
    end_column_index: number;
    subcircuit_id?: string | undefined;
    text?: string | undefined;
    font_size?: number | undefined;
    horizontal_align?: "center" | "left" | "right" | undefined;
    vertical_align?: "top" | "bottom" | "middle" | undefined;
}, {
    type: "schematic_table_cell";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    schematic_table_id: string;
    start_row_index: number;
    end_row_index: number;
    start_column_index: number;
    end_column_index: number;
    subcircuit_id?: string | undefined;
    text?: string | undefined;
    font_size?: string | number | undefined;
    schematic_table_cell_id?: string | undefined;
    horizontal_align?: "center" | "left" | "right" | undefined;
    vertical_align?: "top" | "bottom" | "middle" | undefined;
}>;
type SchematicTableCellInput = z.input<typeof schematic_table_cell>;
/**
 * Defines a cell within a schematic_table
 */
interface SchematicTableCell {
    type: "schematic_table_cell";
    schematic_table_cell_id: string;
    schematic_table_id: string;
    start_row_index: number;
    end_row_index: number;
    start_column_index: number;
    end_column_index: number;
    text?: string;
    center: Point;
    width: Length;
    height: Length;
    horizontal_align?: "left" | "center" | "right";
    vertical_align?: "top" | "middle" | "bottom";
    font_size?: Length;
    subcircuit_id?: string;
}

type CircuitJsonError = PcbTraceError | PcbPlacementError | PcbPortNotMatchedError | PcbAutoroutingError | PcbFootprintOverlapError | PcbMissingFootprintError | SchematicError;

interface SourceComponentBase {
    type: "source_component";
    ftype?: string;
    source_component_id: string;
    name: string;
    manufacturer_part_number?: string;
    supplier_part_numbers?: Partial<Record<SupplierName, string[]>>;
    display_value?: string;
    are_pins_interchangeable?: boolean;
    internally_connected_source_port_ids?: string[][];
    source_group_id?: string;
    subcircuit_id?: string;
}
declare const source_component_base: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    ftype: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    ftype?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    ftype?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>;

declare const source_simple_capacitor: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_capacitor">;
    capacitance: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, number, string | number>;
    max_voltage_rating: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    display_capacitance: z.ZodOptional<z.ZodString>;
    max_decoupling_trace_length: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_capacitor";
    capacitance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_voltage_rating?: number | undefined;
    display_capacitance?: string | undefined;
    max_decoupling_trace_length?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_capacitor";
    capacitance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_voltage_rating?: string | number | undefined;
    display_capacitance?: string | undefined;
    max_decoupling_trace_length?: string | number | undefined;
}>;
type SourceSimpleCapacitorInput = z.input<typeof source_simple_capacitor>;
/**
 * Defines a simple capacitor component
 */
interface SourceSimpleCapacitor extends SourceComponentBase {
    ftype: "simple_capacitor";
    capacitance: number;
    max_voltage_rating?: number;
    display_capacitance?: string;
    max_decoupling_trace_length?: number;
}

declare const source_simple_resistor: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_resistor">;
    resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    display_resistance: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resistor";
    resistance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    display_resistance?: string | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resistor";
    resistance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    display_resistance?: string | undefined;
}>;
type SourceSimpleResistorInput = z.input<typeof source_simple_resistor>;
/**
 * Defines a simple resistor component
 */
interface SourceSimpleResistor extends SourceComponentBase {
    ftype: "simple_resistor";
    resistance: number;
    display_resistance?: string;
}

declare const source_simple_diode: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_diode">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_diode";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_diode";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>;
type SourceSimpleDiodeInput = z.input<typeof source_simple_diode>;
/**
 * Defines a simple diode component
 */
interface SourceSimpleDiode extends SourceComponentBase {
    ftype: "simple_diode";
}

declare const source_simple_led: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_led">;
    color: z.ZodOptional<z.ZodString>;
    wavelength: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_led";
    subcircuit_id?: string | undefined;
    color?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    wavelength?: string | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_led";
    subcircuit_id?: string | undefined;
    color?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    wavelength?: string | undefined;
}>;
type SourceSimpleLedInput = z.input<typeof source_simple_led>;
/**
 * Defines a simple led component
 */
interface SourceSimpleLed extends Omit<SourceSimpleDiode, "ftype"> {
    ftype: "simple_led";
    color?: string;
    wavelength?: string;
}

declare const source_simple_ground: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_ground">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_ground";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_ground";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>;
type SourceSimpleGroundInput = z.input<typeof source_simple_ground>;
/**
 * Defines a simple ground component
 */
interface SourceSimpleGround extends SourceComponentBase {
    ftype: "simple_ground";
}

declare const source_simple_chip: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_chip">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_chip";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_chip";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>;
type SourceSimpleChipInput = z.input<typeof source_simple_chip>;
/**
 * Defines a simple integrated circuit component
 */
interface SourceSimpleChip extends SourceComponentBase {
    ftype: "simple_chip";
}

declare const source_simple_power_source: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_power_source">;
    voltage: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    voltage: number;
    ftype: "simple_power_source";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    voltage: string | number;
    ftype: "simple_power_source";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>;
type SourceSimplePowerSourceInput = z.input<typeof source_simple_power_source>;
/**
 * Defines a simple power source component
 */
interface SourceSimplePowerSource extends SourceComponentBase {
    ftype: "simple_power_source";
    voltage: number;
}

interface SourceSimpleFuse extends SourceComponentBase {
    ftype: "simple_fuse";
    current_rating_amps: number;
    voltage_rating_volts: number;
}

declare const source_simple_battery: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_battery">;
    capacity: z.ZodEffects<z.ZodUnion<[z.ZodNumber, z.ZodString]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_battery";
    capacity: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_battery";
    capacity: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>;
type SourceSimpleBatteryInput = z.input<typeof source_simple_battery>;
/**
 * Defines a simple battery component
 */
interface SourceSimpleBattery extends SourceComponentBase {
    ftype: "simple_battery";
    capacity: number;
}

declare const source_simple_inductor: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_inductor">;
    inductance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    max_current_rating: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_inductor";
    inductance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_current_rating?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_inductor";
    inductance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_current_rating?: number | undefined;
}>;
type SourceSimpleInductorInput = z.input<typeof source_simple_inductor>;
/**
 * Defines a simple inductor component
 */
interface SourceSimpleInductor extends SourceComponentBase {
    ftype: "simple_inductor";
    inductance: number;
    max_current_rating?: number;
}

declare const source_simple_push_button: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_push_button">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_push_button";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_push_button";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>;
type SourceSimplePushButtonInput = z.input<typeof source_simple_push_button>;
/**
 * Defines a simple push button component
 */
interface SourceSimplePushButton extends SourceComponentBase {
    ftype: "simple_push_button";
}

declare const source_simple_potentiometer: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_potentiometer">;
    max_resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_potentiometer";
    max_resistance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_potentiometer";
    max_resistance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>;
type SourceSimplePotentiometerInput = z.input<typeof source_simple_potentiometer>;
interface SourceSimplePotentiometer extends SourceSimplePotentiometerInput {
    ftype: "simple_potentiometer";
    max_resistance: number;
}

declare const source_simple_crystal: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_crystal">;
    frequency: z.ZodNumber;
    load_capacitance: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_crystal";
    frequency: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    load_capacitance?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_crystal";
    frequency: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    load_capacitance?: number | undefined;
}>;
type SourceSimpleCrystalInput = z.input<typeof source_simple_crystal>;
/**
 * Defines a simple crystal oscillator component
 */
interface SourceSimpleCrystal extends SourceComponentBase {
    ftype: "simple_crystal";
    frequency: number;
    load_capacitance?: number;
}

declare const source_simple_pin_header: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_pin_header">;
    pin_count: z.ZodNumber;
    gender: z.ZodDefault<z.ZodOptional<z.ZodEnum<["male", "female"]>>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_pin_header";
    pin_count: number;
    gender: "male" | "female";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_pin_header";
    pin_count: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    gender?: "male" | "female" | undefined;
}>;
type SourceSimplePinHeaderInput = z.input<typeof source_simple_pin_header>;
interface SourceSimplePinHeader extends SourceSimplePinHeaderInput {
    ftype: "simple_pin_header";
    pin_count: number;
    gender: "male" | "female";
}

declare const source_simple_resonator: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_resonator">;
    load_capacitance: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, number, string | number>;
    equivalent_series_resistance: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    frequency: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resonator";
    frequency: number;
    load_capacitance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    equivalent_series_resistance?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resonator";
    frequency: string | number;
    load_capacitance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    equivalent_series_resistance?: string | number | undefined;
}>;
type SourceSimpleResonatorInput = z.input<typeof source_simple_resonator>;
/**
 * Defines a simple resonator component
 */
interface SourceSimpleResonator extends SourceComponentBase {
    ftype: "simple_resonator";
    load_capacitance: number;
    equivalent_series_resistance?: number;
    frequency: number;
}

declare const source_simple_transistor: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_transistor">;
    transistor_type: z.ZodEnum<["npn", "pnp"]>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_transistor";
    transistor_type: "npn" | "pnp";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_transistor";
    transistor_type: "npn" | "pnp";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>;
type SourceSimpleTransistorInput = z.input<typeof source_simple_transistor>;
/**
 * Defines a simple transistor component
 * This is a three-pin semiconductor device (emitter, base, collector)
 * Pin configuration is handled by the schematic port system
 */
interface SourceSimpleTransistor extends SourceComponentBase {
    ftype: "simple_transistor";
    transistor_type: "npn" | "pnp";
}

declare const source_simple_test_point: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_test_point">;
    footprint_variant: z.ZodOptional<z.ZodEnum<["pad", "through_hole"]>>;
    pad_shape: z.ZodOptional<z.ZodEnum<["rect", "circle"]>>;
    pad_diameter: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    hole_diameter: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    width: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    height: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_test_point";
    width?: string | number | undefined;
    height?: string | number | undefined;
    subcircuit_id?: string | undefined;
    hole_diameter?: string | number | undefined;
    pad_shape?: "circle" | "rect" | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    footprint_variant?: "pad" | "through_hole" | undefined;
    pad_diameter?: string | number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_test_point";
    width?: string | number | undefined;
    height?: string | number | undefined;
    subcircuit_id?: string | undefined;
    hole_diameter?: string | number | undefined;
    pad_shape?: "circle" | "rect" | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    footprint_variant?: "pad" | "through_hole" | undefined;
    pad_diameter?: string | number | undefined;
}>;
type SourceSimpleTestPointInput = z.input<typeof source_simple_test_point>;
/**
 * Defines a simple test point component
 * Can be surface-mount or through-hole.
 * Pad shape and dimensions configurable for different use cases.
 */
interface SourceSimpleTestPoint extends SourceComponentBase {
    ftype: "simple_test_point";
    footprint_variant?: "pad" | "through_hole";
    pad_shape?: "rect" | "circle";
    pad_diameter?: number | string;
    hole_diameter?: number | string;
    width?: number | string;
    height?: number | string;
}

declare const source_simple_mosfet: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_mosfet">;
    channel_type: z.ZodEnum<["n", "p"]>;
    mosfet_mode: z.ZodEnum<["enhancement", "depletion"]>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_mosfet";
    channel_type: "n" | "p";
    mosfet_mode: "enhancement" | "depletion";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_mosfet";
    channel_type: "n" | "p";
    mosfet_mode: "enhancement" | "depletion";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>;
type SourceSimpleMosfetInput = z.input<typeof source_simple_mosfet>;
/**
 * Defines a simple mosfet component
 * This is a three-pin semiconductor device (source, gate, drain)
 * Pin configuration is handled by the schematic port system
 */
interface SourceSimpleMosfet extends SourceComponentBase {
    ftype: "simple_mosfet";
    channel_type: "n" | "p";
    mosfet_mode: "enhancement" | "depletion";
}

declare const source_simple_switch: z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_switch">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_switch";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_switch";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>;
type SourceSimpleSwitchInput = z.input<typeof source_simple_switch>;
/**
 * Defines a simple switch component
 */
interface SourceSimpleSwitch extends SourceComponentBase {
    ftype: "simple_switch";
}

interface SourceProjectMetadata {
    type: "source_project_metadata";
    name?: string;
    software_used_string?: string;
    project_url?: string;
    created_at?: string;
}
declare const source_project_metadata: z.ZodObject<{
    type: z.ZodLiteral<"source_project_metadata">;
    name: z.ZodOptional<z.ZodString>;
    software_used_string: z.ZodOptional<z.ZodString>;
    project_url: z.ZodOptional<z.ZodString>;
    created_at: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_project_metadata";
    name?: string | undefined;
    software_used_string?: string | undefined;
    project_url?: string | undefined;
    created_at?: string | undefined;
}, {
    type: "source_project_metadata";
    name?: string | undefined;
    software_used_string?: string | undefined;
    project_url?: string | undefined;
    created_at?: string | undefined;
}>;
type InferredProjectMetadata = z.infer<typeof source_project_metadata>;

declare const source_missing_property_error: z.ZodObject<{
    type: z.ZodLiteral<"source_missing_property_error">;
    source_missing_property_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    source_component_id: z.ZodString;
    property_name: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    error_type: z.ZodDefault<z.ZodLiteral<"source_missing_property_error">>;
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "source_missing_property_error";
    source_component_id: string;
    error_type: "source_missing_property_error";
    source_missing_property_error_id: string;
    property_name: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "source_missing_property_error";
    source_component_id: string;
    property_name: string;
    subcircuit_id?: string | undefined;
    error_type?: "source_missing_property_error" | undefined;
    source_missing_property_error_id?: string | undefined;
}>;
type SourceMissingPropertyErrorInput = z.input<typeof source_missing_property_error>;
/**
 * The source code is missing a property
 */
interface SourceMissingPropertyError {
    type: "source_missing_property_error";
    source_missing_property_error_id: string;
    source_component_id: string;
    property_name: string;
    subcircuit_id?: string;
    error_type: "source_missing_property_error";
    message: string;
}

declare const source_failed_to_create_component_error: z.ZodObject<{
    type: z.ZodLiteral<"source_failed_to_create_component_error">;
    source_failed_to_create_component_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"source_failed_to_create_component_error">>;
    component_name: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    parent_source_component_id: z.ZodOptional<z.ZodString>;
    message: z.ZodString;
    pcb_center: z.ZodOptional<z.ZodObject<{
        x: z.ZodOptional<z.ZodNumber>;
        y: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        x?: number | undefined;
        y?: number | undefined;
    }, {
        x?: number | undefined;
        y?: number | undefined;
    }>>;
    schematic_center: z.ZodOptional<z.ZodObject<{
        x: z.ZodOptional<z.ZodNumber>;
        y: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        x?: number | undefined;
        y?: number | undefined;
    }, {
        x?: number | undefined;
        y?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "source_failed_to_create_component_error";
    error_type: "source_failed_to_create_component_error";
    source_failed_to_create_component_error_id: string;
    subcircuit_id?: string | undefined;
    component_name?: string | undefined;
    parent_source_component_id?: string | undefined;
    pcb_center?: {
        x?: number | undefined;
        y?: number | undefined;
    } | undefined;
    schematic_center?: {
        x?: number | undefined;
        y?: number | undefined;
    } | undefined;
}, {
    message: string;
    type: "source_failed_to_create_component_error";
    subcircuit_id?: string | undefined;
    error_type?: "source_failed_to_create_component_error" | undefined;
    source_failed_to_create_component_error_id?: string | undefined;
    component_name?: string | undefined;
    parent_source_component_id?: string | undefined;
    pcb_center?: {
        x?: number | undefined;
        y?: number | undefined;
    } | undefined;
    schematic_center?: {
        x?: number | undefined;
        y?: number | undefined;
    } | undefined;
}>;
type SourceFailedToCreateComponentErrorInput = z.input<typeof source_failed_to_create_component_error>;
/**
 * Error emitted when a component fails to be constructed.
 * Contains details about the failure and prevents the component from being rendered.
 */
interface SourceFailedToCreateComponentError {
    type: "source_failed_to_create_component_error";
    source_failed_to_create_component_error_id: string;
    error_type: "source_failed_to_create_component_error";
    message: string;
    component_name?: string;
    subcircuit_id?: string;
    parent_source_component_id?: string;
    pcb_center?: {
        x?: number;
        y?: number;
    };
    schematic_center?: {
        x?: number;
        y?: number;
    };
}

declare const any_source_component: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_resistor">;
    resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    display_resistance: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resistor";
    resistance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    display_resistance?: string | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resistor";
    resistance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    display_resistance?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_capacitor">;
    capacitance: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, number, string | number>;
    max_voltage_rating: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    display_capacitance: z.ZodOptional<z.ZodString>;
    max_decoupling_trace_length: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_capacitor";
    capacitance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_voltage_rating?: number | undefined;
    display_capacitance?: string | undefined;
    max_decoupling_trace_length?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_capacitor";
    capacitance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_voltage_rating?: string | number | undefined;
    display_capacitance?: string | undefined;
    max_decoupling_trace_length?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_diode">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_diode";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_diode";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_led">;
    color: z.ZodOptional<z.ZodString>;
    wavelength: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_led";
    subcircuit_id?: string | undefined;
    color?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    wavelength?: string | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_led";
    subcircuit_id?: string | undefined;
    color?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    wavelength?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_ground">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_ground";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_ground";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_chip">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_chip";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_chip";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_power_source">;
    voltage: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    voltage: number;
    ftype: "simple_power_source";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    voltage: string | number;
    ftype: "simple_power_source";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_battery">;
    capacity: z.ZodEffects<z.ZodUnion<[z.ZodNumber, z.ZodString]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_battery";
    capacity: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_battery";
    capacity: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_inductor">;
    inductance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    max_current_rating: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_inductor";
    inductance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_current_rating?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_inductor";
    inductance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_current_rating?: number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_push_button">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_push_button";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_push_button";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_potentiometer">;
    max_resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_potentiometer";
    max_resistance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_potentiometer";
    max_resistance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_crystal">;
    frequency: z.ZodNumber;
    load_capacitance: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_crystal";
    frequency: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    load_capacitance?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_crystal";
    frequency: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    load_capacitance?: number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_pin_header">;
    pin_count: z.ZodNumber;
    gender: z.ZodDefault<z.ZodOptional<z.ZodEnum<["male", "female"]>>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_pin_header";
    pin_count: number;
    gender: "male" | "female";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_pin_header";
    pin_count: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    gender?: "male" | "female" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_resonator">;
    load_capacitance: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, number, string | number>;
    equivalent_series_resistance: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    frequency: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resonator";
    frequency: number;
    load_capacitance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    equivalent_series_resistance?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resonator";
    frequency: string | number;
    load_capacitance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    equivalent_series_resistance?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_switch">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_switch";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_switch";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_transistor">;
    transistor_type: z.ZodEnum<["npn", "pnp"]>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_transistor";
    transistor_type: "npn" | "pnp";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_transistor";
    transistor_type: "npn" | "pnp";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_test_point">;
    footprint_variant: z.ZodOptional<z.ZodEnum<["pad", "through_hole"]>>;
    pad_shape: z.ZodOptional<z.ZodEnum<["rect", "circle"]>>;
    pad_diameter: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    hole_diameter: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    width: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    height: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_test_point";
    width?: string | number | undefined;
    height?: string | number | undefined;
    subcircuit_id?: string | undefined;
    hole_diameter?: string | number | undefined;
    pad_shape?: "circle" | "rect" | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    footprint_variant?: "pad" | "through_hole" | undefined;
    pad_diameter?: string | number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_test_point";
    width?: string | number | undefined;
    height?: string | number | undefined;
    subcircuit_id?: string | undefined;
    hole_diameter?: string | number | undefined;
    pad_shape?: "circle" | "rect" | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    footprint_variant?: "pad" | "through_hole" | undefined;
    pad_diameter?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_mosfet">;
    channel_type: z.ZodEnum<["n", "p"]>;
    mosfet_mode: z.ZodEnum<["enhancement", "depletion"]>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_mosfet";
    channel_type: "n" | "p";
    mosfet_mode: "enhancement" | "depletion";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_mosfet";
    channel_type: "n" | "p";
    mosfet_mode: "enhancement" | "depletion";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_fuse">;
    current_rating_amps: z.ZodNumber;
    voltage_rating_volts: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_fuse";
    current_rating_amps: number;
    voltage_rating_volts: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_fuse";
    current_rating_amps: number;
    voltage_rating_volts: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_project_metadata">;
    name: z.ZodOptional<z.ZodString>;
    software_used_string: z.ZodOptional<z.ZodString>;
    project_url: z.ZodOptional<z.ZodString>;
    created_at: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_project_metadata";
    name?: string | undefined;
    software_used_string?: string | undefined;
    project_url?: string | undefined;
    created_at?: string | undefined;
}, {
    type: "source_project_metadata";
    name?: string | undefined;
    software_used_string?: string | undefined;
    project_url?: string | undefined;
    created_at?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_missing_property_error">;
    source_missing_property_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    source_component_id: z.ZodString;
    property_name: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    error_type: z.ZodDefault<z.ZodLiteral<"source_missing_property_error">>;
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "source_missing_property_error";
    source_component_id: string;
    error_type: "source_missing_property_error";
    source_missing_property_error_id: string;
    property_name: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "source_missing_property_error";
    source_component_id: string;
    property_name: string;
    subcircuit_id?: string | undefined;
    error_type?: "source_missing_property_error" | undefined;
    source_missing_property_error_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_failed_to_create_component_error">;
    source_failed_to_create_component_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"source_failed_to_create_component_error">>;
    component_name: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    parent_source_component_id: z.ZodOptional<z.ZodString>;
    message: z.ZodString;
    pcb_center: z.ZodOptional<z.ZodObject<{
        x: z.ZodOptional<z.ZodNumber>;
        y: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        x?: number | undefined;
        y?: number | undefined;
    }, {
        x?: number | undefined;
        y?: number | undefined;
    }>>;
    schematic_center: z.ZodOptional<z.ZodObject<{
        x: z.ZodOptional<z.ZodNumber>;
        y: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        x?: number | undefined;
        y?: number | undefined;
    }, {
        x?: number | undefined;
        y?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "source_failed_to_create_component_error";
    error_type: "source_failed_to_create_component_error";
    source_failed_to_create_component_error_id: string;
    subcircuit_id?: string | undefined;
    component_name?: string | undefined;
    parent_source_component_id?: string | undefined;
    pcb_center?: {
        x?: number | undefined;
        y?: number | undefined;
    } | undefined;
    schematic_center?: {
        x?: number | undefined;
        y?: number | undefined;
    } | undefined;
}, {
    message: string;
    type: "source_failed_to_create_component_error";
    subcircuit_id?: string | undefined;
    error_type?: "source_failed_to_create_component_error" | undefined;
    source_failed_to_create_component_error_id?: string | undefined;
    component_name?: string | undefined;
    parent_source_component_id?: string | undefined;
    pcb_center?: {
        x?: number | undefined;
        y?: number | undefined;
    } | undefined;
    schematic_center?: {
        x?: number | undefined;
        y?: number | undefined;
    } | undefined;
}>]>;
/**
 * Deprecated: use `AnySourceElement` instead
 */
type AnySourceComponent = z.infer<typeof any_source_component>;
type AnySourceElement = SourceSimpleResistor | SourceSimpleCapacitor | SourceSimpleDiode | SourceSimpleLed | SourceSimpleGround | SourceSimpleChip | SourceSimplePowerSource | SourceSimpleBattery | SourceSimpleInductor | SourceSimplePushButton | SourceSimplePotentiometer | SourceSimpleCrystal | SourceSimplePinHeader | SourceSimpleResonator | SourceSimpleSwitch | SourceSimpleTransistor | SourceSimpleTestPoint | SourceSimpleMosfet | SourceSimpleFuse | SourceProjectMetadata | SourceMissingPropertyError | SourceFailedToCreateComponentError;

declare const source_port: z.ZodObject<{
    type: z.ZodLiteral<"source_port">;
    pin_number: z.ZodOptional<z.ZodNumber>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    name: z.ZodString;
    source_port_id: z.ZodString;
    source_component_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    subcircuit_connectivity_map_key: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_port";
    name: string;
    source_component_id: string;
    source_port_id: string;
    subcircuit_id?: string | undefined;
    port_hints?: string[] | undefined;
    pin_number?: number | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
}, {
    type: "source_port";
    name: string;
    source_component_id: string;
    source_port_id: string;
    subcircuit_id?: string | undefined;
    port_hints?: string[] | undefined;
    pin_number?: number | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
}>;
type SourcePortInput = z.input<typeof source_port>;
/**
 * Defines a source port that can be connected to other components
 */
interface SourcePort {
    type: "source_port";
    pin_number?: number;
    port_hints?: string[];
    name: string;
    source_port_id: string;
    source_component_id: string;
    subcircuit_id?: string;
    subcircuit_connectivity_map_key?: string;
}

interface SourceTrace {
    type: "source_trace";
    source_trace_id: string;
    connected_source_port_ids: string[];
    connected_source_net_ids: string[];
    subcircuit_id?: string;
    subcircuit_connectivity_map_key?: string;
    max_length?: number;
    display_name?: string;
    min_trace_thickness?: number;
}
declare const source_trace: z.ZodObject<{
    type: z.ZodLiteral<"source_trace">;
    source_trace_id: z.ZodString;
    connected_source_port_ids: z.ZodArray<z.ZodString, "many">;
    connected_source_net_ids: z.ZodArray<z.ZodString, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    subcircuit_connectivity_map_key: z.ZodOptional<z.ZodString>;
    max_length: z.ZodOptional<z.ZodNumber>;
    min_trace_thickness: z.ZodOptional<z.ZodNumber>;
    display_name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_trace";
    source_trace_id: string;
    connected_source_port_ids: string[];
    connected_source_net_ids: string[];
    subcircuit_id?: string | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
    max_length?: number | undefined;
    min_trace_thickness?: number | undefined;
    display_name?: string | undefined;
}, {
    type: "source_trace";
    source_trace_id: string;
    connected_source_port_ids: string[];
    connected_source_net_ids: string[];
    subcircuit_id?: string | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
    max_length?: number | undefined;
    min_trace_thickness?: number | undefined;
    display_name?: string | undefined;
}>;

declare const source_group: z.ZodObject<{
    type: z.ZodLiteral<"source_group">;
    source_group_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    parent_subcircuit_id: z.ZodOptional<z.ZodString>;
    parent_source_group_id: z.ZodOptional<z.ZodString>;
    is_subcircuit: z.ZodOptional<z.ZodBoolean>;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_group";
    source_group_id: string;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    parent_subcircuit_id?: string | undefined;
    parent_source_group_id?: string | undefined;
}, {
    type: "source_group";
    source_group_id: string;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    parent_subcircuit_id?: string | undefined;
    parent_source_group_id?: string | undefined;
}>;
type SourceGroupInput = z.input<typeof source_group>;
interface SourceGroup {
    type: "source_group";
    source_group_id: string;
    subcircuit_id?: string;
    parent_subcircuit_id?: string;
    parent_source_group_id?: string;
    is_subcircuit?: boolean;
    name?: string;
}

declare const source_net: z.ZodObject<{
    type: z.ZodLiteral<"source_net">;
    source_net_id: z.ZodString;
    name: z.ZodString;
    member_source_group_ids: z.ZodArray<z.ZodString, "many">;
    is_power: z.ZodOptional<z.ZodBoolean>;
    is_ground: z.ZodOptional<z.ZodBoolean>;
    is_digital_signal: z.ZodOptional<z.ZodBoolean>;
    is_analog_signal: z.ZodOptional<z.ZodBoolean>;
    trace_width: z.ZodOptional<z.ZodNumber>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    subcircuit_connectivity_map_key: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_net";
    name: string;
    source_net_id: string;
    member_source_group_ids: string[];
    trace_width?: number | undefined;
    subcircuit_id?: string | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
    is_power?: boolean | undefined;
    is_ground?: boolean | undefined;
    is_digital_signal?: boolean | undefined;
    is_analog_signal?: boolean | undefined;
}, {
    type: "source_net";
    name: string;
    source_net_id: string;
    member_source_group_ids: string[];
    trace_width?: number | undefined;
    subcircuit_id?: string | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
    is_power?: boolean | undefined;
    is_ground?: boolean | undefined;
    is_digital_signal?: boolean | undefined;
    is_analog_signal?: boolean | undefined;
}>;
type SourceNetInput = z.input<typeof source_net>;
interface SourceNet {
    type: "source_net";
    source_net_id: string;
    name: string;
    member_source_group_ids: string[];
    is_power?: boolean;
    is_ground?: boolean;
    is_digital_signal?: boolean;
    is_analog_signal?: boolean;
    trace_width?: number;
    subcircuit_id?: string;
    subcircuit_connectivity_map_key?: string;
}

declare const source_pcb_ground_plane: z.ZodObject<{
    type: z.ZodLiteral<"source_pcb_ground_plane">;
    source_pcb_ground_plane_id: z.ZodString;
    source_group_id: z.ZodString;
    source_net_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_pcb_ground_plane";
    source_group_id: string;
    source_net_id: string;
    source_pcb_ground_plane_id: string;
    subcircuit_id?: string | undefined;
}, {
    type: "source_pcb_ground_plane";
    source_group_id: string;
    source_net_id: string;
    source_pcb_ground_plane_id: string;
    subcircuit_id?: string | undefined;
}>;
type SourcePcbGroundPlaneInput = z.input<typeof source_pcb_ground_plane>;
/**
 * Defines a ground plane in the source domain
 */
interface SourcePcbGroundPlane {
    type: "source_pcb_ground_plane";
    source_pcb_ground_plane_id: string;
    source_group_id: string;
    source_net_id: string;
    subcircuit_id?: string;
}

declare const cad_component: z.ZodObject<{
    type: z.ZodLiteral<"cad_component">;
    cad_component_id: z.ZodString;
    pcb_component_id: z.ZodString;
    source_component_id: z.ZodString;
    position: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>;
    rotation: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
    size: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    footprinter_string: z.ZodOptional<z.ZodString>;
    model_obj_url: z.ZodOptional<z.ZodString>;
    model_stl_url: z.ZodOptional<z.ZodString>;
    model_3mf_url: z.ZodOptional<z.ZodString>;
    model_jscad: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    type: "cad_component";
    pcb_component_id: string;
    source_component_id: string;
    position: {
        x: number;
        y: number;
        z: number;
    };
    cad_component_id: string;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    rotation?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    subcircuit_id?: string | undefined;
    size?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    footprinter_string?: string | undefined;
    model_obj_url?: string | undefined;
    model_stl_url?: string | undefined;
    model_3mf_url?: string | undefined;
    model_jscad?: any;
}, {
    type: "cad_component";
    pcb_component_id: string;
    source_component_id: string;
    position: {
        x: string | number;
        y: string | number;
        z: string | number;
    };
    cad_component_id: string;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    rotation?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    subcircuit_id?: string | undefined;
    size?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    footprinter_string?: string | undefined;
    model_obj_url?: string | undefined;
    model_stl_url?: string | undefined;
    model_3mf_url?: string | undefined;
    model_jscad?: any;
}>;
type CadComponentInput = z.input<typeof cad_component>;
interface CadComponent {
    type: "cad_component";
    cad_component_id: string;
    pcb_component_id: string;
    source_component_id: string;
    position: Point3;
    rotation?: Point3;
    size?: Point3;
    layer?: LayerRef;
    subcircuit_id?: string;
    footprinter_string?: string;
    model_obj_url?: string;
    model_stl_url?: string;
    model_3mf_url?: string;
    model_jscad?: any;
}

declare const any_circuit_element: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"source_trace">;
    source_trace_id: z.ZodString;
    connected_source_port_ids: z.ZodArray<z.ZodString, "many">;
    connected_source_net_ids: z.ZodArray<z.ZodString, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    subcircuit_connectivity_map_key: z.ZodOptional<z.ZodString>;
    max_length: z.ZodOptional<z.ZodNumber>;
    min_trace_thickness: z.ZodOptional<z.ZodNumber>;
    display_name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_trace";
    source_trace_id: string;
    connected_source_port_ids: string[];
    connected_source_net_ids: string[];
    subcircuit_id?: string | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
    max_length?: number | undefined;
    min_trace_thickness?: number | undefined;
    display_name?: string | undefined;
}, {
    type: "source_trace";
    source_trace_id: string;
    connected_source_port_ids: string[];
    connected_source_net_ids: string[];
    subcircuit_id?: string | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
    max_length?: number | undefined;
    min_trace_thickness?: number | undefined;
    display_name?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_port">;
    pin_number: z.ZodOptional<z.ZodNumber>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    name: z.ZodString;
    source_port_id: z.ZodString;
    source_component_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    subcircuit_connectivity_map_key: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_port";
    name: string;
    source_component_id: string;
    source_port_id: string;
    subcircuit_id?: string | undefined;
    port_hints?: string[] | undefined;
    pin_number?: number | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
}, {
    type: "source_port";
    name: string;
    source_component_id: string;
    source_port_id: string;
    subcircuit_id?: string | undefined;
    port_hints?: string[] | undefined;
    pin_number?: number | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
}>, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_resistor">;
    resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    display_resistance: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resistor";
    resistance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    display_resistance?: string | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resistor";
    resistance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    display_resistance?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_capacitor">;
    capacitance: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, number, string | number>;
    max_voltage_rating: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    display_capacitance: z.ZodOptional<z.ZodString>;
    max_decoupling_trace_length: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_capacitor";
    capacitance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_voltage_rating?: number | undefined;
    display_capacitance?: string | undefined;
    max_decoupling_trace_length?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_capacitor";
    capacitance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_voltage_rating?: string | number | undefined;
    display_capacitance?: string | undefined;
    max_decoupling_trace_length?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_diode">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_diode";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_diode";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_led">;
    color: z.ZodOptional<z.ZodString>;
    wavelength: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_led";
    subcircuit_id?: string | undefined;
    color?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    wavelength?: string | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_led";
    subcircuit_id?: string | undefined;
    color?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    wavelength?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_ground">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_ground";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_ground";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_chip">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_chip";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_chip";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_power_source">;
    voltage: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    voltage: number;
    ftype: "simple_power_source";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    voltage: string | number;
    ftype: "simple_power_source";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_battery">;
    capacity: z.ZodEffects<z.ZodUnion<[z.ZodNumber, z.ZodString]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_battery";
    capacity: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_battery";
    capacity: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_inductor">;
    inductance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    max_current_rating: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_inductor";
    inductance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_current_rating?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_inductor";
    inductance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_current_rating?: number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_push_button">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_push_button";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_push_button";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_potentiometer">;
    max_resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_potentiometer";
    max_resistance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_potentiometer";
    max_resistance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_crystal">;
    frequency: z.ZodNumber;
    load_capacitance: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_crystal";
    frequency: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    load_capacitance?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_crystal";
    frequency: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    load_capacitance?: number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_pin_header">;
    pin_count: z.ZodNumber;
    gender: z.ZodDefault<z.ZodOptional<z.ZodEnum<["male", "female"]>>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_pin_header";
    pin_count: number;
    gender: "male" | "female";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_pin_header";
    pin_count: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    gender?: "male" | "female" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_resonator">;
    load_capacitance: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, number, string | number>;
    equivalent_series_resistance: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    frequency: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resonator";
    frequency: number;
    load_capacitance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    equivalent_series_resistance?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resonator";
    frequency: string | number;
    load_capacitance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    equivalent_series_resistance?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_switch">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_switch";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_switch";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_transistor">;
    transistor_type: z.ZodEnum<["npn", "pnp"]>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_transistor";
    transistor_type: "npn" | "pnp";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_transistor";
    transistor_type: "npn" | "pnp";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_test_point">;
    footprint_variant: z.ZodOptional<z.ZodEnum<["pad", "through_hole"]>>;
    pad_shape: z.ZodOptional<z.ZodEnum<["rect", "circle"]>>;
    pad_diameter: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    hole_diameter: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    width: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    height: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_test_point";
    width?: string | number | undefined;
    height?: string | number | undefined;
    subcircuit_id?: string | undefined;
    hole_diameter?: string | number | undefined;
    pad_shape?: "circle" | "rect" | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    footprint_variant?: "pad" | "through_hole" | undefined;
    pad_diameter?: string | number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_test_point";
    width?: string | number | undefined;
    height?: string | number | undefined;
    subcircuit_id?: string | undefined;
    hole_diameter?: string | number | undefined;
    pad_shape?: "circle" | "rect" | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    footprint_variant?: "pad" | "through_hole" | undefined;
    pad_diameter?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_mosfet">;
    channel_type: z.ZodEnum<["n", "p"]>;
    mosfet_mode: z.ZodEnum<["enhancement", "depletion"]>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_mosfet";
    channel_type: "n" | "p";
    mosfet_mode: "enhancement" | "depletion";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_mosfet";
    channel_type: "n" | "p";
    mosfet_mode: "enhancement" | "depletion";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_fuse">;
    current_rating_amps: z.ZodNumber;
    voltage_rating_volts: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_fuse";
    current_rating_amps: number;
    voltage_rating_volts: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_fuse";
    current_rating_amps: number;
    voltage_rating_volts: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_project_metadata">;
    name: z.ZodOptional<z.ZodString>;
    software_used_string: z.ZodOptional<z.ZodString>;
    project_url: z.ZodOptional<z.ZodString>;
    created_at: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_project_metadata";
    name?: string | undefined;
    software_used_string?: string | undefined;
    project_url?: string | undefined;
    created_at?: string | undefined;
}, {
    type: "source_project_metadata";
    name?: string | undefined;
    software_used_string?: string | undefined;
    project_url?: string | undefined;
    created_at?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_missing_property_error">;
    source_missing_property_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    source_component_id: z.ZodString;
    property_name: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    error_type: z.ZodDefault<z.ZodLiteral<"source_missing_property_error">>;
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "source_missing_property_error";
    source_component_id: string;
    error_type: "source_missing_property_error";
    source_missing_property_error_id: string;
    property_name: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "source_missing_property_error";
    source_component_id: string;
    property_name: string;
    subcircuit_id?: string | undefined;
    error_type?: "source_missing_property_error" | undefined;
    source_missing_property_error_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_failed_to_create_component_error">;
    source_failed_to_create_component_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"source_failed_to_create_component_error">>;
    component_name: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    parent_source_component_id: z.ZodOptional<z.ZodString>;
    message: z.ZodString;
    pcb_center: z.ZodOptional<z.ZodObject<{
        x: z.ZodOptional<z.ZodNumber>;
        y: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        x?: number | undefined;
        y?: number | undefined;
    }, {
        x?: number | undefined;
        y?: number | undefined;
    }>>;
    schematic_center: z.ZodOptional<z.ZodObject<{
        x: z.ZodOptional<z.ZodNumber>;
        y: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        x?: number | undefined;
        y?: number | undefined;
    }, {
        x?: number | undefined;
        y?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "source_failed_to_create_component_error";
    error_type: "source_failed_to_create_component_error";
    source_failed_to_create_component_error_id: string;
    subcircuit_id?: string | undefined;
    component_name?: string | undefined;
    parent_source_component_id?: string | undefined;
    pcb_center?: {
        x?: number | undefined;
        y?: number | undefined;
    } | undefined;
    schematic_center?: {
        x?: number | undefined;
        y?: number | undefined;
    } | undefined;
}, {
    message: string;
    type: "source_failed_to_create_component_error";
    subcircuit_id?: string | undefined;
    error_type?: "source_failed_to_create_component_error" | undefined;
    source_failed_to_create_component_error_id?: string | undefined;
    component_name?: string | undefined;
    parent_source_component_id?: string | undefined;
    pcb_center?: {
        x?: number | undefined;
        y?: number | undefined;
    } | undefined;
    schematic_center?: {
        x?: number | undefined;
        y?: number | undefined;
    } | undefined;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"source_net">;
    source_net_id: z.ZodString;
    name: z.ZodString;
    member_source_group_ids: z.ZodArray<z.ZodString, "many">;
    is_power: z.ZodOptional<z.ZodBoolean>;
    is_ground: z.ZodOptional<z.ZodBoolean>;
    is_digital_signal: z.ZodOptional<z.ZodBoolean>;
    is_analog_signal: z.ZodOptional<z.ZodBoolean>;
    trace_width: z.ZodOptional<z.ZodNumber>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    subcircuit_connectivity_map_key: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_net";
    name: string;
    source_net_id: string;
    member_source_group_ids: string[];
    trace_width?: number | undefined;
    subcircuit_id?: string | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
    is_power?: boolean | undefined;
    is_ground?: boolean | undefined;
    is_digital_signal?: boolean | undefined;
    is_analog_signal?: boolean | undefined;
}, {
    type: "source_net";
    name: string;
    source_net_id: string;
    member_source_group_ids: string[];
    trace_width?: number | undefined;
    subcircuit_id?: string | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
    is_power?: boolean | undefined;
    is_ground?: boolean | undefined;
    is_digital_signal?: boolean | undefined;
    is_analog_signal?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_group">;
    source_group_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    parent_subcircuit_id: z.ZodOptional<z.ZodString>;
    parent_source_group_id: z.ZodOptional<z.ZodString>;
    is_subcircuit: z.ZodOptional<z.ZodBoolean>;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_group";
    source_group_id: string;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    parent_subcircuit_id?: string | undefined;
    parent_source_group_id?: string | undefined;
}, {
    type: "source_group";
    source_group_id: string;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    parent_subcircuit_id?: string | undefined;
    parent_source_group_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_chip">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_chip";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_chip";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_capacitor">;
    capacitance: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, number, string | number>;
    max_voltage_rating: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    display_capacitance: z.ZodOptional<z.ZodString>;
    max_decoupling_trace_length: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_capacitor";
    capacitance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_voltage_rating?: number | undefined;
    display_capacitance?: string | undefined;
    max_decoupling_trace_length?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_capacitor";
    capacitance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_voltage_rating?: string | number | undefined;
    display_capacitance?: string | undefined;
    max_decoupling_trace_length?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_diode">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_diode";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_diode";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_led">;
    color: z.ZodOptional<z.ZodString>;
    wavelength: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_led";
    subcircuit_id?: string | undefined;
    color?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    wavelength?: string | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_led";
    subcircuit_id?: string | undefined;
    color?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    wavelength?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_resistor">;
    resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    display_resistance: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resistor";
    resistance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    display_resistance?: string | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resistor";
    resistance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    display_resistance?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_power_source">;
    voltage: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    voltage: number;
    ftype: "simple_power_source";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    voltage: string | number;
    ftype: "simple_power_source";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_battery">;
    capacity: z.ZodEffects<z.ZodUnion<[z.ZodNumber, z.ZodString]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_battery";
    capacity: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_battery";
    capacity: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_inductor">;
    inductance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    max_current_rating: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_inductor";
    inductance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_current_rating?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_inductor";
    inductance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_current_rating?: number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_pin_header">;
    pin_count: z.ZodNumber;
    gender: z.ZodDefault<z.ZodOptional<z.ZodEnum<["male", "female"]>>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_pin_header";
    pin_count: number;
    gender: "male" | "female";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_pin_header";
    pin_count: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    gender?: "male" | "female" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_resonator">;
    load_capacitance: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, number, string | number>;
    equivalent_series_resistance: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    frequency: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resonator";
    frequency: number;
    load_capacitance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    equivalent_series_resistance?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resonator";
    frequency: string | number;
    load_capacitance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    equivalent_series_resistance?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_switch">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_switch";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_switch";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_transistor">;
    transistor_type: z.ZodEnum<["npn", "pnp"]>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_transistor";
    transistor_type: "npn" | "pnp";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_transistor";
    transistor_type: "npn" | "pnp";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_test_point">;
    footprint_variant: z.ZodOptional<z.ZodEnum<["pad", "through_hole"]>>;
    pad_shape: z.ZodOptional<z.ZodEnum<["rect", "circle"]>>;
    pad_diameter: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    hole_diameter: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    width: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    height: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_test_point";
    width?: string | number | undefined;
    height?: string | number | undefined;
    subcircuit_id?: string | undefined;
    hole_diameter?: string | number | undefined;
    pad_shape?: "circle" | "rect" | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    footprint_variant?: "pad" | "through_hole" | undefined;
    pad_diameter?: string | number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_test_point";
    width?: string | number | undefined;
    height?: string | number | undefined;
    subcircuit_id?: string | undefined;
    hole_diameter?: string | number | undefined;
    pad_shape?: "circle" | "rect" | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    footprint_variant?: "pad" | "through_hole" | undefined;
    pad_diameter?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_mosfet">;
    channel_type: z.ZodEnum<["n", "p"]>;
    mosfet_mode: z.ZodEnum<["enhancement", "depletion"]>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_mosfet";
    channel_type: "n" | "p";
    mosfet_mode: "enhancement" | "depletion";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_mosfet";
    channel_type: "n" | "p";
    mosfet_mode: "enhancement" | "depletion";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_potentiometer">;
    max_resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_potentiometer";
    max_resistance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_potentiometer";
    max_resistance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_push_button">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_push_button";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_push_button";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_pcb_ground_plane">;
    source_pcb_ground_plane_id: z.ZodString;
    source_group_id: z.ZodString;
    source_net_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_pcb_ground_plane";
    source_group_id: string;
    source_net_id: string;
    source_pcb_ground_plane_id: string;
    subcircuit_id?: string | undefined;
}, {
    type: "source_pcb_ground_plane";
    source_group_id: string;
    source_net_id: string;
    source_pcb_ground_plane_id: string;
    subcircuit_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_project_metadata">;
    name: z.ZodOptional<z.ZodString>;
    software_used_string: z.ZodOptional<z.ZodString>;
    project_url: z.ZodOptional<z.ZodString>;
    created_at: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_project_metadata";
    name?: string | undefined;
    software_used_string?: string | undefined;
    project_url?: string | undefined;
    created_at?: string | undefined;
}, {
    type: "source_project_metadata";
    name?: string | undefined;
    software_used_string?: string | undefined;
    project_url?: string | undefined;
    created_at?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_component">;
    pcb_component_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    source_component_id: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    rotation: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_component";
    width: number;
    height: number;
    pcb_component_id: string;
    source_component_id: string;
    center: {
        x: number;
        y: number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    rotation: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_component";
    width: string | number;
    height: string | number;
    source_component_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    rotation: string | number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}>, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"pcb_hole">;
    pcb_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    hole_shape: z.ZodEnum<["circle", "square"]>;
    hole_diameter: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_hole";
    pcb_hole_id: string;
    hole_shape: "circle" | "square";
    hole_diameter: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_hole";
    hole_shape: "circle" | "square";
    hole_diameter: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_hole_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_hole">;
    pcb_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    hole_shape: z.ZodLiteral<"oval">;
    hole_width: z.ZodNumber;
    hole_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_hole";
    pcb_hole_id: string;
    hole_shape: "oval";
    hole_width: number;
    hole_height: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_hole";
    hole_shape: "oval";
    hole_width: number;
    hole_height: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_hole_id?: string | undefined;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_missing_footprint_error">;
    pcb_missing_footprint_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_missing_footprint_error">>;
    source_component_id: z.ZodString;
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_missing_footprint_error";
    source_component_id: string;
    error_type: "pcb_missing_footprint_error";
    pcb_missing_footprint_error_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    message: string;
    type: "pcb_missing_footprint_error";
    source_component_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    error_type?: "pcb_missing_footprint_error" | undefined;
    pcb_missing_footprint_error_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_manual_edit_conflict_warning">;
    pcb_manual_edit_conflict_warning_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    warning_type: z.ZodDefault<z.ZodLiteral<"pcb_manual_edit_conflict_warning">>;
    message: z.ZodString;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_manual_edit_conflict_warning";
    pcb_component_id: string;
    source_component_id: string;
    pcb_manual_edit_conflict_warning_id: string;
    warning_type: "pcb_manual_edit_conflict_warning";
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    message: string;
    type: "pcb_manual_edit_conflict_warning";
    pcb_component_id: string;
    source_component_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_manual_edit_conflict_warning_id?: string | undefined;
    warning_type?: "pcb_manual_edit_conflict_warning" | undefined;
}>, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"pcb_plated_hole">;
    shape: z.ZodLiteral<"circle">;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    outer_diameter: z.ZodNumber;
    hole_diameter: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
    pcb_plated_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_plated_hole";
    hole_diameter: number;
    shape: "circle";
    outer_diameter: number;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_plated_hole_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_plated_hole";
    hole_diameter: number;
    shape: "circle";
    outer_diameter: number;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_plated_hole">;
    shape: z.ZodEnum<["oval", "pill"]>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    outer_width: z.ZodNumber;
    outer_height: z.ZodNumber;
    hole_width: z.ZodNumber;
    hole_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
    pcb_plated_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_plated_hole";
    hole_width: number;
    hole_height: number;
    shape: "oval" | "pill";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_plated_hole_id: string;
    outer_width: number;
    outer_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_plated_hole";
    hole_width: number;
    hole_height: number;
    shape: "oval" | "pill";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    outer_width: number;
    outer_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_plated_hole">;
    shape: z.ZodLiteral<"circular_hole_with_rect_pad">;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    hole_shape: z.ZodLiteral<"circle">;
    pad_shape: z.ZodLiteral<"rect">;
    hole_diameter: z.ZodNumber;
    rect_pad_width: z.ZodNumber;
    rect_pad_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
    pcb_plated_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_plated_hole";
    hole_shape: "circle";
    hole_diameter: number;
    shape: "circular_hole_with_rect_pad";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_plated_hole_id: string;
    pad_shape: "rect";
    rect_pad_width: number;
    rect_pad_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_plated_hole";
    hole_shape: "circle";
    hole_diameter: number;
    shape: "circular_hole_with_rect_pad";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    pad_shape: "rect";
    rect_pad_width: number;
    rect_pad_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_plated_hole">;
    shape: z.ZodLiteral<"pill_hole_with_rect_pad">;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    hole_shape: z.ZodLiteral<"pill">;
    pad_shape: z.ZodLiteral<"rect">;
    hole_width: z.ZodNumber;
    hole_height: z.ZodNumber;
    rect_pad_width: z.ZodNumber;
    rect_pad_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
    pcb_plated_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_plated_hole";
    hole_shape: "pill";
    hole_width: number;
    hole_height: number;
    shape: "pill_hole_with_rect_pad";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_plated_hole_id: string;
    pad_shape: "rect";
    rect_pad_width: number;
    rect_pad_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_plated_hole";
    hole_shape: "pill";
    hole_width: number;
    hole_height: number;
    shape: "pill_hole_with_rect_pad";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    pad_shape: "rect";
    rect_pad_width: number;
    rect_pad_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
}>]>, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"pcb_keepout">;
    shape: z.ZodLiteral<"rect">;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    pcb_keepout_id: z.ZodString;
    layers: z.ZodArray<z.ZodString, "many">;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_keepout";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    shape: "rect";
    layers: string[];
    pcb_keepout_id: string;
    description?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_keepout";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "rect";
    layers: string[];
    pcb_keepout_id: string;
    description?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_keepout">;
    shape: z.ZodLiteral<"circle">;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    pcb_keepout_id: z.ZodString;
    layers: z.ZodArray<z.ZodString, "many">;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_keepout";
    center: {
        x: number;
        y: number;
    };
    shape: "circle";
    layers: string[];
    radius: number;
    pcb_keepout_id: string;
    description?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_keepout";
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "circle";
    layers: string[];
    radius: string | number;
    pcb_keepout_id: string;
    description?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_port">;
    pcb_port_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    source_port_id: z.ZodString;
    pcb_component_id: z.ZodString;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_port";
    pcb_component_id: string;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_port_id: string;
    source_port_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_port";
    pcb_component_id: string;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    source_port_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_port_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_text">;
    pcb_text_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    text: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    lines: z.ZodNumber;
    align: z.ZodEnum<["bottom-left"]>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_text";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    pcb_text_id: string;
    text: string;
    lines: number;
    align: "bottom-left";
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_text";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    text: string;
    lines: number;
    align: "bottom-left";
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_text_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_trace">;
    source_trace_id: z.ZodOptional<z.ZodString>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_trace_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    route_thickness_mode: z.ZodOptional<z.ZodDefault<z.ZodEnum<["constant", "interpolated"]>>>;
    route_order_index: z.ZodOptional<z.ZodNumber>;
    should_round_corners: z.ZodOptional<z.ZodBoolean>;
    trace_length: z.ZodOptional<z.ZodNumber>;
    route: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        route_type: z.ZodLiteral<"wire">;
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        start_pcb_port_id: z.ZodOptional<z.ZodString>;
        end_pcb_port_id: z.ZodOptional<z.ZodString>;
        layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        width: number;
        layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    }, {
        x: string | number;
        y: string | number;
        width: string | number;
        layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        };
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    }>, z.ZodObject<{
        route_type: z.ZodLiteral<"via">;
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        hole_diameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        outer_diameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        from_layer: z.ZodString;
        to_layer: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
        hole_diameter?: number | undefined;
        outer_diameter?: number | undefined;
    }, {
        x: string | number;
        y: string | number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
        hole_diameter?: string | number | undefined;
        outer_diameter?: string | number | undefined;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "pcb_trace";
    pcb_trace_id: string;
    route: ({
        x: number;
        y: number;
        width: number;
        layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    } | {
        x: number;
        y: number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
        hole_diameter?: number | undefined;
        outer_diameter?: number | undefined;
    })[];
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    source_trace_id?: string | undefined;
    route_thickness_mode?: "constant" | "interpolated" | undefined;
    route_order_index?: number | undefined;
    should_round_corners?: boolean | undefined;
    trace_length?: number | undefined;
}, {
    type: "pcb_trace";
    route: ({
        x: string | number;
        y: string | number;
        width: string | number;
        layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        };
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    } | {
        x: string | number;
        y: string | number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
        hole_diameter?: string | number | undefined;
        outer_diameter?: string | number | undefined;
    })[];
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    source_trace_id?: string | undefined;
    pcb_trace_id?: string | undefined;
    route_thickness_mode?: "constant" | "interpolated" | undefined;
    route_order_index?: number | undefined;
    should_round_corners?: boolean | undefined;
    trace_length?: number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_via">;
    pcb_via_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    outer_diameter: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    hole_diameter: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    from_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    pcb_trace_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_via";
    hole_diameter: number;
    outer_diameter: number;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_via_id: string;
    to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    from_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcb_trace_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_via";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    hole_diameter?: string | number | undefined;
    outer_diameter?: string | number | undefined;
    from_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcb_trace_id?: string | undefined;
    pcb_via_id?: string | undefined;
}>, z.ZodDiscriminatedUnion<"shape", [z.ZodObject<{
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"circle">;
    pcb_smtpad_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    radius: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_smtpad";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "circle";
    pcb_smtpad_id: string;
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_smtpad";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "circle";
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"rect">;
    pcb_smtpad_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "rect";
    pcb_smtpad_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "rect";
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"rotated_rect">;
    pcb_smtpad_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    ccw_rotation: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "rotated_rect";
    pcb_smtpad_id: string;
    ccw_rotation: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "rotated_rect";
    ccw_rotation: string | number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"pill">;
    pcb_smtpad_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    radius: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "pill";
    pcb_smtpad_id: string;
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "pill";
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"polygon">;
    pcb_smtpad_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_smtpad";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "polygon";
    pcb_smtpad_id: string;
    points: {
        x: number;
        y: number;
    }[];
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    type: "pcb_smtpad";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "polygon";
    points: {
        x: string | number;
        y: string | number;
    }[];
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}>]>, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"pcb_solder_paste">;
    shape: z.ZodLiteral<"circle">;
    pcb_solder_paste_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    radius: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_smtpad_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_solder_paste";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "circle";
    radius: number;
    pcb_solder_paste_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_solder_paste";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "circle";
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
    pcb_solder_paste_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_solder_paste">;
    shape: z.ZodLiteral<"rect">;
    pcb_solder_paste_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_smtpad_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "rect";
    pcb_solder_paste_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "rect";
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
    pcb_solder_paste_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_solder_paste">;
    shape: z.ZodLiteral<"pill">;
    pcb_solder_paste_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    radius: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_smtpad_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "pill";
    radius: number;
    pcb_solder_paste_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "pill";
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
    pcb_solder_paste_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_solder_paste">;
    shape: z.ZodLiteral<"rotated_rect">;
    pcb_solder_paste_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    ccw_rotation: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_smtpad_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "rotated_rect";
    ccw_rotation: number;
    pcb_solder_paste_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "rotated_rect";
    ccw_rotation: string | number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
    pcb_solder_paste_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_solder_paste">;
    shape: z.ZodLiteral<"oval">;
    pcb_solder_paste_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_smtpad_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "oval";
    pcb_solder_paste_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "oval";
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
    pcb_solder_paste_id?: string | undefined;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_board">;
    pcb_board_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    is_subcircuit: z.ZodOptional<z.ZodBoolean>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    thickness: z.ZodDefault<z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>>;
    num_layers: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    outline: z.ZodOptional<z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">>;
    material: z.ZodDefault<z.ZodEnum<["fr4", "fr1"]>>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_board";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    pcb_board_id: string;
    thickness: number;
    num_layers: number;
    material: "fr4" | "fr1";
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    outline?: {
        x: number;
        y: number;
    }[] | undefined;
}, {
    type: "pcb_board";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    subcircuit_id?: string | undefined;
    pcb_board_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    thickness?: string | number | undefined;
    num_layers?: number | undefined;
    outline?: {
        x: string | number;
        y: string | number;
    }[] | undefined;
    material?: "fr4" | "fr1" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_group">;
    pcb_group_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    source_group_id: z.ZodString;
    is_subcircuit: z.ZodOptional<z.ZodBoolean>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    pcb_component_ids: z.ZodArray<z.ZodString, "many">;
    name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    autorouter_configuration: z.ZodOptional<z.ZodObject<{
        trace_clearance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        trace_clearance: number;
    }, {
        trace_clearance: string | number;
    }>>;
    autorouter_used_string: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_group";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    pcb_group_id: string;
    pcb_component_ids: string[];
    source_group_id: string;
    description?: string | undefined;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    autorouter_configuration?: {
        trace_clearance: number;
    } | undefined;
    autorouter_used_string?: string | undefined;
}, {
    type: "pcb_group";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    pcb_component_ids: string[];
    source_group_id: string;
    description?: string | undefined;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    autorouter_configuration?: {
        trace_clearance: string | number;
    } | undefined;
    autorouter_used_string?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_trace_hint">;
    pcb_trace_hint_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_port_id: z.ZodString;
    pcb_component_id: z.ZodString;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        via: z.ZodOptional<z.ZodBoolean>;
        to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>>;
        trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }, {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }>, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_trace_hint";
    pcb_component_id: string;
    pcb_port_id: string;
    route: {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }[];
    pcb_trace_hint_id: string;
    subcircuit_id?: string | undefined;
}, {
    type: "pcb_trace_hint";
    pcb_component_id: string;
    pcb_port_id: string;
    route: {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }[];
    subcircuit_id?: string | undefined;
    pcb_trace_hint_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_line">;
    pcb_silkscreen_line_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    stroke_width: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    x1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    x2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEnum<["top", "bottom"]>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_line";
    pcb_component_id: string;
    layer: "top" | "bottom";
    pcb_silkscreen_line_id: string;
    stroke_width: number;
    x1: number;
    y1: number;
    x2: number;
    y2: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_silkscreen_line";
    pcb_component_id: string;
    layer: "top" | "bottom";
    x1: string | number;
    y1: string | number;
    x2: string | number;
    y2: string | number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_silkscreen_line_id?: string | undefined;
    stroke_width?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_path">;
    pcb_silkscreen_path_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    layer: z.ZodEnum<["top", "bottom"]>;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    stroke_width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_path";
    pcb_component_id: string;
    layer: "top" | "bottom";
    route: {
        x: number;
        y: number;
    }[];
    stroke_width: number;
    pcb_silkscreen_path_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_silkscreen_path";
    pcb_component_id: string;
    layer: "top" | "bottom";
    route: {
        x: string | number;
        y: string | number;
    }[];
    stroke_width: string | number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_silkscreen_path_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_text">;
    pcb_silkscreen_text_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    font: z.ZodDefault<z.ZodLiteral<"tscircuit2024">>;
    font_size: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcb_component_id: z.ZodString;
    text: z.ZodString;
    ccw_rotation: z.ZodOptional<z.ZodNumber>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    is_mirrored: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    anchor_position: z.ZodDefault<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>>;
    anchor_alignment: z.ZodDefault<z.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_text";
    pcb_component_id: string;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    text: string;
    pcb_silkscreen_text_id: string;
    font: "tscircuit2024";
    font_size: number;
    anchor_position: {
        x: number;
        y: number;
    };
    anchor_alignment: "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right";
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    ccw_rotation?: number | undefined;
    is_mirrored?: boolean | undefined;
}, {
    type: "pcb_silkscreen_text";
    pcb_component_id: string;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    text: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    ccw_rotation?: number | undefined;
    pcb_silkscreen_text_id?: string | undefined;
    font?: "tscircuit2024" | undefined;
    font_size?: string | number | undefined;
    is_mirrored?: boolean | undefined;
    anchor_position?: {
        x: string | number;
        y: string | number;
    } | undefined;
    anchor_alignment?: "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_rect">;
    pcb_silkscreen_rect_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    stroke_width: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    is_filled: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    has_stroke: z.ZodOptional<z.ZodBoolean>;
    is_stroke_dashed: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_rect";
    width: number;
    height: number;
    pcb_component_id: string;
    center: {
        x: number;
        y: number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    stroke_width: number;
    pcb_silkscreen_rect_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    is_filled?: boolean | undefined;
    has_stroke?: boolean | undefined;
    is_stroke_dashed?: boolean | undefined;
}, {
    type: "pcb_silkscreen_rect";
    width: string | number;
    height: string | number;
    pcb_component_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    stroke_width?: string | number | undefined;
    pcb_silkscreen_rect_id?: string | undefined;
    is_filled?: boolean | undefined;
    has_stroke?: boolean | undefined;
    is_stroke_dashed?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_circle">;
    pcb_silkscreen_circle_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEnum<["top", "bottom"]>;
    stroke_width: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_circle";
    pcb_component_id: string;
    center: {
        x: number;
        y: number;
    };
    layer: "top" | "bottom";
    radius: number;
    stroke_width: number;
    pcb_silkscreen_circle_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_silkscreen_circle";
    pcb_component_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    layer: "top" | "bottom";
    radius: string | number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    stroke_width?: string | number | undefined;
    pcb_silkscreen_circle_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_oval">;
    pcb_silkscreen_oval_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    radius_x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    radius_y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEnum<["top", "bottom"]>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_oval";
    pcb_component_id: string;
    center: {
        x: number;
        y: number;
    };
    layer: "top" | "bottom";
    pcb_silkscreen_oval_id: string;
    radius_x: number;
    radius_y: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_silkscreen_oval";
    pcb_component_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    layer: "top" | "bottom";
    radius_x: string | number;
    radius_y: string | number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_silkscreen_oval_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_trace_error">;
    pcb_trace_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_trace_error">>;
    message: z.ZodString;
    center: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>>;
    pcb_trace_id: z.ZodString;
    source_trace_id: z.ZodString;
    pcb_component_ids: z.ZodArray<z.ZodString, "many">;
    pcb_port_ids: z.ZodArray<z.ZodString, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_trace_error";
    source_trace_id: string;
    pcb_trace_id: string;
    pcb_trace_error_id: string;
    error_type: "pcb_trace_error";
    pcb_component_ids: string[];
    pcb_port_ids: string[];
    center?: {
        x: number;
        y: number;
    } | undefined;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "pcb_trace_error";
    source_trace_id: string;
    pcb_trace_id: string;
    pcb_component_ids: string[];
    pcb_port_ids: string[];
    center?: {
        x: string | number;
        y: string | number;
    } | undefined;
    subcircuit_id?: string | undefined;
    pcb_trace_error_id?: string | undefined;
    error_type?: "pcb_trace_error" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_placement_error">;
    pcb_placement_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_placement_error">>;
    message: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_placement_error";
    error_type: "pcb_placement_error";
    pcb_placement_error_id: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "pcb_placement_error";
    subcircuit_id?: string | undefined;
    error_type?: "pcb_placement_error" | undefined;
    pcb_placement_error_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_port_not_matched_error">;
    pcb_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_port_not_matched_error">>;
    message: z.ZodString;
    pcb_component_ids: z.ZodArray<z.ZodString, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_port_not_matched_error";
    error_type: "pcb_port_not_matched_error";
    pcb_component_ids: string[];
    pcb_error_id: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "pcb_port_not_matched_error";
    pcb_component_ids: string[];
    subcircuit_id?: string | undefined;
    error_type?: "pcb_port_not_matched_error" | undefined;
    pcb_error_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_fabrication_note_path">;
    pcb_fabrication_note_path_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    stroke_width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    color: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_fabrication_note_path";
    pcb_component_id: string;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    route: {
        x: number;
        y: number;
    }[];
    stroke_width: number;
    pcb_fabrication_note_path_id: string;
    subcircuit_id?: string | undefined;
    color?: string | undefined;
}, {
    type: "pcb_fabrication_note_path";
    pcb_component_id: string;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    route: {
        x: string | number;
        y: string | number;
    }[];
    stroke_width: string | number;
    subcircuit_id?: string | undefined;
    color?: string | undefined;
    pcb_fabrication_note_path_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_fabrication_note_text">;
    pcb_fabrication_note_text_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    font: z.ZodDefault<z.ZodLiteral<"tscircuit2024">>;
    font_size: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcb_component_id: z.ZodString;
    text: z.ZodString;
    layer: z.ZodEnum<["top", "bottom"]>;
    anchor_position: z.ZodDefault<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>>;
    anchor_alignment: z.ZodDefault<z.ZodEnum<["center", "top_left", "top_right", "bottom_left", "bottom_right"]>>;
    color: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_fabrication_note_text";
    pcb_component_id: string;
    layer: "top" | "bottom";
    text: string;
    font: "tscircuit2024";
    font_size: number;
    anchor_position: {
        x: number;
        y: number;
    };
    anchor_alignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right";
    pcb_fabrication_note_text_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    color?: string | undefined;
}, {
    type: "pcb_fabrication_note_text";
    pcb_component_id: string;
    layer: "top" | "bottom";
    text: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    font?: "tscircuit2024" | undefined;
    font_size?: string | number | undefined;
    anchor_position?: {
        x: string | number;
        y: string | number;
    } | undefined;
    anchor_alignment?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | undefined;
    pcb_fabrication_note_text_id?: string | undefined;
    color?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_autorouting_error">;
    pcb_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_autorouting_error">>;
    message: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_autorouting_error";
    error_type: "pcb_autorouting_error";
    pcb_error_id: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "pcb_autorouting_error";
    subcircuit_id?: string | undefined;
    error_type?: "pcb_autorouting_error" | undefined;
    pcb_error_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_footprint_overlap_error">;
    pcb_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_footprint_overlap_error">>;
    message: z.ZodString;
    pcb_smtpad_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_plated_hole_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_hole_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_keepout_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_footprint_overlap_error";
    error_type: "pcb_footprint_overlap_error";
    pcb_error_id: string;
    pcb_smtpad_ids?: string[] | undefined;
    pcb_plated_hole_ids?: string[] | undefined;
    pcb_hole_ids?: string[] | undefined;
    pcb_keepout_ids?: string[] | undefined;
}, {
    message: string;
    type: "pcb_footprint_overlap_error";
    error_type?: "pcb_footprint_overlap_error" | undefined;
    pcb_error_id?: string | undefined;
    pcb_smtpad_ids?: string[] | undefined;
    pcb_plated_hole_ids?: string[] | undefined;
    pcb_hole_ids?: string[] | undefined;
    pcb_keepout_ids?: string[] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_breakout_point">;
    pcb_breakout_point_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    source_trace_id: z.ZodOptional<z.ZodString>;
    source_port_id: z.ZodOptional<z.ZodString>;
    source_net_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_breakout_point";
    pcb_group_id: string;
    pcb_breakout_point_id: string;
    subcircuit_id?: string | undefined;
    source_port_id?: string | undefined;
    source_trace_id?: string | undefined;
    source_net_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_breakout_point";
    pcb_group_id: string;
    subcircuit_id?: string | undefined;
    source_port_id?: string | undefined;
    source_trace_id?: string | undefined;
    pcb_breakout_point_id?: string | undefined;
    source_net_id?: string | undefined;
}>, z.ZodDiscriminatedUnion<"shape", [z.ZodObject<{
    type: z.ZodLiteral<"pcb_cutout">;
    pcb_cutout_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"rect">;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    rotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_cutout";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    shape: "rect";
    pcb_cutout_id: string;
    rotation?: number | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_cutout";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "rect";
    rotation?: string | number | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_cutout_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_cutout">;
    pcb_cutout_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"circle">;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_cutout";
    center: {
        x: number;
        y: number;
    };
    shape: "circle";
    radius: number;
    pcb_cutout_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_cutout";
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "circle";
    radius: string | number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_cutout_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_cutout">;
    pcb_cutout_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"polygon">;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "pcb_cutout";
    shape: "polygon";
    points: {
        x: number;
        y: number;
    }[];
    pcb_cutout_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_cutout";
    shape: "polygon";
    points: {
        x: string | number;
        y: string | number;
    }[];
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_cutout_id?: string | undefined;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_ground_plane">;
    pcb_ground_plane_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    source_pcb_ground_plane_id: z.ZodString;
    source_net_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_ground_plane";
    source_net_id: string;
    pcb_ground_plane_id: string;
    source_pcb_ground_plane_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_ground_plane";
    source_net_id: string;
    source_pcb_ground_plane_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_ground_plane_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_ground_plane_region">;
    pcb_ground_plane_region_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_ground_plane_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "pcb_ground_plane_region";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    points: {
        x: number;
        y: number;
    }[];
    pcb_ground_plane_id: string;
    pcb_ground_plane_region_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_ground_plane_region";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    points: {
        x: string | number;
        y: string | number;
    }[];
    pcb_ground_plane_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_ground_plane_region_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_thermal_spoke">;
    pcb_thermal_spoke_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_ground_plane_id: z.ZodString;
    shape: z.ZodString;
    spoke_count: z.ZodNumber;
    spoke_thickness: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    spoke_inner_diameter: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    spoke_outer_diameter: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    pcb_plated_hole_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_thermal_spoke";
    shape: string;
    pcb_ground_plane_id: string;
    pcb_thermal_spoke_id: string;
    spoke_count: number;
    spoke_thickness: number;
    spoke_inner_diameter: number;
    spoke_outer_diameter: number;
    subcircuit_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
}, {
    type: "pcb_thermal_spoke";
    shape: string;
    pcb_ground_plane_id: string;
    spoke_count: number;
    spoke_thickness: string | number;
    spoke_inner_diameter: string | number;
    spoke_outer_diameter: string | number;
    subcircuit_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
    pcb_thermal_spoke_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_box">;
    schematic_component_id: z.ZodOptional<z.ZodString>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    is_dashed: z.ZodDefault<z.ZodBoolean>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "schematic_box";
    width: number;
    height: number;
    is_dashed: boolean;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "schematic_box";
    width: string | number;
    height: string | number;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
    is_dashed?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_text">;
    schematic_component_id: z.ZodOptional<z.ZodString>;
    schematic_text_id: z.ZodString;
    text: z.ZodString;
    font_size: z.ZodDefault<z.ZodNumber>;
    position: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    rotation: z.ZodDefault<z.ZodNumber>;
    anchor: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["center", "left", "right", "top", "bottom"]>, z.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>]>>;
    color: z.ZodDefault<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    anchor: "top" | "bottom" | "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right" | "left" | "right";
    type: "schematic_text";
    rotation: number;
    text: string;
    font_size: number;
    color: string;
    schematic_text_id: string;
    position: {
        x: number;
        y: number;
    };
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
}, {
    type: "schematic_text";
    text: string;
    schematic_text_id: string;
    position: {
        x: string | number;
        y: string | number;
    };
    anchor?: "top" | "bottom" | "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right" | "left" | "right" | undefined;
    rotation?: number | undefined;
    subcircuit_id?: string | undefined;
    font_size?: number | undefined;
    color?: string | undefined;
    schematic_component_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_line">;
    schematic_component_id: z.ZodString;
    x1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    x2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_line";
    x1: number;
    y1: number;
    x2: number;
    y2: number;
    schematic_component_id: string;
    subcircuit_id?: string | undefined;
}, {
    type: "schematic_line";
    x1: string | number;
    y1: string | number;
    x2: string | number;
    y2: string | number;
    schematic_component_id: string;
    subcircuit_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_component">;
    size: z.ZodObject<{
        width: z.ZodNumber;
        height: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        width: number;
        height: number;
    }, {
        width: number;
        height: number;
    }>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    source_component_id: z.ZodString;
    schematic_component_id: z.ZodString;
    pin_spacing: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pin_styles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        left_margin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        right_margin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        top_margin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        bottom_margin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        left_margin?: number | undefined;
        right_margin?: number | undefined;
        top_margin?: number | undefined;
        bottom_margin?: number | undefined;
    }, {
        left_margin?: string | number | undefined;
        right_margin?: string | number | undefined;
        top_margin?: string | number | undefined;
        bottom_margin?: string | number | undefined;
    }>>>;
    box_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    symbol_name: z.ZodOptional<z.ZodString>;
    port_arrangement: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        left_size: z.ZodNumber;
        right_size: z.ZodNumber;
        top_size: z.ZodOptional<z.ZodNumber>;
        bottom_size: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    }, {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    }>, z.ZodObject<{
        left_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["top-to-bottom", "bottom-to-top"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }>>;
        right_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["top-to-bottom", "bottom-to-top"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }>>;
        top_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["left-to-right", "right-to-left"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }>>;
        bottom_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["left-to-right", "right-to-left"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    }, {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    }>]>>;
    port_labels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    symbol_display_value: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    schematic_group_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_component";
    source_component_id: string;
    center: {
        x: number;
        y: number;
    };
    schematic_component_id: string;
    size: {
        width: number;
        height: number;
    };
    subcircuit_id?: string | undefined;
    pin_spacing?: number | undefined;
    pin_styles?: Record<string, {
        left_margin?: number | undefined;
        right_margin?: number | undefined;
        top_margin?: number | undefined;
        bottom_margin?: number | undefined;
    }> | undefined;
    box_width?: number | undefined;
    symbol_name?: string | undefined;
    port_arrangement?: {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    } | {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    } | undefined;
    port_labels?: Record<string, string> | undefined;
    symbol_display_value?: string | undefined;
    schematic_group_id?: string | undefined;
}, {
    type: "schematic_component";
    source_component_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    schematic_component_id: string;
    size: {
        width: number;
        height: number;
    };
    subcircuit_id?: string | undefined;
    pin_spacing?: string | number | undefined;
    pin_styles?: Record<string, {
        left_margin?: string | number | undefined;
        right_margin?: string | number | undefined;
        top_margin?: string | number | undefined;
        bottom_margin?: string | number | undefined;
    }> | undefined;
    box_width?: string | number | undefined;
    symbol_name?: string | undefined;
    port_arrangement?: {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    } | {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    } | undefined;
    port_labels?: Record<string, string> | undefined;
    symbol_display_value?: string | undefined;
    schematic_group_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_port">;
    schematic_port_id: z.ZodString;
    source_port_id: z.ZodString;
    schematic_component_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    facing_direction: z.ZodOptional<z.ZodEnum<["up", "down", "left", "right"]>>;
    distance_from_component_edge: z.ZodOptional<z.ZodNumber>;
    side_of_component: z.ZodOptional<z.ZodEnum<["top", "bottom", "left", "right"]>>;
    true_ccw_index: z.ZodOptional<z.ZodNumber>;
    pin_number: z.ZodOptional<z.ZodNumber>;
    display_pin_label: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    is_connected: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_port";
    center: {
        x: number;
        y: number;
    };
    source_port_id: string;
    schematic_port_id: string;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
    facing_direction?: "left" | "right" | "up" | "down" | undefined;
    distance_from_component_edge?: number | undefined;
    side_of_component?: "top" | "bottom" | "left" | "right" | undefined;
    true_ccw_index?: number | undefined;
    pin_number?: number | undefined;
    display_pin_label?: string | undefined;
    is_connected?: boolean | undefined;
}, {
    type: "schematic_port";
    center: {
        x: string | number;
        y: string | number;
    };
    source_port_id: string;
    schematic_port_id: string;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
    facing_direction?: "left" | "right" | "up" | "down" | undefined;
    distance_from_component_edge?: number | undefined;
    side_of_component?: "top" | "bottom" | "left" | "right" | undefined;
    true_ccw_index?: number | undefined;
    pin_number?: number | undefined;
    display_pin_label?: string | undefined;
    is_connected?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_trace">;
    schematic_trace_id: z.ZodString;
    source_trace_id: z.ZodString;
    junctions: z.ZodArray<z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>, "many">;
    edges: z.ZodArray<z.ZodObject<{
        from: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
        to: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
        is_crossing: z.ZodOptional<z.ZodBoolean>;
        from_schematic_port_id: z.ZodOptional<z.ZodString>;
        to_schematic_port_id: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        is_crossing?: boolean | undefined;
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }, {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        is_crossing?: boolean | undefined;
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }>, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_trace";
    source_trace_id: string;
    schematic_trace_id: string;
    junctions: {
        x: number;
        y: number;
    }[];
    edges: {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        is_crossing?: boolean | undefined;
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }[];
    subcircuit_id?: string | undefined;
}, {
    type: "schematic_trace";
    source_trace_id: string;
    schematic_trace_id: string;
    junctions: {
        x: number;
        y: number;
    }[];
    edges: {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        is_crossing?: boolean | undefined;
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }[];
    subcircuit_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_path">;
    schematic_component_id: z.ZodString;
    fill_color: z.ZodOptional<z.ZodEnum<["red", "blue"]>>;
    is_filled: z.ZodOptional<z.ZodBoolean>;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_path";
    points: {
        x: number;
        y: number;
    }[];
    schematic_component_id: string;
    subcircuit_id?: string | undefined;
    is_filled?: boolean | undefined;
    fill_color?: "red" | "blue" | undefined;
}, {
    type: "schematic_path";
    points: {
        x: string | number;
        y: string | number;
    }[];
    schematic_component_id: string;
    subcircuit_id?: string | undefined;
    is_filled?: boolean | undefined;
    fill_color?: "red" | "blue" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_error">;
    schematic_error_id: z.ZodString;
    error_type: z.ZodDefault<z.ZodLiteral<"schematic_port_not_found">>;
    message: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "schematic_error";
    error_type: "schematic_port_not_found";
    schematic_error_id: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "schematic_error";
    schematic_error_id: string;
    subcircuit_id?: string | undefined;
    error_type?: "schematic_port_not_found" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_layout_error">;
    schematic_layout_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"schematic_layout_error">>;
    message: z.ZodString;
    source_group_id: z.ZodString;
    schematic_group_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "schematic_layout_error";
    error_type: "schematic_layout_error";
    source_group_id: string;
    schematic_group_id: string;
    schematic_layout_error_id: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "schematic_layout_error";
    source_group_id: string;
    schematic_group_id: string;
    subcircuit_id?: string | undefined;
    error_type?: "schematic_layout_error" | undefined;
    schematic_layout_error_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_net_label">;
    schematic_net_label_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    schematic_trace_id: z.ZodOptional<z.ZodString>;
    source_trace_id: z.ZodOptional<z.ZodString>;
    source_net_id: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    anchor_position: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>>;
    anchor_side: z.ZodEnum<["top", "bottom", "left", "right"]>;
    text: z.ZodString;
    symbol_name: z.ZodOptional<z.ZodString>;
    is_movable: z.ZodOptional<z.ZodBoolean>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_net_label";
    center: {
        x: number;
        y: number;
    };
    text: string;
    source_net_id: string;
    schematic_net_label_id: string;
    anchor_side: "top" | "bottom" | "left" | "right";
    subcircuit_id?: string | undefined;
    source_trace_id?: string | undefined;
    anchor_position?: {
        x: number;
        y: number;
    } | undefined;
    symbol_name?: string | undefined;
    schematic_trace_id?: string | undefined;
    is_movable?: boolean | undefined;
}, {
    type: "schematic_net_label";
    center: {
        x: string | number;
        y: string | number;
    };
    text: string;
    source_net_id: string;
    anchor_side: "top" | "bottom" | "left" | "right";
    subcircuit_id?: string | undefined;
    source_trace_id?: string | undefined;
    anchor_position?: {
        x: string | number;
        y: string | number;
    } | undefined;
    symbol_name?: string | undefined;
    schematic_trace_id?: string | undefined;
    schematic_net_label_id?: string | undefined;
    is_movable?: boolean | undefined;
}>, z.ZodDiscriminatedUnion<"shape", [z.ZodObject<{
    type: z.ZodLiteral<"schematic_debug_object">;
    label: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"rect">;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    size: z.ZodObject<{
        width: z.ZodNumber;
        height: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        width: number;
        height: number;
    }, {
        width: number;
        height: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_debug_object";
    center: {
        x: number;
        y: number;
    };
    shape: "rect";
    size: {
        width: number;
        height: number;
    };
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}, {
    type: "schematic_debug_object";
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "rect";
    size: {
        width: number;
        height: number;
    };
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_debug_object">;
    label: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"line">;
    start: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    end: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_debug_object";
    shape: "line";
    start: {
        x: number;
        y: number;
    };
    end: {
        x: number;
        y: number;
    };
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}, {
    type: "schematic_debug_object";
    shape: "line";
    start: {
        x: string | number;
        y: string | number;
    };
    end: {
        x: string | number;
        y: string | number;
    };
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_debug_object">;
    label: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"point">;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_debug_object";
    center: {
        x: number;
        y: number;
    };
    shape: "point";
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}, {
    type: "schematic_debug_object";
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "point";
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_voltage_probe">;
    schematic_voltage_probe_id: z.ZodString;
    position: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    schematic_trace_id: z.ZodString;
    voltage: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_voltage_probe";
    schematic_trace_id: string;
    position: {
        x: number;
        y: number;
    };
    schematic_voltage_probe_id: string;
    subcircuit_id?: string | undefined;
    voltage?: number | undefined;
}, {
    type: "schematic_voltage_probe";
    schematic_trace_id: string;
    position: {
        x: string | number;
        y: string | number;
    };
    schematic_voltage_probe_id: string;
    subcircuit_id?: string | undefined;
    voltage?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_manual_edit_conflict_warning">;
    schematic_manual_edit_conflict_warning_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    warning_type: z.ZodDefault<z.ZodLiteral<"schematic_manual_edit_conflict_warning">>;
    message: z.ZodString;
    schematic_component_id: z.ZodString;
    schematic_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "schematic_manual_edit_conflict_warning";
    source_component_id: string;
    warning_type: "schematic_manual_edit_conflict_warning";
    schematic_component_id: string;
    schematic_manual_edit_conflict_warning_id: string;
    subcircuit_id?: string | undefined;
    schematic_group_id?: string | undefined;
}, {
    message: string;
    type: "schematic_manual_edit_conflict_warning";
    source_component_id: string;
    schematic_component_id: string;
    subcircuit_id?: string | undefined;
    warning_type?: "schematic_manual_edit_conflict_warning" | undefined;
    schematic_group_id?: string | undefined;
    schematic_manual_edit_conflict_warning_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_group">;
    schematic_group_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    source_group_id: z.ZodString;
    is_subcircuit: z.ZodOptional<z.ZodBoolean>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    schematic_component_ids: z.ZodArray<z.ZodString, "many">;
    name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_group";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    source_group_id: string;
    schematic_group_id: string;
    schematic_component_ids: string[];
    description?: string | undefined;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
}, {
    type: "schematic_group";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    source_group_id: string;
    schematic_component_ids: string[];
    description?: string | undefined;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    schematic_group_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_table">;
    schematic_table_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    anchor_position: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    column_widths: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, "many">;
    row_heights: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, "many">;
    cell_padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    border_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    schematic_component_id: z.ZodOptional<z.ZodString>;
    anchor: z.ZodOptional<z.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_table";
    anchor_position: {
        x: number;
        y: number;
    };
    schematic_table_id: string;
    column_widths: number[];
    row_heights: number[];
    anchor?: "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right" | undefined;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
    cell_padding?: number | undefined;
    border_width?: number | undefined;
}, {
    type: "schematic_table";
    anchor_position: {
        x: string | number;
        y: string | number;
    };
    column_widths: (string | number)[];
    row_heights: (string | number)[];
    anchor?: "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right" | undefined;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
    schematic_table_id?: string | undefined;
    cell_padding?: string | number | undefined;
    border_width?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_table_cell">;
    schematic_table_cell_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    schematic_table_id: z.ZodString;
    start_row_index: z.ZodNumber;
    end_row_index: z.ZodNumber;
    start_column_index: z.ZodNumber;
    end_column_index: z.ZodNumber;
    text: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    horizontal_align: z.ZodOptional<z.ZodEnum<["left", "center", "right"]>>;
    vertical_align: z.ZodOptional<z.ZodEnum<["top", "middle", "bottom"]>>;
    font_size: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_table_cell";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    schematic_table_id: string;
    schematic_table_cell_id: string;
    start_row_index: number;
    end_row_index: number;
    start_column_index: number;
    end_column_index: number;
    subcircuit_id?: string | undefined;
    text?: string | undefined;
    font_size?: number | undefined;
    horizontal_align?: "center" | "left" | "right" | undefined;
    vertical_align?: "top" | "bottom" | "middle" | undefined;
}, {
    type: "schematic_table_cell";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    schematic_table_id: string;
    start_row_index: number;
    end_row_index: number;
    start_column_index: number;
    end_column_index: number;
    subcircuit_id?: string | undefined;
    text?: string | undefined;
    font_size?: string | number | undefined;
    schematic_table_cell_id?: string | undefined;
    horizontal_align?: "center" | "left" | "right" | undefined;
    vertical_align?: "top" | "bottom" | "middle" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"cad_component">;
    cad_component_id: z.ZodString;
    pcb_component_id: z.ZodString;
    source_component_id: z.ZodString;
    position: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>;
    rotation: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
    size: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    footprinter_string: z.ZodOptional<z.ZodString>;
    model_obj_url: z.ZodOptional<z.ZodString>;
    model_stl_url: z.ZodOptional<z.ZodString>;
    model_3mf_url: z.ZodOptional<z.ZodString>;
    model_jscad: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    type: "cad_component";
    pcb_component_id: string;
    source_component_id: string;
    position: {
        x: number;
        y: number;
        z: number;
    };
    cad_component_id: string;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    rotation?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    subcircuit_id?: string | undefined;
    size?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    footprinter_string?: string | undefined;
    model_obj_url?: string | undefined;
    model_stl_url?: string | undefined;
    model_3mf_url?: string | undefined;
    model_jscad?: any;
}, {
    type: "cad_component";
    pcb_component_id: string;
    source_component_id: string;
    position: {
        x: string | number;
        y: string | number;
        z: string | number;
    };
    cad_component_id: string;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    rotation?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    subcircuit_id?: string | undefined;
    size?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    footprinter_string?: string | undefined;
    model_obj_url?: string | undefined;
    model_stl_url?: string | undefined;
    model_3mf_url?: string | undefined;
    model_jscad?: any;
}>]>;
/**
 * @deprecated use any_circuit_element instead
 */
declare const any_soup_element: z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"source_trace">;
    source_trace_id: z.ZodString;
    connected_source_port_ids: z.ZodArray<z.ZodString, "many">;
    connected_source_net_ids: z.ZodArray<z.ZodString, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    subcircuit_connectivity_map_key: z.ZodOptional<z.ZodString>;
    max_length: z.ZodOptional<z.ZodNumber>;
    min_trace_thickness: z.ZodOptional<z.ZodNumber>;
    display_name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_trace";
    source_trace_id: string;
    connected_source_port_ids: string[];
    connected_source_net_ids: string[];
    subcircuit_id?: string | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
    max_length?: number | undefined;
    min_trace_thickness?: number | undefined;
    display_name?: string | undefined;
}, {
    type: "source_trace";
    source_trace_id: string;
    connected_source_port_ids: string[];
    connected_source_net_ids: string[];
    subcircuit_id?: string | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
    max_length?: number | undefined;
    min_trace_thickness?: number | undefined;
    display_name?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_port">;
    pin_number: z.ZodOptional<z.ZodNumber>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    name: z.ZodString;
    source_port_id: z.ZodString;
    source_component_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    subcircuit_connectivity_map_key: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_port";
    name: string;
    source_component_id: string;
    source_port_id: string;
    subcircuit_id?: string | undefined;
    port_hints?: string[] | undefined;
    pin_number?: number | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
}, {
    type: "source_port";
    name: string;
    source_component_id: string;
    source_port_id: string;
    subcircuit_id?: string | undefined;
    port_hints?: string[] | undefined;
    pin_number?: number | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
}>, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_resistor">;
    resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    display_resistance: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resistor";
    resistance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    display_resistance?: string | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resistor";
    resistance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    display_resistance?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_capacitor">;
    capacitance: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, number, string | number>;
    max_voltage_rating: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    display_capacitance: z.ZodOptional<z.ZodString>;
    max_decoupling_trace_length: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_capacitor";
    capacitance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_voltage_rating?: number | undefined;
    display_capacitance?: string | undefined;
    max_decoupling_trace_length?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_capacitor";
    capacitance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_voltage_rating?: string | number | undefined;
    display_capacitance?: string | undefined;
    max_decoupling_trace_length?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_diode">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_diode";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_diode";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_led">;
    color: z.ZodOptional<z.ZodString>;
    wavelength: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_led";
    subcircuit_id?: string | undefined;
    color?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    wavelength?: string | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_led";
    subcircuit_id?: string | undefined;
    color?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    wavelength?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_ground">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_ground";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_ground";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_chip">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_chip";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_chip";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_power_source">;
    voltage: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    voltage: number;
    ftype: "simple_power_source";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    voltage: string | number;
    ftype: "simple_power_source";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_battery">;
    capacity: z.ZodEffects<z.ZodUnion<[z.ZodNumber, z.ZodString]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_battery";
    capacity: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_battery";
    capacity: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_inductor">;
    inductance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    max_current_rating: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_inductor";
    inductance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_current_rating?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_inductor";
    inductance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_current_rating?: number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_push_button">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_push_button";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_push_button";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_potentiometer">;
    max_resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_potentiometer";
    max_resistance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_potentiometer";
    max_resistance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_crystal">;
    frequency: z.ZodNumber;
    load_capacitance: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_crystal";
    frequency: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    load_capacitance?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_crystal";
    frequency: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    load_capacitance?: number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_pin_header">;
    pin_count: z.ZodNumber;
    gender: z.ZodDefault<z.ZodOptional<z.ZodEnum<["male", "female"]>>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_pin_header";
    pin_count: number;
    gender: "male" | "female";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_pin_header";
    pin_count: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    gender?: "male" | "female" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_resonator">;
    load_capacitance: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, number, string | number>;
    equivalent_series_resistance: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    frequency: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resonator";
    frequency: number;
    load_capacitance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    equivalent_series_resistance?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resonator";
    frequency: string | number;
    load_capacitance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    equivalent_series_resistance?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_switch">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_switch";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_switch";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_transistor">;
    transistor_type: z.ZodEnum<["npn", "pnp"]>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_transistor";
    transistor_type: "npn" | "pnp";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_transistor";
    transistor_type: "npn" | "pnp";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_test_point">;
    footprint_variant: z.ZodOptional<z.ZodEnum<["pad", "through_hole"]>>;
    pad_shape: z.ZodOptional<z.ZodEnum<["rect", "circle"]>>;
    pad_diameter: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    hole_diameter: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    width: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    height: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_test_point";
    width?: string | number | undefined;
    height?: string | number | undefined;
    subcircuit_id?: string | undefined;
    hole_diameter?: string | number | undefined;
    pad_shape?: "circle" | "rect" | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    footprint_variant?: "pad" | "through_hole" | undefined;
    pad_diameter?: string | number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_test_point";
    width?: string | number | undefined;
    height?: string | number | undefined;
    subcircuit_id?: string | undefined;
    hole_diameter?: string | number | undefined;
    pad_shape?: "circle" | "rect" | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    footprint_variant?: "pad" | "through_hole" | undefined;
    pad_diameter?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_mosfet">;
    channel_type: z.ZodEnum<["n", "p"]>;
    mosfet_mode: z.ZodEnum<["enhancement", "depletion"]>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_mosfet";
    channel_type: "n" | "p";
    mosfet_mode: "enhancement" | "depletion";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_mosfet";
    channel_type: "n" | "p";
    mosfet_mode: "enhancement" | "depletion";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_fuse">;
    current_rating_amps: z.ZodNumber;
    voltage_rating_volts: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_fuse";
    current_rating_amps: number;
    voltage_rating_volts: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_fuse";
    current_rating_amps: number;
    voltage_rating_volts: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_project_metadata">;
    name: z.ZodOptional<z.ZodString>;
    software_used_string: z.ZodOptional<z.ZodString>;
    project_url: z.ZodOptional<z.ZodString>;
    created_at: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_project_metadata";
    name?: string | undefined;
    software_used_string?: string | undefined;
    project_url?: string | undefined;
    created_at?: string | undefined;
}, {
    type: "source_project_metadata";
    name?: string | undefined;
    software_used_string?: string | undefined;
    project_url?: string | undefined;
    created_at?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_missing_property_error">;
    source_missing_property_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    source_component_id: z.ZodString;
    property_name: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    error_type: z.ZodDefault<z.ZodLiteral<"source_missing_property_error">>;
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "source_missing_property_error";
    source_component_id: string;
    error_type: "source_missing_property_error";
    source_missing_property_error_id: string;
    property_name: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "source_missing_property_error";
    source_component_id: string;
    property_name: string;
    subcircuit_id?: string | undefined;
    error_type?: "source_missing_property_error" | undefined;
    source_missing_property_error_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_failed_to_create_component_error">;
    source_failed_to_create_component_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"source_failed_to_create_component_error">>;
    component_name: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    parent_source_component_id: z.ZodOptional<z.ZodString>;
    message: z.ZodString;
    pcb_center: z.ZodOptional<z.ZodObject<{
        x: z.ZodOptional<z.ZodNumber>;
        y: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        x?: number | undefined;
        y?: number | undefined;
    }, {
        x?: number | undefined;
        y?: number | undefined;
    }>>;
    schematic_center: z.ZodOptional<z.ZodObject<{
        x: z.ZodOptional<z.ZodNumber>;
        y: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        x?: number | undefined;
        y?: number | undefined;
    }, {
        x?: number | undefined;
        y?: number | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "source_failed_to_create_component_error";
    error_type: "source_failed_to_create_component_error";
    source_failed_to_create_component_error_id: string;
    subcircuit_id?: string | undefined;
    component_name?: string | undefined;
    parent_source_component_id?: string | undefined;
    pcb_center?: {
        x?: number | undefined;
        y?: number | undefined;
    } | undefined;
    schematic_center?: {
        x?: number | undefined;
        y?: number | undefined;
    } | undefined;
}, {
    message: string;
    type: "source_failed_to_create_component_error";
    subcircuit_id?: string | undefined;
    error_type?: "source_failed_to_create_component_error" | undefined;
    source_failed_to_create_component_error_id?: string | undefined;
    component_name?: string | undefined;
    parent_source_component_id?: string | undefined;
    pcb_center?: {
        x?: number | undefined;
        y?: number | undefined;
    } | undefined;
    schematic_center?: {
        x?: number | undefined;
        y?: number | undefined;
    } | undefined;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"source_net">;
    source_net_id: z.ZodString;
    name: z.ZodString;
    member_source_group_ids: z.ZodArray<z.ZodString, "many">;
    is_power: z.ZodOptional<z.ZodBoolean>;
    is_ground: z.ZodOptional<z.ZodBoolean>;
    is_digital_signal: z.ZodOptional<z.ZodBoolean>;
    is_analog_signal: z.ZodOptional<z.ZodBoolean>;
    trace_width: z.ZodOptional<z.ZodNumber>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    subcircuit_connectivity_map_key: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_net";
    name: string;
    source_net_id: string;
    member_source_group_ids: string[];
    trace_width?: number | undefined;
    subcircuit_id?: string | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
    is_power?: boolean | undefined;
    is_ground?: boolean | undefined;
    is_digital_signal?: boolean | undefined;
    is_analog_signal?: boolean | undefined;
}, {
    type: "source_net";
    name: string;
    source_net_id: string;
    member_source_group_ids: string[];
    trace_width?: number | undefined;
    subcircuit_id?: string | undefined;
    subcircuit_connectivity_map_key?: string | undefined;
    is_power?: boolean | undefined;
    is_ground?: boolean | undefined;
    is_digital_signal?: boolean | undefined;
    is_analog_signal?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_group">;
    source_group_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    parent_subcircuit_id: z.ZodOptional<z.ZodString>;
    parent_source_group_id: z.ZodOptional<z.ZodString>;
    is_subcircuit: z.ZodOptional<z.ZodBoolean>;
    name: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_group";
    source_group_id: string;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    parent_subcircuit_id?: string | undefined;
    parent_source_group_id?: string | undefined;
}, {
    type: "source_group";
    source_group_id: string;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    parent_subcircuit_id?: string | undefined;
    parent_source_group_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_chip">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_chip";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_chip";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_capacitor">;
    capacitance: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, number, string | number>;
    max_voltage_rating: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    display_capacitance: z.ZodOptional<z.ZodString>;
    max_decoupling_trace_length: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_capacitor";
    capacitance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_voltage_rating?: number | undefined;
    display_capacitance?: string | undefined;
    max_decoupling_trace_length?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_capacitor";
    capacitance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_voltage_rating?: string | number | undefined;
    display_capacitance?: string | undefined;
    max_decoupling_trace_length?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_diode">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_diode";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_diode";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_led">;
    color: z.ZodOptional<z.ZodString>;
    wavelength: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_led";
    subcircuit_id?: string | undefined;
    color?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    wavelength?: string | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_led";
    subcircuit_id?: string | undefined;
    color?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    wavelength?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_resistor">;
    resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    display_resistance: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resistor";
    resistance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    display_resistance?: string | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resistor";
    resistance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    display_resistance?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_power_source">;
    voltage: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    voltage: number;
    ftype: "simple_power_source";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    voltage: string | number;
    ftype: "simple_power_source";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_battery">;
    capacity: z.ZodEffects<z.ZodUnion<[z.ZodNumber, z.ZodString]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_battery";
    capacity: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_battery";
    capacity: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_inductor">;
    inductance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    max_current_rating: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_inductor";
    inductance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_current_rating?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_inductor";
    inductance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    max_current_rating?: number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_pin_header">;
    pin_count: z.ZodNumber;
    gender: z.ZodDefault<z.ZodOptional<z.ZodEnum<["male", "female"]>>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_pin_header";
    pin_count: number;
    gender: "male" | "female";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_pin_header";
    pin_count: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    gender?: "male" | "female" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_resonator">;
    load_capacitance: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, number, string | number>;
    equivalent_series_resistance: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    frequency: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resonator";
    frequency: number;
    load_capacitance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    equivalent_series_resistance?: number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_resonator";
    frequency: string | number;
    load_capacitance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    equivalent_series_resistance?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_switch">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_switch";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_switch";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_transistor">;
    transistor_type: z.ZodEnum<["npn", "pnp"]>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_transistor";
    transistor_type: "npn" | "pnp";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_transistor";
    transistor_type: "npn" | "pnp";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_test_point">;
    footprint_variant: z.ZodOptional<z.ZodEnum<["pad", "through_hole"]>>;
    pad_shape: z.ZodOptional<z.ZodEnum<["rect", "circle"]>>;
    pad_diameter: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    hole_diameter: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    width: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    height: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_test_point";
    width?: string | number | undefined;
    height?: string | number | undefined;
    subcircuit_id?: string | undefined;
    hole_diameter?: string | number | undefined;
    pad_shape?: "circle" | "rect" | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    footprint_variant?: "pad" | "through_hole" | undefined;
    pad_diameter?: string | number | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_test_point";
    width?: string | number | undefined;
    height?: string | number | undefined;
    subcircuit_id?: string | undefined;
    hole_diameter?: string | number | undefined;
    pad_shape?: "circle" | "rect" | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
    footprint_variant?: "pad" | "through_hole" | undefined;
    pad_diameter?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_mosfet">;
    channel_type: z.ZodEnum<["n", "p"]>;
    mosfet_mode: z.ZodEnum<["enhancement", "depletion"]>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_mosfet";
    channel_type: "n" | "p";
    mosfet_mode: "enhancement" | "depletion";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_mosfet";
    channel_type: "n" | "p";
    mosfet_mode: "enhancement" | "depletion";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_potentiometer">;
    max_resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_potentiometer";
    max_resistance: number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_potentiometer";
    max_resistance: string | number;
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_component">;
    source_component_id: z.ZodString;
    name: z.ZodString;
    manufacturer_part_number: z.ZodOptional<z.ZodString>;
    supplier_part_numbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    display_value: z.ZodOptional<z.ZodString>;
    are_pins_interchangeable: z.ZodOptional<z.ZodBoolean>;
    internally_connected_source_port_ids: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    source_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    ftype: z.ZodLiteral<"simple_push_button">;
}, "strip", z.ZodTypeAny, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_push_button";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}, {
    type: "source_component";
    name: string;
    source_component_id: string;
    ftype: "simple_push_button";
    subcircuit_id?: string | undefined;
    source_group_id?: string | undefined;
    manufacturer_part_number?: string | undefined;
    supplier_part_numbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    display_value?: string | undefined;
    are_pins_interchangeable?: boolean | undefined;
    internally_connected_source_port_ids?: string[][] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_pcb_ground_plane">;
    source_pcb_ground_plane_id: z.ZodString;
    source_group_id: z.ZodString;
    source_net_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_pcb_ground_plane";
    source_group_id: string;
    source_net_id: string;
    source_pcb_ground_plane_id: string;
    subcircuit_id?: string | undefined;
}, {
    type: "source_pcb_ground_plane";
    source_group_id: string;
    source_net_id: string;
    source_pcb_ground_plane_id: string;
    subcircuit_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"source_project_metadata">;
    name: z.ZodOptional<z.ZodString>;
    software_used_string: z.ZodOptional<z.ZodString>;
    project_url: z.ZodOptional<z.ZodString>;
    created_at: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "source_project_metadata";
    name?: string | undefined;
    software_used_string?: string | undefined;
    project_url?: string | undefined;
    created_at?: string | undefined;
}, {
    type: "source_project_metadata";
    name?: string | undefined;
    software_used_string?: string | undefined;
    project_url?: string | undefined;
    created_at?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_component">;
    pcb_component_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    source_component_id: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    rotation: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_component";
    width: number;
    height: number;
    pcb_component_id: string;
    source_component_id: string;
    center: {
        x: number;
        y: number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    rotation: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_component";
    width: string | number;
    height: string | number;
    source_component_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    rotation: string | number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}>, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"pcb_hole">;
    pcb_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    hole_shape: z.ZodEnum<["circle", "square"]>;
    hole_diameter: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_hole";
    pcb_hole_id: string;
    hole_shape: "circle" | "square";
    hole_diameter: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_hole";
    hole_shape: "circle" | "square";
    hole_diameter: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_hole_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_hole">;
    pcb_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    hole_shape: z.ZodLiteral<"oval">;
    hole_width: z.ZodNumber;
    hole_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_hole";
    pcb_hole_id: string;
    hole_shape: "oval";
    hole_width: number;
    hole_height: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_hole";
    hole_shape: "oval";
    hole_width: number;
    hole_height: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_hole_id?: string | undefined;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_missing_footprint_error">;
    pcb_missing_footprint_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_missing_footprint_error">>;
    source_component_id: z.ZodString;
    message: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_missing_footprint_error";
    source_component_id: string;
    error_type: "pcb_missing_footprint_error";
    pcb_missing_footprint_error_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    message: string;
    type: "pcb_missing_footprint_error";
    source_component_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    error_type?: "pcb_missing_footprint_error" | undefined;
    pcb_missing_footprint_error_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_manual_edit_conflict_warning">;
    pcb_manual_edit_conflict_warning_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    warning_type: z.ZodDefault<z.ZodLiteral<"pcb_manual_edit_conflict_warning">>;
    message: z.ZodString;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_manual_edit_conflict_warning";
    pcb_component_id: string;
    source_component_id: string;
    pcb_manual_edit_conflict_warning_id: string;
    warning_type: "pcb_manual_edit_conflict_warning";
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    message: string;
    type: "pcb_manual_edit_conflict_warning";
    pcb_component_id: string;
    source_component_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_manual_edit_conflict_warning_id?: string | undefined;
    warning_type?: "pcb_manual_edit_conflict_warning" | undefined;
}>, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"pcb_plated_hole">;
    shape: z.ZodLiteral<"circle">;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    outer_diameter: z.ZodNumber;
    hole_diameter: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
    pcb_plated_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_plated_hole";
    hole_diameter: number;
    shape: "circle";
    outer_diameter: number;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_plated_hole_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_plated_hole";
    hole_diameter: number;
    shape: "circle";
    outer_diameter: number;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_plated_hole">;
    shape: z.ZodEnum<["oval", "pill"]>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    outer_width: z.ZodNumber;
    outer_height: z.ZodNumber;
    hole_width: z.ZodNumber;
    hole_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
    pcb_plated_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_plated_hole";
    hole_width: number;
    hole_height: number;
    shape: "oval" | "pill";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_plated_hole_id: string;
    outer_width: number;
    outer_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_plated_hole";
    hole_width: number;
    hole_height: number;
    shape: "oval" | "pill";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    outer_width: number;
    outer_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_plated_hole">;
    shape: z.ZodLiteral<"circular_hole_with_rect_pad">;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    hole_shape: z.ZodLiteral<"circle">;
    pad_shape: z.ZodLiteral<"rect">;
    hole_diameter: z.ZodNumber;
    rect_pad_width: z.ZodNumber;
    rect_pad_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
    pcb_plated_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_plated_hole";
    hole_shape: "circle";
    hole_diameter: number;
    shape: "circular_hole_with_rect_pad";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_plated_hole_id: string;
    pad_shape: "rect";
    rect_pad_width: number;
    rect_pad_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_plated_hole";
    hole_shape: "circle";
    hole_diameter: number;
    shape: "circular_hole_with_rect_pad";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    pad_shape: "rect";
    rect_pad_width: number;
    rect_pad_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_plated_hole">;
    shape: z.ZodLiteral<"pill_hole_with_rect_pad">;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    hole_shape: z.ZodLiteral<"pill">;
    pad_shape: z.ZodLiteral<"rect">;
    hole_width: z.ZodNumber;
    hole_height: z.ZodNumber;
    rect_pad_width: z.ZodNumber;
    rect_pad_height: z.ZodNumber;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
    pcb_plated_hole_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_plated_hole";
    hole_shape: "pill";
    hole_width: number;
    hole_height: number;
    shape: "pill_hole_with_rect_pad";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_plated_hole_id: string;
    pad_shape: "rect";
    rect_pad_width: number;
    rect_pad_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_plated_hole";
    hole_shape: "pill";
    hole_width: number;
    hole_height: number;
    shape: "pill_hole_with_rect_pad";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    pad_shape: "rect";
    rect_pad_width: number;
    rect_pad_height: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
}>]>, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"pcb_keepout">;
    shape: z.ZodLiteral<"rect">;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    pcb_keepout_id: z.ZodString;
    layers: z.ZodArray<z.ZodString, "many">;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_keepout";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    shape: "rect";
    layers: string[];
    pcb_keepout_id: string;
    description?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_keepout";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "rect";
    layers: string[];
    pcb_keepout_id: string;
    description?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_keepout">;
    shape: z.ZodLiteral<"circle">;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    pcb_keepout_id: z.ZodString;
    layers: z.ZodArray<z.ZodString, "many">;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_keepout";
    center: {
        x: number;
        y: number;
    };
    shape: "circle";
    layers: string[];
    radius: number;
    pcb_keepout_id: string;
    description?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_keepout";
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "circle";
    layers: string[];
    radius: string | number;
    pcb_keepout_id: string;
    description?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_port">;
    pcb_port_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    source_port_id: z.ZodString;
    pcb_component_id: z.ZodString;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_port";
    pcb_component_id: string;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_port_id: string;
    source_port_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_port";
    pcb_component_id: string;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    source_port_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_port_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_text">;
    pcb_text_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    text: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    lines: z.ZodNumber;
    align: z.ZodEnum<["bottom-left"]>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_text";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    pcb_text_id: string;
    text: string;
    lines: number;
    align: "bottom-left";
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_text";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    text: string;
    lines: number;
    align: "bottom-left";
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_text_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_trace">;
    source_trace_id: z.ZodOptional<z.ZodString>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_trace_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    route_thickness_mode: z.ZodOptional<z.ZodDefault<z.ZodEnum<["constant", "interpolated"]>>>;
    route_order_index: z.ZodOptional<z.ZodNumber>;
    should_round_corners: z.ZodOptional<z.ZodBoolean>;
    trace_length: z.ZodOptional<z.ZodNumber>;
    route: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        route_type: z.ZodLiteral<"wire">;
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        start_pcb_port_id: z.ZodOptional<z.ZodString>;
        end_pcb_port_id: z.ZodOptional<z.ZodString>;
        layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        width: number;
        layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    }, {
        x: string | number;
        y: string | number;
        width: string | number;
        layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        };
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    }>, z.ZodObject<{
        route_type: z.ZodLiteral<"via">;
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        hole_diameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        outer_diameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        from_layer: z.ZodString;
        to_layer: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
        hole_diameter?: number | undefined;
        outer_diameter?: number | undefined;
    }, {
        x: string | number;
        y: string | number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
        hole_diameter?: string | number | undefined;
        outer_diameter?: string | number | undefined;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "pcb_trace";
    pcb_trace_id: string;
    route: ({
        x: number;
        y: number;
        width: number;
        layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    } | {
        x: number;
        y: number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
        hole_diameter?: number | undefined;
        outer_diameter?: number | undefined;
    })[];
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    source_trace_id?: string | undefined;
    route_thickness_mode?: "constant" | "interpolated" | undefined;
    route_order_index?: number | undefined;
    should_round_corners?: boolean | undefined;
    trace_length?: number | undefined;
}, {
    type: "pcb_trace";
    route: ({
        x: string | number;
        y: string | number;
        width: string | number;
        layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        };
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    } | {
        x: string | number;
        y: string | number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
        hole_diameter?: string | number | undefined;
        outer_diameter?: string | number | undefined;
    })[];
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    source_trace_id?: string | undefined;
    pcb_trace_id?: string | undefined;
    route_thickness_mode?: "constant" | "interpolated" | undefined;
    route_order_index?: number | undefined;
    should_round_corners?: boolean | undefined;
    trace_length?: number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_via">;
    pcb_via_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    outer_diameter: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    hole_diameter: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    from_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    layers: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>, "many">;
    pcb_trace_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_via";
    hole_diameter: number;
    outer_diameter: number;
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6")[];
    pcb_via_id: string;
    to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    from_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcb_trace_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_via";
    layers: ("top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    })[];
    to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    hole_diameter?: string | number | undefined;
    outer_diameter?: string | number | undefined;
    from_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcb_trace_id?: string | undefined;
    pcb_via_id?: string | undefined;
}>, z.ZodDiscriminatedUnion<"shape", [z.ZodObject<{
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"circle">;
    pcb_smtpad_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    radius: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_smtpad";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "circle";
    pcb_smtpad_id: string;
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_smtpad";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "circle";
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"rect">;
    pcb_smtpad_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "rect";
    pcb_smtpad_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "rect";
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"rotated_rect">;
    pcb_smtpad_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    ccw_rotation: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "rotated_rect";
    pcb_smtpad_id: string;
    ccw_rotation: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "rotated_rect";
    ccw_rotation: string | number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"pill">;
    pcb_smtpad_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    radius: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "pill";
    pcb_smtpad_id: string;
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_smtpad";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "pill";
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_smtpad">;
    shape: z.ZodLiteral<"polygon">;
    pcb_smtpad_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    port_hints: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_port_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_smtpad";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "polygon";
    pcb_smtpad_id: string;
    points: {
        x: number;
        y: number;
    }[];
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
}, {
    type: "pcb_smtpad";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "polygon";
    points: {
        x: string | number;
        y: string | number;
    }[];
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    port_hints?: string[] | undefined;
    pcb_port_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}>]>, z.ZodUnion<[z.ZodObject<{
    type: z.ZodLiteral<"pcb_solder_paste">;
    shape: z.ZodLiteral<"circle">;
    pcb_solder_paste_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    radius: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_smtpad_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_solder_paste";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "circle";
    radius: number;
    pcb_solder_paste_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_solder_paste";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "circle";
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
    pcb_solder_paste_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_solder_paste">;
    shape: z.ZodLiteral<"rect">;
    pcb_solder_paste_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_smtpad_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "rect";
    pcb_solder_paste_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "rect";
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
    pcb_solder_paste_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_solder_paste">;
    shape: z.ZodLiteral<"pill">;
    pcb_solder_paste_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    radius: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_smtpad_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "pill";
    radius: number;
    pcb_solder_paste_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "pill";
    radius: number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
    pcb_solder_paste_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_solder_paste">;
    shape: z.ZodLiteral<"rotated_rect">;
    pcb_solder_paste_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    ccw_rotation: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_smtpad_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "rotated_rect";
    ccw_rotation: number;
    pcb_solder_paste_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "rotated_rect";
    ccw_rotation: string | number;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
    pcb_solder_paste_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_solder_paste">;
    shape: z.ZodLiteral<"oval">;
    pcb_solder_paste_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    width: z.ZodNumber;
    height: z.ZodNumber;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    pcb_component_id: z.ZodOptional<z.ZodString>;
    pcb_smtpad_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    shape: "oval";
    pcb_solder_paste_id: string;
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_solder_paste";
    width: number;
    height: number;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    shape: "oval";
    pcb_component_id?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_smtpad_id?: string | undefined;
    pcb_solder_paste_id?: string | undefined;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_board">;
    pcb_board_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    is_subcircuit: z.ZodOptional<z.ZodBoolean>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    thickness: z.ZodDefault<z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>>;
    num_layers: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    outline: z.ZodOptional<z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">>;
    material: z.ZodDefault<z.ZodEnum<["fr4", "fr1"]>>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_board";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    pcb_board_id: string;
    thickness: number;
    num_layers: number;
    material: "fr4" | "fr1";
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    outline?: {
        x: number;
        y: number;
    }[] | undefined;
}, {
    type: "pcb_board";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    subcircuit_id?: string | undefined;
    pcb_board_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    thickness?: string | number | undefined;
    num_layers?: number | undefined;
    outline?: {
        x: string | number;
        y: string | number;
    }[] | undefined;
    material?: "fr4" | "fr1" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_group">;
    pcb_group_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    source_group_id: z.ZodString;
    is_subcircuit: z.ZodOptional<z.ZodBoolean>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    pcb_component_ids: z.ZodArray<z.ZodString, "many">;
    name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
    autorouter_configuration: z.ZodOptional<z.ZodObject<{
        trace_clearance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        trace_clearance: number;
    }, {
        trace_clearance: string | number;
    }>>;
    autorouter_used_string: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_group";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    pcb_group_id: string;
    pcb_component_ids: string[];
    source_group_id: string;
    description?: string | undefined;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    autorouter_configuration?: {
        trace_clearance: number;
    } | undefined;
    autorouter_used_string?: string | undefined;
}, {
    type: "pcb_group";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    pcb_component_ids: string[];
    source_group_id: string;
    description?: string | undefined;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    autorouter_configuration?: {
        trace_clearance: string | number;
    } | undefined;
    autorouter_used_string?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_trace_hint">;
    pcb_trace_hint_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_port_id: z.ZodString;
    pcb_component_id: z.ZodString;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        via: z.ZodOptional<z.ZodBoolean>;
        to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>>;
        trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }, {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }>, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_trace_hint";
    pcb_component_id: string;
    pcb_port_id: string;
    route: {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }[];
    pcb_trace_hint_id: string;
    subcircuit_id?: string | undefined;
}, {
    type: "pcb_trace_hint";
    pcb_component_id: string;
    pcb_port_id: string;
    route: {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }[];
    subcircuit_id?: string | undefined;
    pcb_trace_hint_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_line">;
    pcb_silkscreen_line_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    stroke_width: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    x1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    x2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEnum<["top", "bottom"]>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_line";
    pcb_component_id: string;
    layer: "top" | "bottom";
    pcb_silkscreen_line_id: string;
    stroke_width: number;
    x1: number;
    y1: number;
    x2: number;
    y2: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_silkscreen_line";
    pcb_component_id: string;
    layer: "top" | "bottom";
    x1: string | number;
    y1: string | number;
    x2: string | number;
    y2: string | number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_silkscreen_line_id?: string | undefined;
    stroke_width?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_path">;
    pcb_silkscreen_path_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    layer: z.ZodEnum<["top", "bottom"]>;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    stroke_width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_path";
    pcb_component_id: string;
    layer: "top" | "bottom";
    route: {
        x: number;
        y: number;
    }[];
    stroke_width: number;
    pcb_silkscreen_path_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_silkscreen_path";
    pcb_component_id: string;
    layer: "top" | "bottom";
    route: {
        x: string | number;
        y: string | number;
    }[];
    stroke_width: string | number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_silkscreen_path_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_text">;
    pcb_silkscreen_text_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    font: z.ZodDefault<z.ZodLiteral<"tscircuit2024">>;
    font_size: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcb_component_id: z.ZodString;
    text: z.ZodString;
    ccw_rotation: z.ZodOptional<z.ZodNumber>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    is_mirrored: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    anchor_position: z.ZodDefault<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>>;
    anchor_alignment: z.ZodDefault<z.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_text";
    pcb_component_id: string;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    text: string;
    pcb_silkscreen_text_id: string;
    font: "tscircuit2024";
    font_size: number;
    anchor_position: {
        x: number;
        y: number;
    };
    anchor_alignment: "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right";
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    ccw_rotation?: number | undefined;
    is_mirrored?: boolean | undefined;
}, {
    type: "pcb_silkscreen_text";
    pcb_component_id: string;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    text: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    ccw_rotation?: number | undefined;
    pcb_silkscreen_text_id?: string | undefined;
    font?: "tscircuit2024" | undefined;
    font_size?: string | number | undefined;
    is_mirrored?: boolean | undefined;
    anchor_position?: {
        x: string | number;
        y: string | number;
    } | undefined;
    anchor_alignment?: "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_rect">;
    pcb_silkscreen_rect_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    stroke_width: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    is_filled: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    has_stroke: z.ZodOptional<z.ZodBoolean>;
    is_stroke_dashed: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_rect";
    width: number;
    height: number;
    pcb_component_id: string;
    center: {
        x: number;
        y: number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    stroke_width: number;
    pcb_silkscreen_rect_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    is_filled?: boolean | undefined;
    has_stroke?: boolean | undefined;
    is_stroke_dashed?: boolean | undefined;
}, {
    type: "pcb_silkscreen_rect";
    width: string | number;
    height: string | number;
    pcb_component_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    stroke_width?: string | number | undefined;
    pcb_silkscreen_rect_id?: string | undefined;
    is_filled?: boolean | undefined;
    has_stroke?: boolean | undefined;
    is_stroke_dashed?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_circle">;
    pcb_silkscreen_circle_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEnum<["top", "bottom"]>;
    stroke_width: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_circle";
    pcb_component_id: string;
    center: {
        x: number;
        y: number;
    };
    layer: "top" | "bottom";
    radius: number;
    stroke_width: number;
    pcb_silkscreen_circle_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_silkscreen_circle";
    pcb_component_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    layer: "top" | "bottom";
    radius: string | number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    stroke_width?: string | number | undefined;
    pcb_silkscreen_circle_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_silkscreen_oval">;
    pcb_silkscreen_oval_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    radius_x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    radius_y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    layer: z.ZodEnum<["top", "bottom"]>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_silkscreen_oval";
    pcb_component_id: string;
    center: {
        x: number;
        y: number;
    };
    layer: "top" | "bottom";
    pcb_silkscreen_oval_id: string;
    radius_x: number;
    radius_y: number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_silkscreen_oval";
    pcb_component_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    layer: "top" | "bottom";
    radius_x: string | number;
    radius_y: string | number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_silkscreen_oval_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_trace_error">;
    pcb_trace_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_trace_error">>;
    message: z.ZodString;
    center: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>>;
    pcb_trace_id: z.ZodString;
    source_trace_id: z.ZodString;
    pcb_component_ids: z.ZodArray<z.ZodString, "many">;
    pcb_port_ids: z.ZodArray<z.ZodString, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_trace_error";
    source_trace_id: string;
    pcb_trace_id: string;
    pcb_trace_error_id: string;
    error_type: "pcb_trace_error";
    pcb_component_ids: string[];
    pcb_port_ids: string[];
    center?: {
        x: number;
        y: number;
    } | undefined;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "pcb_trace_error";
    source_trace_id: string;
    pcb_trace_id: string;
    pcb_component_ids: string[];
    pcb_port_ids: string[];
    center?: {
        x: string | number;
        y: string | number;
    } | undefined;
    subcircuit_id?: string | undefined;
    pcb_trace_error_id?: string | undefined;
    error_type?: "pcb_trace_error" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_placement_error">;
    pcb_placement_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_placement_error">>;
    message: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_placement_error";
    error_type: "pcb_placement_error";
    pcb_placement_error_id: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "pcb_placement_error";
    subcircuit_id?: string | undefined;
    error_type?: "pcb_placement_error" | undefined;
    pcb_placement_error_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_port_not_matched_error">;
    pcb_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_port_not_matched_error">>;
    message: z.ZodString;
    pcb_component_ids: z.ZodArray<z.ZodString, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_port_not_matched_error";
    error_type: "pcb_port_not_matched_error";
    pcb_component_ids: string[];
    pcb_error_id: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "pcb_port_not_matched_error";
    pcb_component_ids: string[];
    subcircuit_id?: string | undefined;
    error_type?: "pcb_port_not_matched_error" | undefined;
    pcb_error_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_fabrication_note_path">;
    pcb_fabrication_note_path_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_component_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    stroke_width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    color: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_fabrication_note_path";
    pcb_component_id: string;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    route: {
        x: number;
        y: number;
    }[];
    stroke_width: number;
    pcb_fabrication_note_path_id: string;
    subcircuit_id?: string | undefined;
    color?: string | undefined;
}, {
    type: "pcb_fabrication_note_path";
    pcb_component_id: string;
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    route: {
        x: string | number;
        y: string | number;
    }[];
    stroke_width: string | number;
    subcircuit_id?: string | undefined;
    color?: string | undefined;
    pcb_fabrication_note_path_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_fabrication_note_text">;
    pcb_fabrication_note_text_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    font: z.ZodDefault<z.ZodLiteral<"tscircuit2024">>;
    font_size: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcb_component_id: z.ZodString;
    text: z.ZodString;
    layer: z.ZodEnum<["top", "bottom"]>;
    anchor_position: z.ZodDefault<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>>;
    anchor_alignment: z.ZodDefault<z.ZodEnum<["center", "top_left", "top_right", "bottom_left", "bottom_right"]>>;
    color: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_fabrication_note_text";
    pcb_component_id: string;
    layer: "top" | "bottom";
    text: string;
    font: "tscircuit2024";
    font_size: number;
    anchor_position: {
        x: number;
        y: number;
    };
    anchor_alignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right";
    pcb_fabrication_note_text_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    color?: string | undefined;
}, {
    type: "pcb_fabrication_note_text";
    pcb_component_id: string;
    layer: "top" | "bottom";
    text: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    font?: "tscircuit2024" | undefined;
    font_size?: string | number | undefined;
    anchor_position?: {
        x: string | number;
        y: string | number;
    } | undefined;
    anchor_alignment?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | undefined;
    pcb_fabrication_note_text_id?: string | undefined;
    color?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_autorouting_error">;
    pcb_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_autorouting_error">>;
    message: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_autorouting_error";
    error_type: "pcb_autorouting_error";
    pcb_error_id: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "pcb_autorouting_error";
    subcircuit_id?: string | undefined;
    error_type?: "pcb_autorouting_error" | undefined;
    pcb_error_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_footprint_overlap_error">;
    pcb_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"pcb_footprint_overlap_error">>;
    message: z.ZodString;
    pcb_smtpad_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_plated_hole_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_hole_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pcb_keepout_ids: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "pcb_footprint_overlap_error";
    error_type: "pcb_footprint_overlap_error";
    pcb_error_id: string;
    pcb_smtpad_ids?: string[] | undefined;
    pcb_plated_hole_ids?: string[] | undefined;
    pcb_hole_ids?: string[] | undefined;
    pcb_keepout_ids?: string[] | undefined;
}, {
    message: string;
    type: "pcb_footprint_overlap_error";
    error_type?: "pcb_footprint_overlap_error" | undefined;
    pcb_error_id?: string | undefined;
    pcb_smtpad_ids?: string[] | undefined;
    pcb_plated_hole_ids?: string[] | undefined;
    pcb_hole_ids?: string[] | undefined;
    pcb_keepout_ids?: string[] | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_breakout_point">;
    pcb_breakout_point_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    source_trace_id: z.ZodOptional<z.ZodString>;
    source_port_id: z.ZodOptional<z.ZodString>;
    source_net_id: z.ZodOptional<z.ZodString>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "pcb_breakout_point";
    pcb_group_id: string;
    pcb_breakout_point_id: string;
    subcircuit_id?: string | undefined;
    source_port_id?: string | undefined;
    source_trace_id?: string | undefined;
    source_net_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "pcb_breakout_point";
    pcb_group_id: string;
    subcircuit_id?: string | undefined;
    source_port_id?: string | undefined;
    source_trace_id?: string | undefined;
    pcb_breakout_point_id?: string | undefined;
    source_net_id?: string | undefined;
}>, z.ZodDiscriminatedUnion<"shape", [z.ZodObject<{
    type: z.ZodLiteral<"pcb_cutout">;
    pcb_cutout_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"rect">;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    rotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_cutout";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    shape: "rect";
    pcb_cutout_id: string;
    rotation?: number | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_cutout";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "rect";
    rotation?: string | number | undefined;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_cutout_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_cutout">;
    pcb_cutout_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"circle">;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_cutout";
    center: {
        x: number;
        y: number;
    };
    shape: "circle";
    radius: number;
    pcb_cutout_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_cutout";
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "circle";
    radius: string | number;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_cutout_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_cutout">;
    pcb_cutout_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"polygon">;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "pcb_cutout";
    shape: "polygon";
    points: {
        x: number;
        y: number;
    }[];
    pcb_cutout_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_cutout";
    shape: "polygon";
    points: {
        x: string | number;
        y: string | number;
    }[];
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_cutout_id?: string | undefined;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_ground_plane">;
    pcb_ground_plane_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    source_pcb_ground_plane_id: z.ZodString;
    source_net_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_ground_plane";
    source_net_id: string;
    pcb_ground_plane_id: string;
    source_pcb_ground_plane_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_ground_plane";
    source_net_id: string;
    source_pcb_ground_plane_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_ground_plane_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_ground_plane_region">;
    pcb_ground_plane_region_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_ground_plane_id: z.ZodString;
    pcb_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    type: "pcb_ground_plane_region";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    points: {
        x: number;
        y: number;
    }[];
    pcb_ground_plane_id: string;
    pcb_ground_plane_region_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
}, {
    type: "pcb_ground_plane_region";
    layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    points: {
        x: string | number;
        y: string | number;
    }[];
    pcb_ground_plane_id: string;
    subcircuit_id?: string | undefined;
    pcb_group_id?: string | undefined;
    pcb_ground_plane_region_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"pcb_thermal_spoke">;
    pcb_thermal_spoke_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    pcb_ground_plane_id: z.ZodString;
    shape: z.ZodString;
    spoke_count: z.ZodNumber;
    spoke_thickness: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    spoke_inner_diameter: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    spoke_outer_diameter: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    pcb_plated_hole_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "pcb_thermal_spoke";
    shape: string;
    pcb_ground_plane_id: string;
    pcb_thermal_spoke_id: string;
    spoke_count: number;
    spoke_thickness: number;
    spoke_inner_diameter: number;
    spoke_outer_diameter: number;
    subcircuit_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
}, {
    type: "pcb_thermal_spoke";
    shape: string;
    pcb_ground_plane_id: string;
    spoke_count: number;
    spoke_thickness: string | number;
    spoke_inner_diameter: string | number;
    spoke_outer_diameter: string | number;
    subcircuit_id?: string | undefined;
    pcb_plated_hole_id?: string | undefined;
    pcb_thermal_spoke_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_box">;
    schematic_component_id: z.ZodOptional<z.ZodString>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    is_dashed: z.ZodDefault<z.ZodBoolean>;
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    type: "schematic_box";
    width: number;
    height: number;
    is_dashed: boolean;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
}, {
    x: string | number;
    y: string | number;
    type: "schematic_box";
    width: string | number;
    height: string | number;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
    is_dashed?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_text">;
    schematic_component_id: z.ZodOptional<z.ZodString>;
    schematic_text_id: z.ZodString;
    text: z.ZodString;
    font_size: z.ZodDefault<z.ZodNumber>;
    position: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    rotation: z.ZodDefault<z.ZodNumber>;
    anchor: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["center", "left", "right", "top", "bottom"]>, z.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>]>>;
    color: z.ZodDefault<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    anchor: "top" | "bottom" | "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right" | "left" | "right";
    type: "schematic_text";
    rotation: number;
    text: string;
    font_size: number;
    color: string;
    schematic_text_id: string;
    position: {
        x: number;
        y: number;
    };
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
}, {
    type: "schematic_text";
    text: string;
    schematic_text_id: string;
    position: {
        x: string | number;
        y: string | number;
    };
    anchor?: "top" | "bottom" | "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right" | "left" | "right" | undefined;
    rotation?: number | undefined;
    subcircuit_id?: string | undefined;
    font_size?: number | undefined;
    color?: string | undefined;
    schematic_component_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_line">;
    schematic_component_id: z.ZodString;
    x1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    x2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_line";
    x1: number;
    y1: number;
    x2: number;
    y2: number;
    schematic_component_id: string;
    subcircuit_id?: string | undefined;
}, {
    type: "schematic_line";
    x1: string | number;
    y1: string | number;
    x2: string | number;
    y2: string | number;
    schematic_component_id: string;
    subcircuit_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_component">;
    size: z.ZodObject<{
        width: z.ZodNumber;
        height: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        width: number;
        height: number;
    }, {
        width: number;
        height: number;
    }>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    source_component_id: z.ZodString;
    schematic_component_id: z.ZodString;
    pin_spacing: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pin_styles: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        left_margin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        right_margin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        top_margin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        bottom_margin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        left_margin?: number | undefined;
        right_margin?: number | undefined;
        top_margin?: number | undefined;
        bottom_margin?: number | undefined;
    }, {
        left_margin?: string | number | undefined;
        right_margin?: string | number | undefined;
        top_margin?: string | number | undefined;
        bottom_margin?: string | number | undefined;
    }>>>;
    box_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    symbol_name: z.ZodOptional<z.ZodString>;
    port_arrangement: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        left_size: z.ZodNumber;
        right_size: z.ZodNumber;
        top_size: z.ZodOptional<z.ZodNumber>;
        bottom_size: z.ZodOptional<z.ZodNumber>;
    }, "strip", z.ZodTypeAny, {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    }, {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    }>, z.ZodObject<{
        left_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["top-to-bottom", "bottom-to-top"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }>>;
        right_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["top-to-bottom", "bottom-to-top"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }, {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        }>>;
        top_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["left-to-right", "right-to-left"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }>>;
        bottom_side: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodNumber, "many">;
            direction: z.ZodOptional<z.ZodEnum<["left-to-right", "right-to-left"]>>;
        }, "strip", z.ZodTypeAny, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }, {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        }>>;
    }, "strip", z.ZodTypeAny, {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    }, {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    }>]>>;
    port_labels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    symbol_display_value: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    schematic_group_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_component";
    source_component_id: string;
    center: {
        x: number;
        y: number;
    };
    schematic_component_id: string;
    size: {
        width: number;
        height: number;
    };
    subcircuit_id?: string | undefined;
    pin_spacing?: number | undefined;
    pin_styles?: Record<string, {
        left_margin?: number | undefined;
        right_margin?: number | undefined;
        top_margin?: number | undefined;
        bottom_margin?: number | undefined;
    }> | undefined;
    box_width?: number | undefined;
    symbol_name?: string | undefined;
    port_arrangement?: {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    } | {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    } | undefined;
    port_labels?: Record<string, string> | undefined;
    symbol_display_value?: string | undefined;
    schematic_group_id?: string | undefined;
}, {
    type: "schematic_component";
    source_component_id: string;
    center: {
        x: string | number;
        y: string | number;
    };
    schematic_component_id: string;
    size: {
        width: number;
        height: number;
    };
    subcircuit_id?: string | undefined;
    pin_spacing?: string | number | undefined;
    pin_styles?: Record<string, {
        left_margin?: string | number | undefined;
        right_margin?: string | number | undefined;
        top_margin?: string | number | undefined;
        bottom_margin?: string | number | undefined;
    }> | undefined;
    box_width?: string | number | undefined;
    symbol_name?: string | undefined;
    port_arrangement?: {
        left_size: number;
        right_size: number;
        top_size?: number | undefined;
        bottom_size?: number | undefined;
    } | {
        left_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        right_side?: {
            pins: number[];
            direction?: "top-to-bottom" | "bottom-to-top" | undefined;
        } | undefined;
        top_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
        bottom_side?: {
            pins: number[];
            direction?: "left-to-right" | "right-to-left" | undefined;
        } | undefined;
    } | undefined;
    port_labels?: Record<string, string> | undefined;
    symbol_display_value?: string | undefined;
    schematic_group_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_port">;
    schematic_port_id: z.ZodString;
    source_port_id: z.ZodString;
    schematic_component_id: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    facing_direction: z.ZodOptional<z.ZodEnum<["up", "down", "left", "right"]>>;
    distance_from_component_edge: z.ZodOptional<z.ZodNumber>;
    side_of_component: z.ZodOptional<z.ZodEnum<["top", "bottom", "left", "right"]>>;
    true_ccw_index: z.ZodOptional<z.ZodNumber>;
    pin_number: z.ZodOptional<z.ZodNumber>;
    display_pin_label: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    is_connected: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_port";
    center: {
        x: number;
        y: number;
    };
    source_port_id: string;
    schematic_port_id: string;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
    facing_direction?: "left" | "right" | "up" | "down" | undefined;
    distance_from_component_edge?: number | undefined;
    side_of_component?: "top" | "bottom" | "left" | "right" | undefined;
    true_ccw_index?: number | undefined;
    pin_number?: number | undefined;
    display_pin_label?: string | undefined;
    is_connected?: boolean | undefined;
}, {
    type: "schematic_port";
    center: {
        x: string | number;
        y: string | number;
    };
    source_port_id: string;
    schematic_port_id: string;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
    facing_direction?: "left" | "right" | "up" | "down" | undefined;
    distance_from_component_edge?: number | undefined;
    side_of_component?: "top" | "bottom" | "left" | "right" | undefined;
    true_ccw_index?: number | undefined;
    pin_number?: number | undefined;
    display_pin_label?: string | undefined;
    is_connected?: boolean | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_trace">;
    schematic_trace_id: z.ZodString;
    source_trace_id: z.ZodString;
    junctions: z.ZodArray<z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>, "many">;
    edges: z.ZodArray<z.ZodObject<{
        from: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
        to: z.ZodObject<{
            x: z.ZodNumber;
            y: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: number;
            y: number;
        }>;
        is_crossing: z.ZodOptional<z.ZodBoolean>;
        from_schematic_port_id: z.ZodOptional<z.ZodString>;
        to_schematic_port_id: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        is_crossing?: boolean | undefined;
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }, {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        is_crossing?: boolean | undefined;
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }>, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_trace";
    source_trace_id: string;
    schematic_trace_id: string;
    junctions: {
        x: number;
        y: number;
    }[];
    edges: {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        is_crossing?: boolean | undefined;
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }[];
    subcircuit_id?: string | undefined;
}, {
    type: "schematic_trace";
    source_trace_id: string;
    schematic_trace_id: string;
    junctions: {
        x: number;
        y: number;
    }[];
    edges: {
        from: {
            x: number;
            y: number;
        };
        to: {
            x: number;
            y: number;
        };
        is_crossing?: boolean | undefined;
        from_schematic_port_id?: string | undefined;
        to_schematic_port_id?: string | undefined;
    }[];
    subcircuit_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_path">;
    schematic_component_id: z.ZodString;
    fill_color: z.ZodOptional<z.ZodEnum<["red", "blue"]>>;
    is_filled: z.ZodOptional<z.ZodBoolean>;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_path";
    points: {
        x: number;
        y: number;
    }[];
    schematic_component_id: string;
    subcircuit_id?: string | undefined;
    is_filled?: boolean | undefined;
    fill_color?: "red" | "blue" | undefined;
}, {
    type: "schematic_path";
    points: {
        x: string | number;
        y: string | number;
    }[];
    schematic_component_id: string;
    subcircuit_id?: string | undefined;
    is_filled?: boolean | undefined;
    fill_color?: "red" | "blue" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_error">;
    schematic_error_id: z.ZodString;
    error_type: z.ZodDefault<z.ZodLiteral<"schematic_port_not_found">>;
    message: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "schematic_error";
    error_type: "schematic_port_not_found";
    schematic_error_id: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "schematic_error";
    schematic_error_id: string;
    subcircuit_id?: string | undefined;
    error_type?: "schematic_port_not_found" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_layout_error">;
    schematic_layout_error_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    error_type: z.ZodDefault<z.ZodLiteral<"schematic_layout_error">>;
    message: z.ZodString;
    source_group_id: z.ZodString;
    schematic_group_id: z.ZodString;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "schematic_layout_error";
    error_type: "schematic_layout_error";
    source_group_id: string;
    schematic_group_id: string;
    schematic_layout_error_id: string;
    subcircuit_id?: string | undefined;
}, {
    message: string;
    type: "schematic_layout_error";
    source_group_id: string;
    schematic_group_id: string;
    subcircuit_id?: string | undefined;
    error_type?: "schematic_layout_error" | undefined;
    schematic_layout_error_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_net_label">;
    schematic_net_label_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    schematic_trace_id: z.ZodOptional<z.ZodString>;
    source_trace_id: z.ZodOptional<z.ZodString>;
    source_net_id: z.ZodString;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    anchor_position: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>>;
    anchor_side: z.ZodEnum<["top", "bottom", "left", "right"]>;
    text: z.ZodString;
    symbol_name: z.ZodOptional<z.ZodString>;
    is_movable: z.ZodOptional<z.ZodBoolean>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_net_label";
    center: {
        x: number;
        y: number;
    };
    text: string;
    source_net_id: string;
    schematic_net_label_id: string;
    anchor_side: "top" | "bottom" | "left" | "right";
    subcircuit_id?: string | undefined;
    source_trace_id?: string | undefined;
    anchor_position?: {
        x: number;
        y: number;
    } | undefined;
    symbol_name?: string | undefined;
    schematic_trace_id?: string | undefined;
    is_movable?: boolean | undefined;
}, {
    type: "schematic_net_label";
    center: {
        x: string | number;
        y: string | number;
    };
    text: string;
    source_net_id: string;
    anchor_side: "top" | "bottom" | "left" | "right";
    subcircuit_id?: string | undefined;
    source_trace_id?: string | undefined;
    anchor_position?: {
        x: string | number;
        y: string | number;
    } | undefined;
    symbol_name?: string | undefined;
    schematic_trace_id?: string | undefined;
    schematic_net_label_id?: string | undefined;
    is_movable?: boolean | undefined;
}>, z.ZodDiscriminatedUnion<"shape", [z.ZodObject<{
    type: z.ZodLiteral<"schematic_debug_object">;
    label: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"rect">;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    size: z.ZodObject<{
        width: z.ZodNumber;
        height: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        width: number;
        height: number;
    }, {
        width: number;
        height: number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_debug_object";
    center: {
        x: number;
        y: number;
    };
    shape: "rect";
    size: {
        width: number;
        height: number;
    };
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}, {
    type: "schematic_debug_object";
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "rect";
    size: {
        width: number;
        height: number;
    };
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_debug_object">;
    label: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"line">;
    start: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    end: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_debug_object";
    shape: "line";
    start: {
        x: number;
        y: number;
    };
    end: {
        x: number;
        y: number;
    };
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}, {
    type: "schematic_debug_object";
    shape: "line";
    start: {
        x: string | number;
        y: string | number;
    };
    end: {
        x: string | number;
        y: string | number;
    };
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_debug_object">;
    label: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
} & {
    shape: z.ZodLiteral<"point">;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_debug_object";
    center: {
        x: number;
        y: number;
    };
    shape: "point";
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}, {
    type: "schematic_debug_object";
    center: {
        x: string | number;
        y: string | number;
    };
    shape: "point";
    subcircuit_id?: string | undefined;
    label?: string | undefined;
}>]>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_voltage_probe">;
    schematic_voltage_probe_id: z.ZodString;
    position: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    schematic_trace_id: z.ZodString;
    voltage: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_voltage_probe";
    schematic_trace_id: string;
    position: {
        x: number;
        y: number;
    };
    schematic_voltage_probe_id: string;
    subcircuit_id?: string | undefined;
    voltage?: number | undefined;
}, {
    type: "schematic_voltage_probe";
    schematic_trace_id: string;
    position: {
        x: string | number;
        y: string | number;
    };
    schematic_voltage_probe_id: string;
    subcircuit_id?: string | undefined;
    voltage?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_manual_edit_conflict_warning">;
    schematic_manual_edit_conflict_warning_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    warning_type: z.ZodDefault<z.ZodLiteral<"schematic_manual_edit_conflict_warning">>;
    message: z.ZodString;
    schematic_component_id: z.ZodString;
    schematic_group_id: z.ZodOptional<z.ZodString>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    source_component_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    message: string;
    type: "schematic_manual_edit_conflict_warning";
    source_component_id: string;
    warning_type: "schematic_manual_edit_conflict_warning";
    schematic_component_id: string;
    schematic_manual_edit_conflict_warning_id: string;
    subcircuit_id?: string | undefined;
    schematic_group_id?: string | undefined;
}, {
    message: string;
    type: "schematic_manual_edit_conflict_warning";
    source_component_id: string;
    schematic_component_id: string;
    subcircuit_id?: string | undefined;
    warning_type?: "schematic_manual_edit_conflict_warning" | undefined;
    schematic_group_id?: string | undefined;
    schematic_manual_edit_conflict_warning_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_group">;
    schematic_group_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    source_group_id: z.ZodString;
    is_subcircuit: z.ZodOptional<z.ZodBoolean>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    schematic_component_ids: z.ZodArray<z.ZodString, "many">;
    name: z.ZodOptional<z.ZodString>;
    description: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_group";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    source_group_id: string;
    schematic_group_id: string;
    schematic_component_ids: string[];
    description?: string | undefined;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
}, {
    type: "schematic_group";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    source_group_id: string;
    schematic_component_ids: string[];
    description?: string | undefined;
    name?: string | undefined;
    subcircuit_id?: string | undefined;
    is_subcircuit?: boolean | undefined;
    schematic_group_id?: string | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_table">;
    schematic_table_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    anchor_position: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    column_widths: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, "many">;
    row_heights: z.ZodArray<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, "many">;
    cell_padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    border_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    schematic_component_id: z.ZodOptional<z.ZodString>;
    anchor: z.ZodOptional<z.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_table";
    anchor_position: {
        x: number;
        y: number;
    };
    schematic_table_id: string;
    column_widths: number[];
    row_heights: number[];
    anchor?: "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right" | undefined;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
    cell_padding?: number | undefined;
    border_width?: number | undefined;
}, {
    type: "schematic_table";
    anchor_position: {
        x: string | number;
        y: string | number;
    };
    column_widths: (string | number)[];
    row_heights: (string | number)[];
    anchor?: "center" | "top_left" | "top_center" | "top_right" | "center_left" | "center_right" | "bottom_left" | "bottom_center" | "bottom_right" | undefined;
    subcircuit_id?: string | undefined;
    schematic_component_id?: string | undefined;
    schematic_table_id?: string | undefined;
    cell_padding?: string | number | undefined;
    border_width?: string | number | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"schematic_table_cell">;
    schematic_table_cell_id: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    schematic_table_id: z.ZodString;
    start_row_index: z.ZodNumber;
    end_row_index: z.ZodNumber;
    start_column_index: z.ZodNumber;
    end_column_index: z.ZodNumber;
    text: z.ZodOptional<z.ZodString>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    horizontal_align: z.ZodOptional<z.ZodEnum<["left", "center", "right"]>>;
    vertical_align: z.ZodOptional<z.ZodEnum<["top", "middle", "bottom"]>>;
    font_size: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    type: "schematic_table_cell";
    width: number;
    height: number;
    center: {
        x: number;
        y: number;
    };
    schematic_table_id: string;
    schematic_table_cell_id: string;
    start_row_index: number;
    end_row_index: number;
    start_column_index: number;
    end_column_index: number;
    subcircuit_id?: string | undefined;
    text?: string | undefined;
    font_size?: number | undefined;
    horizontal_align?: "center" | "left" | "right" | undefined;
    vertical_align?: "top" | "bottom" | "middle" | undefined;
}, {
    type: "schematic_table_cell";
    width: string | number;
    height: string | number;
    center: {
        x: string | number;
        y: string | number;
    };
    schematic_table_id: string;
    start_row_index: number;
    end_row_index: number;
    start_column_index: number;
    end_column_index: number;
    subcircuit_id?: string | undefined;
    text?: string | undefined;
    font_size?: string | number | undefined;
    schematic_table_cell_id?: string | undefined;
    horizontal_align?: "center" | "left" | "right" | undefined;
    vertical_align?: "top" | "bottom" | "middle" | undefined;
}>, z.ZodObject<{
    type: z.ZodLiteral<"cad_component">;
    cad_component_id: z.ZodString;
    pcb_component_id: z.ZodString;
    source_component_id: z.ZodString;
    position: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>;
    rotation: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
    size: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    subcircuit_id: z.ZodOptional<z.ZodString>;
    footprinter_string: z.ZodOptional<z.ZodString>;
    model_obj_url: z.ZodOptional<z.ZodString>;
    model_stl_url: z.ZodOptional<z.ZodString>;
    model_3mf_url: z.ZodOptional<z.ZodString>;
    model_jscad: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    type: "cad_component";
    pcb_component_id: string;
    source_component_id: string;
    position: {
        x: number;
        y: number;
        z: number;
    };
    cad_component_id: string;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    rotation?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    subcircuit_id?: string | undefined;
    size?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    footprinter_string?: string | undefined;
    model_obj_url?: string | undefined;
    model_stl_url?: string | undefined;
    model_3mf_url?: string | undefined;
    model_jscad?: any;
}, {
    type: "cad_component";
    pcb_component_id: string;
    source_component_id: string;
    position: {
        x: string | number;
        y: string | number;
        z: string | number;
    };
    cad_component_id: string;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    rotation?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    subcircuit_id?: string | undefined;
    size?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    footprinter_string?: string | undefined;
    model_obj_url?: string | undefined;
    model_stl_url?: string | undefined;
    model_3mf_url?: string | undefined;
    model_jscad?: any;
}>]>;
type AnyCircuitElement = z.infer<typeof any_circuit_element>;
type AnyCircuitElementInput = z.input<typeof any_circuit_element>;
/**
 * @deprecated use AnyCircuitElement instead
 */
type AnySoupElement = AnyCircuitElement;
/**
 * @deprecated use AnyCircuitElementInput instead
 */
type AnySoupElementInput = AnyCircuitElementInput;
/**
 * Type representing a complete Circuit JSON document, which is an array of circuit elements.
 * This is the primary type used when working with circuit-json files or API responses.
 */
type CircuitJson = AnyCircuitElement[];

export { type AnyCircuitElement, type AnyCircuitElementInput, type AnySoupElement, type AnySoupElementInput, type AnySourceComponent, type AnySourceElement, type CadComponent, type CadComponentInput, type CircuitJson, type CircuitJsonError, type Distance, type InferredProjectMetadata, type InferredSchematicNetLabel, type InputPoint, type InputPosition, type InputRotation, type LayerRef, type LayerRefInput, type Length, type NinePointAnchor, type PCBBoard, type PCBComponent, type PCBFabricationNotePath, type PCBFabricationNoteText, type PCBHole, type PCBHoleInput, type PCBKeepout, type PCBKeepoutCircle, type PCBKeepoutInput, type PCBKeepoutRect, type PCBMissingFootprintError, type PCBPlacementError, type PCBPlatedHole, type PCBPlatedHoleInput, type PCBPort, type PCBPortInput, type PCBPortNotMatchedError, type PCBSMTPad, type PCBSMTPadInput, type PCBSilkscreenLine, type PCBSilkscreenText, type PCBSolderPasteInput, type PCBText, type PCBTrace, type PCBTraceError, type PCBTraceHint, type PCBTraceInput, type PCBVia, type PcbAutoroutingError, type PcbAutoroutingErrorInput, type PcbAutoroutingErrorInterface, type PcbBoard, type PcbBoardInput, type PcbBreakoutPoint, type PcbBreakoutPointInput, type PcbCircuitElement, type PcbComponent, type PcbComponentInput, type PcbCutout, type PcbCutoutCircle, type PcbCutoutCircleInput, type PcbCutoutInput, type PcbCutoutPolygon, type PcbCutoutPolygonInput, type PcbCutoutRect, type PcbCutoutRectInput, type PcbFabricationNotePath, type PcbFabricationNotePathInput, type PcbFabricationNoteText, type PcbFabricationNoteTextInput, type PcbFootprintOverlapError, type PcbFootprintOverlapErrorInput, type PcbGroundPlane, type PcbGroundPlaneInput, type PcbGroundPlaneRegion, type PcbGroundPlaneRegionInput, type PcbGroup, type PcbGroupInput, type PcbHole, type PcbHoleCircleOrSquare, type PcbHoleCircleOrSquareInput, type PcbHoleCircularWithRectPad, type PcbHoleOval, type PcbHoleOvalInput, type PcbHolePillWithRectPad, type PcbManualEditConflictWarning, type PcbManualEditConflictWarningInput, type PcbMissingFootprintError, type PcbMissingFootprintErrorInput, type PcbPlacementError, type PcbPlacementErrorInput, type PcbPlatedHole, type PcbPlatedHoleCircle, type PcbPlatedHoleInput, type PcbPlatedHoleOval, type PcbPort, type PcbPortInput, type PcbPortNotMatchedError, type PcbPortNotMatchedErrorInput, type PcbRouteHint, type PcbRouteHintInput, type PcbRouteHints, type PcbRouteHintsInput, type PcbSilkscreenCircle, type PcbSilkscreenCircleInput, type PcbSilkscreenLine, type PcbSilkscreenLineInput, type PcbSilkscreenOval, type PcbSilkscreenOvalDeprecated, type PcbSilkscreenOvalInput, type PcbSilkscreenPath, type PcbSilkscreenPathDeprecated, type PcbSilkscreenPathInput, type PcbSilkscreenRect, type PcbSilkscreenRectInput, type PcbSilkscreenRectOld, type PcbSilkscreenText, type PcbSilkscreenTextInput, type PcbSmtPad, type PcbSmtPadCircle, type PcbSmtPadPill, type PcbSmtPadPolygon, type PcbSmtPadRect, type PcbSmtPadRotatedRect, type PcbSolderPaste, type PcbSolderPasteCircle, type PcbSolderPasteOval, type PcbSolderPastePill, type PcbSolderPasteRect, type PcbSolderPasteRotatedRect, type PcbText, type PcbTextInput, type PcbThermalSpoke, type PcbThermalSpokeInput, type PcbTrace, type PcbTraceError, type PcbTraceErrorInput, type PcbTraceHint, type PcbTraceHintInput, type PcbTraceInput, type PcbTraceRoutePoint, type PcbTraceRoutePointVia, type PcbTraceRoutePointWire, type PcbVia, type PcbViaInput, type Point, type Point3, type Position, type Rotation, type RouteHintPoint, type RouteHintPointInput, type SchematicBox, type SchematicBoxInput, type SchematicComponent, type SchematicComponentInput, type SchematicDebugLine, type SchematicDebugObject, type SchematicDebugObjectInput, type SchematicDebugPoint, type SchematicDebugRect, type SchematicError, type SchematicErrorInput, type SchematicGroup, type SchematicGroupInput, type SchematicLayoutError, type SchematicLayoutErrorInput, type SchematicLine, type SchematicLineInput, type SchematicManualEditConflictWarning, type SchematicManualEditConflictWarningInput, type SchematicNetLabel, type SchematicNetLabelInput, type SchematicPath, type SchematicPathInput, type SchematicPort, type SchematicPortArrangement, type SchematicPortArrangementBySides, type SchematicPortArrangementBySize, type SchematicPortInput, type SchematicTable, type SchematicTableCell, type SchematicTableCellInput, type SchematicTableInput, type SchematicText, type SchematicTextInput, type SchematicTrace, type SchematicTraceEdge, type SchematicTraceInput, type SchematicVoltageProbe, type SchematicVoltageProbeInput, type Size, type SizeInput, type SourceComponentBase, type SourceFailedToCreateComponentError, type SourceFailedToCreateComponentErrorInput, type SourceGroup, type SourceGroupInput, type SourceMissingPropertyError, type SourceMissingPropertyErrorInput, type SourceNet, type SourceNetInput, type SourcePcbGroundPlane, type SourcePcbGroundPlaneInput, type SourcePort, type SourcePortInput, type SourceProjectMetadata, type SourceSimpleBattery, type SourceSimpleBatteryInput, type SourceSimpleCapacitor, type SourceSimpleCapacitorInput, type SourceSimpleChip, type SourceSimpleChipInput, type SourceSimpleCrystal, type SourceSimpleCrystalInput, type SourceSimpleDiode, type SourceSimpleDiodeInput, type SourceSimpleGround, type SourceSimpleGroundInput, type SourceSimpleInductor, type SourceSimpleInductorInput, type SourceSimpleLed, type SourceSimpleLedInput, type SourceSimpleMosfet, type SourceSimpleMosfetInput, type SourceSimplePinHeader, type SourceSimplePinHeaderInput, type SourceSimplePotentiometer, type SourceSimplePotentiometerInput, type SourceSimplePowerSource, type SourceSimplePowerSourceInput, type SourceSimplePushButton, type SourceSimplePushButtonInput, type SourceSimpleResistor, type SourceSimpleResistorInput, type SourceSimpleResonator, type SourceSimpleResonatorInput, type SourceSimpleSwitch, type SourceSimpleSwitchInput, type SourceSimpleTestPoint, type SourceSimpleTestPointInput, type SourceSimpleTransistor, type SourceSimpleTransistorInput, type SourceTrace, type SupplierName, type VisibleLayer, type VisibleLayerRef, all_layers, any_circuit_element, any_soup_element, any_source_component, battery_capacity, cad_component, capacitance, current, distance, frequency, getZodPrefixedIdWithDefault, inductance, layer_ref, layer_string, length, ninePointAnchor, pcb_autorouting_error, pcb_board, pcb_breakout_point, pcb_component, pcb_cutout, pcb_cutout_circle, pcb_cutout_polygon, pcb_cutout_rect, pcb_fabrication_note_path, pcb_fabrication_note_text, pcb_footprint_overlap_error, pcb_ground_plane, pcb_ground_plane_region, pcb_group, pcb_hole, pcb_hole_circle_or_square_shape, pcb_hole_oval_shape, pcb_keepout, pcb_manual_edit_conflict_warning, pcb_missing_footprint_error, pcb_placement_error, pcb_plated_hole, pcb_port, pcb_port_not_matched_error, pcb_route_hint, pcb_route_hints, pcb_silkscreen_circle, pcb_silkscreen_line, pcb_silkscreen_oval, pcb_silkscreen_path, pcb_silkscreen_rect, pcb_silkscreen_text, pcb_smtpad, pcb_smtpad_pill, pcb_solder_paste, pcb_text, pcb_thermal_spoke, pcb_trace, pcb_trace_error, pcb_trace_hint, pcb_trace_route_point, pcb_trace_route_point_via, pcb_trace_route_point_wire, pcb_via, point, point3, port_arrangement, position, position3, resistance, rotation, route_hint_point, schematic_box, schematic_component, schematic_component_port_arrangement_by_sides, schematic_component_port_arrangement_by_size, schematic_debug_line, schematic_debug_object, schematic_debug_object_base, schematic_debug_point, schematic_debug_rect, schematic_error, schematic_group, schematic_layout_error, schematic_line, schematic_manual_edit_conflict_warning, schematic_net_label, schematic_path, schematic_pin_styles, schematic_port, schematic_table, schematic_table_cell, schematic_text, schematic_trace, schematic_voltage_probe, size, source_component_base, source_failed_to_create_component_error, source_group, source_missing_property_error, source_net, source_pcb_ground_plane, source_port, source_project_metadata, source_simple_battery, source_simple_capacitor, source_simple_chip, source_simple_crystal, source_simple_diode, source_simple_ground, source_simple_inductor, source_simple_led, source_simple_mosfet, source_simple_pin_header, source_simple_potentiometer, source_simple_power_source, source_simple_push_button, source_simple_resistor, source_simple_resonator, source_simple_switch, source_simple_test_point, source_simple_transistor, source_trace, supplier_name, time, visible_layer, voltage };
