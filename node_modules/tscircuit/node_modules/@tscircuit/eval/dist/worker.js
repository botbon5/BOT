// lib/worker.ts
import * as Comlink from "comlink";

// lib/utils/get-imports-from-code.ts
var getImportsFromCode = (code) => {
  const importRegex = /^\s*import\s+(?:(?:[\w\s]+,\s*)?(?:\*\s+as\s+[\w\s]+|\{[\s\w,]+\}|\w+)\s+from\s+)?['"](.+?)['"]/gm;
  const imports = [];
  let match;
  while ((match = importRegex.exec(code)) !== null) {
    imports.push(match[1]);
  }
  const reExportRegex = /^\s*export\s+(?:\*|(?:\{[\s\w,]+\}))\s+from\s+['"](.+?)['"]/gm;
  let reExportMatch;
  while ((reExportMatch = reExportRegex.exec(code)) !== null) {
    imports.push(reExportMatch[1]);
  }
  return imports;
};

// lib/worker.ts
var createCircuitWebWorker = async (configuration) => {
  const existingWorker = globalThis.TSCIRCUIT_GLOBAL_CIRCUIT_WORKER;
  if (existingWorker && typeof existingWorker.kill === "function") {
    if (configuration.verbose) {
      console.log("[Worker] Killing previous global worker instance...");
    }
    try {
      await existingWorker.kill();
    } catch (e) {
      if (configuration.verbose) {
        console.warn(
          "[Worker] Error killing previous global worker instance:",
          e
        );
      }
      if (globalThis.TSCIRCUIT_GLOBAL_CIRCUIT_WORKER === existingWorker) {
        globalThis.TSCIRCUIT_GLOBAL_CIRCUIT_WORKER = void 0;
      }
    }
  }
  if (configuration.verbose) {
    console.log(
      "[Worker] Creating circuit web worker with config:",
      configuration
    );
  }
  let workerBlobUrl = configuration.webWorkerBlobUrl ?? configuration.webWorkerUrl;
  if (!workerBlobUrl) {
    const cdnUrl = `https://cdn.jsdelivr.net/npm/@tscircuit/eval@${configuration.evalVersion ?? "latest"}/dist/webworker/entrypoint.js`;
    const workerBlob = await fetch(cdnUrl).then((res) => res.blob());
    workerBlobUrl = URL.createObjectURL(workerBlob);
  }
  const rawWorker = new Worker(workerBlobUrl, { type: "module" });
  const comlinkWorker = Comlink.wrap(rawWorker);
  if (configuration.snippetsApiBaseUrl) {
    await comlinkWorker.setSnippetsApiBaseUrl(configuration.snippetsApiBaseUrl);
  }
  if (configuration.platform) {
    await comlinkWorker.setPlatformConfig(configuration.platform);
  }
  let isTerminated = false;
  const wrapper = {
    clearEventListeners: comlinkWorker.clearEventListeners.bind(comlinkWorker),
    execute: async (...args) => {
      if (isTerminated) {
        throw new Error("CircuitWebWorker was terminated, can't execute");
      }
      return comlinkWorker.execute.bind(comlinkWorker)(...args);
    },
    executeWithFsMap: async (...args) => {
      if (isTerminated) {
        throw new Error(
          "CircuitWebWorker was terminated, can't executeWithFsMap"
        );
      }
      return comlinkWorker.executeWithFsMap.bind(comlinkWorker)(...args);
    },
    renderUntilSettled: comlinkWorker.renderUntilSettled.bind(comlinkWorker),
    getCircuitJson: comlinkWorker.getCircuitJson.bind(comlinkWorker),
    on: (event, callback) => {
      const proxiedCallback = Comlink.proxy(callback);
      comlinkWorker.on(event, proxiedCallback);
    },
    kill: async () => {
      comlinkWorker[Comlink.releaseProxy]();
      rawWorker.terminate();
      isTerminated = true;
      if (globalThis.TSCIRCUIT_GLOBAL_CIRCUIT_WORKER === wrapper) {
        globalThis.TSCIRCUIT_GLOBAL_CIRCUIT_WORKER = void 0;
      }
    }
  };
  globalThis.TSCIRCUIT_GLOBAL_CIRCUIT_WORKER = wrapper;
  return wrapper;
};
export {
  createCircuitWebWorker,
  getImportsFromCode
};
//# sourceMappingURL=data:application/json;base64,