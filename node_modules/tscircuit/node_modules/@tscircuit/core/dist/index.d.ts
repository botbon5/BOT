import * as _tscircuit_props from '@tscircuit/props';
import { PlatformConfig, subcircuitGroupProps, AutorouterConfig, traceProps, SupplierPartNumbers, SchematicPortArrangement, groupProps, boardProps, capacitorProps, chipProps, diodeProps, fuseProps, jumperProps, solderjumperProps, ledProps, powerSourceProps, resistorProps, constraintProps, fabricationNotePathProps, fabricationNoteTextProps, footprintProps, subcircuitProps, breakoutProps, breakoutPointProps, holeProps, pcbKeepoutProps, netLabelProps, platedHoleProps, silkscreenCircleProps, silkscreenPathProps, silkscreenRectProps, silkscreenTextProps, silkscreenLineProps, smtPadProps, traceHintProps, viaProps, cutoutProps, batteryProps, pinHeaderProps, resonatorProps, inductorProps, potentiometerProps, pushButtonProps, crystalProps, transistorProps, mosfetProps, switchProps, testpointProps, schematicTextProps, schematicBoxProps, schematicTableProps, schematicRowProps, schematicCellProps, CapacitorProps, ChipProps, DiodeProps, ResistorProps, ManualEditEvent, ManualEditsFile, ChipConnections, manual_edits_file } from '@tscircuit/props';
import React, { ReactElement, DetailedHTMLProps, SVGProps } from 'react';
export { createElement } from 'react';
import * as zod from 'zod';
import { z, ZodType } from 'zod';
import { symbols, SchSymbol, BaseSymbolName } from 'schematic-symbols';
import { PcbTraceError, PcbPlacementError, PcbManualEditConflictWarning, LayerRef, AnyCircuitElement, AnySourceComponent, PcbTraceRoutePoint, PcbTrace as PcbTrace$1, PcbVia, SchematicPort, SchematicComponent, RouteHintPoint, CircuitJson } from 'circuit-json';
import { Matrix } from 'transformation-matrix';
import { CircuitJsonUtilObjects } from '@tscircuit/circuit-json-util';
import { ConnectivityMap } from 'circuit-json-to-connectivity-map';
import { GraphicsObject } from 'graphics-debug';

declare const orderedRenderPhases: readonly ["ReactSubtreesRender", "PcbFootprintStringRender", "InitializePortsFromChildren", "CreateNetsFromProps", "CreateTracesFromProps", "CreateTracesFromNetLabels", "CreateTraceHintsFromProps", "SourceGroupRender", "AssignNameToUnnamedComponents", "SourceRender", "SourceParentAttachment", "PortMatching", "OptimizeSelectorCache", "SourceTraceRender", "SourceAddConnectivityMapKey", "SchematicComponentRender", "SchematicPortRender", "SchematicPrimitiveRender", "SchematicLayout", "SchematicTraceRender", "SchematicReplaceNetLabelsWithSymbols", "PcbComponentRender", "PcbPrimitiveRender", "PcbFootprintLayout", "PcbPortRender", "PcbPortAttachment", "PcbLayout", "PcbComponentSizeCalculation", "PcbBoardAutoSize", "PcbTraceHintRender", "PcbTraceRender", "PcbRouteNetIslands", "PcbDesignRuleChecks", "CadModelRender", "PartsEngineRender"];
type RenderPhase = (typeof orderedRenderPhases)[number];
type RenderPhaseFn<K extends RenderPhase = RenderPhase> = `doInitial${K}` | `update${K}` | `remove${K}`;
type RenderPhaseStates = Record<RenderPhase, {
    initialized: boolean;
    dirty: boolean;
}>;
type AsyncEffect = {
    effectName: string;
    promise: Promise<void>;
    phase: RenderPhase;
    complete: boolean;
};
type RenderPhaseFunctions = {
    [T in RenderPhaseFn]?: () => void;
};
type IRenderable = RenderPhaseFunctions & {
    renderPhaseStates: RenderPhaseStates;
    runRenderPhase(phase: RenderPhase): void;
    runRenderPhaseForChildren(phase: RenderPhase): void;
    shouldBeRemoved: boolean;
    children: IRenderable[];
    runRenderCycle(): void;
};
declare abstract class Renderable implements IRenderable {
    renderPhaseStates: RenderPhaseStates;
    shouldBeRemoved: boolean;
    children: IRenderable[];
    /** PCB-only SMTPads, PlatedHoles, Holes, Silkscreen elements etc. */
    isPcbPrimitive: boolean;
    /** Schematic-only, lines, boxes, indicators etc. */
    isSchematicPrimitive: boolean;
    _renderId: string;
    _currentRenderPhase: RenderPhase | null;
    private _asyncEffects;
    parent: Renderable | null;
    constructor(props: any);
    _markDirty(phase: RenderPhase): void;
    protected _queueAsyncEffect(effectName: string, effect: () => Promise<void>): void;
    protected _emitRenderLifecycleEvent(phase: RenderPhase, startOrEnd: "start" | "end"): void;
    getString(): string;
    _hasIncompleteAsyncEffects(): boolean;
    getCurrentRenderPhase(): RenderPhase | null;
    getRenderGraph(): Record<string, any>;
    runRenderCycle(): void;
    /**
     * This runs all the render methods for a given phase, calling one of:
     * - doInitial*
     * - update*
     *  -remove*
     *  ...depending on the current state of the component.
     */
    runRenderPhase(phase: RenderPhase): void;
    runRenderPhaseForChildren(phase: RenderPhase): void;
    renderError(message: string | Omit<PcbTraceError, "pcb_error_id"> | Omit<PcbPlacementError, "pcb_error_id"> | Omit<PcbManualEditConflictWarning, "pcb_error_id">): void;
}

/**
 * This is how we render in React. This can be a confusing part of the codebase,
 * but here are some helpful reference implementations:
 *
 * https://github.com/diegomura/react-pdf/blob/fabecc56727dfb6d590a3fa1e11f50250ecbbea1/packages/reconciler/src/reconciler-31.js
 * https://github.com/pmndrs/react-three-fiber/blob/ec4f00bb61cc4f6e28b3a12b1dca9daa5594f10e/packages/fiber/src/core/renderer.ts
 *
 *
 */

type ReactSubtree = {
    element: ReactElement;
    component: NormalComponent;
};

type SchematicBoxPortPositionWithMetadata = {
    trueIndex: number;
    pinNumber: number;
    side: "left" | "right" | "top" | "bottom";
    distanceFromOrthogonalEdge: number;
    x: number;
    y: number;
};
interface SchematicBoxDimensions {
    pinCount: number;
    getPortPositionByPinNumber(pinNumber: number): SchematicBoxPortPositionWithMetadata | null;
    getSize(): {
        width: number;
        height: number;
    };
    getSizeIncludingPins(): {
        width: number;
        height: number;
    };
}
interface SchematicBoxComponentDimensions {
    schWidth: number;
    schHeight: number;
}

type SimplifiedPcbTrace = {
    type: "pcb_trace";
    pcb_trace_id: string;
    connection_name?: string;
    route: Array<{
        route_type: "wire";
        x: number;
        y: number;
        width: number;
        layer: string;
    } | {
        route_type: "via";
        x: number;
        y: number;
        to_layer: string;
        from_layer: string;
    }>;
};
type Obstacle = {
    type: "rect";
    layers: string[];
    center: {
        x: number;
        y: number;
    };
    width: number;
    height: number;
    connectedTo: string[];
};
interface SimpleRouteConnection {
    name: string;
    source_trace_id?: string;
    pointsToConnect: Array<{
        x: number;
        y: number;
        layer: string;
        pointId?: string;
        pcb_port_id?: string;
    }>;
    externallyConnectedPointIds?: string[][];
}
interface SimpleRouteJson {
    layerCount: number;
    minTraceWidth: number;
    obstacles: Obstacle[];
    connections: Array<SimpleRouteConnection>;
    bounds: {
        minX: number;
        maxX: number;
        minY: number;
        maxY: number;
    };
    traces?: SimplifiedPcbTrace[];
}

type RootCircuitEventName = "asyncEffect:start" | "asyncEffect:end" | "renderable:renderLifecycle:anyEvent" | `renderable:renderLifecycle:${RenderPhase}:start` | `renderable:renderLifecycle:${RenderPhase}:end` | `board:renderPhaseStarted` | "external:evalError" | "autorouting:start" | "autorouting:end" | "autorouting:error" | "autorouting:progress" | "renderComplete";
interface AutoroutingStartEvent {
    type: "autorouting:start";
    subcircuit_id: string;
    componentDisplayName: string;
    simpleRouteJson: SimpleRouteJson;
}
interface AutoroutingErrorEvent {
    type: "autorouting:error";
    subcircuit_id: string;
    componentDisplayName: string;
    error?: {
        message: string;
        stack?: string;
    };
    simpleRouteJson?: SimpleRouteJson;
    debugGraphics?: any;
}
interface AutoroutingProgressEvent {
    type: "autorouting:progress";
    subcircuit_id: string;
    componentDisplayName: string;
    progress: number;
    iterationsPerSecond?: number;
    debugGraphics?: any;
}
interface AutoroutingEndEvent {
    type: "autorouting:end";
}

declare class RootCircuit {
    firstChild: PrimitiveComponent | null;
    children: PrimitiveComponent[];
    db: CircuitJsonUtilObjects;
    root: RootCircuit | null;
    isRoot: boolean;
    schematicDisabled: boolean;
    pcbDisabled: boolean;
    pcbRoutingDisabled: boolean;
    /**
     * The RootCircuit name is usually set by the platform, it's not required but
     * if supplied can identify the circuit in certain effects, e.g. it is passed
     * as the display_name parameter for autorouting effects.
     */
    name?: string;
    platform?: PlatformConfig;
    /**
     * Optional URL pointing to where this project is hosted or documented.
     * When provided it is stored in the source_project_metadata.project_url field
     * of the generated Circuit JSON.
     */
    projectUrl?: string;
    _hasRenderedAtleastOnce: boolean;
    constructor({ platform, projectUrl, }?: {
        platform?: PlatformConfig;
        projectUrl?: string;
    });
    add(componentOrElm: PrimitiveComponent | ReactElement): void;
    /**
     * Get the main board for this Circuit.
     */
    _getBoard(): PrimitiveComponent & {
        boardThickness: number;
        _connectedSchematicPortPairs: Set<string>;
        allLayers: LayerRef[];
    };
    _guessRootComponent(): void;
    render(): void;
    renderUntilSettled(): Promise<void>;
    private _hasIncompleteAsyncEffects;
    getCircuitJson(): AnyCircuitElement[];
    toJson(): AnyCircuitElement[];
    getSvg(options: {
        view: "pcb" | "schematic";
        layer?: string;
    }): Promise<string>;
    getCoreVersion(): string;
    preview(previewNameOrOpts: string | {
        previewName: string;
        tscircuitApiKey?: string;
    }): Promise<void>;
    computeSchematicGlobalTransform(): Matrix;
    _computePcbGlobalTransformBeforeLayout(): Matrix;
    selectAll(selector: string): PrimitiveComponent[];
    selectOne(selector: string, opts?: {
        type?: "component" | "port";
    }): PrimitiveComponent | null;
    _eventListeners: Record<RootCircuitEventName, Array<(...args: any[]) => void>>;
    emit(event: RootCircuitEventName, ...args: any[]): void;
    on(event: RootCircuitEventName, listener: (...args: any[]) => void): void;
    removeListener(event: RootCircuitEventName, listener: (...args: any[]) => void): void;
    getClientOrigin(): string;
}
/**
 * @deprecated
 */
declare const Project: typeof RootCircuit;
/**
 * We currently don't make a distinction between RootCircuit and Circuit, but
 * we may in the future allow subcircuits to be created as new Circuit then
 * incorporated into a larger RootCircuit
 */
declare const Circuit: typeof RootCircuit;

interface ISubcircuit extends PrimitiveComponent {
    _shouldUseTraceByTraceRouting(): boolean;
    _parsedProps: z.infer<typeof subcircuitGroupProps>;
    _getAutorouterConfig(): AutorouterConfig;
    subcircuit_id: string | null;
}

interface IGroup extends PrimitiveComponent {
    source_group_id: string | null;
    pcb_group_id: string | null;
    _getSchematicLayoutMode(): "match-adapt" | "flex" | "grid" | "relative";
}

type Ftype = Extract<AnySourceComponent, {
    ftype: string;
}>["ftype"];
type TwoPinPorts = "pin1" | "pin2";
type PassivePorts = TwoPinPorts;
type PolarizedPassivePorts = PassivePorts | "anode" | "cathode" | "pos" | "neg";
type TransistorPorts = "pin1" | "pin2" | "pin3" | "emitter" | "collector" | "base";

interface BaseComponentConfig {
    componentName: string;
    schematicSymbolName?: string | null;
    zodProps: z.ZodType;
    sourceFtype?: Ftype | null;
    shouldRenderAsSchematicBox?: boolean;
}
/**
 * A PrimitiveComponent (SmtPad, Port etc.) doesn't have the ability to contain
 * React subtrees or explicit handling of the "footprint" prop. But otherwise
 * has most of the features of a NormalComponent.
 */
declare abstract class PrimitiveComponent<ZodProps extends ZodType = any> extends Renderable {
    parent: PrimitiveComponent | null;
    children: PrimitiveComponent[];
    childrenPendingRemoval: PrimitiveComponent[];
    get config(): BaseComponentConfig;
    props: z.input<ZodProps>;
    _parsedProps: z.infer<ZodProps>;
    get componentName(): string;
    getInheritedProperty(propertyName: string): any;
    get lowercaseComponentName(): string;
    externallyAddedAliases: string[];
    /**
     * An subcircuit is self-contained. All the selectors inside
     * a subcircuit are relative to the subcircuit group. You can have multiple
     * subcircuits and their selectors will not interact with each other (even if the
     * components share the same names) unless you explicitly break out some ports
     */
    get isSubcircuit(): any;
    get isGroup(): boolean;
    get name(): any;
    /**
     * A primitive container is a component that contains one or more ports and
     * primitive components that are designed to interact.
     *
     * For example a resistor contains ports and smtpads that interact, so the
     * resistor is a primitive container. Inside a primitive container, the ports
     * and pads are likely to reference each other and look for eachother during
     * the port matching phase.
     *
     */
    isPrimitiveContainer: boolean;
    canHaveTextChildren: boolean;
    source_group_id: string | null;
    source_component_id: string | null;
    schematic_component_id: string | null;
    pcb_component_id: string | null;
    cad_component_id: string | null;
    fallbackUnassignedName?: string;
    constructor(props: z.input<ZodProps>);
    setProps(props: Partial<z.input<ZodProps>>): void;
    /**
     * Computes a transformation matrix from the props of this component for PCB
     * components
     */
    computePcbPropsTransform(): Matrix;
    /**
     * Compute a transformation matrix combining all parent transforms for PCB
     * components, including this component's translation and rotation.
     *
     * This is used to compute this component's position as well as all children
     * components positions before layout is applied
     */
    _computePcbGlobalTransformBeforeLayout(): Matrix;
    getPrimitiveContainer(): PrimitiveComponent | null;
    /**
     * Compute the PCB bounds of this component the circuit json elements
     * associated with it.
     */
    _getPcbCircuitJsonBounds(): {
        center: {
            x: number;
            y: number;
        };
        bounds: {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
        width: number;
        height: number;
    };
    /**
     * Determine if this pcb primitive should be flipped because the primitive
     * container is flipped
     *
     * TODO use footprint.originalLayer instead of assuming everything is defined
     * relative to the top layer
     */
    _getPcbPrimitiveFlippedHelpers(): {
        isFlipped: boolean;
        maybeFlipLayer: (layer: LayerRef) => LayerRef;
    };
    /**
     * Set the position of this component from the layout solver. This method
     * should operate using CircuitJson associated with this component, like
     * _getPcbCircuitJsonBounds it can be called multiple times as different
     * parents apply layout to their children.
     */
    _setPositionFromLayout(newCenter: {
        x: number;
        y: number;
    }): void;
    /**
     * Computes a transformation matrix from the props of this component for
     * schematic components
     */
    computeSchematicPropsTransform(): Matrix;
    /**
     * Compute a transformation matrix combining all parent transforms for this
     * component
     */
    computeSchematicGlobalTransform(): Matrix;
    _getSchematicSymbolName(): keyof typeof symbols | undefined;
    _getSchematicSymbolNameOrThrow(): keyof typeof symbols;
    getSchematicSymbol(): SchSymbol | null;
    /**
     * Subcircuit groups have a prop called "layout" that can include manual
     * placements for pcb components. These are typically added from an IDE
     */
    _getPcbManualPlacementForComponent(component: PrimitiveComponent): {
        x: number;
        y: number;
    } | null;
    _getSchematicManualPlacementForComponent(component: PrimitiveComponent): {
        x: number;
        y: number;
    } | null;
    _getSchematicGlobalManualPlacementTransform(component: PrimitiveComponent): Matrix | null;
    _getGlobalPcbPositionBeforeLayout(): {
        x: number;
        y: number;
    };
    _getGlobalSchematicPositionBeforeLayout(): {
        x: number;
        y: number;
    };
    get root(): RootCircuit | null;
    onAddToParent(parent: PrimitiveComponent): void;
    /**
     * Called whenever the props change
     */
    onPropsChange(params: {
        oldProps: z.infer<ZodProps>;
        newProps: z.infer<ZodProps>;
        changedProps: string[];
    }): void;
    onChildChanged(child: PrimitiveComponent): void;
    add(component: PrimitiveComponent): void;
    addAll(components: PrimitiveComponent[]): void;
    remove(component: PrimitiveComponent): void;
    getSubcircuitSelector(): string;
    getFullPathSelector(): string;
    getNameAndAliases(): string[];
    isMatchingNameOrAlias(name: string): boolean;
    isMatchingAnyOf(aliases: Array<string | number>): boolean;
    getPcbSize(): {
        width: number;
        height: number;
    };
    doesSelectorMatch(selector: string): boolean;
    getSubcircuit(): ISubcircuit;
    getGroup(): IGroup | null;
    doInitialAssignNameToUnnamedComponents(): void;
    doInitialOptimizeSelectorCache(): void;
    _cachedSelectAllQueries: Map<string, PrimitiveComponent[]>;
    selectAll(selectorRaw: string): PrimitiveComponent[];
    _cachedSelectOneQueries: Map<string, PrimitiveComponent | null>;
    selectOne<T = PrimitiveComponent>(selectorRaw: string, options?: {
        type?: string;
        port?: boolean;
        pcbPrimitive?: boolean;
        schematicPrimitive?: boolean;
    }): T | null;
    getAvailablePcbLayers(): string[];
    /**
     * Returns all descendants
     *
     * NOTE: This crosses subcircuit boundaries, you may want to use
     * getSelectableDescendants instead
     */
    getDescendants(): PrimitiveComponent[];
    /**
     * Returns all descendants that are accessible without crossing a subcircuit
     * boundary
     */
    getSelectableDescendants(): PrimitiveComponent[];
    /**
     * Return the number of pins in this component, this is important for
     * NormalComponents
     */
    _getPinCount(): number;
    /**
     * If this component represents a SchematicBox (like a Chip), return the
     * dimensions of the box, which allows computing the position of ports etc.
     */
    _getSchematicBoxDimensions(): SchematicBoxDimensions | null;
    _getSchematicBoxComponentDimensions(): SchematicBoxComponentDimensions | null;
    renderError(message: Parameters<typeof Renderable.prototype.renderError>[0]): void;
    getString(): string;
    get [Symbol.toStringTag](): string;
}

declare const netProps: z.ZodObject<{
    name: z.ZodEffects<z.ZodString, string, string>;
}, "strip", z.ZodTypeAny, {
    name: string;
}, {
    name: string;
}>;
declare class Net extends PrimitiveComponent<typeof netProps> {
    source_net_id?: string;
    get config(): {
        componentName: string;
        zodProps: z.ZodObject<{
            name: z.ZodEffects<z.ZodString, string, string>;
        }, "strip", z.ZodTypeAny, {
            name: string;
        }, {
            name: string;
        }>;
    };
    getPortSelector(): string;
    doInitialSourceRender(): void;
    doInitialSourceParentAttachment(): void;
    /**
     * Get all ports connected to this net.
     *
     * TODO currently we're not checking for indirect connections (traces that are
     * connected to other traces that are in turn connected to the net)
     */
    getAllConnectedPorts(): Port[];
    /**
     * Get all traces that are directly connected to this net, i.e. they list
     * this net in their path, from, or to props
     */
    _getAllDirectlyConnectedTraces(): Trace[];
    /**
     * Add PCB Traces to connect net islands together. A net island is a set of
     * ports that are connected to each other. If a there are multiple net islands
     * that means that the net is not fully connected and we need to add traces
     * such that the nets are fully connected
     *
     * Sometimes this phase doesn't find any net islands if the autorouter did
     * a good job and connected the islands. In some sense this is a "backup"
     * routing phase for autorouters that don't care about connecting nets.
     *
     * This should only run if the autorouter is sequential-trace
     */
    doInitialPcbRouteNetIslands(): void;
    renderError(message: Parameters<typeof PrimitiveComponent.prototype.renderError>[0]): void;
}

interface TraceI extends PrimitiveComponent<typeof traceProps> {
    source_trace_id: string | null;
    subcircuit_connectivity_map_key: string | null;
}

declare class Trace extends PrimitiveComponent<typeof traceProps> implements TraceI {
    source_trace_id: string | null;
    pcb_trace_id: string | null;
    schematic_trace_id: string | null;
    _portsRoutedOnPcb: Port[];
    subcircuit_connectivity_map_key: string | null;
    _traceConnectionHash: string | null;
    constructor(props: z.input<typeof traceProps>);
    get config(): {
        zodProps: z.ZodUnion<[z.ZodObject<{
            key: z.ZodOptional<z.ZodString>;
            thickness: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
            schematicRouteHints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>, "many">>;
            pcbRouteHints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                via: z.ZodOptional<z.ZodBoolean>;
                to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
                    name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
                }, "strip", z.ZodTypeAny, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>>;
                trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }, {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }>, "many">>;
            schDisplayLabel: z.ZodOptional<z.ZodString>;
            maxLength: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        } & {
            path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodType<{
                getPortSelector: () => string;
            }, z.ZodTypeDef, {
                getPortSelector: () => string;
            }>]>, "many">;
        }, "strip", z.ZodTypeAny, {
            path: (string | {
                getPortSelector: () => string;
            })[];
            key?: string | undefined;
            maxLength?: number | undefined;
            thickness?: number | undefined;
            schematicRouteHints?: {
                x: number;
                y: number;
            }[] | undefined;
            pcbRouteHints?: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[] | undefined;
            schDisplayLabel?: string | undefined;
        }, {
            path: (string | {
                getPortSelector: () => string;
            })[];
            key?: string | undefined;
            maxLength?: string | number | undefined;
            thickness?: string | number | undefined;
            schematicRouteHints?: {
                x: string | number;
                y: string | number;
            }[] | undefined;
            pcbRouteHints?: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[] | undefined;
            schDisplayLabel?: string | undefined;
        }>, z.ZodObject<{
            key: z.ZodOptional<z.ZodString>;
            thickness: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
            schematicRouteHints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>, "many">>;
            pcbRouteHints: z.ZodOptional<z.ZodArray<z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                via: z.ZodOptional<z.ZodBoolean>;
                to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
                    name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
                }, "strip", z.ZodTypeAny, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>>;
                trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }, {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }>, "many">>;
            schDisplayLabel: z.ZodOptional<z.ZodString>;
            maxLength: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        } & {
            from: z.ZodUnion<[z.ZodString, z.ZodType<{
                getPortSelector: () => string;
            }, z.ZodTypeDef, {
                getPortSelector: () => string;
            }>]>;
            to: z.ZodUnion<[z.ZodString, z.ZodType<{
                getPortSelector: () => string;
            }, z.ZodTypeDef, {
                getPortSelector: () => string;
            }>]>;
        }, "strip", z.ZodTypeAny, {
            from: string | {
                getPortSelector: () => string;
            };
            to: string | {
                getPortSelector: () => string;
            };
            key?: string | undefined;
            maxLength?: number | undefined;
            thickness?: number | undefined;
            schematicRouteHints?: {
                x: number;
                y: number;
            }[] | undefined;
            pcbRouteHints?: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[] | undefined;
            schDisplayLabel?: string | undefined;
        }, {
            from: string | {
                getPortSelector: () => string;
            };
            to: string | {
                getPortSelector: () => string;
            };
            key?: string | undefined;
            maxLength?: string | number | undefined;
            thickness?: string | number | undefined;
            schematicRouteHints?: {
                x: string | number;
                y: string | number;
            }[] | undefined;
            pcbRouteHints?: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[] | undefined;
            schDisplayLabel?: string | undefined;
        }>]>;
        componentName: string;
    };
    _getTracePortOrNetSelectorListFromProps(): string[];
    getTracePortPathSelectors(): string[];
    getTracePathNetSelectors(): string[];
    _findConnectedPorts(): {
        allPortsFound: true;
        ports: Port[];
        portsWithSelectors: Array<{
            selector: string;
            port: Port;
        }>;
    } | {
        allPortsFound: false;
        ports?: undefined;
        portsWithSelectors?: undefined;
    };
    _resolveNet(selector: string): Net | null;
    _findConnectedNets(): {
        nets: Net[];
        netsWithSelectors: Array<{
            selector: string;
            net: Net;
        }>;
    };
    /**
     * Get all the traces that are connected in any degree to this trace, this is
     * used during autorouting to routes to pass through traces connected to the
     * same net.
     */
    _getAllTracesConnectedToSameNet(): Trace[];
    /**
     * Determine if a trace is explicitly connected to a port (not via a net)
     */
    _isExplicitlyConnectedToPort(port: Port): boolean;
    /**
     * Determine if a trace is explicitly connected to a net (not via a port)
     */
    _isExplicitlyConnectedToNet(net: Net): boolean;
    doInitialCreateNetsFromProps(): void;
    _computeTraceConnectionHash(): string | null;
    doInitialSourceTraceRender(): void;
    _insertErrorIfTraceIsOutsideBoard(mergedRoute: PcbTraceRoutePoint[], ports: Port[]): void;
    doInitialPcbTraceRender(): void;
    _doInitialSchematicTraceRenderWithDisplayLabel(): void;
    _isSymbolToChipConnection(): boolean | undefined;
    _isSymbolToSymbolConnection(): boolean | undefined;
    _isChipToChipConnection(): boolean | undefined;
    doInitialSchematicTraceRender(): void;
}

declare const portProps: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    pinNumber: z.ZodOptional<z.ZodNumber>;
    aliases: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
}, "strip", z.ZodTypeAny, {
    name?: string | undefined;
    pinNumber?: number | undefined;
    aliases?: string[] | undefined;
}, {
    name?: string | undefined;
    pinNumber?: number | undefined;
    aliases?: string[] | undefined;
}>;
declare class Port extends PrimitiveComponent<typeof portProps> {
    source_port_id: string | null;
    pcb_port_id: string | null;
    schematic_port_id: string | null;
    schematicSymbolPortDef: SchSymbol["ports"][number] | null;
    matchedComponents: PrimitiveComponent[];
    facingDirection: "up" | "down" | "left" | "right" | null;
    originDescription: string | null;
    get config(): {
        componentName: string;
        zodProps: z.ZodObject<{
            name: z.ZodOptional<z.ZodString>;
            pinNumber: z.ZodOptional<z.ZodNumber>;
            aliases: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
        }, "strip", z.ZodTypeAny, {
            name?: string | undefined;
            pinNumber?: number | undefined;
            aliases?: string[] | undefined;
        }, {
            name?: string | undefined;
            pinNumber?: number | undefined;
            aliases?: string[] | undefined;
        }>;
    };
    constructor(props: z.input<typeof portProps>, opts?: {
        originDescription?: string;
    });
    _getGlobalPcbPositionBeforeLayout(): {
        x: number;
        y: number;
    };
    _getPcbCircuitJsonBounds(): {
        center: {
            x: number;
            y: number;
        };
        bounds: {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
        width: number;
        height: number;
    };
    _getGlobalPcbPositionAfterLayout(): {
        x: number;
        y: number;
    };
    _getPortsInternallyConnectedToThisPort(): Port[];
    /**
     * Return true if this port has a schematic representation and can be rendered
     * to the schematic.
     *
     * Sometimes things like mounting holes don't have a schematic representation
     * and aren't rendered to the schematic.
     *
     * It's common for a schematic symbol to not have a representation for all of
     * the pins on a footprint, e.g. a pushbutton has 4 pins but is typically
     * represented by a two-pin symbol. In these cases, it's best to use
     * internallyConnectedPorts or externallyConnectedPorts to ensure the things
     * are rendered properly.
     */
    _hasSchematicPort(): boolean;
    _getGlobalSchematicPositionBeforeLayout(): {
        x: number;
        y: number;
    };
    _getGlobalSchematicPositionAfterLayout(): {
        x: number;
        y: number;
    };
    /**
     * Smtpads and platedholes call this method to register themselves as a match
     * for this port. All the matching is done by primitives other than the Port,
     * but everyone registers themselves as a match with their Port.
     */
    registerMatch(component: PrimitiveComponent): void;
    getNameAndAliases(): string[];
    isMatchingPort(port: Port): boolean;
    getPortSelector(): string;
    getAvailablePcbLayers(): LayerRef[];
    /**
     * Return traces that are explicitly connected to this port (not via a net)
     */
    _getDirectlyConnectedTraces(): Trace[];
    doInitialSourceRender(): void;
    doInitialSourceParentAttachment(): void;
    doInitialPcbPortRender(): void;
    doInitialSchematicPortRender(): void;
    _setPositionFromLayout(newCenter: {
        x: number;
        y: number;
    }): void;
    _hasMatchedPcbPrimitive(): boolean;
}

interface INormalComponent {
    _getInternallyConnectedPins(): Port[][];
}

type PortMap<T extends string> = {
    [K in T]: Port;
};
/**
 * A NormalComponent is the base class for most components that a user will
 * interact with. It has the ability to set a footprint and discover ports.
 *
 * When you're extending a NormalComponent, you almost always want to override
 * initPorts() to create ports for the component.
 *
 * class Led extends NormalComponent<typeof resistorProps> {
 *   pin1: Port = this.portMap.pin1
 *   pin2: Port = this.portMap.pin2
 *
 *   initPorts() {
 *     this.add(new Port({ pinNumber: 1, aliases: ["anode", "pos"] }))
 *     this.add(new Port({ pinNumber: 2, aliases: ["cathode", "neg"] }))
 *   }
 * }
 */
declare class NormalComponent<ZodProps extends z.ZodType = any, PortNames extends string = never> extends PrimitiveComponent<ZodProps> implements INormalComponent {
    reactSubtrees: Array<ReactSubtree>;
    _impliedFootprint?: string | undefined;
    isPrimitiveContainer: boolean;
    _asyncSupplierPartNumbers?: SupplierPartNumbers;
    pcb_missing_footprint_error_id?: string;
    _hasStartedFootprintUrlLoad: boolean;
    /**
     * Override this property for component defaults
     */
    get defaultInternallyConnectedPinNames(): string[][];
    get internallyConnectedPinNames(): string[][];
    constructor(props: z.input<ZodProps>);
    /**
     * Override this method for better control over the auto-discovery of ports.
     *
     * If you override this method just do something like:
     * initPorts() {
     *   this.add(new Port({ pinNumber: 1, aliases: ["anode", "pos"] }))
     *   this.add(new Port({ pinNumber: 2, aliases: ["cathode", "neg"] }))
     * }
     *
     * By default, we'll pull the ports from the first place we find them:
     * 1. `config.schematicSymbolName`
     * 2. `props.footprint`
     *
     */
    initPorts(opts?: {
        additionalAliases?: Record<`pin${number}`, string[]>;
        pinCount?: number;
    }): void;
    _getImpliedFootprintString(): string | null;
    _isFootprintUrl(s: string): boolean;
    _addChildrenFromStringFootprint(): void;
    get portMap(): PortMap<PortNames>;
    getInstanceForReactElement(element: ReactElement): NormalComponent | null;
    doInitialSourceRender(): void;
    /**
     * Render the schematic component for this NormalComponent using the
     * config.schematicSymbolName if it exists, or create a generic box if
     * no symbol is defined.
     *
     * You can override this method to do more complicated things.
     */
    doInitialSchematicComponentRender(): void;
    _getSchematicSymbolDisplayValue(): string | undefined;
    _getInternallyConnectedPins(): Port[][];
    _doInitialSchematicComponentRenderWithSymbol(): void;
    _doInitialSchematicComponentRenderWithSchematicBoxDimensions(): void;
    doInitialPcbComponentRender(): void;
    /**
     * At this stage, the smtpads/pcb primitives are placed, so we can compute
     * the width/height of the component
     */
    doInitialPcbComponentSizeCalculation(): void;
    _renderReactSubtree(element: ReactElement): ReactSubtree;
    doInitialInitializePortsFromChildren(): void;
    doInitialReactSubtreesRender(): void;
    doInitialPcbFootprintStringRender(): void;
    _hasExistingPortExactly(port1: Port): boolean;
    add(componentOrElm: PrimitiveComponent | ReactElement): void;
    getPortsFromFootprint(opts?: {
        additionalAliases?: Record<string, string[]>;
    }): Port[];
    getPortsFromSchematicSymbol(): Port[];
    doInitialCreateNetsFromProps(): void;
    _getNetsFromConnectionsProp(): string[];
    _createNetsFromProps(propsWithConnections: (string | undefined | null)[]): void;
    _getPcbCircuitJsonBounds(): {
        center: {
            x: number;
            y: number;
        };
        bounds: {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
        width: number;
        height: number;
    };
    _getPinCountFromSchematicPortArrangement(): number;
    _getPinCount(): number;
    /**
     * Override the schematic port arrangement if you want to customize where pins
     * appear on a schematic box, e.g. for a pin header
     */
    _getSchematicPortArrangement(): SchematicPortArrangement | null;
    _getSchematicBoxDimensions(): SchematicBoxDimensions | null;
    doInitialCadModelRender(): void;
    private _addCachebustToModelUrl;
    private _getPartsEngineCacheKey;
    private _getSupplierPartNumbers;
    doInitialPartsEngineRender(): void;
    updatePartsEngineRender(): void;
    doInitialCreateTracesFromProps(): void;
    _createTracesFromConnectionsProp(): void;
}

declare class Group<Props extends z.ZodType<any, any, any> = typeof groupProps> extends NormalComponent<Props> implements ISubcircuit {
    pcb_group_id: string | null;
    schematic_group_id: string | null;
    subcircuit_id: string | null;
    _hasStartedAsyncAutorouting: boolean;
    _asyncAutoroutingResult: {
        output_simple_route_json?: SimpleRouteJson;
        output_pcb_traces?: (PcbTrace$1 | PcbVia)[];
    } | null;
    get config(): {
        zodProps: Props;
        componentName: string;
    };
    doInitialSourceGroupRender(): void;
    doInitialSourceRender(): void;
    doInitialSourceParentAttachment(): void;
    doInitialPcbComponentRender(): void;
    doInitialPcbPrimitiveRender(): void;
    _resolvePcbPadding(): {
        padLeft: number;
        padRight: number;
        padTop: number;
        padBottom: number;
    };
    doInitialCreateTraceHintsFromProps(): void;
    doInitialSourceAddConnectivityMapKey(): void;
    _areChildSubcircuitsRouted(): boolean;
    _shouldRouteAsync(): boolean;
    _hasTracesToRoute(): boolean;
    _runEffectMakeHttpAutoroutingRequest(): Promise<void>;
    /**
     * Run local autorouting using the CapacityMeshAutorouter
     */
    _runLocalAutorouting(): Promise<void>;
    _startAsyncAutorouting(): void;
    doInitialPcbTraceRender(): void;
    updatePcbTraceRender(): void;
    _updatePcbTraceRenderFromSimpleRouteJson(): void;
    _updatePcbTraceRenderFromPcbTraces(): void;
    doInitialSchematicComponentRender(): void;
    _getSchematicLayoutMode(): "match-adapt" | "flex" | "grid" | "relative";
    doInitialSchematicLayout(): void;
    _doInitialSchematicLayoutMatchAdapt(): void;
    _doInitialSchematicLayoutGrid(): void;
    _getPcbLayoutMode(): "grid" | "flex" | "match-adapt" | "pack" | "none";
    doInitialPcbLayout(): void;
    _doInitialPcbLayoutGrid(): void;
    _doInitialPcbLayoutPack(): void;
    _doInitialPcbLayoutFlex(): void;
    _insertSchematicBorder(): void;
    _determineSideFromPosition(port: SchematicPort, component: SchematicComponent): "left" | "right" | "top" | "bottom";
    _calculateSchematicBounds(boxes: Array<{
        centerX: number;
        centerY: number;
    }>): {
        minX: number;
        maxX: number;
        minY: number;
        maxY: number;
    };
    _getAutorouterConfig(): AutorouterConfig;
    /**
     * Trace-by-trace autorouting is where each trace routes itself in a well-known
     * order. It's the most deterministic way to autoroute, because a new trace
     * is generally ordered last.
     *
     * This method will return false if using an external service for autorouting
     * or if using a "fullview" or "rip and replace" autorouting mode
     */
    _shouldUseTraceByTraceRouting(): boolean;
    doInitialPcbDesignRuleChecks(): void;
    doInitialSchematicReplaceNetLabelsWithSymbols(): void;
}

declare class Board extends Group<typeof boardProps> {
    pcb_board_id: string | null;
    _drcChecksComplete: boolean;
    _connectedSchematicPortPairs: Set<string>;
    get isSubcircuit(): boolean;
    get isGroup(): boolean;
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbHeight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schHeight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbLayout: zod.ZodOptional<zod.ZodObject<{
                layoutMode: zod.ZodOptional<zod.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
                position: zod.ZodOptional<zod.ZodEnum<["absolute", "relative"]>>;
                grid: zod.ZodOptional<zod.ZodBoolean>;
                gridCols: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>>;
                gridRows: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>>;
                gridTemplateRows: zod.ZodOptional<zod.ZodString>;
                gridTemplateColumns: zod.ZodOptional<zod.ZodString>;
                gridTemplate: zod.ZodOptional<zod.ZodString>;
                gridGap: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>>;
                flex: zod.ZodOptional<zod.ZodUnion<[zod.ZodBoolean, zod.ZodString]>>;
                flexDirection: zod.ZodOptional<zod.ZodEnum<["row", "column"]>>;
                alignItems: zod.ZodOptional<zod.ZodEnum<["start", "center", "end", "stretch"]>>;
                justifyContent: zod.ZodOptional<zod.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
                flexRow: zod.ZodOptional<zod.ZodBoolean>;
                flexColumn: zod.ZodOptional<zod.ZodBoolean>;
                gap: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>>;
                pack: zod.ZodOptional<zod.ZodBoolean>;
                packOrderStrategy: zod.ZodOptional<zod.ZodEnum<["largest_to_smallest"]>>;
                packPlacementStrategy: zod.ZodOptional<zod.ZodEnum<["shortest_connection_along_outline"]>>;
                padding: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                paddingLeft: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                paddingRight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                paddingTop: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                paddingBottom: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                paddingX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                paddingY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                width: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                height: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                matchAdapt: zod.ZodOptional<zod.ZodBoolean>;
                matchAdaptTemplate: zod.ZodOptional<zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                grid?: boolean | undefined;
                flex?: string | boolean | undefined;
                layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
                position?: "relative" | "absolute" | undefined;
                gridCols?: string | number | undefined;
                gridRows?: string | number | undefined;
                gridTemplateRows?: string | undefined;
                gridTemplateColumns?: string | undefined;
                gridTemplate?: string | undefined;
                gridGap?: string | number | undefined;
                flexDirection?: "row" | "column" | undefined;
                alignItems?: "center" | "start" | "end" | "stretch" | undefined;
                justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
                flexRow?: boolean | undefined;
                flexColumn?: boolean | undefined;
                gap?: string | number | undefined;
                pack?: boolean | undefined;
                packOrderStrategy?: "largest_to_smallest" | undefined;
                packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
                padding?: number | undefined;
                paddingLeft?: number | undefined;
                paddingRight?: number | undefined;
                paddingTop?: number | undefined;
                paddingBottom?: number | undefined;
                paddingX?: number | undefined;
                paddingY?: number | undefined;
                width?: number | undefined;
                height?: number | undefined;
                matchAdapt?: boolean | undefined;
                matchAdaptTemplate?: any;
            }, {
                grid?: boolean | undefined;
                flex?: string | boolean | undefined;
                layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
                position?: "relative" | "absolute" | undefined;
                gridCols?: string | number | undefined;
                gridRows?: string | number | undefined;
                gridTemplateRows?: string | undefined;
                gridTemplateColumns?: string | undefined;
                gridTemplate?: string | undefined;
                gridGap?: string | number | undefined;
                flexDirection?: "row" | "column" | undefined;
                alignItems?: "center" | "start" | "end" | "stretch" | undefined;
                justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
                flexRow?: boolean | undefined;
                flexColumn?: boolean | undefined;
                gap?: string | number | undefined;
                pack?: boolean | undefined;
                packOrderStrategy?: "largest_to_smallest" | undefined;
                packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
                padding?: string | number | undefined;
                paddingLeft?: string | number | undefined;
                paddingRight?: string | number | undefined;
                paddingTop?: string | number | undefined;
                paddingBottom?: string | number | undefined;
                paddingX?: string | number | undefined;
                paddingY?: string | number | undefined;
                width?: string | number | undefined;
                height?: string | number | undefined;
                matchAdapt?: boolean | undefined;
                matchAdaptTemplate?: any;
            }>>;
            schLayout: zod.ZodOptional<zod.ZodObject<{
                layoutMode: zod.ZodOptional<zod.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
                position: zod.ZodOptional<zod.ZodEnum<["absolute", "relative"]>>;
                grid: zod.ZodOptional<zod.ZodBoolean>;
                gridCols: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>>;
                gridRows: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>>;
                gridTemplateRows: zod.ZodOptional<zod.ZodString>;
                gridTemplateColumns: zod.ZodOptional<zod.ZodString>;
                gridTemplate: zod.ZodOptional<zod.ZodString>;
                gridGap: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>>;
                flex: zod.ZodOptional<zod.ZodUnion<[zod.ZodBoolean, zod.ZodString]>>;
                flexDirection: zod.ZodOptional<zod.ZodEnum<["row", "column"]>>;
                alignItems: zod.ZodOptional<zod.ZodEnum<["start", "center", "end", "stretch"]>>;
                justifyContent: zod.ZodOptional<zod.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
                flexRow: zod.ZodOptional<zod.ZodBoolean>;
                flexColumn: zod.ZodOptional<zod.ZodBoolean>;
                gap: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>>;
                pack: zod.ZodOptional<zod.ZodBoolean>;
                packOrderStrategy: zod.ZodOptional<zod.ZodEnum<["largest_to_smallest"]>>;
                packPlacementStrategy: zod.ZodOptional<zod.ZodEnum<["shortest_connection_along_outline"]>>;
                padding: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                paddingLeft: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                paddingRight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                paddingTop: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                paddingBottom: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                paddingX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                paddingY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                width: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                height: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                matchAdapt: zod.ZodOptional<zod.ZodBoolean>;
                matchAdaptTemplate: zod.ZodOptional<zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                grid?: boolean | undefined;
                flex?: string | boolean | undefined;
                layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
                position?: "relative" | "absolute" | undefined;
                gridCols?: string | number | undefined;
                gridRows?: string | number | undefined;
                gridTemplateRows?: string | undefined;
                gridTemplateColumns?: string | undefined;
                gridTemplate?: string | undefined;
                gridGap?: string | number | undefined;
                flexDirection?: "row" | "column" | undefined;
                alignItems?: "center" | "start" | "end" | "stretch" | undefined;
                justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
                flexRow?: boolean | undefined;
                flexColumn?: boolean | undefined;
                gap?: string | number | undefined;
                pack?: boolean | undefined;
                packOrderStrategy?: "largest_to_smallest" | undefined;
                packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
                padding?: number | undefined;
                paddingLeft?: number | undefined;
                paddingRight?: number | undefined;
                paddingTop?: number | undefined;
                paddingBottom?: number | undefined;
                paddingX?: number | undefined;
                paddingY?: number | undefined;
                width?: number | undefined;
                height?: number | undefined;
                matchAdapt?: boolean | undefined;
                matchAdaptTemplate?: any;
            }, {
                grid?: boolean | undefined;
                flex?: string | boolean | undefined;
                layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
                position?: "relative" | "absolute" | undefined;
                gridCols?: string | number | undefined;
                gridRows?: string | number | undefined;
                gridTemplateRows?: string | undefined;
                gridTemplateColumns?: string | undefined;
                gridTemplate?: string | undefined;
                gridGap?: string | number | undefined;
                flexDirection?: "row" | "column" | undefined;
                alignItems?: "center" | "start" | "end" | "stretch" | undefined;
                justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
                flexRow?: boolean | undefined;
                flexColumn?: boolean | undefined;
                gap?: string | number | undefined;
                pack?: boolean | undefined;
                packOrderStrategy?: "largest_to_smallest" | undefined;
                packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
                padding?: string | number | undefined;
                paddingLeft?: string | number | undefined;
                paddingRight?: string | number | undefined;
                paddingTop?: string | number | undefined;
                paddingBottom?: string | number | undefined;
                paddingX?: string | number | undefined;
                paddingY?: string | number | undefined;
                width?: string | number | undefined;
                height?: string | number | undefined;
                matchAdapt?: boolean | undefined;
                matchAdaptTemplate?: any;
            }>>;
            cellBorder: zod.ZodOptional<zod.ZodNullable<zod.ZodObject<{
                strokeWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                dashed: zod.ZodOptional<zod.ZodBoolean>;
                solid: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                strokeWidth?: number | undefined;
                dashed?: boolean | undefined;
                solid?: boolean | undefined;
            }, {
                strokeWidth?: string | number | undefined;
                dashed?: boolean | undefined;
                solid?: boolean | undefined;
            }>>>;
            border: zod.ZodOptional<zod.ZodNullable<zod.ZodObject<{
                strokeWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                dashed: zod.ZodOptional<zod.ZodBoolean>;
                solid: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                strokeWidth?: number | undefined;
                dashed?: boolean | undefined;
                solid?: boolean | undefined;
            }, {
                strokeWidth?: string | number | undefined;
                dashed?: boolean | undefined;
                solid?: boolean | undefined;
            }>>>;
            schPadding: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schPaddingLeft: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schPaddingRight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schPaddingTop: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schPaddingBottom: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layoutMode: zod.ZodOptional<zod.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
            position: zod.ZodOptional<zod.ZodEnum<["absolute", "relative"]>>;
            grid: zod.ZodOptional<zod.ZodBoolean>;
            gridCols: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>>;
            gridRows: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>>;
            gridTemplateRows: zod.ZodOptional<zod.ZodString>;
            gridTemplateColumns: zod.ZodOptional<zod.ZodString>;
            gridTemplate: zod.ZodOptional<zod.ZodString>;
            gridGap: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>>;
            flex: zod.ZodOptional<zod.ZodUnion<[zod.ZodBoolean, zod.ZodString]>>;
            flexDirection: zod.ZodOptional<zod.ZodEnum<["row", "column"]>>;
            alignItems: zod.ZodOptional<zod.ZodEnum<["start", "center", "end", "stretch"]>>;
            justifyContent: zod.ZodOptional<zod.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
            flexRow: zod.ZodOptional<zod.ZodBoolean>;
            flexColumn: zod.ZodOptional<zod.ZodBoolean>;
            gap: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>>;
            pack: zod.ZodOptional<zod.ZodBoolean>;
            packOrderStrategy: zod.ZodOptional<zod.ZodEnum<["largest_to_smallest"]>>;
            packPlacementStrategy: zod.ZodOptional<zod.ZodEnum<["shortest_connection_along_outline"]>>;
            padding: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            paddingLeft: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            paddingRight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            paddingTop: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            paddingBottom: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            paddingX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            paddingY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            matchAdapt: zod.ZodOptional<zod.ZodBoolean>;
            matchAdaptTemplate: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodOptional<zod.ZodString>;
            children: zod.ZodOptional<zod.ZodAny>;
            schTitle: zod.ZodOptional<zod.ZodString>;
            key: zod.ZodOptional<zod.ZodAny>;
        } & {
            manualEdits: zod.ZodOptional<zod.ZodObject<{
                pcb_placements: zod.ZodOptional<zod.ZodArray<zod.ZodObject<{
                    selector: zod.ZodString;
                    relative_to: zod.ZodDefault<zod.ZodOptional<zod.ZodString>>;
                    center: zod.ZodObject<{
                        x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                        y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    }, "strip", zod.ZodTypeAny, {
                        x: number;
                        y: number;
                    }, {
                        x: string | number;
                        y: string | number;
                    }>;
                }, "strip", zod.ZodTypeAny, {
                    selector: string;
                    relative_to: string;
                    center: {
                        x: number;
                        y: number;
                    };
                }, {
                    selector: string;
                    center: {
                        x: string | number;
                        y: string | number;
                    };
                    relative_to?: string | undefined;
                }>, "many">>;
                manual_trace_hints: zod.ZodOptional<zod.ZodArray<zod.ZodObject<{
                    pcb_port_selector: zod.ZodString;
                    offsets: zod.ZodArray<zod.ZodObject<{
                        x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                        y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                        via: zod.ZodOptional<zod.ZodBoolean>;
                        to_layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                            name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
                        }, "strip", zod.ZodTypeAny, {
                            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                        }, {
                            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                        }>>;
                        trace_width: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                    }, "strip", zod.ZodTypeAny, {
                        x: number;
                        y: number;
                        via?: boolean | undefined;
                        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                        trace_width?: number | undefined;
                    }, {
                        x: string | number;
                        y: string | number;
                        via?: boolean | undefined;
                        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                        } | undefined;
                        trace_width?: string | number | undefined;
                    }>, "many">;
                }, "strip", zod.ZodTypeAny, {
                    pcb_port_selector: string;
                    offsets: {
                        x: number;
                        y: number;
                        via?: boolean | undefined;
                        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                        trace_width?: number | undefined;
                    }[];
                }, {
                    pcb_port_selector: string;
                    offsets: {
                        x: string | number;
                        y: string | number;
                        via?: boolean | undefined;
                        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                        } | undefined;
                        trace_width?: string | number | undefined;
                    }[];
                }>, "many">>;
                schematic_placements: zod.ZodOptional<zod.ZodArray<zod.ZodObject<{
                    selector: zod.ZodString;
                    relative_to: zod.ZodDefault<zod.ZodOptional<zod.ZodString>>;
                    center: zod.ZodObject<{
                        x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                        y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    }, "strip", zod.ZodTypeAny, {
                        x: number;
                        y: number;
                    }, {
                        x: string | number;
                        y: string | number;
                    }>;
                }, "strip", zod.ZodTypeAny, {
                    selector: string;
                    relative_to: string;
                    center: {
                        x: number;
                        y: number;
                    };
                }, {
                    selector: string;
                    center: {
                        x: string | number;
                        y: string | number;
                    };
                    relative_to?: string | undefined;
                }>, "many">>;
            }, "strip", zod.ZodTypeAny, {
                pcb_placements?: {
                    selector: string;
                    relative_to: string;
                    center: {
                        x: number;
                        y: number;
                    };
                }[] | undefined;
                manual_trace_hints?: {
                    pcb_port_selector: string;
                    offsets: {
                        x: number;
                        y: number;
                        via?: boolean | undefined;
                        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                        trace_width?: number | undefined;
                    }[];
                }[] | undefined;
                schematic_placements?: {
                    selector: string;
                    relative_to: string;
                    center: {
                        x: number;
                        y: number;
                    };
                }[] | undefined;
            }, {
                pcb_placements?: {
                    selector: string;
                    center: {
                        x: string | number;
                        y: string | number;
                    };
                    relative_to?: string | undefined;
                }[] | undefined;
                manual_trace_hints?: {
                    pcb_port_selector: string;
                    offsets: {
                        x: string | number;
                        y: string | number;
                        via?: boolean | undefined;
                        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                        } | undefined;
                        trace_width?: string | number | undefined;
                    }[];
                }[] | undefined;
                schematic_placements?: {
                    selector: string;
                    center: {
                        x: string | number;
                        y: string | number;
                    };
                    relative_to?: string | undefined;
                }[] | undefined;
            }>>;
            schAutoLayoutEnabled: zod.ZodOptional<zod.ZodBoolean>;
            schTraceAutoLabelEnabled: zod.ZodOptional<zod.ZodBoolean>;
            routingDisabled: zod.ZodOptional<zod.ZodBoolean>;
            defaultTraceWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            minTraceWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            partsEngine: zod.ZodOptional<zod.ZodType<_tscircuit_props.PartsEngine, zod.ZodTypeDef, _tscircuit_props.PartsEngine>>;
            pcbRouteCache: zod.ZodOptional<zod.ZodType<_tscircuit_props.PcbRouteCache, zod.ZodTypeDef, _tscircuit_props.PcbRouteCache>>;
            autorouter: zod.ZodOptional<zod.ZodUnion<[zod.ZodObject<{
                serverUrl: zod.ZodOptional<zod.ZodString>;
                inputFormat: zod.ZodOptional<zod.ZodEnum<["simplified", "circuit-json"]>>;
                serverMode: zod.ZodOptional<zod.ZodEnum<["job", "solve-endpoint"]>>;
                serverCacheEnabled: zod.ZodOptional<zod.ZodBoolean>;
                cache: zod.ZodOptional<zod.ZodType<_tscircuit_props.PcbRouteCache, zod.ZodTypeDef, _tscircuit_props.PcbRouteCache>>;
                traceClearance: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                groupMode: zod.ZodOptional<zod.ZodEnum<["sequential-trace", "subcircuit"]>>;
                algorithmFn: zod.ZodOptional<zod.ZodType<(simpleRouteJson: any) => Promise<any>, zod.ZodTypeDef, (simpleRouteJson: any) => Promise<any>>>;
                preset: zod.ZodOptional<zod.ZodEnum<["sequential-trace", "subcircuit", "auto", "auto-local", "auto-cloud"]>>;
                local: zod.ZodOptional<zod.ZodBoolean>;
            }, "strip", zod.ZodTypeAny, {
                serverUrl?: string | undefined;
                inputFormat?: "simplified" | "circuit-json" | undefined;
                serverMode?: "job" | "solve-endpoint" | undefined;
                serverCacheEnabled?: boolean | undefined;
                cache?: _tscircuit_props.PcbRouteCache | undefined;
                traceClearance?: number | undefined;
                groupMode?: "sequential-trace" | "subcircuit" | undefined;
                algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
                preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
                local?: boolean | undefined;
            }, {
                serverUrl?: string | undefined;
                inputFormat?: "simplified" | "circuit-json" | undefined;
                serverMode?: "job" | "solve-endpoint" | undefined;
                serverCacheEnabled?: boolean | undefined;
                cache?: _tscircuit_props.PcbRouteCache | undefined;
                traceClearance?: string | number | undefined;
                groupMode?: "sequential-trace" | "subcircuit" | undefined;
                algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
                preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
                local?: boolean | undefined;
            }>, zod.ZodLiteral<"sequential-trace">, zod.ZodLiteral<"subcircuit">, zod.ZodLiteral<"auto">, zod.ZodLiteral<"auto-local">, zod.ZodLiteral<"auto-cloud">]>>;
            square: zod.ZodOptional<zod.ZodBoolean>;
            emptyArea: zod.ZodOptional<zod.ZodString>;
            filledArea: zod.ZodOptional<zod.ZodString>;
            width: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            height: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            outline: zod.ZodOptional<zod.ZodArray<zod.ZodObject<{
                x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            }, "strip", zod.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>, "many">>;
            outlineOffsetX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            outlineOffsetY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
        } & {
            material: zod.ZodDefault<zod.ZodEnum<["fr4", "fr1"]>>;
            layers: zod.ZodDefault<zod.ZodUnion<[zod.ZodLiteral<2>, zod.ZodLiteral<4>]>>;
        }, "strip", zod.ZodTypeAny, {
            material: "fr4" | "fr1";
            layers: 2 | 4;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            key?: any;
            name?: string | undefined;
            children?: any;
            grid?: boolean | undefined;
            flex?: string | boolean | undefined;
            layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
            position?: "relative" | "absolute" | undefined;
            gridCols?: string | number | undefined;
            gridRows?: string | number | undefined;
            gridTemplateRows?: string | undefined;
            gridTemplateColumns?: string | undefined;
            gridTemplate?: string | undefined;
            gridGap?: string | number | undefined;
            flexDirection?: "row" | "column" | undefined;
            alignItems?: "center" | "start" | "end" | "stretch" | undefined;
            justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
            flexRow?: boolean | undefined;
            flexColumn?: boolean | undefined;
            gap?: string | number | undefined;
            pack?: boolean | undefined;
            packOrderStrategy?: "largest_to_smallest" | undefined;
            packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
            padding?: number | undefined;
            paddingLeft?: number | undefined;
            paddingRight?: number | undefined;
            paddingTop?: number | undefined;
            paddingBottom?: number | undefined;
            paddingX?: number | undefined;
            paddingY?: number | undefined;
            width?: number | undefined;
            height?: number | undefined;
            matchAdapt?: boolean | undefined;
            matchAdaptTemplate?: any;
            schTitle?: string | undefined;
            pcbWidth?: number | undefined;
            pcbHeight?: number | undefined;
            schWidth?: number | undefined;
            schHeight?: number | undefined;
            pcbLayout?: {
                grid?: boolean | undefined;
                flex?: string | boolean | undefined;
                layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
                position?: "relative" | "absolute" | undefined;
                gridCols?: string | number | undefined;
                gridRows?: string | number | undefined;
                gridTemplateRows?: string | undefined;
                gridTemplateColumns?: string | undefined;
                gridTemplate?: string | undefined;
                gridGap?: string | number | undefined;
                flexDirection?: "row" | "column" | undefined;
                alignItems?: "center" | "start" | "end" | "stretch" | undefined;
                justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
                flexRow?: boolean | undefined;
                flexColumn?: boolean | undefined;
                gap?: string | number | undefined;
                pack?: boolean | undefined;
                packOrderStrategy?: "largest_to_smallest" | undefined;
                packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
                padding?: number | undefined;
                paddingLeft?: number | undefined;
                paddingRight?: number | undefined;
                paddingTop?: number | undefined;
                paddingBottom?: number | undefined;
                paddingX?: number | undefined;
                paddingY?: number | undefined;
                width?: number | undefined;
                height?: number | undefined;
                matchAdapt?: boolean | undefined;
                matchAdaptTemplate?: any;
            } | undefined;
            schLayout?: {
                grid?: boolean | undefined;
                flex?: string | boolean | undefined;
                layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
                position?: "relative" | "absolute" | undefined;
                gridCols?: string | number | undefined;
                gridRows?: string | number | undefined;
                gridTemplateRows?: string | undefined;
                gridTemplateColumns?: string | undefined;
                gridTemplate?: string | undefined;
                gridGap?: string | number | undefined;
                flexDirection?: "row" | "column" | undefined;
                alignItems?: "center" | "start" | "end" | "stretch" | undefined;
                justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
                flexRow?: boolean | undefined;
                flexColumn?: boolean | undefined;
                gap?: string | number | undefined;
                pack?: boolean | undefined;
                packOrderStrategy?: "largest_to_smallest" | undefined;
                packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
                padding?: number | undefined;
                paddingLeft?: number | undefined;
                paddingRight?: number | undefined;
                paddingTop?: number | undefined;
                paddingBottom?: number | undefined;
                paddingX?: number | undefined;
                paddingY?: number | undefined;
                width?: number | undefined;
                height?: number | undefined;
                matchAdapt?: boolean | undefined;
                matchAdaptTemplate?: any;
            } | undefined;
            cellBorder?: {
                strokeWidth?: number | undefined;
                dashed?: boolean | undefined;
                solid?: boolean | undefined;
            } | null | undefined;
            border?: {
                strokeWidth?: number | undefined;
                dashed?: boolean | undefined;
                solid?: boolean | undefined;
            } | null | undefined;
            schPadding?: number | undefined;
            schPaddingLeft?: number | undefined;
            schPaddingRight?: number | undefined;
            schPaddingTop?: number | undefined;
            schPaddingBottom?: number | undefined;
            manualEdits?: {
                pcb_placements?: {
                    selector: string;
                    relative_to: string;
                    center: {
                        x: number;
                        y: number;
                    };
                }[] | undefined;
                manual_trace_hints?: {
                    pcb_port_selector: string;
                    offsets: {
                        x: number;
                        y: number;
                        via?: boolean | undefined;
                        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                        trace_width?: number | undefined;
                    }[];
                }[] | undefined;
                schematic_placements?: {
                    selector: string;
                    relative_to: string;
                    center: {
                        x: number;
                        y: number;
                    };
                }[] | undefined;
            } | undefined;
            routingDisabled?: boolean | undefined;
            defaultTraceWidth?: number | undefined;
            minTraceWidth?: number | undefined;
            pcbRouteCache?: _tscircuit_props.PcbRouteCache | undefined;
            autorouter?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | {
                serverUrl?: string | undefined;
                inputFormat?: "simplified" | "circuit-json" | undefined;
                serverMode?: "job" | "solve-endpoint" | undefined;
                serverCacheEnabled?: boolean | undefined;
                cache?: _tscircuit_props.PcbRouteCache | undefined;
                traceClearance?: number | undefined;
                groupMode?: "sequential-trace" | "subcircuit" | undefined;
                algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
                preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
                local?: boolean | undefined;
            } | undefined;
            schAutoLayoutEnabled?: boolean | undefined;
            schTraceAutoLabelEnabled?: boolean | undefined;
            partsEngine?: _tscircuit_props.PartsEngine | undefined;
            square?: boolean | undefined;
            emptyArea?: string | undefined;
            filledArea?: string | undefined;
            outline?: {
                x: number;
                y: number;
            }[] | undefined;
            outlineOffsetX?: number | undefined;
            outlineOffsetY?: number | undefined;
        }, {
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            key?: any;
            name?: string | undefined;
            children?: any;
            grid?: boolean | undefined;
            flex?: string | boolean | undefined;
            layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
            position?: "relative" | "absolute" | undefined;
            gridCols?: string | number | undefined;
            gridRows?: string | number | undefined;
            gridTemplateRows?: string | undefined;
            gridTemplateColumns?: string | undefined;
            gridTemplate?: string | undefined;
            gridGap?: string | number | undefined;
            flexDirection?: "row" | "column" | undefined;
            alignItems?: "center" | "start" | "end" | "stretch" | undefined;
            justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
            flexRow?: boolean | undefined;
            flexColumn?: boolean | undefined;
            gap?: string | number | undefined;
            pack?: boolean | undefined;
            packOrderStrategy?: "largest_to_smallest" | undefined;
            packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
            padding?: string | number | undefined;
            paddingLeft?: string | number | undefined;
            paddingRight?: string | number | undefined;
            paddingTop?: string | number | undefined;
            paddingBottom?: string | number | undefined;
            paddingX?: string | number | undefined;
            paddingY?: string | number | undefined;
            width?: string | number | undefined;
            height?: string | number | undefined;
            matchAdapt?: boolean | undefined;
            matchAdaptTemplate?: any;
            schTitle?: string | undefined;
            pcbWidth?: string | number | undefined;
            pcbHeight?: string | number | undefined;
            schWidth?: string | number | undefined;
            schHeight?: string | number | undefined;
            pcbLayout?: {
                grid?: boolean | undefined;
                flex?: string | boolean | undefined;
                layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
                position?: "relative" | "absolute" | undefined;
                gridCols?: string | number | undefined;
                gridRows?: string | number | undefined;
                gridTemplateRows?: string | undefined;
                gridTemplateColumns?: string | undefined;
                gridTemplate?: string | undefined;
                gridGap?: string | number | undefined;
                flexDirection?: "row" | "column" | undefined;
                alignItems?: "center" | "start" | "end" | "stretch" | undefined;
                justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
                flexRow?: boolean | undefined;
                flexColumn?: boolean | undefined;
                gap?: string | number | undefined;
                pack?: boolean | undefined;
                packOrderStrategy?: "largest_to_smallest" | undefined;
                packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
                padding?: string | number | undefined;
                paddingLeft?: string | number | undefined;
                paddingRight?: string | number | undefined;
                paddingTop?: string | number | undefined;
                paddingBottom?: string | number | undefined;
                paddingX?: string | number | undefined;
                paddingY?: string | number | undefined;
                width?: string | number | undefined;
                height?: string | number | undefined;
                matchAdapt?: boolean | undefined;
                matchAdaptTemplate?: any;
            } | undefined;
            schLayout?: {
                grid?: boolean | undefined;
                flex?: string | boolean | undefined;
                layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
                position?: "relative" | "absolute" | undefined;
                gridCols?: string | number | undefined;
                gridRows?: string | number | undefined;
                gridTemplateRows?: string | undefined;
                gridTemplateColumns?: string | undefined;
                gridTemplate?: string | undefined;
                gridGap?: string | number | undefined;
                flexDirection?: "row" | "column" | undefined;
                alignItems?: "center" | "start" | "end" | "stretch" | undefined;
                justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
                flexRow?: boolean | undefined;
                flexColumn?: boolean | undefined;
                gap?: string | number | undefined;
                pack?: boolean | undefined;
                packOrderStrategy?: "largest_to_smallest" | undefined;
                packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
                padding?: string | number | undefined;
                paddingLeft?: string | number | undefined;
                paddingRight?: string | number | undefined;
                paddingTop?: string | number | undefined;
                paddingBottom?: string | number | undefined;
                paddingX?: string | number | undefined;
                paddingY?: string | number | undefined;
                width?: string | number | undefined;
                height?: string | number | undefined;
                matchAdapt?: boolean | undefined;
                matchAdaptTemplate?: any;
            } | undefined;
            cellBorder?: {
                strokeWidth?: string | number | undefined;
                dashed?: boolean | undefined;
                solid?: boolean | undefined;
            } | null | undefined;
            border?: {
                strokeWidth?: string | number | undefined;
                dashed?: boolean | undefined;
                solid?: boolean | undefined;
            } | null | undefined;
            schPadding?: string | number | undefined;
            schPaddingLeft?: string | number | undefined;
            schPaddingRight?: string | number | undefined;
            schPaddingTop?: string | number | undefined;
            schPaddingBottom?: string | number | undefined;
            manualEdits?: {
                pcb_placements?: {
                    selector: string;
                    center: {
                        x: string | number;
                        y: string | number;
                    };
                    relative_to?: string | undefined;
                }[] | undefined;
                manual_trace_hints?: {
                    pcb_port_selector: string;
                    offsets: {
                        x: string | number;
                        y: string | number;
                        via?: boolean | undefined;
                        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                        } | undefined;
                        trace_width?: string | number | undefined;
                    }[];
                }[] | undefined;
                schematic_placements?: {
                    selector: string;
                    center: {
                        x: string | number;
                        y: string | number;
                    };
                    relative_to?: string | undefined;
                }[] | undefined;
            } | undefined;
            routingDisabled?: boolean | undefined;
            defaultTraceWidth?: string | number | undefined;
            minTraceWidth?: string | number | undefined;
            pcbRouteCache?: _tscircuit_props.PcbRouteCache | undefined;
            autorouter?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | {
                serverUrl?: string | undefined;
                inputFormat?: "simplified" | "circuit-json" | undefined;
                serverMode?: "job" | "solve-endpoint" | undefined;
                serverCacheEnabled?: boolean | undefined;
                cache?: _tscircuit_props.PcbRouteCache | undefined;
                traceClearance?: string | number | undefined;
                groupMode?: "sequential-trace" | "subcircuit" | undefined;
                algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
                preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
                local?: boolean | undefined;
            } | undefined;
            schAutoLayoutEnabled?: boolean | undefined;
            schTraceAutoLabelEnabled?: boolean | undefined;
            partsEngine?: _tscircuit_props.PartsEngine | undefined;
            square?: boolean | undefined;
            emptyArea?: string | undefined;
            filledArea?: string | undefined;
            outline?: {
                x: string | number;
                y: string | number;
            }[] | undefined;
            outlineOffsetX?: string | number | undefined;
            outlineOffsetY?: string | number | undefined;
            material?: "fr4" | "fr1" | undefined;
            layers?: 2 | 4 | undefined;
        }>;
    };
    get boardThickness(): number;
    /**
     * Get all available layers for the board
     */
    get allLayers(): string[];
    doInitialPcbBoardAutoSize(): void;
    /**
     * Update the board information silkscreen text if platform config is set and
     * the project name, version, or url is set.
     */
    private _addBoardInformationToSilkscreen;
    doInitialPcbComponentRender(): void;
    removePcbComponentRender(): void;
    _computePcbGlobalTransformBeforeLayout(): Matrix;
    doInitialPcbDesignRuleChecks(): void;
    updatePcbDesignRuleChecks(): void;
    _emitRenderLifecycleEvent(phase: RenderPhase, startOrEnd: "start" | "end"): void;
}

declare class Capacitor extends NormalComponent<typeof capacitorProps, PolarizedPassivePorts> {
    get config(): {
        componentName: string;
        schematicSymbolName: string;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            capacitance: zod.ZodEffects<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>, number, string | number>;
            maxVoltageRating: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schShowRatings: zod.ZodDefault<zod.ZodOptional<zod.ZodBoolean>>;
            polarized: zod.ZodDefault<zod.ZodOptional<zod.ZodBoolean>>;
            decouplingFor: zod.ZodOptional<zod.ZodString>;
            decouplingTo: zod.ZodOptional<zod.ZodString>;
            bypassFor: zod.ZodOptional<zod.ZodString>;
            bypassTo: zod.ZodOptional<zod.ZodString>;
            maxDecouplingTraceLength: zod.ZodOptional<zod.ZodNumber>;
            schOrientation: zod.ZodOptional<zod.ZodEnum<["vertical", "horizontal", "pos_top", "pos_bottom", "pos_left", "pos_right", "neg_top", "neg_bottom", "neg_left", "neg_right"]>>;
            connections: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["pin1", "pin2", "pos", "neg", "anode", "cathode"]>, zod.ZodUnion<[zod.ZodUnion<[zod.ZodString, zod.ZodReadonly<zod.ZodArray<zod.ZodString, "many">>]>, zod.ZodArray<zod.ZodString, "many">]>>>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            capacitance: number;
            schShowRatings: boolean;
            polarized: boolean;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            connections?: Partial<Record<"pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
            maxVoltageRating?: number | undefined;
            decouplingFor?: string | undefined;
            decouplingTo?: string | undefined;
            bypassFor?: string | undefined;
            bypassTo?: string | undefined;
            maxDecouplingTraceLength?: number | undefined;
        }, {
            name: string;
            capacitance: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            connections?: Partial<Record<"pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
            schShowRatings?: boolean | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
            maxVoltageRating?: string | number | undefined;
            polarized?: boolean | undefined;
            decouplingFor?: string | undefined;
            decouplingTo?: string | undefined;
            bypassFor?: string | undefined;
            bypassTo?: string | undefined;
            maxDecouplingTraceLength?: number | undefined;
        }>;
        sourceFtype: "simple_capacitor";
    };
    _getSchematicSymbolDisplayValue(): string | undefined;
    doInitialCreateNetsFromProps(): void;
    doInitialCreateTracesFromProps(): void;
    doInitialSourceRender(): void;
}

declare class Chip<PinLabels extends string = never> extends NormalComponent<typeof chipProps, PinLabels> {
    schematicBoxDimensions: SchematicBoxDimensions | null;
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            manufacturerPartNumber: zod.ZodOptional<zod.ZodString>;
            pinLabels: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodUnion<[zod.ZodUnion<[zod.ZodString, zod.ZodReadonly<zod.ZodArray<zod.ZodString, "many">>]>, zod.ZodArray<zod.ZodString, "many">]>>>;
            showPinAliases: zod.ZodOptional<zod.ZodBoolean>;
            pcbPinLabels: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodString>>;
            internallyConnectedPins: zod.ZodOptional<zod.ZodArray<zod.ZodArray<zod.ZodString, "many">, "many">>;
            externallyConnectedPins: zod.ZodOptional<zod.ZodArray<zod.ZodArray<zod.ZodString, "many">, "many">>;
            schPinArrangement: zod.ZodOptional<zod.ZodObject<{
                leftSize: zod.ZodOptional<zod.ZodNumber>;
                topSize: zod.ZodOptional<zod.ZodNumber>;
                rightSize: zod.ZodOptional<zod.ZodNumber>;
                bottomSize: zod.ZodOptional<zod.ZodNumber>;
                leftPinCount: zod.ZodOptional<zod.ZodNumber>;
                rightPinCount: zod.ZodOptional<zod.ZodNumber>;
                topPinCount: zod.ZodOptional<zod.ZodNumber>;
                bottomPinCount: zod.ZodOptional<zod.ZodNumber>;
                leftSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                rightSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                topSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                bottomSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
            }, "strip", zod.ZodTypeAny, {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            }, {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            }>>;
            schPortArrangement: zod.ZodOptional<zod.ZodObject<{
                leftSize: zod.ZodOptional<zod.ZodNumber>;
                topSize: zod.ZodOptional<zod.ZodNumber>;
                rightSize: zod.ZodOptional<zod.ZodNumber>;
                bottomSize: zod.ZodOptional<zod.ZodNumber>;
                leftPinCount: zod.ZodOptional<zod.ZodNumber>;
                rightPinCount: zod.ZodOptional<zod.ZodNumber>;
                topPinCount: zod.ZodOptional<zod.ZodNumber>;
                bottomPinCount: zod.ZodOptional<zod.ZodNumber>;
                leftSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                rightSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                topSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                bottomSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
            }, "strip", zod.ZodTypeAny, {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            }, {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            }>>;
            pinCompatibleVariants: zod.ZodOptional<zod.ZodArray<zod.ZodObject<{
                manufacturerPartNumber: zod.ZodOptional<zod.ZodString>;
                supplierPartNumber: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
            }, "strip", zod.ZodTypeAny, {
                manufacturerPartNumber?: string | undefined;
                supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            }, {
                manufacturerPartNumber?: string | undefined;
                supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            }>, "many">>;
            schPinStyle: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                marginLeft: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                marginRight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                marginTop: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                marginBottom: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                leftMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                rightMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                topMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                bottomMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            }, "strip", zod.ZodTypeAny, {
                marginLeft?: number | undefined;
                marginRight?: number | undefined;
                marginTop?: number | undefined;
                marginBottom?: number | undefined;
                leftMargin?: number | undefined;
                rightMargin?: number | undefined;
                topMargin?: number | undefined;
                bottomMargin?: number | undefined;
            }, {
                marginLeft?: string | number | undefined;
                marginRight?: string | number | undefined;
                marginTop?: string | number | undefined;
                marginBottom?: string | number | undefined;
                leftMargin?: string | number | undefined;
                rightMargin?: string | number | undefined;
                topMargin?: string | number | undefined;
                bottomMargin?: string | number | undefined;
            }>>>;
            schPinSpacing: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schHeight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            noSchematicRepresentation: zod.ZodOptional<zod.ZodBoolean>;
            connections: zod.ZodOptional<zod.ZodPipeline<zod.ZodType<Partial<Record<string, string | string[] | readonly string[]>>, zod.ZodTypeDef, Partial<Record<string, string | string[] | readonly string[]>>>, zod.ZodRecord<zod.ZodString, zod.ZodUnion<[zod.ZodUnion<[zod.ZodString, zod.ZodReadonly<zod.ZodArray<zod.ZodString, "many">>]>, zod.ZodArray<zod.ZodString, "many">]>>>>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            schWidth?: number | undefined;
            schHeight?: number | undefined;
            manufacturerPartNumber?: string | undefined;
            pinLabels?: Record<string, string | readonly string[] | string[]> | undefined;
            showPinAliases?: boolean | undefined;
            pcbPinLabels?: Record<string, string> | undefined;
            internallyConnectedPins?: string[][] | undefined;
            externallyConnectedPins?: string[][] | undefined;
            schPinArrangement?: {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            } | undefined;
            schPortArrangement?: {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            } | undefined;
            pinCompatibleVariants?: {
                manufacturerPartNumber?: string | undefined;
                supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            }[] | undefined;
            schPinStyle?: Record<string, {
                marginLeft?: number | undefined;
                marginRight?: number | undefined;
                marginTop?: number | undefined;
                marginBottom?: number | undefined;
                leftMargin?: number | undefined;
                rightMargin?: number | undefined;
                topMargin?: number | undefined;
                bottomMargin?: number | undefined;
            }> | undefined;
            schPinSpacing?: number | undefined;
            noSchematicRepresentation?: boolean | undefined;
            connections?: Record<string, string | readonly string[] | string[]> | undefined;
        }, {
            name: string;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            schWidth?: string | number | undefined;
            schHeight?: string | number | undefined;
            manufacturerPartNumber?: string | undefined;
            pinLabels?: Record<string, string | readonly string[] | string[]> | undefined;
            showPinAliases?: boolean | undefined;
            pcbPinLabels?: Record<string, string> | undefined;
            internallyConnectedPins?: string[][] | undefined;
            externallyConnectedPins?: string[][] | undefined;
            schPinArrangement?: {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            } | undefined;
            schPortArrangement?: {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            } | undefined;
            pinCompatibleVariants?: {
                manufacturerPartNumber?: string | undefined;
                supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            }[] | undefined;
            schPinStyle?: Record<string, {
                marginLeft?: string | number | undefined;
                marginRight?: string | number | undefined;
                marginTop?: string | number | undefined;
                marginBottom?: string | number | undefined;
                leftMargin?: string | number | undefined;
                rightMargin?: string | number | undefined;
                topMargin?: string | number | undefined;
                bottomMargin?: string | number | undefined;
            }> | undefined;
            schPinSpacing?: string | number | undefined;
            noSchematicRepresentation?: boolean | undefined;
            connections?: Partial<Record<string, string | string[] | readonly string[]>> | undefined;
        }>;
        shouldRenderAsSchematicBox: boolean;
    };
    doInitialSchematicComponentRender(): void;
    doInitialSourceRender(): void;
    doInitialPcbComponentRender(): void;
    doInitialCreateTracesFromProps(): void;
}

declare class Diode extends NormalComponent<typeof diodeProps, PolarizedPassivePorts> {
    get config(): {
        schematicSymbolName: string;
        componentName: string;
        zodProps: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            connections: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["anode", "cathode", "pin1", "pin2", "pos", "neg"]>, zod.ZodUnion<[zod.ZodUnion<[zod.ZodString, zod.ZodReadonly<zod.ZodArray<zod.ZodString, "many">>]>, zod.ZodArray<zod.ZodString, "many">]>>>;
            variant: zod.ZodDefault<zod.ZodOptional<zod.ZodEnum<["standard", "schottky", "zener", "avalanche", "photo", "tvs"]>>>;
            standard: zod.ZodOptional<zod.ZodBoolean>;
            schottky: zod.ZodOptional<zod.ZodBoolean>;
            zener: zod.ZodOptional<zod.ZodBoolean>;
            avalanche: zod.ZodOptional<zod.ZodBoolean>;
            photo: zod.ZodOptional<zod.ZodBoolean>;
            tvs: zod.ZodOptional<zod.ZodBoolean>;
            schOrientation: zod.ZodOptional<zod.ZodEnum<["vertical", "horizontal", "pos_top", "pos_bottom", "pos_left", "pos_right", "neg_top", "neg_bottom", "neg_left", "neg_right"]>>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            variant: "standard" | "schottky" | "zener" | "avalanche" | "photo" | "tvs";
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            connections?: Partial<Record<"pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
            standard?: boolean | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
            schottky?: boolean | undefined;
            zener?: boolean | undefined;
            avalanche?: boolean | undefined;
            photo?: boolean | undefined;
            tvs?: boolean | undefined;
        }, {
            name: string;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            connections?: Partial<Record<"pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
            standard?: boolean | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
            schottky?: boolean | undefined;
            zener?: boolean | undefined;
            avalanche?: boolean | undefined;
            photo?: boolean | undefined;
            tvs?: boolean | undefined;
            variant?: "standard" | "schottky" | "zener" | "avalanche" | "photo" | "tvs" | undefined;
        }>, {
            name: string;
            variant: "standard" | "schottky" | "zener" | "avalanche" | "photo" | "tvs";
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            connections?: Partial<Record<"pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
            standard?: boolean | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
            schottky?: boolean | undefined;
            zener?: boolean | undefined;
            avalanche?: boolean | undefined;
            photo?: boolean | undefined;
            tvs?: boolean | undefined;
        }, {
            name: string;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            connections?: Partial<Record<"pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
            standard?: boolean | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
            schottky?: boolean | undefined;
            zener?: boolean | undefined;
            avalanche?: boolean | undefined;
            photo?: boolean | undefined;
            tvs?: boolean | undefined;
            variant?: "standard" | "schottky" | "zener" | "avalanche" | "photo" | "tvs" | undefined;
        }>, {
            standard: boolean;
            schottky: boolean;
            zener: boolean;
            avalanche: boolean;
            photo: boolean;
            tvs: boolean;
            name: string;
            variant: "standard" | "schottky" | "zener" | "avalanche" | "photo" | "tvs";
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            connections?: Partial<Record<"pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
        }, {
            name: string;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            connections?: Partial<Record<"pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
            standard?: boolean | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
            schottky?: boolean | undefined;
            zener?: boolean | undefined;
            avalanche?: boolean | undefined;
            photo?: boolean | undefined;
            tvs?: boolean | undefined;
            variant?: "standard" | "schottky" | "zener" | "avalanche" | "photo" | "tvs" | undefined;
        }>;
        sourceFtype: Ftype;
    };
    initPorts(): void;
    doInitialSourceRender(): void;
    pos: Port;
    anode: Port;
    neg: Port;
    cathode: Port;
}

declare class Fuse extends NormalComponent<typeof fuseProps, PassivePorts> {
    get config(): {
        componentName: string;
        schematicSymbolName: BaseSymbolName;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            currentRating: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
            voltageRating: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>>;
            schShowRatings: zod.ZodOptional<zod.ZodBoolean>;
            schOrientation: zod.ZodOptional<zod.ZodEnum<["vertical", "horizontal", "pos_top", "pos_bottom", "pos_left", "pos_right", "neg_top", "neg_bottom", "neg_left", "neg_right"]>>;
            connections: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodUnion<[zod.ZodString, zod.ZodReadonly<zod.ZodArray<zod.ZodString, "many">>, zod.ZodArray<zod.ZodString, "many">]>>>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            currentRating: string | number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            connections?: Record<string, string | readonly string[] | string[]> | undefined;
            voltageRating?: string | number | undefined;
            schShowRatings?: boolean | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
        }, {
            name: string;
            currentRating: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            connections?: Record<string, string | readonly string[] | string[]> | undefined;
            voltageRating?: string | number | undefined;
            schShowRatings?: boolean | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
        }>;
        sourceFtype: "simple_fuse";
    };
    _getSchematicSymbolDisplayValue(): string | undefined;
    doInitialSourceRender(): void;
}

declare class Jumper<PinLabels extends string = never> extends NormalComponent<typeof jumperProps, PinLabels> {
    schematicDimensions: SchematicBoxDimensions | null;
    get config(): {
        schematicSymbolName: undefined;
        componentName: string;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            manufacturerPartNumber: zod.ZodOptional<zod.ZodString>;
            pinLabels: zod.ZodOptional<zod.ZodRecord<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, zod.ZodUnion<[zod.ZodString, zod.ZodArray<zod.ZodString, "many">]>>>;
            schPinStyle: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                marginLeft: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                marginRight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                marginTop: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                marginBottom: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                leftMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                rightMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                topMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                bottomMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            }, "strip", zod.ZodTypeAny, {
                marginLeft?: number | undefined;
                marginRight?: number | undefined;
                marginTop?: number | undefined;
                marginBottom?: number | undefined;
                leftMargin?: number | undefined;
                rightMargin?: number | undefined;
                topMargin?: number | undefined;
                bottomMargin?: number | undefined;
            }, {
                marginLeft?: string | number | undefined;
                marginRight?: string | number | undefined;
                marginTop?: string | number | undefined;
                marginBottom?: string | number | undefined;
                leftMargin?: string | number | undefined;
                rightMargin?: string | number | undefined;
                topMargin?: string | number | undefined;
                bottomMargin?: string | number | undefined;
            }>>>;
            schPinSpacing: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schHeight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schDirection: zod.ZodOptional<zod.ZodEnum<["left", "right"]>>;
            schPortArrangement: zod.ZodOptional<zod.ZodObject<{
                leftSize: zod.ZodOptional<zod.ZodNumber>;
                topSize: zod.ZodOptional<zod.ZodNumber>;
                rightSize: zod.ZodOptional<zod.ZodNumber>;
                bottomSize: zod.ZodOptional<zod.ZodNumber>;
                leftPinCount: zod.ZodOptional<zod.ZodNumber>;
                rightPinCount: zod.ZodOptional<zod.ZodNumber>;
                topPinCount: zod.ZodOptional<zod.ZodNumber>;
                bottomPinCount: zod.ZodOptional<zod.ZodNumber>;
                leftSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                rightSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                topSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                bottomSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
            }, "strip", zod.ZodTypeAny, {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            }, {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            }>>;
            pcbPinLabels: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodString>>;
            pinCount: zod.ZodOptional<zod.ZodUnion<[zod.ZodLiteral<2>, zod.ZodLiteral<3>]>>;
            internallyConnectedPins: zod.ZodOptional<zod.ZodArray<zod.ZodArray<zod.ZodString, "many">, "many">>;
            connections: zod.ZodOptional<zod.ZodPipeline<zod.ZodType<Partial<Record<string, string | string[] | readonly string[]>>, zod.ZodTypeDef, Partial<Record<string, string | string[] | readonly string[]>>>, zod.ZodRecord<zod.ZodString, zod.ZodUnion<[zod.ZodUnion<[zod.ZodString, zod.ZodReadonly<zod.ZodArray<zod.ZodString, "many">>]>, zod.ZodArray<zod.ZodString, "many">]>>>>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            schWidth?: number | undefined;
            schHeight?: number | undefined;
            manufacturerPartNumber?: string | undefined;
            pinLabels?: Record<string | number, string | string[]> | undefined;
            pcbPinLabels?: Record<string, string> | undefined;
            internallyConnectedPins?: string[][] | undefined;
            schPortArrangement?: {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            } | undefined;
            schPinStyle?: Record<string, {
                marginLeft?: number | undefined;
                marginRight?: number | undefined;
                marginTop?: number | undefined;
                marginBottom?: number | undefined;
                leftMargin?: number | undefined;
                rightMargin?: number | undefined;
                topMargin?: number | undefined;
                bottomMargin?: number | undefined;
            }> | undefined;
            schPinSpacing?: number | undefined;
            connections?: Record<string, string | readonly string[] | string[]> | undefined;
            schDirection?: "left" | "right" | undefined;
            pinCount?: 2 | 3 | undefined;
        }, {
            name: string;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            schWidth?: string | number | undefined;
            schHeight?: string | number | undefined;
            manufacturerPartNumber?: string | undefined;
            pinLabels?: Record<string | number, string | string[]> | undefined;
            pcbPinLabels?: Record<string, string> | undefined;
            internallyConnectedPins?: string[][] | undefined;
            schPortArrangement?: {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            } | undefined;
            schPinStyle?: Record<string, {
                marginLeft?: string | number | undefined;
                marginRight?: string | number | undefined;
                marginTop?: string | number | undefined;
                marginBottom?: string | number | undefined;
                leftMargin?: string | number | undefined;
                rightMargin?: string | number | undefined;
                topMargin?: string | number | undefined;
                bottomMargin?: string | number | undefined;
            }> | undefined;
            schPinSpacing?: string | number | undefined;
            connections?: Partial<Record<string, string | string[] | readonly string[]>> | undefined;
            schDirection?: "left" | "right" | undefined;
            pinCount?: 2 | 3 | undefined;
        }>;
        shouldRenderAsSchematicBox: boolean;
    };
    _getSchematicPortArrangement(): _tscircuit_props.SchematicPortArrangement;
    doInitialSourceRender(): void;
    doInitialPcbComponentRender(): void;
    doInitialPcbTraceRender(): void;
}

declare class SolderJumper<PinLabels extends string = never> extends NormalComponent<typeof solderjumperProps, PinLabels> {
    schematicDimensions: SchematicBoxDimensions | null;
    _getPinNumberFromBridgedPinName(pinName: string): number | null;
    get defaultInternallyConnectedPinNames(): string[][];
    get config(): {
        schematicSymbolName: string;
        componentName: string;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            manufacturerPartNumber: zod.ZodOptional<zod.ZodString>;
            pinLabels: zod.ZodOptional<zod.ZodRecord<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, zod.ZodUnion<[zod.ZodString, zod.ZodArray<zod.ZodString, "many">]>>>;
            schPinStyle: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                marginLeft: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                marginRight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                marginTop: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                marginBottom: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                leftMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                rightMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                topMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                bottomMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            }, "strip", zod.ZodTypeAny, {
                marginLeft?: number | undefined;
                marginRight?: number | undefined;
                marginTop?: number | undefined;
                marginBottom?: number | undefined;
                leftMargin?: number | undefined;
                rightMargin?: number | undefined;
                topMargin?: number | undefined;
                bottomMargin?: number | undefined;
            }, {
                marginLeft?: string | number | undefined;
                marginRight?: string | number | undefined;
                marginTop?: string | number | undefined;
                marginBottom?: string | number | undefined;
                leftMargin?: string | number | undefined;
                rightMargin?: string | number | undefined;
                topMargin?: string | number | undefined;
                bottomMargin?: string | number | undefined;
            }>>>;
            schPinSpacing: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schHeight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schDirection: zod.ZodOptional<zod.ZodEnum<["left", "right"]>>;
            schPortArrangement: zod.ZodOptional<zod.ZodObject<{
                leftSize: zod.ZodOptional<zod.ZodNumber>;
                topSize: zod.ZodOptional<zod.ZodNumber>;
                rightSize: zod.ZodOptional<zod.ZodNumber>;
                bottomSize: zod.ZodOptional<zod.ZodNumber>;
                leftPinCount: zod.ZodOptional<zod.ZodNumber>;
                rightPinCount: zod.ZodOptional<zod.ZodNumber>;
                topPinCount: zod.ZodOptional<zod.ZodNumber>;
                bottomPinCount: zod.ZodOptional<zod.ZodNumber>;
                leftSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                rightSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                topSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                bottomSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
            }, "strip", zod.ZodTypeAny, {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            }, {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            }>>;
            pcbPinLabels: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodString>>;
            pinCount: zod.ZodOptional<zod.ZodUnion<[zod.ZodLiteral<2>, zod.ZodLiteral<3>]>>;
            internallyConnectedPins: zod.ZodOptional<zod.ZodArray<zod.ZodArray<zod.ZodString, "many">, "many">>;
            connections: zod.ZodOptional<zod.ZodPipeline<zod.ZodType<Partial<Record<string, string | string[] | readonly string[]>>, zod.ZodTypeDef, Partial<Record<string, string | string[] | readonly string[]>>>, zod.ZodRecord<zod.ZodString, zod.ZodUnion<[zod.ZodUnion<[zod.ZodString, zod.ZodReadonly<zod.ZodArray<zod.ZodString, "many">>]>, zod.ZodArray<zod.ZodString, "many">]>>>>;
        } & {
            bridgedPins: zod.ZodOptional<zod.ZodArray<zod.ZodArray<zod.ZodString, "many">, "many">>;
            bridged: zod.ZodOptional<zod.ZodBoolean>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            schWidth?: number | undefined;
            schHeight?: number | undefined;
            manufacturerPartNumber?: string | undefined;
            pinLabels?: Record<string | number, string | string[]> | undefined;
            pcbPinLabels?: Record<string, string> | undefined;
            internallyConnectedPins?: string[][] | undefined;
            schPortArrangement?: {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            } | undefined;
            schPinStyle?: Record<string, {
                marginLeft?: number | undefined;
                marginRight?: number | undefined;
                marginTop?: number | undefined;
                marginBottom?: number | undefined;
                leftMargin?: number | undefined;
                rightMargin?: number | undefined;
                topMargin?: number | undefined;
                bottomMargin?: number | undefined;
            }> | undefined;
            schPinSpacing?: number | undefined;
            connections?: Record<string, string | readonly string[] | string[]> | undefined;
            schDirection?: "left" | "right" | undefined;
            pinCount?: 2 | 3 | undefined;
            bridgedPins?: string[][] | undefined;
            bridged?: boolean | undefined;
        }, {
            name: string;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            schWidth?: string | number | undefined;
            schHeight?: string | number | undefined;
            manufacturerPartNumber?: string | undefined;
            pinLabels?: Record<string | number, string | string[]> | undefined;
            pcbPinLabels?: Record<string, string> | undefined;
            internallyConnectedPins?: string[][] | undefined;
            schPortArrangement?: {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            } | undefined;
            schPinStyle?: Record<string, {
                marginLeft?: string | number | undefined;
                marginRight?: string | number | undefined;
                marginTop?: string | number | undefined;
                marginBottom?: string | number | undefined;
                leftMargin?: string | number | undefined;
                rightMargin?: string | number | undefined;
                topMargin?: string | number | undefined;
                bottomMargin?: string | number | undefined;
            }> | undefined;
            schPinSpacing?: string | number | undefined;
            connections?: Partial<Record<string, string | string[] | readonly string[]>> | undefined;
            schDirection?: "left" | "right" | undefined;
            pinCount?: 2 | 3 | undefined;
            bridgedPins?: string[][] | undefined;
            bridged?: boolean | undefined;
        }>;
        shouldRenderAsSchematicBox: boolean;
    };
    _getSchematicPortArrangement(): _tscircuit_props.SchematicPortArrangement;
    doInitialSourceRender(): void;
    doInitialPcbComponentRender(): void;
    doInitialPcbTraceRender(): void;
}

declare class Led extends NormalComponent<typeof ledProps, PolarizedPassivePorts> {
    get config(): {
        schematicSymbolName: string;
        componentName: string;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            color: zod.ZodOptional<zod.ZodString>;
            wavelength: zod.ZodOptional<zod.ZodString>;
            schDisplayValue: zod.ZodOptional<zod.ZodString>;
            schOrientation: zod.ZodOptional<zod.ZodEnum<["vertical", "horizontal", "pos_top", "pos_bottom", "pos_left", "pos_right", "neg_top", "neg_bottom", "neg_left", "neg_right"]>>;
            connections: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["pin1", "left", "anode", "pos", "pin2", "right", "cathode", "neg"]>, zod.ZodUnion<[zod.ZodUnion<[zod.ZodString, zod.ZodReadonly<zod.ZodArray<zod.ZodString, "many">>]>, zod.ZodArray<zod.ZodString, "many">]>>>;
            laser: zod.ZodOptional<zod.ZodBoolean>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            color?: string | undefined;
            wavelength?: string | undefined;
            connections?: Partial<Record<"left" | "right" | "pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
            schDisplayValue?: string | undefined;
            laser?: boolean | undefined;
        }, {
            name: string;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            color?: string | undefined;
            wavelength?: string | undefined;
            connections?: Partial<Record<"left" | "right" | "pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
            schDisplayValue?: string | undefined;
            laser?: boolean | undefined;
        }>;
        sourceFtype: Ftype;
    };
    initPorts(): void;
    _getSchematicSymbolDisplayValue(): string | undefined;
    doInitialSourceRender(): void;
    pos: Port;
    anode: Port;
    neg: Port;
    cathode: Port;
}

declare class PowerSource extends NormalComponent<typeof powerSourceProps, PolarizedPassivePorts> {
    get config(): {
        schematicSymbolName: string;
        componentName: string;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            voltage: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            voltage: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
        }, {
            name: string;
            voltage: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
        }>;
        sourceFtype: Ftype;
    };
    initPorts(): void;
    doInitialSourceRender(): void;
    pos: Port;
    positive: Port;
    neg: Port;
    negative: Port;
}

declare class Resistor extends NormalComponent<typeof resistorProps, PassivePorts> {
    get config(): {
        componentName: string;
        schematicSymbolName: string;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            resistance: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            pullupFor: zod.ZodOptional<zod.ZodString>;
            pullupTo: zod.ZodOptional<zod.ZodString>;
            pulldownFor: zod.ZodOptional<zod.ZodString>;
            pulldownTo: zod.ZodOptional<zod.ZodString>;
            schOrientation: zod.ZodOptional<zod.ZodEnum<["vertical", "horizontal", "pos_top", "pos_bottom", "pos_left", "pos_right", "neg_top", "neg_bottom", "neg_left", "neg_right"]>>;
            connections: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["pin1", "pin2", "pos", "neg"]>, zod.ZodUnion<[zod.ZodUnion<[zod.ZodString, zod.ZodReadonly<zod.ZodArray<zod.ZodString, "many">>]>, zod.ZodArray<zod.ZodString, "many">]>>>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            resistance: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            connections?: Partial<Record<"pin1" | "pin2" | "pos" | "neg", string | readonly string[] | string[]>> | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
            pullupFor?: string | undefined;
            pullupTo?: string | undefined;
            pulldownFor?: string | undefined;
            pulldownTo?: string | undefined;
        }, {
            name: string;
            resistance: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            connections?: Partial<Record<"pin1" | "pin2" | "pos" | "neg", string | readonly string[] | string[]>> | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
            pullupFor?: string | undefined;
            pullupTo?: string | undefined;
            pulldownFor?: string | undefined;
            pulldownTo?: string | undefined;
        }>;
        sourceFtype: Ftype;
    };
    initPorts(): void;
    _getSchematicSymbolDisplayValue(): string | undefined;
    doInitialCreateNetsFromProps(): void;
    doInitialCreateTracesFromProps(): void;
    doInitialSourceRender(): void;
}

declare const edgeSpecifiers: readonly ["leftedge", "rightedge", "topedge", "bottomedge", "center"];
type EdgeSpecifier = (typeof edgeSpecifiers)[number];
declare class Constraint extends PrimitiveComponent<typeof constraintProps> {
    get config(): {
        componentName: string;
        zodProps: z.ZodUnion<[z.ZodObject<{
            pcb: z.ZodOptional<z.ZodLiteral<true>>;
            xDist: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            left: z.ZodString;
            right: z.ZodString;
            edgeToEdge: z.ZodOptional<z.ZodLiteral<true>>;
            centerToCenter: z.ZodOptional<z.ZodLiteral<true>>;
        }, "strip", z.ZodTypeAny, {
            left: string;
            right: string;
            xDist: number;
            pcb?: true | undefined;
            edgeToEdge?: true | undefined;
            centerToCenter?: true | undefined;
        }, {
            left: string;
            right: string;
            xDist: string | number;
            pcb?: true | undefined;
            edgeToEdge?: true | undefined;
            centerToCenter?: true | undefined;
        }>, z.ZodObject<{
            pcb: z.ZodOptional<z.ZodLiteral<true>>;
            yDist: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            top: z.ZodString;
            bottom: z.ZodString;
            edgeToEdge: z.ZodOptional<z.ZodLiteral<true>>;
            centerToCenter: z.ZodOptional<z.ZodLiteral<true>>;
        }, "strip", z.ZodTypeAny, {
            top: string;
            bottom: string;
            yDist: number;
            pcb?: true | undefined;
            edgeToEdge?: true | undefined;
            centerToCenter?: true | undefined;
        }, {
            top: string;
            bottom: string;
            yDist: string | number;
            pcb?: true | undefined;
            edgeToEdge?: true | undefined;
            centerToCenter?: true | undefined;
        }>, z.ZodObject<{
            pcb: z.ZodOptional<z.ZodLiteral<true>>;
            sameY: z.ZodOptional<z.ZodLiteral<true>>;
            for: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            for: string[];
            pcb?: true | undefined;
            sameY?: true | undefined;
        }, {
            for: string[];
            pcb?: true | undefined;
            sameY?: true | undefined;
        }>, z.ZodObject<{
            pcb: z.ZodOptional<z.ZodLiteral<true>>;
            sameX: z.ZodOptional<z.ZodLiteral<true>>;
            for: z.ZodArray<z.ZodString, "many">;
        }, "strip", z.ZodTypeAny, {
            for: string[];
            pcb?: true | undefined;
            sameX?: true | undefined;
        }, {
            for: string[];
            pcb?: true | undefined;
            sameX?: true | undefined;
        }>]>;
    };
    constructor(props: z.input<typeof constraintProps>);
    _getAllReferencedComponents(): {
        componentsWithSelectors: Array<{
            component: PrimitiveComponent<any>;
            selector: string;
            componentSelector: string;
            edge: EdgeSpecifier | undefined;
        }>;
    };
}

declare class FabricationNotePath extends PrimitiveComponent<typeof fabricationNotePathProps> {
    fabrication_note_path_id: string | null;
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "pcbX" | "pcbY" | "pcbRotation"> & {
            route: zod.ZodArray<zod.ZodObject<{
                x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                via: zod.ZodOptional<zod.ZodBoolean>;
                to_layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                    name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
                }, "strip", zod.ZodTypeAny, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>>;
                trace_width: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            }, "strip", zod.ZodTypeAny, {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }, {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }>, "many">;
            strokeWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            color: zod.ZodOptional<zod.ZodString>;
        }, "strip", zod.ZodTypeAny, {
            route: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            strokeWidth?: number | undefined;
            color?: string | undefined;
        }, {
            route: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            strokeWidth?: string | number | undefined;
            color?: string | undefined;
        }>;
    };
    doInitialPcbPrimitiveRender(): void;
}

declare class FabricationNoteText extends PrimitiveComponent<typeof fabricationNoteTextProps> {
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            text: zod.ZodString;
            anchorAlignment: zod.ZodDefault<zod.ZodEnum<["center", "top_left", "top_right", "bottom_left", "bottom_right"]>>;
            font: zod.ZodOptional<zod.ZodEnum<["tscircuit2024"]>>;
            fontSize: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            color: zod.ZodOptional<zod.ZodString>;
        }, "strip", zod.ZodTypeAny, {
            text: string;
            anchorAlignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right";
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            color?: string | undefined;
            font?: "tscircuit2024" | undefined;
            fontSize?: number | undefined;
        }, {
            text: string;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            color?: string | undefined;
            anchorAlignment?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | undefined;
            font?: "tscircuit2024" | undefined;
            fontSize?: string | number | undefined;
        }>;
    };
    doInitialPcbPrimitiveRender(): void;
}

declare class Footprint extends PrimitiveComponent<typeof footprintProps> {
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<{
            originalLayer: zod.ZodOptional<zod.ZodDefault<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>>;
        }, "strip", zod.ZodTypeAny, {
            originalLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        }, {
            originalLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
        }>;
    };
    /**
     * A footprint is a constrainedlayout, the db elements are adjusted according
     * to any constraints that are defined.
     */
    doInitialPcbFootprintLayout(): void;
}

declare class Subcircuit extends Group {
    constructor(props: z.input<typeof subcircuitProps>);
}

declare class Breakout extends Group<typeof breakoutProps> {
    constructor(props: z.input<typeof breakoutProps>);
    doInitialPcbPrimitiveRender(): void;
}

declare class BreakoutPoint extends PrimitiveComponent<typeof breakoutPointProps> {
    pcb_breakout_point_id: string | null;
    matchedPort: Port | null;
    matchedNet: Net | null;
    isPcbPrimitive: boolean;
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "layer" | "pcbRotation"> & {
            connection: zod.ZodString;
        }, "strip", zod.ZodTypeAny, {
            connection: string;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
        }, {
            connection: string;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
        }>;
    };
    _matchConnection(): void;
    _getSourceTraceIdForPort(port: Port): string | undefined;
    _getSourceNetIdForPort(port: Port): string | undefined;
    doInitialPcbPrimitiveRender(): void;
    _getPcbCircuitJsonBounds(): {
        center: {
            x: number;
            y: number;
        };
        bounds: {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
        width: number;
        height: number;
    };
    _setPositionFromLayout(newCenter: {
        x: number;
        y: number;
    }): void;
    getPcbSize(): {
        width: number;
        height: number;
    };
}

declare class Hole extends PrimitiveComponent<typeof holeProps> {
    pcb_hole_id: string | null;
    isPcbPrimitive: boolean;
    get config(): {
        componentName: string;
        zodProps: zod.ZodEffects<zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "pcbRotation"> & {
            name: zod.ZodOptional<zod.ZodString>;
            diameter: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            radius: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
        }, "strip", zod.ZodTypeAny, {
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            radius?: number | undefined;
            diameter?: number | undefined;
        }, {
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            radius?: string | number | undefined;
            diameter?: string | number | undefined;
        }>, {
            diameter: number;
            radius: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
        }, {
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            radius?: string | number | undefined;
            diameter?: string | number | undefined;
        }>;
    };
    getPcbSize(): {
        width: number;
        height: number;
    };
    doInitialPcbPrimitiveRender(): void;
    _getPcbCircuitJsonBounds(): {
        center: {
            x: number;
            y: number;
        };
        bounds: {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
        width: number;
        height: number;
    };
    _setPositionFromLayout(newCenter: {
        x: number;
        y: number;
    }): void;
}

declare class Keepout extends PrimitiveComponent<typeof pcbKeepoutProps> {
    pcb_keepout_id: string | null;
    isPcbPrimitive: boolean;
    get config(): {
        componentName: string;
        zodProps: zod.ZodUnion<[zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "pcbRotation"> & {
            shape: zod.ZodLiteral<"circle">;
            radius: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
        }, "strip", zod.ZodTypeAny, {
            shape: "circle";
            radius: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
        }, {
            shape: "circle";
            radius: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
        }>, zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            shape: zod.ZodLiteral<"rect">;
            width: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            height: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
        }, "strip", zod.ZodTypeAny, {
            shape: "rect";
            width: number;
            height: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
        }, {
            shape: "rect";
            width: string | number;
            height: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
        }>]>;
    };
    doInitialPcbPrimitiveRender(): void;
}

declare class NetLabel extends PrimitiveComponent<typeof netLabelProps> {
    source_net_label_id?: string;
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<{
            net: zod.ZodOptional<zod.ZodString>;
            connection: zod.ZodOptional<zod.ZodString>;
            connectsTo: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodArray<zod.ZodString, "many">]>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            anchorSide: zod.ZodOptional<zod.ZodEnum<["left", "top", "right", "bottom"]>>;
        }, "strip", zod.ZodTypeAny, {
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            connectsTo?: string | string[] | undefined;
            net?: string | undefined;
            connection?: string | undefined;
            anchorSide?: "left" | "right" | "top" | "bottom" | undefined;
        }, {
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            connectsTo?: string | string[] | undefined;
            net?: string | undefined;
            connection?: string | undefined;
            anchorSide?: "left" | "right" | "top" | "bottom" | undefined;
        }>;
    };
    _getAnchorSide(): "top" | "bottom" | "left" | "right";
    _getConnectedPorts(): Port[];
    computeSchematicPropsTransform(): Matrix;
    doInitialSchematicPrimitiveRender(): void;
    _resolveConnectsTo(): string[] | undefined;
    _getNetName(): string;
    doInitialCreateNetsFromProps(): void;
    doInitialCreateTracesFromNetLabels(): void;
}

declare class PlatedHole extends PrimitiveComponent<typeof platedHoleProps> {
    pcb_plated_hole_id: string | null;
    matchedPort: Port | null;
    isPcbPrimitive: boolean;
    get config(): {
        componentName: string;
        zodProps: zod.ZodEffects<zod.ZodDiscriminatedUnion<"shape", [zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "layer" | "pcbRotation"> & {
            name: zod.ZodOptional<zod.ZodString>;
            connectsTo: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodArray<zod.ZodString, "many">]>>;
            shape: zod.ZodLiteral<"circle">;
            holeDiameter: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            outerDiameter: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            portHints: zod.ZodOptional<zod.ZodArray<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, "many">>;
        }, "strip", zod.ZodTypeAny, {
            shape: "circle";
            holeDiameter: number;
            outerDiameter: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
        }, {
            shape: "circle";
            holeDiameter: string | number;
            outerDiameter: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
        }>, zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "layer" | "pcbRotation"> & {
            name: zod.ZodOptional<zod.ZodString>;
            connectsTo: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodArray<zod.ZodString, "many">]>>;
            shape: zod.ZodLiteral<"oval">;
            outerWidth: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            outerHeight: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            holeWidth: zod.ZodEffects<zod.ZodType<string | number, zod.ZodTypeDef, string | number>, number | undefined, string | number>;
            holeHeight: zod.ZodEffects<zod.ZodType<string | number, zod.ZodTypeDef, string | number>, number | undefined, string | number>;
            innerWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            innerHeight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            portHints: zod.ZodOptional<zod.ZodArray<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, "many">>;
        }, "strip", zod.ZodTypeAny, {
            shape: "oval";
            outerWidth: number;
            outerHeight: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
            holeWidth?: number | undefined;
            holeHeight?: number | undefined;
            innerWidth?: number | undefined;
            innerHeight?: number | undefined;
        }, {
            shape: "oval";
            outerWidth: string | number;
            outerHeight: string | number;
            holeWidth: string | number;
            holeHeight: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
            innerWidth?: string | number | undefined;
            innerHeight?: string | number | undefined;
        }>, zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "layer" | "pcbRotation"> & {
            name: zod.ZodOptional<zod.ZodString>;
            connectsTo: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodArray<zod.ZodString, "many">]>>;
            shape: zod.ZodLiteral<"pill">;
            outerWidth: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            outerHeight: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            holeWidth: zod.ZodEffects<zod.ZodType<string | number, zod.ZodTypeDef, string | number>, number | undefined, string | number>;
            holeHeight: zod.ZodEffects<zod.ZodType<string | number, zod.ZodTypeDef, string | number>, number | undefined, string | number>;
            innerWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            innerHeight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            portHints: zod.ZodOptional<zod.ZodArray<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, "many">>;
        }, "strip", zod.ZodTypeAny, {
            shape: "pill";
            outerWidth: number;
            outerHeight: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
            holeWidth?: number | undefined;
            holeHeight?: number | undefined;
            innerWidth?: number | undefined;
            innerHeight?: number | undefined;
        }, {
            shape: "pill";
            outerWidth: string | number;
            outerHeight: string | number;
            holeWidth: string | number;
            holeHeight: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
            innerWidth?: string | number | undefined;
            innerHeight?: string | number | undefined;
        }>, zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "layer" | "pcbRotation"> & {
            name: zod.ZodOptional<zod.ZodString>;
            connectsTo: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodArray<zod.ZodString, "many">]>>;
            shape: zod.ZodLiteral<"circular_hole_with_rect_pad">;
            holeDiameter: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            rectPadWidth: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            rectPadHeight: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            holeShape: zod.ZodOptional<zod.ZodLiteral<"circle">>;
            padShape: zod.ZodOptional<zod.ZodLiteral<"rect">>;
            portHints: zod.ZodOptional<zod.ZodArray<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, "many">>;
        }, "strip", zod.ZodTypeAny, {
            shape: "circular_hole_with_rect_pad";
            holeDiameter: number;
            rectPadWidth: number;
            rectPadHeight: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
            holeShape?: "circle" | undefined;
            padShape?: "rect" | undefined;
        }, {
            shape: "circular_hole_with_rect_pad";
            holeDiameter: string | number;
            rectPadWidth: string | number;
            rectPadHeight: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
            holeShape?: "circle" | undefined;
            padShape?: "rect" | undefined;
        }>, zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "layer" | "pcbRotation"> & {
            name: zod.ZodOptional<zod.ZodString>;
            connectsTo: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodArray<zod.ZodString, "many">]>>;
            shape: zod.ZodLiteral<"pill_hole_with_rect_pad">;
            holeShape: zod.ZodLiteral<"pill">;
            padShape: zod.ZodLiteral<"rect">;
            holeWidth: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            holeHeight: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            rectPadWidth: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            rectPadHeight: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            portHints: zod.ZodOptional<zod.ZodArray<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, "many">>;
        }, "strip", zod.ZodTypeAny, {
            shape: "pill_hole_with_rect_pad";
            holeWidth: number;
            holeHeight: number;
            rectPadWidth: number;
            rectPadHeight: number;
            holeShape: "pill";
            padShape: "rect";
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
        }, {
            shape: "pill_hole_with_rect_pad";
            holeWidth: string | number;
            holeHeight: string | number;
            rectPadWidth: string | number;
            rectPadHeight: string | number;
            holeShape: "pill";
            padShape: "rect";
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
        }>]>, {
            shape: "circle";
            holeDiameter: number;
            outerDiameter: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
        } | {
            shape: "oval";
            outerWidth: number;
            outerHeight: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
            holeWidth?: number | undefined;
            holeHeight?: number | undefined;
            innerWidth?: number | undefined;
            innerHeight?: number | undefined;
        } | {
            shape: "pill";
            outerWidth: number;
            outerHeight: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
            holeWidth?: number | undefined;
            holeHeight?: number | undefined;
            innerWidth?: number | undefined;
            innerHeight?: number | undefined;
        } | {
            shape: "circular_hole_with_rect_pad";
            holeDiameter: number;
            rectPadWidth: number;
            rectPadHeight: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
            holeShape?: "circle" | undefined;
            padShape?: "rect" | undefined;
        } | {
            shape: "pill_hole_with_rect_pad";
            holeWidth: number;
            holeHeight: number;
            rectPadWidth: number;
            rectPadHeight: number;
            holeShape: "pill";
            padShape: "rect";
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
        }, {
            shape: "circle";
            holeDiameter: string | number;
            outerDiameter: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
        } | {
            shape: "oval";
            outerWidth: string | number;
            outerHeight: string | number;
            holeWidth: string | number;
            holeHeight: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
            innerWidth?: string | number | undefined;
            innerHeight?: string | number | undefined;
        } | {
            shape: "pill";
            outerWidth: string | number;
            outerHeight: string | number;
            holeWidth: string | number;
            holeHeight: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
            innerWidth?: string | number | undefined;
            innerHeight?: string | number | undefined;
        } | {
            shape: "circular_hole_with_rect_pad";
            holeDiameter: string | number;
            rectPadWidth: string | number;
            rectPadHeight: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
            holeShape?: "circle" | undefined;
            padShape?: "rect" | undefined;
        } | {
            shape: "pill_hole_with_rect_pad";
            holeWidth: string | number;
            holeHeight: string | number;
            rectPadWidth: string | number;
            rectPadHeight: string | number;
            holeShape: "pill";
            padShape: "rect";
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
            portHints?: (string | number)[] | undefined;
        }>;
    };
    getAvailablePcbLayers(): string[];
    getPcbSize(): {
        width: number;
        height: number;
    };
    _getPcbCircuitJsonBounds(): {
        center: {
            x: number;
            y: number;
        };
        bounds: {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
        width: number;
        height: number;
    };
    _setPositionFromLayout(newCenter: {
        x: number;
        y: number;
    }): void;
    doInitialPortMatching(): void;
    doInitialPcbPrimitiveRender(): void;
    doInitialPcbPortAttachment(): void;
}

declare class SilkscreenCircle extends PrimitiveComponent<typeof silkscreenCircleProps> {
    pcb_silkscreen_circle_id: string | null;
    isPcbPrimitive: boolean;
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "pcbRotation"> & {
            isFilled: zod.ZodOptional<zod.ZodBoolean>;
            isOutline: zod.ZodOptional<zod.ZodBoolean>;
            strokeWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            radius: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
        }, "strip", zod.ZodTypeAny, {
            radius: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            strokeWidth?: number | undefined;
            isFilled?: boolean | undefined;
            isOutline?: boolean | undefined;
        }, {
            radius: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            strokeWidth?: string | number | undefined;
            isFilled?: boolean | undefined;
            isOutline?: boolean | undefined;
        }>;
    };
    doInitialPcbPrimitiveRender(): void;
    getPcbSize(): {
        width: number;
        height: number;
    };
}

declare class SilkscreenPath extends PrimitiveComponent<typeof silkscreenPathProps> {
    pcb_silkscreen_path_id: string | null;
    isPcbPrimitive: boolean;
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "pcbX" | "pcbY" | "pcbRotation"> & {
            route: zod.ZodArray<zod.ZodObject<{
                x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                via: zod.ZodOptional<zod.ZodBoolean>;
                to_layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                    name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
                }, "strip", zod.ZodTypeAny, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>>;
                trace_width: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            }, "strip", zod.ZodTypeAny, {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }, {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }>, "many">;
            strokeWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
        }, "strip", zod.ZodTypeAny, {
            route: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            strokeWidth?: number | undefined;
        }, {
            route: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            strokeWidth?: string | number | undefined;
        }>;
    };
    doInitialPcbPrimitiveRender(): void;
    getPcbSize(): {
        width: number;
        height: number;
    };
}

declare class SilkscreenRect extends PrimitiveComponent<typeof silkscreenRectProps> {
    pcb_silkscreen_rect_id: string | null;
    isPcbPrimitive: boolean;
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "pcbRotation"> & {
            filled: zod.ZodOptional<zod.ZodDefault<zod.ZodBoolean>>;
            stroke: zod.ZodOptional<zod.ZodEnum<["dashed", "solid", "none"]>>;
            strokeWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            width: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            height: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
        }, "strip", zod.ZodTypeAny, {
            width: number;
            height: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            strokeWidth?: number | undefined;
            filled?: boolean | undefined;
            stroke?: "none" | "dashed" | "solid" | undefined;
        }, {
            width: string | number;
            height: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            strokeWidth?: string | number | undefined;
            filled?: boolean | undefined;
            stroke?: "none" | "dashed" | "solid" | undefined;
        }>;
    };
    doInitialPcbPrimitiveRender(): void;
    getPcbSize(): {
        width: number;
        height: number;
    };
}

declare class SilkscreenText extends PrimitiveComponent<typeof silkscreenTextProps> {
    isPcbPrimitive: boolean;
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            text: zod.ZodString;
            anchorAlignment: zod.ZodDefault<zod.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>>;
            font: zod.ZodOptional<zod.ZodEnum<["tscircuit2024"]>>;
            fontSize: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
        }, "strip", zod.ZodTypeAny, {
            text: string;
            anchorAlignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center";
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            font?: "tscircuit2024" | undefined;
            fontSize?: number | undefined;
        }, {
            text: string;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            anchorAlignment?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center" | undefined;
            font?: "tscircuit2024" | undefined;
            fontSize?: string | number | undefined;
        }>;
    };
    doInitialPcbPrimitiveRender(): void;
    getPcbSize(): {
        width: number;
        height: number;
    };
}

declare class SilkscreenLine extends PrimitiveComponent<typeof silkscreenLineProps> {
    pcb_silkscreen_line_id: string | null;
    isPcbPrimitive: boolean;
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "pcbX" | "pcbY" | "pcbRotation"> & {
            strokeWidth: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            x1: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            y1: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            x2: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            y2: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
        }, "strip", zod.ZodTypeAny, {
            strokeWidth: number;
            x1: number;
            y1: number;
            x2: number;
            y2: number;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
        }, {
            strokeWidth: string | number;
            x1: string | number;
            y1: string | number;
            x2: string | number;
            y2: string | number;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
        }>;
    };
    doInitialPcbPrimitiveRender(): void;
    getPcbSize(): {
        width: number;
        height: number;
    };
}

declare class SmtPad extends PrimitiveComponent<typeof smtPadProps> {
    pcb_smtpad_id: string | null;
    matchedPort: Port | null;
    isPcbPrimitive: boolean;
    get config(): {
        componentName: string;
        zodProps: zod.ZodDiscriminatedUnion<"shape", [zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "pcbRotation"> & {
            name: zod.ZodOptional<zod.ZodString>;
            shape: zod.ZodLiteral<"circle">;
            radius: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            portHints: zod.ZodOptional<zod.ZodArray<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, "many">>;
        }, "strip", zod.ZodTypeAny, {
            shape: "circle";
            radius: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            portHints?: (string | number)[] | undefined;
        }, {
            shape: "circle";
            radius: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            portHints?: (string | number)[] | undefined;
        }>, zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "pcbRotation"> & {
            name: zod.ZodOptional<zod.ZodString>;
            shape: zod.ZodLiteral<"rect">;
            width: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            height: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            portHints: zod.ZodOptional<zod.ZodArray<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, "many">>;
        }, "strip", zod.ZodTypeAny, {
            shape: "rect";
            width: number;
            height: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            portHints?: (string | number)[] | undefined;
        }, {
            shape: "rect";
            width: string | number;
            height: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            portHints?: (string | number)[] | undefined;
        }>, zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "pcbRotation"> & {
            name: zod.ZodOptional<zod.ZodString>;
            shape: zod.ZodLiteral<"rotated_rect">;
            width: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            height: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            ccwRotation: zod.ZodNumber;
            portHints: zod.ZodOptional<zod.ZodArray<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, "many">>;
        }, "strip", zod.ZodTypeAny, {
            shape: "rotated_rect";
            width: number;
            height: number;
            ccwRotation: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            portHints?: (string | number)[] | undefined;
        }, {
            shape: "rotated_rect";
            width: string | number;
            height: string | number;
            ccwRotation: number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            portHints?: (string | number)[] | undefined;
        }>, zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "pcbRotation"> & {
            name: zod.ZodOptional<zod.ZodString>;
            shape: zod.ZodLiteral<"pill">;
            width: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            height: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            radius: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            portHints: zod.ZodOptional<zod.ZodArray<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, "many">>;
        }, "strip", zod.ZodTypeAny, {
            shape: "pill";
            width: number;
            height: number;
            radius: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            portHints?: (string | number)[] | undefined;
        }, {
            shape: "pill";
            width: string | number;
            height: string | number;
            radius: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            portHints?: (string | number)[] | undefined;
        }>, zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "pcbRotation"> & {
            name: zod.ZodOptional<zod.ZodString>;
            shape: zod.ZodLiteral<"polygon">;
            points: zod.ZodArray<zod.ZodObject<{
                x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            }, "strip", zod.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>, "many">;
            portHints: zod.ZodOptional<zod.ZodArray<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, "many">>;
        }, "strip", zod.ZodTypeAny, {
            shape: "polygon";
            points: {
                x: number;
                y: number;
            }[];
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            portHints?: (string | number)[] | undefined;
        }, {
            shape: "polygon";
            points: {
                x: string | number;
                y: string | number;
            }[];
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
            portHints?: (string | number)[] | undefined;
        }>]>;
    };
    getPcbSize(): {
        width: number;
        height: number;
    };
    doInitialPortMatching(): void;
    doInitialPcbPrimitiveRender(): void;
    doInitialPcbPortAttachment(): void;
    _getPcbCircuitJsonBounds(): {
        center: {
            x: number;
            y: number;
        };
        bounds: {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
        width: number;
        height: number;
    };
    _setPositionFromLayout(newCenter: {
        x: number;
        y: number;
    }): void;
}

declare const pcbTraceProps: z.ZodObject<{
    route: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        route_type: z.ZodLiteral<"wire">;
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        start_pcb_port_id: z.ZodOptional<z.ZodString>;
        end_pcb_port_id: z.ZodOptional<z.ZodString>;
        layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        width: number;
        layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    }, {
        x: string | number;
        y: string | number;
        width: string | number;
        layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        };
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    }>, z.ZodObject<{
        route_type: z.ZodLiteral<"via">;
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        hole_diameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        outer_diameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        from_layer: z.ZodString;
        to_layer: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
        hole_diameter?: number | undefined;
        outer_diameter?: number | undefined;
    }, {
        x: string | number;
        y: string | number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
        hole_diameter?: string | number | undefined;
        outer_diameter?: string | number | undefined;
    }>]>, "many">;
    source_trace_id: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    route: ({
        x: number;
        y: number;
        width: number;
        layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    } | {
        x: number;
        y: number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
        hole_diameter?: number | undefined;
        outer_diameter?: number | undefined;
    })[];
    source_trace_id?: string | undefined;
}, {
    route: ({
        x: string | number;
        y: string | number;
        width: string | number;
        layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        };
        route_type: "wire";
        start_pcb_port_id?: string | undefined;
        end_pcb_port_id?: string | undefined;
    } | {
        x: string | number;
        y: string | number;
        to_layer: string;
        route_type: "via";
        from_layer: string;
        hole_diameter?: string | number | undefined;
        outer_diameter?: string | number | undefined;
    })[];
    source_trace_id?: string | undefined;
}>;
declare class PcbTrace extends PrimitiveComponent<typeof pcbTraceProps> {
    pcb_trace_id: string | null;
    isPcbPrimitive: boolean;
    get config(): {
        componentName: string;
        zodProps: z.ZodObject<{
            route: z.ZodArray<z.ZodUnion<[z.ZodObject<{
                route_type: z.ZodLiteral<"wire">;
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                start_pcb_port_id: z.ZodOptional<z.ZodString>;
                end_pcb_port_id: z.ZodOptional<z.ZodString>;
                layer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
                    name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
                }, "strip", z.ZodTypeAny, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                width: number;
                layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                route_type: "wire";
                start_pcb_port_id?: string | undefined;
                end_pcb_port_id?: string | undefined;
            }, {
                x: string | number;
                y: string | number;
                width: string | number;
                layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                };
                route_type: "wire";
                start_pcb_port_id?: string | undefined;
                end_pcb_port_id?: string | undefined;
            }>, z.ZodObject<{
                route_type: z.ZodLiteral<"via">;
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                hole_diameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
                outer_diameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
                from_layer: z.ZodString;
                to_layer: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                to_layer: string;
                route_type: "via";
                from_layer: string;
                hole_diameter?: number | undefined;
                outer_diameter?: number | undefined;
            }, {
                x: string | number;
                y: string | number;
                to_layer: string;
                route_type: "via";
                from_layer: string;
                hole_diameter?: string | number | undefined;
                outer_diameter?: string | number | undefined;
            }>]>, "many">;
            source_trace_id: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            route: ({
                x: number;
                y: number;
                width: number;
                layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                route_type: "wire";
                start_pcb_port_id?: string | undefined;
                end_pcb_port_id?: string | undefined;
            } | {
                x: number;
                y: number;
                to_layer: string;
                route_type: "via";
                from_layer: string;
                hole_diameter?: number | undefined;
                outer_diameter?: number | undefined;
            })[];
            source_trace_id?: string | undefined;
        }, {
            route: ({
                x: string | number;
                y: string | number;
                width: string | number;
                layer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                };
                route_type: "wire";
                start_pcb_port_id?: string | undefined;
                end_pcb_port_id?: string | undefined;
            } | {
                x: string | number;
                y: string | number;
                to_layer: string;
                route_type: "via";
                from_layer: string;
                hole_diameter?: string | number | undefined;
                outer_diameter?: string | number | undefined;
            })[];
            source_trace_id?: string | undefined;
        }>;
    };
    doInitialPcbPrimitiveRender(): void;
    getPcbSize(): {
        width: number;
        height: number;
    };
}

declare class TraceHint extends PrimitiveComponent<typeof traceHintProps> {
    matchedPort: Port | null;
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<{
            for: zod.ZodOptional<zod.ZodString>;
            order: zod.ZodOptional<zod.ZodNumber>;
            offset: zod.ZodOptional<zod.ZodUnion<[zod.ZodObject<{
                x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                via: zod.ZodOptional<zod.ZodBoolean>;
                to_layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                    name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
                }, "strip", zod.ZodTypeAny, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>>;
                trace_width: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            }, "strip", zod.ZodTypeAny, {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }, {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }>, zod.ZodObject<{
                x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                via: zod.ZodOptional<zod.ZodBoolean>;
                toLayer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                    name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
                }, "strip", zod.ZodTypeAny, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>>;
            }, "strip", zod.ZodTypeAny, {
                x: number;
                y: number;
                via?: boolean | undefined;
                toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            }, {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
            }>]>>;
            offsets: zod.ZodOptional<zod.ZodUnion<[zod.ZodArray<zod.ZodObject<{
                x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                via: zod.ZodOptional<zod.ZodBoolean>;
                to_layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                    name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
                }, "strip", zod.ZodTypeAny, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>>;
                trace_width: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            }, "strip", zod.ZodTypeAny, {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }, {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }>, "many">, zod.ZodArray<zod.ZodObject<{
                x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                via: zod.ZodOptional<zod.ZodBoolean>;
                toLayer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                    name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
                }, "strip", zod.ZodTypeAny, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>>;
            }, "strip", zod.ZodTypeAny, {
                x: number;
                y: number;
                via?: boolean | undefined;
                toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            }, {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
            }>, "many">]>>;
            traceWidth: zod.ZodOptional<zod.ZodNumber>;
        }, "strip", zod.ZodTypeAny, {
            offsets?: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[] | {
                x: number;
                y: number;
                via?: boolean | undefined;
                toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            }[] | undefined;
            for?: string | undefined;
            order?: number | undefined;
            offset?: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            } | {
                x: number;
                y: number;
                via?: boolean | undefined;
                toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            } | undefined;
            traceWidth?: number | undefined;
        }, {
            offsets?: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[] | {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
            }[] | undefined;
            for?: string | undefined;
            order?: number | undefined;
            offset?: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            } | {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
            } | undefined;
            traceWidth?: number | undefined;
        }>;
    };
    doInitialPortMatching(): void;
    getPcbRouteHints(): Array<RouteHintPoint>;
    doInitialPcbTraceHintRender(): void;
}

declare class Via extends PrimitiveComponent<typeof viaProps> {
    pcb_via_id: string | null;
    matchedPort: Port | null;
    isPcbPrimitive: boolean;
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            name: zod.ZodOptional<zod.ZodString>;
            fromLayer: zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>;
            toLayer: zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>;
            holeDiameter: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            outerDiameter: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            connectsTo: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodArray<zod.ZodString, "many">]>>;
        }, "strip", zod.ZodTypeAny, {
            holeDiameter: number;
            outerDiameter: number;
            fromLayer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            toLayer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
        }, {
            holeDiameter: string | number;
            outerDiameter: string | number;
            fromLayer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            };
            toLayer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            };
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            name?: string | undefined;
            connectsTo?: string | string[] | undefined;
        }>;
    };
    getAvailablePcbLayers(): string[];
    getPcbSize(): {
        width: number;
        height: number;
    };
    _getPcbCircuitJsonBounds(): {
        center: {
            x: number;
            y: number;
        };
        bounds: {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
        width: number;
        height: number;
    };
    _setPositionFromLayout(newCenter: {
        x: number;
        y: number;
    }): void;
    doInitialPcbPrimitiveRender(): void;
}

declare class Cutout extends PrimitiveComponent<typeof cutoutProps> {
    pcb_cutout_id: string | null;
    isPcbPrimitive: boolean;
    get config(): {
        componentName: string;
        zodProps: zod.ZodDiscriminatedUnion<"shape", [zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "layer" | "pcbRotation"> & {
            name: zod.ZodOptional<zod.ZodString>;
            shape: zod.ZodLiteral<"rect">;
            width: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            height: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
        }, "strip", zod.ZodTypeAny, {
            shape: "rect";
            width: number;
            height: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
        }, {
            shape: "rect";
            width: string | number;
            height: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
        }>, zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "layer" | "pcbRotation"> & {
            name: zod.ZodOptional<zod.ZodString>;
            shape: zod.ZodLiteral<"circle">;
            radius: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
        }, "strip", zod.ZodTypeAny, {
            shape: "circle";
            radius: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
        }, {
            shape: "circle";
            radius: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
        }>, zod.ZodObject<Omit<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
        }, "layer" | "pcbRotation"> & {
            name: zod.ZodOptional<zod.ZodString>;
            shape: zod.ZodLiteral<"polygon">;
            points: zod.ZodArray<zod.ZodObject<{
                x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            }, "strip", zod.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>, "many">;
        }, "strip", zod.ZodTypeAny, {
            shape: "polygon";
            points: {
                x: number;
                y: number;
            }[];
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
        }, {
            shape: "polygon";
            points: {
                x: string | number;
                y: string | number;
            }[];
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            name?: string | undefined;
        }>]>;
    };
    doInitialPcbPrimitiveRender(): void;
    getPcbSize(): {
        width: number;
        height: number;
    };
    _getPcbCircuitJsonBounds(): {
        center: {
            x: number;
            y: number;
        };
        bounds: {
            left: number;
            top: number;
            right: number;
            bottom: number;
        };
        width: number;
        height: number;
    };
    _setPositionFromLayout(newCenter: {
        x: number;
        y: number;
    }): void;
}

declare class Battery extends NormalComponent<typeof batteryProps, PassivePorts> {
    get config(): {
        componentName: string;
        schematicSymbolName: BaseSymbolName;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            capacity: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, number, string | number>>;
            schOrientation: zod.ZodOptional<zod.ZodEnum<["vertical", "horizontal", "pos_top", "pos_bottom", "pos_left", "pos_right", "neg_top", "neg_bottom", "neg_left", "neg_right"]>>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            capacity?: number | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
        }, {
            name: string;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            capacity?: string | number | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
        }>;
        sourceFtype: Ftype;
    };
    initPorts(): void;
    doInitialSourceRender(): void;
}

declare class PinHeader extends NormalComponent<typeof pinHeaderProps> {
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            pinCount: zod.ZodNumber;
            pitch: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schFacingDirection: zod.ZodOptional<zod.ZodEnum<["up", "down", "left", "right"]>>;
            gender: zod.ZodDefault<zod.ZodOptional<zod.ZodEnum<["male", "female"]>>>;
            showSilkscreenPinLabels: zod.ZodOptional<zod.ZodBoolean>;
            pcbPinLabels: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodString>>;
            doubleRow: zod.ZodOptional<zod.ZodBoolean>;
            holeDiameter: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            platedDiameter: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pinLabels: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            connections: zod.ZodOptional<zod.ZodPipeline<zod.ZodType<Partial<Record<string, string | string[] | readonly string[]>>, zod.ZodTypeDef, Partial<Record<string, string | string[] | readonly string[]>>>, zod.ZodRecord<zod.ZodString, zod.ZodUnion<[zod.ZodUnion<[zod.ZodString, zod.ZodReadonly<zod.ZodArray<zod.ZodString, "many">>]>, zod.ZodArray<zod.ZodString, "many">]>>>>;
            facingDirection: zod.ZodOptional<zod.ZodEnum<["left", "right"]>>;
            schPinArrangement: zod.ZodOptional<zod.ZodObject<{
                leftSize: zod.ZodOptional<zod.ZodNumber>;
                topSize: zod.ZodOptional<zod.ZodNumber>;
                rightSize: zod.ZodOptional<zod.ZodNumber>;
                bottomSize: zod.ZodOptional<zod.ZodNumber>;
                leftPinCount: zod.ZodOptional<zod.ZodNumber>;
                rightPinCount: zod.ZodOptional<zod.ZodNumber>;
                topPinCount: zod.ZodOptional<zod.ZodNumber>;
                bottomPinCount: zod.ZodOptional<zod.ZodNumber>;
                leftSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                rightSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                topSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                bottomSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
            }, "strip", zod.ZodTypeAny, {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            }, {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            }>>;
            schPinStyle: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                marginLeft: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                marginRight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                marginTop: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                marginBottom: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                leftMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                rightMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                topMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                bottomMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            }, "strip", zod.ZodTypeAny, {
                marginLeft?: number | undefined;
                marginRight?: number | undefined;
                marginTop?: number | undefined;
                marginBottom?: number | undefined;
                leftMargin?: number | undefined;
                rightMargin?: number | undefined;
                topMargin?: number | undefined;
                bottomMargin?: number | undefined;
            }, {
                marginLeft?: string | number | undefined;
                marginRight?: string | number | undefined;
                marginTop?: string | number | undefined;
                marginBottom?: string | number | undefined;
                leftMargin?: string | number | undefined;
                rightMargin?: string | number | undefined;
                topMargin?: string | number | undefined;
                bottomMargin?: string | number | undefined;
            }>>>;
            schPinSpacing: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schHeight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            gender: "male" | "female";
            pinCount: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            schWidth?: number | undefined;
            schHeight?: number | undefined;
            pinLabels?: string[] | undefined;
            pcbPinLabels?: Record<string, string> | undefined;
            schPinArrangement?: {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            } | undefined;
            schPinStyle?: Record<string, {
                marginLeft?: number | undefined;
                marginRight?: number | undefined;
                marginTop?: number | undefined;
                marginBottom?: number | undefined;
                leftMargin?: number | undefined;
                rightMargin?: number | undefined;
                topMargin?: number | undefined;
                bottomMargin?: number | undefined;
            }> | undefined;
            schPinSpacing?: number | undefined;
            connections?: Record<string, string | readonly string[] | string[]> | undefined;
            holeDiameter?: number | undefined;
            pitch?: number | undefined;
            schFacingDirection?: "up" | "down" | "left" | "right" | undefined;
            showSilkscreenPinLabels?: boolean | undefined;
            doubleRow?: boolean | undefined;
            platedDiameter?: number | undefined;
            facingDirection?: "left" | "right" | undefined;
        }, {
            name: string;
            pinCount: number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            schWidth?: string | number | undefined;
            schHeight?: string | number | undefined;
            gender?: "male" | "female" | undefined;
            pinLabels?: string[] | undefined;
            pcbPinLabels?: Record<string, string> | undefined;
            schPinArrangement?: {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            } | undefined;
            schPinStyle?: Record<string, {
                marginLeft?: string | number | undefined;
                marginRight?: string | number | undefined;
                marginTop?: string | number | undefined;
                marginBottom?: string | number | undefined;
                leftMargin?: string | number | undefined;
                rightMargin?: string | number | undefined;
                topMargin?: string | number | undefined;
                bottomMargin?: string | number | undefined;
            }> | undefined;
            schPinSpacing?: string | number | undefined;
            connections?: Partial<Record<string, string | string[] | readonly string[]>> | undefined;
            holeDiameter?: string | number | undefined;
            pitch?: string | number | undefined;
            schFacingDirection?: "up" | "down" | "left" | "right" | undefined;
            showSilkscreenPinLabels?: boolean | undefined;
            doubleRow?: boolean | undefined;
            platedDiameter?: string | number | undefined;
            facingDirection?: "left" | "right" | undefined;
        }>;
        shouldRenderAsSchematicBox: boolean;
    };
    _getImpliedFootprintString(): string | null;
    initPorts(): void;
    _getSchematicPortArrangement(): SchematicPortArrangement | null;
    doInitialSourceRender(): void;
}

declare class Resonator extends NormalComponent<typeof resonatorProps> {
    get config(): {
        componentName: string;
        schematicSymbolName: string;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            frequency: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            loadCapacitance: zod.ZodEffects<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>, number, string | number>;
            pinVariant: zod.ZodOptional<zod.ZodEnum<["no_ground", "ground_pin", "two_ground_pins"]>>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            frequency: number;
            loadCapacitance: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            pinVariant?: "no_ground" | "ground_pin" | "two_ground_pins" | undefined;
        }, {
            name: string;
            frequency: string | number;
            loadCapacitance: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            pinVariant?: "no_ground" | "ground_pin" | "two_ground_pins" | undefined;
        }>;
        shouldRenderAsSchematicBox: boolean;
    };
    doInitialSourceRender(): void;
}

declare class Inductor extends NormalComponent<typeof inductorProps, PassivePorts> {
    get config(): {
        componentName: string;
        schematicSymbolName: BaseSymbolName;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            inductance: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            maxCurrentRating: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            schOrientation: zod.ZodOptional<zod.ZodEnum<["vertical", "horizontal", "pos_top", "pos_bottom", "pos_left", "pos_right", "neg_top", "neg_bottom", "neg_left", "neg_right"]>>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            inductance: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
            maxCurrentRating?: string | number | undefined;
        }, {
            name: string;
            inductance: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
            maxCurrentRating?: string | number | undefined;
        }>;
        sourceFtype: "simple_inductor";
    };
    _getSchematicSymbolDisplayValue(): string | undefined;
    initPorts(): void;
    doInitialSourceRender(): void;
}

declare class Potentiometer extends NormalComponent<typeof potentiometerProps> {
    get config(): {
        componentName: string;
        schematicSymbolName: string;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            maxResistance: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            pinVariant: zod.ZodOptional<zod.ZodEnum<["two_pin", "three_pin"]>>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            maxResistance: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            pinVariant?: "two_pin" | "three_pin" | undefined;
        }, {
            name: string;
            maxResistance: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            pinVariant?: "two_pin" | "three_pin" | undefined;
        }>;
        shouldRenderAsSchematicBox: boolean;
    };
    _getSchematicSymbolDisplayValue(): string | undefined;
    doInitialSourceRender(): void;
}

declare class PushButton extends NormalComponent<typeof pushButtonProps, PassivePorts> {
    get config(): {
        componentName: string;
        schematicSymbolName: BaseSymbolName;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            manufacturerPartNumber: zod.ZodOptional<zod.ZodString>;
            pinLabels: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodUnion<[zod.ZodUnion<[zod.ZodString, zod.ZodReadonly<zod.ZodArray<zod.ZodString, "many">>]>, zod.ZodArray<zod.ZodString, "many">]>>>;
            showPinAliases: zod.ZodOptional<zod.ZodBoolean>;
            pcbPinLabels: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodString>>;
            internallyConnectedPins: zod.ZodOptional<zod.ZodArray<zod.ZodArray<zod.ZodString, "many">, "many">>;
            externallyConnectedPins: zod.ZodOptional<zod.ZodArray<zod.ZodArray<zod.ZodString, "many">, "many">>;
            schPinArrangement: zod.ZodOptional<zod.ZodObject<{
                leftSize: zod.ZodOptional<zod.ZodNumber>;
                topSize: zod.ZodOptional<zod.ZodNumber>;
                rightSize: zod.ZodOptional<zod.ZodNumber>;
                bottomSize: zod.ZodOptional<zod.ZodNumber>;
                leftPinCount: zod.ZodOptional<zod.ZodNumber>;
                rightPinCount: zod.ZodOptional<zod.ZodNumber>;
                topPinCount: zod.ZodOptional<zod.ZodNumber>;
                bottomPinCount: zod.ZodOptional<zod.ZodNumber>;
                leftSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                rightSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                topSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                bottomSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
            }, "strip", zod.ZodTypeAny, {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            }, {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            }>>;
            schPortArrangement: zod.ZodOptional<zod.ZodObject<{
                leftSize: zod.ZodOptional<zod.ZodNumber>;
                topSize: zod.ZodOptional<zod.ZodNumber>;
                rightSize: zod.ZodOptional<zod.ZodNumber>;
                bottomSize: zod.ZodOptional<zod.ZodNumber>;
                leftPinCount: zod.ZodOptional<zod.ZodNumber>;
                rightPinCount: zod.ZodOptional<zod.ZodNumber>;
                topPinCount: zod.ZodOptional<zod.ZodNumber>;
                bottomPinCount: zod.ZodOptional<zod.ZodNumber>;
                leftSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                rightSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                topSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
                bottomSide: zod.ZodOptional<zod.ZodObject<{
                    pins: zod.ZodArray<zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>, "many">;
                    direction: zod.ZodUnion<[zod.ZodLiteral<"top-to-bottom">, zod.ZodLiteral<"left-to-right">, zod.ZodLiteral<"bottom-to-top">, zod.ZodLiteral<"right-to-left">]>;
                }, "strip", zod.ZodTypeAny, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }, {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                }>>;
            }, "strip", zod.ZodTypeAny, {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            }, {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            }>>;
            pinCompatibleVariants: zod.ZodOptional<zod.ZodArray<zod.ZodObject<{
                manufacturerPartNumber: zod.ZodOptional<zod.ZodString>;
                supplierPartNumber: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
            }, "strip", zod.ZodTypeAny, {
                manufacturerPartNumber?: string | undefined;
                supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            }, {
                manufacturerPartNumber?: string | undefined;
                supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            }>, "many">>;
            schPinStyle: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                marginLeft: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                marginRight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                marginTop: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                marginBottom: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                leftMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                rightMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                topMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
                bottomMargin: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            }, "strip", zod.ZodTypeAny, {
                marginLeft?: number | undefined;
                marginRight?: number | undefined;
                marginTop?: number | undefined;
                marginBottom?: number | undefined;
                leftMargin?: number | undefined;
                rightMargin?: number | undefined;
                topMargin?: number | undefined;
                bottomMargin?: number | undefined;
            }, {
                marginLeft?: string | number | undefined;
                marginRight?: string | number | undefined;
                marginTop?: string | number | undefined;
                marginBottom?: string | number | undefined;
                leftMargin?: string | number | undefined;
                rightMargin?: string | number | undefined;
                topMargin?: string | number | undefined;
                bottomMargin?: string | number | undefined;
            }>>>;
            schPinSpacing: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schHeight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            noSchematicRepresentation: zod.ZodOptional<zod.ZodBoolean>;
            connections: zod.ZodOptional<zod.ZodPipeline<zod.ZodType<Partial<Record<string, string | string[] | readonly string[]>>, zod.ZodTypeDef, Partial<Record<string, string | string[] | readonly string[]>>>, zod.ZodRecord<zod.ZodString, zod.ZodUnion<[zod.ZodUnion<[zod.ZodString, zod.ZodReadonly<zod.ZodArray<zod.ZodString, "many">>]>, zod.ZodArray<zod.ZodString, "many">]>>>>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            schWidth?: number | undefined;
            schHeight?: number | undefined;
            manufacturerPartNumber?: string | undefined;
            pinLabels?: Record<string, string | readonly string[] | string[]> | undefined;
            showPinAliases?: boolean | undefined;
            pcbPinLabels?: Record<string, string> | undefined;
            internallyConnectedPins?: string[][] | undefined;
            externallyConnectedPins?: string[][] | undefined;
            schPinArrangement?: {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            } | undefined;
            schPortArrangement?: {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            } | undefined;
            pinCompatibleVariants?: {
                manufacturerPartNumber?: string | undefined;
                supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            }[] | undefined;
            schPinStyle?: Record<string, {
                marginLeft?: number | undefined;
                marginRight?: number | undefined;
                marginTop?: number | undefined;
                marginBottom?: number | undefined;
                leftMargin?: number | undefined;
                rightMargin?: number | undefined;
                topMargin?: number | undefined;
                bottomMargin?: number | undefined;
            }> | undefined;
            schPinSpacing?: number | undefined;
            noSchematicRepresentation?: boolean | undefined;
            connections?: Record<string, string | readonly string[] | string[]> | undefined;
        }, {
            name: string;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            schWidth?: string | number | undefined;
            schHeight?: string | number | undefined;
            manufacturerPartNumber?: string | undefined;
            pinLabels?: Record<string, string | readonly string[] | string[]> | undefined;
            showPinAliases?: boolean | undefined;
            pcbPinLabels?: Record<string, string> | undefined;
            internallyConnectedPins?: string[][] | undefined;
            externallyConnectedPins?: string[][] | undefined;
            schPinArrangement?: {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            } | undefined;
            schPortArrangement?: {
                leftSize?: number | undefined;
                topSize?: number | undefined;
                rightSize?: number | undefined;
                bottomSize?: number | undefined;
                leftSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                topSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                rightSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                bottomSide?: {
                    pins: (string | number)[];
                    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
                } | undefined;
                leftPinCount?: number | undefined;
                rightPinCount?: number | undefined;
                topPinCount?: number | undefined;
                bottomPinCount?: number | undefined;
            } | undefined;
            pinCompatibleVariants?: {
                manufacturerPartNumber?: string | undefined;
                supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            }[] | undefined;
            schPinStyle?: Record<string, {
                marginLeft?: string | number | undefined;
                marginRight?: string | number | undefined;
                marginTop?: string | number | undefined;
                marginBottom?: string | number | undefined;
                leftMargin?: string | number | undefined;
                rightMargin?: string | number | undefined;
                topMargin?: string | number | undefined;
                bottomMargin?: string | number | undefined;
            }> | undefined;
            schPinSpacing?: string | number | undefined;
            noSchematicRepresentation?: boolean | undefined;
            connections?: Partial<Record<string, string | string[] | readonly string[]>> | undefined;
        }>;
        sourceFtype: "simple_push_button";
    };
    get defaultInternallyConnectedPinNames(): string[][];
    initPorts(): void;
    doInitialSourceRender(): void;
}

declare class Crystal extends NormalComponent<typeof crystalProps, PolarizedPassivePorts> {
    get config(): {
        schematicSymbolName: string;
        componentName: string;
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            frequency: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
            loadCapacitance: zod.ZodEffects<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>, number, string | number>;
            pinVariant: zod.ZodOptional<zod.ZodEnum<["two_pin", "four_pin"]>>;
            schOrientation: zod.ZodOptional<zod.ZodEnum<["vertical", "horizontal", "pos_top", "pos_bottom", "pos_left", "pos_right", "neg_top", "neg_bottom", "neg_left", "neg_right"]>>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            frequency: number;
            loadCapacitance: number;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
            pinVariant?: "two_pin" | "four_pin" | undefined;
        }, {
            name: string;
            frequency: string | number;
            loadCapacitance: string | number;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
            pinVariant?: "two_pin" | "four_pin" | undefined;
        }>;
        sourceFtype: Ftype;
    };
    initPorts(): void;
    _getSchematicSymbolDisplayValue(): string | undefined;
    doInitialSourceRender(): void;
}

declare class Transistor extends NormalComponent<typeof transistorProps, TransistorPorts> {
    get config(): {
        componentName: string;
        schematicSymbolName: "npn_bipolar_transistor" | "pnp_bipolar_transistor";
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            type: zod.ZodEnum<["npn", "pnp", "bjt", "jfet", "mosfet", "igbt"]>;
            connections: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["pin1", "pin2", "pin3", "emitter", "collector", "base", "gate", "source", "drain"]>, zod.ZodUnion<[zod.ZodUnion<[zod.ZodString, zod.ZodReadonly<zod.ZodArray<zod.ZodString, "many">>]>, zod.ZodArray<zod.ZodString, "many">]>>>;
        }, "strip", zod.ZodTypeAny, {
            type: "npn" | "pnp" | "bjt" | "jfet" | "mosfet" | "igbt";
            name: string;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            connections?: Partial<Record<"pin1" | "pin2" | "pin3" | "emitter" | "collector" | "base" | "gate" | "source" | "drain", string | readonly string[] | string[]>> | undefined;
        }, {
            type: "npn" | "pnp" | "bjt" | "jfet" | "mosfet" | "igbt";
            name: string;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            connections?: Partial<Record<"pin1" | "pin2" | "pin3" | "emitter" | "collector" | "base" | "gate" | "source" | "drain", string | readonly string[] | string[]>> | undefined;
        }>;
        sourceFtype: Ftype;
        shouldRenderAsSchematicBox: boolean;
    };
    initPorts(): void;
    emitter: Port;
    collector: Port;
    base: Port;
    doInitialCreateNetsFromProps(): void;
    doInitialCreateTracesFromProps(): void;
    doInitialSourceRender(): void;
}

declare class Mosfet extends NormalComponent<typeof mosfetProps> {
    get config(): {
        componentName: string;
        schematicSymbolName: "n_channel_d_mosfet_transistor" | "n_channel_e_mosfet_transistor" | "p_channel_d_mosfet_transistor" | "p_channel_e_mosfet_transistor";
        zodProps: zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            channelType: zod.ZodEnum<["n", "p"]>;
            mosfetMode: zod.ZodEnum<["enhancement", "depletion"]>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            channelType: "n" | "p";
            mosfetMode: "enhancement" | "depletion";
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
        }, {
            name: string;
            channelType: "n" | "p";
            mosfetMode: "enhancement" | "depletion";
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
        }>;
        shouldRenderAsSchematicBox: boolean;
    };
    doInitialSourceRender(): void;
}

declare class Switch extends NormalComponent<typeof switchProps> {
    private _getSwitchType;
    get config(): {
        componentName: string;
        schematicSymbolName: BaseSymbolName;
        zodProps: zod.ZodEffects<zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            type: zod.ZodOptional<zod.ZodEnum<["spst", "spdt", "dpst", "dpdt"]>>;
            isNormallyClosed: zod.ZodDefault<zod.ZodOptional<zod.ZodBoolean>>;
            spst: zod.ZodOptional<zod.ZodBoolean>;
            spdt: zod.ZodOptional<zod.ZodBoolean>;
            dpst: zod.ZodOptional<zod.ZodBoolean>;
            dpdt: zod.ZodOptional<zod.ZodBoolean>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            isNormallyClosed: boolean;
            type?: "spst" | "spdt" | "dpst" | "dpdt" | undefined;
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            spst?: boolean | undefined;
            spdt?: boolean | undefined;
            dpst?: boolean | undefined;
            dpdt?: boolean | undefined;
        }, {
            name: string;
            type?: "spst" | "spdt" | "dpst" | "dpdt" | undefined;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            spst?: boolean | undefined;
            spdt?: boolean | undefined;
            dpst?: boolean | undefined;
            dpdt?: boolean | undefined;
            isNormallyClosed?: boolean | undefined;
        }>, _tscircuit_props.SwitchProps, {
            name: string;
            type?: "spst" | "spdt" | "dpst" | "dpdt" | undefined;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            spst?: boolean | undefined;
            spdt?: boolean | undefined;
            dpst?: boolean | undefined;
            dpdt?: boolean | undefined;
            isNormallyClosed?: boolean | undefined;
        }>;
        shouldRenderAsSchematicBox: boolean;
    };
    doInitialSourceRender(): void;
}

declare class TestPoint extends NormalComponent<typeof testpointProps> {
    get config(): {
        componentName: string;
        schematicSymbolName: string;
        zodProps: zod.ZodEffects<zod.ZodObject<{
            pcbX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            pcbRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schRotation: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            layer: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, zod.ZodObject<{
                name: zod.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", zod.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            footprint: zod.ZodOptional<zod.ZodType<_tscircuit_props.FootprintProp, zod.ZodTypeDef, _tscircuit_props.FootprintProp>>;
            relative: zod.ZodOptional<zod.ZodBoolean>;
            schRelative: zod.ZodOptional<zod.ZodBoolean>;
            pcbRelative: zod.ZodOptional<zod.ZodBoolean>;
        } & {
            supplierPartNumbers: zod.ZodOptional<zod.ZodRecord<zod.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, zod.ZodArray<zod.ZodString, "many">>>;
        } & {
            key: zod.ZodOptional<zod.ZodAny>;
            name: zod.ZodString;
            cadModel: zod.ZodOptional<zod.ZodUnion<[zod.ZodNull, zod.ZodString, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                stlUrl: zod.ZodString;
            }, "strip", zod.ZodTypeAny, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                objUrl: zod.ZodString;
                mtlUrl: zod.ZodOptional<zod.ZodString>;
            }, "strip", zod.ZodTypeAny, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            }, {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            }>, zod.ZodObject<{
                rotationOffset: zod.ZodOptional<zod.ZodUnion<[zod.ZodNumber, zod.ZodObject<{
                    x: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    y: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                    z: zod.ZodUnion<[zod.ZodNumber, zod.ZodString]>;
                }, "strip", zod.ZodTypeAny, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>]>>;
                positionOffset: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
                size: zod.ZodOptional<zod.ZodObject<{
                    x: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    y: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                    z: zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>;
                }, "strip", zod.ZodTypeAny, {
                    x: number;
                    y: number;
                    z: number;
                }, {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                }>>;
            } & {
                jscad: zod.ZodRecord<zod.ZodString, zod.ZodAny>;
            }, "strip", zod.ZodTypeAny, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            }, {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            }>]>>;
            children: zod.ZodOptional<zod.ZodAny>;
            symbolName: zod.ZodOptional<zod.ZodString>;
            doNotPlace: zod.ZodOptional<zod.ZodBoolean>;
            pinAttributes: zod.ZodOptional<zod.ZodRecord<zod.ZodString, zod.ZodObject<{
                providesPower: zod.ZodOptional<zod.ZodBoolean>;
                requiresPower: zod.ZodOptional<zod.ZodBoolean>;
                providesGround: zod.ZodOptional<zod.ZodBoolean>;
                requiresGround: zod.ZodOptional<zod.ZodBoolean>;
                providesVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
                requiresVoltage: zod.ZodOptional<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>>;
            }, "strip", zod.ZodTypeAny, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }>>>;
        } & {
            footprintVariant: zod.ZodOptional<zod.ZodEnum<["pad", "through_hole"]>>;
            padShape: zod.ZodDefault<zod.ZodOptional<zod.ZodEnum<["rect", "circle"]>>>;
            padDiameter: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            holeDiameter: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            width: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            height: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
        }, "strip", zod.ZodTypeAny, {
            name: string;
            padShape: "circle" | "rect";
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            width?: number | undefined;
            height?: number | undefined;
            holeDiameter?: number | undefined;
            footprintVariant?: "pad" | "through_hole" | undefined;
            padDiameter?: number | undefined;
        }, {
            name: string;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            width?: string | number | undefined;
            height?: string | number | undefined;
            holeDiameter?: string | number | undefined;
            padShape?: "circle" | "rect" | undefined;
            footprintVariant?: "pad" | "through_hole" | undefined;
            padDiameter?: string | number | undefined;
        }>, {
            name: string;
            padShape: "circle" | "rect";
            pcbX?: number | undefined;
            pcbY?: number | undefined;
            pcbRotation?: number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            schRotation?: number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
                size?: {
                    x: number;
                    y: number;
                    z: number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            width?: number | undefined;
            height?: number | undefined;
            holeDiameter?: number | undefined;
            footprintVariant?: "pad" | "through_hole" | undefined;
            padDiameter?: number | undefined;
        }, {
            name: string;
            pcbX?: string | number | undefined;
            pcbY?: string | number | undefined;
            pcbRotation?: string | number | undefined;
            layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            pcbRelative?: boolean | undefined;
            relative?: boolean | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            footprint?: _tscircuit_props.FootprintProp | undefined;
            schRelative?: boolean | undefined;
            supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
            key?: any;
            pinAttributes?: Record<string, {
                providesPower?: boolean | undefined;
                requiresPower?: boolean | undefined;
                providesGround?: boolean | undefined;
                requiresGround?: boolean | undefined;
                providesVoltage?: string | number | undefined;
                requiresVoltage?: string | number | undefined;
            }> | undefined;
            cadModel?: string | {
                stlUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | {
                objUrl: string;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                mtlUrl?: string | undefined;
            } | {
                jscad: Record<string, any>;
                rotationOffset?: number | {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                positionOffset?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
                size?: {
                    x: string | number;
                    y: string | number;
                    z: string | number;
                } | undefined;
            } | null | undefined;
            children?: any;
            symbolName?: string | undefined;
            doNotPlace?: boolean | undefined;
            width?: string | number | undefined;
            height?: string | number | undefined;
            holeDiameter?: string | number | undefined;
            padShape?: "circle" | "rect" | undefined;
            footprintVariant?: "pad" | "through_hole" | undefined;
            padDiameter?: string | number | undefined;
        }>;
        sourceFtype: "simple_test_point";
    };
    private _getPropsWithDefaults;
    _getImpliedFootprintString(): string | null;
    doInitialSourceRender(): void;
}

declare class SchematicText extends PrimitiveComponent<typeof schematicTextProps> {
    isSchematicPrimitive: boolean;
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<{
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            text: zod.ZodString;
            fontSize: zod.ZodDefault<zod.ZodNumber>;
            anchor: zod.ZodDefault<zod.ZodUnion<[zod.ZodEnum<["center", "left", "right", "top", "bottom"]>, zod.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>]>>;
            color: zod.ZodDefault<zod.ZodString>;
            schRotation: zod.ZodDefault<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
        }, "strip", zod.ZodTypeAny, {
            anchor: "left" | "right" | "top" | "bottom" | "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center";
            schRotation: number;
            color: string;
            text: string;
            fontSize: number;
            schX?: number | undefined;
            schY?: number | undefined;
        }, {
            text: string;
            anchor?: "left" | "right" | "top" | "bottom" | "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center" | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            schRotation?: string | number | undefined;
            color?: string | undefined;
            fontSize?: number | undefined;
        }>;
    };
    doInitialSchematicPrimitiveRender(): void;
}

declare class SchematicBox extends PrimitiveComponent<typeof schematicBoxProps> {
    isSchematicPrimitive: boolean;
    get config(): {
        componentName: string;
        zodProps: zod.ZodEffects<zod.ZodEffects<zod.ZodObject<{
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            width: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            height: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            overlay: zod.ZodOptional<zod.ZodArray<zod.ZodString, "many">>;
            padding: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            paddingLeft: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            paddingRight: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            paddingTop: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            paddingBottom: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            title: zod.ZodOptional<zod.ZodString>;
            titleAlignment: zod.ZodDefault<zod.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>>;
            titleColor: zod.ZodOptional<zod.ZodString>;
            titleFontSize: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            titleInside: zod.ZodDefault<zod.ZodBoolean>;
            strokeStyle: zod.ZodDefault<zod.ZodEnum<["solid", "dashed"]>>;
        }, "strip", zod.ZodTypeAny, {
            titleAlignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center";
            titleInside: boolean;
            strokeStyle: "dashed" | "solid";
            schX?: number | undefined;
            schY?: number | undefined;
            padding?: number | undefined;
            paddingLeft?: number | undefined;
            paddingRight?: number | undefined;
            paddingTop?: number | undefined;
            paddingBottom?: number | undefined;
            width?: number | undefined;
            height?: number | undefined;
            overlay?: string[] | undefined;
            title?: string | undefined;
            titleColor?: string | undefined;
            titleFontSize?: number | undefined;
        }, {
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            padding?: string | number | undefined;
            paddingLeft?: string | number | undefined;
            paddingRight?: string | number | undefined;
            paddingTop?: string | number | undefined;
            paddingBottom?: string | number | undefined;
            width?: string | number | undefined;
            height?: string | number | undefined;
            overlay?: string[] | undefined;
            title?: string | undefined;
            titleAlignment?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center" | undefined;
            titleColor?: string | undefined;
            titleFontSize?: string | number | undefined;
            titleInside?: boolean | undefined;
            strokeStyle?: "dashed" | "solid" | undefined;
        }>, {
            titleAlignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center";
            titleInside: boolean;
            strokeStyle: "dashed" | "solid";
            schX?: number | undefined;
            schY?: number | undefined;
            padding?: number | undefined;
            paddingLeft?: number | undefined;
            paddingRight?: number | undefined;
            paddingTop?: number | undefined;
            paddingBottom?: number | undefined;
            width?: number | undefined;
            height?: number | undefined;
            overlay?: string[] | undefined;
            title?: string | undefined;
            titleColor?: string | undefined;
            titleFontSize?: number | undefined;
        }, {
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            padding?: string | number | undefined;
            paddingLeft?: string | number | undefined;
            paddingRight?: string | number | undefined;
            paddingTop?: string | number | undefined;
            paddingBottom?: string | number | undefined;
            width?: string | number | undefined;
            height?: string | number | undefined;
            overlay?: string[] | undefined;
            title?: string | undefined;
            titleAlignment?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center" | undefined;
            titleColor?: string | undefined;
            titleFontSize?: string | number | undefined;
            titleInside?: boolean | undefined;
            strokeStyle?: "dashed" | "solid" | undefined;
        }>, {
            titleAlignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center";
            titleInside: boolean;
            strokeStyle: "dashed" | "solid";
            schX?: number | undefined;
            schY?: number | undefined;
            padding?: number | undefined;
            paddingLeft?: number | undefined;
            paddingRight?: number | undefined;
            paddingTop?: number | undefined;
            paddingBottom?: number | undefined;
            width?: number | undefined;
            height?: number | undefined;
            overlay?: string[] | undefined;
            title?: string | undefined;
            titleColor?: string | undefined;
            titleFontSize?: number | undefined;
        }, {
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            padding?: string | number | undefined;
            paddingLeft?: string | number | undefined;
            paddingRight?: string | number | undefined;
            paddingTop?: string | number | undefined;
            paddingBottom?: string | number | undefined;
            width?: string | number | undefined;
            height?: string | number | undefined;
            overlay?: string[] | undefined;
            title?: string | undefined;
            titleAlignment?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center" | undefined;
            titleColor?: string | undefined;
            titleFontSize?: string | number | undefined;
            titleInside?: boolean | undefined;
            strokeStyle?: "dashed" | "solid" | undefined;
        }>;
        shouldRenderAsSchematicBox: boolean;
    };
    doInitialSchematicPrimitiveRender(): void;
}

declare class SchematicTable extends PrimitiveComponent<typeof schematicTableProps> {
    isSchematicPrimitive: boolean;
    schematic_table_id: string | null;
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<{
            schX: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            schY: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            children: zod.ZodOptional<zod.ZodAny>;
            cellPadding: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            borderWidth: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            anchor: zod.ZodOptional<zod.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>>;
            fontSize: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
        }, "strip", zod.ZodTypeAny, {
            anchor?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center" | undefined;
            schX?: number | undefined;
            schY?: number | undefined;
            children?: any;
            fontSize?: number | undefined;
            cellPadding?: number | undefined;
            borderWidth?: number | undefined;
        }, {
            anchor?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center" | undefined;
            schX?: string | number | undefined;
            schY?: string | number | undefined;
            children?: any;
            fontSize?: string | number | undefined;
            cellPadding?: string | number | undefined;
            borderWidth?: string | number | undefined;
        }>;
    };
    doInitialSchematicPrimitiveRender(): void;
}

declare class SchematicRow extends PrimitiveComponent<typeof schematicRowProps> {
    isSchematicPrimitive: boolean;
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<{
            children: zod.ZodOptional<zod.ZodAny>;
            height: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
        }, "strip", zod.ZodTypeAny, {
            children?: any;
            height?: number | undefined;
        }, {
            children?: any;
            height?: string | number | undefined;
        }>;
    };
}

declare class SchematicCell extends PrimitiveComponent<typeof schematicCellProps> {
    isSchematicPrimitive: boolean;
    canHaveTextChildren: boolean;
    get config(): {
        componentName: string;
        zodProps: zod.ZodObject<{
            children: zod.ZodOptional<zod.ZodString>;
            horizontalAlign: zod.ZodOptional<zod.ZodEnum<["left", "center", "right"]>>;
            verticalAlign: zod.ZodOptional<zod.ZodEnum<["top", "middle", "bottom"]>>;
            fontSize: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            rowSpan: zod.ZodOptional<zod.ZodNumber>;
            colSpan: zod.ZodOptional<zod.ZodNumber>;
            width: zod.ZodOptional<zod.ZodEffects<zod.ZodUnion<[zod.ZodString, zod.ZodNumber]>, number, string | number>>;
            text: zod.ZodOptional<zod.ZodString>;
        }, "strip", zod.ZodTypeAny, {
            children?: string | undefined;
            width?: number | undefined;
            text?: string | undefined;
            fontSize?: number | undefined;
            horizontalAlign?: "left" | "right" | "center" | undefined;
            verticalAlign?: "top" | "bottom" | "middle" | undefined;
            rowSpan?: number | undefined;
            colSpan?: number | undefined;
        }, {
            children?: string | undefined;
            width?: string | number | undefined;
            text?: string | undefined;
            fontSize?: string | number | undefined;
            horizontalAlign?: "left" | "right" | "center" | undefined;
            verticalAlign?: "top" | "bottom" | "middle" | undefined;
            rowSpan?: number | undefined;
            colSpan?: number | undefined;
        }>;
    };
}

declare const useRenderedCircuit: (reactElements: React.ReactElement) => {
    isLoading: boolean;
    error?: Error | null;
    circuit?: RootCircuit;
    circuitJson?: AnyCircuitElement[];
};

type PinLabelSpec<PinLabel extends string, PinNumberKey extends string = never> = readonly PinLabel[] | readonly (readonly PinLabel[])[] | Record<PinNumberKey, readonly PinLabel[]>;
type ComponentWithPins<Props, PinLabel extends string | never = never, PropsFromHook extends Omit<Props, "name"> | undefined = undefined> = React.ComponentType<(PropsFromHook extends undefined ? Omit<Props, "name"> : Omit<Partial<Props>, "name">) & {
    [key in PinLabel]?: string;
}> & {
    [key in PinLabel]: string;
};
type CreateUseComponentConstPinLabels = <Props, PinLabel extends string | never = never>(Component: React.ComponentType<Props>, pins: readonly PinLabel[]) => <PropsFromHook extends Omit<Props, "name"> | undefined = undefined>(name: string, props?: PropsFromHook) => ComponentWithPins<Props, PinLabel, PropsFromHook>;
type CreateUseComponentPinLabelMap = <Props, PinLabel extends string | never = never, PinNumberKey extends string = never>(Component: React.ComponentType<Props>, pins: Record<PinNumberKey, readonly PinLabel[] | PinLabel[]>) => <PropsFromHook extends Omit<Props, "name"> | undefined = undefined>(name: string, props?: PropsFromHook) => ComponentWithPins<Props, PinLabel | PinNumberKey, PropsFromHook>;
declare const createUseComponent: CreateUseComponentConstPinLabels & CreateUseComponentPinLabelMap;

declare const useCapacitor: <PropsFromHook extends Omit<CapacitorProps<string>, "name"> | undefined = undefined>(name: string, props?: PropsFromHook | undefined) => ComponentWithPins<CapacitorProps<string>, "left" | "right" | "pin1" | "pin2" | "anode" | "cathode" | "pos" | "neg", PropsFromHook>;

declare const useChip: <PinLabel extends string>(pinLabels: Record<string, PinLabel[]>) => <PropsFromHook extends Omit<ChipProps, "name"> | undefined = undefined>(name: string, props?: PropsFromHook | undefined) => ComponentWithPins<ChipProps, string | PinLabel, PropsFromHook>;

declare const useDiode: <PropsFromHook extends Omit<DiodeProps<string>, "name"> | undefined = undefined>(name: string, props?: PropsFromHook | undefined) => ComponentWithPins<DiodeProps<string>, "left" | "right" | "pin1" | "pin2" | "anode" | "cathode" | "pos" | "neg", PropsFromHook>;

declare const useLed: <PropsFromHook extends Omit<{
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: _tscircuit_props.FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    color?: string | undefined;
    wavelength?: string | undefined;
    connections?: Partial<Record<"left" | "right" | "pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
    schDisplayValue?: string | undefined;
    laser?: boolean | undefined;
}, "name"> | undefined = undefined>(name: string, props?: PropsFromHook | undefined) => ComponentWithPins<{
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: _tscircuit_props.FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    color?: string | undefined;
    wavelength?: string | undefined;
    connections?: Partial<Record<"left" | "right" | "pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
    schDisplayValue?: string | undefined;
    laser?: boolean | undefined;
}, "left" | "right" | "pin1" | "pin2" | "anode" | "cathode" | "pos" | "neg", PropsFromHook>;

declare const useResistor: <PropsFromHook extends Omit<ResistorProps<string>, "name"> | undefined = undefined>(name: string, props?: PropsFromHook | undefined) => ComponentWithPins<ResistorProps<string>, "left" | "right" | "pin1" | "pin2", PropsFromHook>;

declare const applyEditEventsToManualEditsFile: ({ circuitJson, editEvents, manualEditsFile, }: {
    circuitJson: CircuitJson;
    editEvents: ManualEditEvent[];
    manualEditsFile: ManualEditsFile;
}) => ManualEditsFile;

/**
 * Applies edit events directly to a CircuitJson object
 */
declare const applyEditEvents: ({ circuitJson, editEvents, }: {
    circuitJson: CircuitJson;
    editEvents: ManualEditEvent[];
}) => CircuitJson;

/**
 * This function can only be called in the PcbTraceRender phase or later
 */
declare const getSimpleRouteJsonFromCircuitJson: ({ db, circuitJson, subcircuit_id, minTraceWidth, }: {
    db?: CircuitJsonUtilObjects;
    circuitJson?: AnyCircuitElement[];
    subcircuit_id?: string | null;
    minTraceWidth?: number;
}) => {
    simpleRouteJson: SimpleRouteJson;
    connMap: ConnectivityMap;
};

type RenderEvent = {
    type: string;
    renderId: string;
    createdAt: number;
};
/**
 * Given a list of render events, return a map of how much time was spent in each
 * render phase.
 *
 * To get the time spent in each phase, you have to find the end event for each
 * start event and subtract the createdAt of the start event from the createdAt
 */
declare const getPhaseTimingsFromRenderEvents: (renderEvents: RenderEvent[]) => Record<string, number>;

/**
 * Normalizes pin labels such that they are unique while preserving numbering
 * where not confusing.
 *
 * Example input:
 * [
 *   ["1", "GND"],
 *   ["2", "GND"],
 *   ["3", "VCC"],
 *   ["3"],
 *   ["4"]
 * ]
 *
 * Example output:
 * [
 *   ["pin1", "GND1"],
 *   ["pin2", "GND2"],
 *   ["pin3", "VCC"],
 *   ["pin5", "pin3_alt1"],
 *   ["pin4"]
 * ]
 */
declare const normalizePinLabels: (inputPinLabels: string[][]) => string[][];

type Nums16 = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16";
type Nums40 = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" | "10" | "11" | "12" | "13" | "14" | "15" | "16" | "17" | "18" | "19" | "20" | "21" | "22" | "23" | "24" | "25" | "26" | "27" | "28" | "29" | "30" | "31" | "32" | "33" | "34" | "35" | "36" | "37" | "38" | "39" | "40";
type PinNumbers100 = "pin0" | "pin1" | "pin2" | "pin3" | "pin4" | "pin5" | "pin6" | "pin7" | "pin8" | "pin9" | "pin10" | "pin11" | "pin12" | "pin13" | "pin14" | "pin15" | "pin16" | "pin17" | "pin18" | "pin19" | "pin20" | "pin21" | "pin22" | "pin23" | "pin24" | "pin25" | "pin26" | "pin27" | "pin28" | "pin29" | "pin30" | "pin31" | "pin32" | "pin33" | "pin34" | "pin35" | "pin36" | "pin37" | "pin38" | "pin39" | "pin40" | "pin41" | "pin42" | "pin43" | "pin44" | "pin45" | "pin46" | "pin47" | "pin48" | "pin49" | "pin50" | "pin51" | "pin52" | "pin53" | "pin54" | "pin55" | "pin56" | "pin57" | "pin58" | "pin59" | "pin60" | "pin61" | "pin62" | "pin63" | "pin64" | "pin65" | "pin66" | "pin67" | "pin68" | "pin69" | "pin70" | "pin71" | "pin72" | "pin73" | "pin74" | "pin75" | "pin76" | "pin77" | "pin78" | "pin79" | "pin80" | "pin81" | "pin82" | "pin83" | "pin84" | "pin85" | "pin86" | "pin87" | "pin88" | "pin89" | "pin90" | "pin91" | "pin92" | "pin93" | "pin94" | "pin95" | "pin96" | "pin97" | "pin98" | "pin99" | "pin100";
type CommonPinNames = "pos" | "neg" | "V5" | "V3_3" | "PWR" | "VCC" | "VDD" | "GND" | "SHLD" | `D${Nums40}` | `GP${Nums40}` | `GPIO${Nums40}` | "DP" | "DN" | "VIN" | "VOUT" | "VREF" | "VIN" | "VOUT" | "VREF" | "VUSB" | "VIN" | "VOUT" | "VREF" | "OUT" | "DISCH" | "EN" | "IN" | "CLK" | "DATA" | "THRES" | "TRIG" | "RESET" | "DM" | "DP" | "CC1" | "CC2" | "N_CS" | "N_WP" | "N_HOLD" | "SCL" | "SDA" | "MOSI" | "MISO" | "SCK" | "CS" | "N_CS" | "INT" | "N_INT" | `A${Nums40}` | `B${Nums40}` | PinNumbers100;
type TransistorPinNames = "base" | "collector" | "emitter" | "gate" | "source" | "drain";

type NonPolarizedSel = Record<`R${Nums40}` | `F${Nums40}`, {
    pin1: string;
    pin2: string;
    pos: string;
    neg: string;
}>;
type SwSel = Record<`SW${Nums40}`, {
    pin1: string;
    pin2: string;
    pin3: string;
    pin4: string;
    pin5: string;
    pin6: string;
    pos: string;
    neg: string;
    side1: string;
    side2: string;
}>;
type PolarizedSel = Record<`C${Nums40}` | `L${Nums40}` | `LED${Nums40}` | `D${Nums40}` | `Y${Nums40}` | `B${Nums16}`, {
    pin1: string;
    pin2: string;
    anode: string;
    cathode: string;
    pos: string;
    neg: string;
}>;
type CommonNetNames = "VCC" | "GND" | "VDD" | "PWR" | "V5" | "V3_3" | "VIN" | "SHLD" | "EN" | "SCL" | "SDA" | "MOSI" | "MISO" | "SCK" | "CS" | "N_CS" | "FLASH_SDO" | "FLASH_SDI" | "FLASH_SCK" | "FLASH_N_CS" | "FLASH_N_WP" | "FLASH_N_HOLD" | "INT" | "N_INT";
type TransistorSel = Record<`Q${Nums40}`, Record<TransistorPinNames, string>>;
type JumperSel = Record<`J${Nums40}` | `JP${Nums40}` | `CN${Nums40}`, Record<PinNumbers100 | CommonPinNames, string> & ChipFnSel>;
type ChipSel = Record<`U${Nums40}` | "USBC", Record<CommonPinNames | PinNumbers100, string> & ChipFnSel>;
type NetSelFn<N extends string = CommonNetNames> = (<N2 extends string>() => Record<N | N2, string>) & Record<N, string>;
type NetSel<N extends string = CommonNetNames> = Record<"net", NetSelFn<N>>;
type ExplicitModuleSel = Record<"subcircuit" | "module" | "group", Record<`S${Nums40}` | `M${Nums40}` | `G${Nums40}`, SelWithoutSubcircuit>>;
type GenericConnectionsAndSelectorsSel = Record<string, <CMP_FN extends (props: any) => any>(component: CMP_FN) => CMP_FN extends (props: infer P) => any ? P extends {
    connections: infer CN;
} ? CN : P extends {
    selectors: infer SEL;
} ? SEL extends Record<string, Record<string, string>> ? {
    [K in keyof SEL]: SEL[K] extends Record<string, string> ? SEL[K] : never;
} : never : never : never>;
type TestPointSel = Record<`TP${Nums40}`, {
    pin1: string;
}>;
type SelWithoutSubcircuit = NonPolarizedSel & PolarizedSel & TransistorSel & JumperSel & ChipSel & SwSel & NetSel & TestPointSel & GenericConnectionsAndSelectorsSel;
type UnionToIntersection<U> = (U extends any ? (x: U) => void : never) extends (x: infer I) => void ? I : never;
type ChipFn<T extends ChipProps<any>> = (props: T) => any;
type ChipFnSel = <T extends ChipFn<any> | string>(chipFn?: T) => UnionToIntersection<T extends ChipFn<any> ? ChipConnections<T> : T extends string ? {
    [K in T]: string;
} : never>;
type SelFn = <P extends string>(refdes: string) => Record<P, string>;
type Sel = SelFn & ExplicitModuleSel & SelWithoutSubcircuit;
declare const sel: Sel;

interface LocalCacheEngine {
    getItem(key: string): string | Promise<string | null> | null;
    setItem(key: string, value: string): void | Promise<void>;
    removeItem?(key: string): void | Promise<void>;
}

type AutorouterCompleteEvent = {
    type: "complete";
    traces: SimplifiedPcbTrace[];
};
type AutorouterErrorEvent = {
    type: "error";
    error: Error;
};
type AutorouterProgressEvent = {
    type: "progress";
    steps: number;
    progress: number;
    phase?: string;
    iterationsPerSecond?: number;
    debugGraphics?: GraphicsObject;
};
type AutorouterEvent = AutorouterCompleteEvent | AutorouterErrorEvent | AutorouterProgressEvent;
interface GenericLocalAutorouter {
    input: SimpleRouteJson;
    isRouting: boolean;
    start(): void;
    stop(): void;
    on(event: "complete", callback: (ev: AutorouterCompleteEvent) => void): void;
    on(event: "error", callback: (ev: AutorouterErrorEvent) => void): void;
    on(event: "progress", callback: (ev: AutorouterProgressEvent) => void): void;
    solveSync(): SimplifiedPcbTrace[];
}

declare const applyPcbEditEventsToManualEditsFile: ({ circuitJson, editEvents, manualEditsFile, }: {
    circuitJson: CircuitJson;
    editEvents: ManualEditEvent[];
    manualEditsFile: z.infer<typeof manual_edits_file>;
}) => z.infer<typeof manual_edits_file>;

declare const applySchematicEditEventsToManualEditsFile: ({ circuitJson, editEvents, manualEditsFile, }: {
    circuitJson: CircuitJson;
    editEvents: ManualEditEvent[];
    manualEditsFile: z.infer<typeof manual_edits_file>;
}) => z.infer<typeof manual_edits_file>;

interface TscircuitElements {
    resistor: _tscircuit_props.ResistorProps;
    capacitor: _tscircuit_props.CapacitorProps;
    inductor: _tscircuit_props.InductorProps;
    pushbutton: _tscircuit_props.PushButtonProps;
    diode: _tscircuit_props.DiodeProps;
    fuse: _tscircuit_props.FuseProps;
    led: _tscircuit_props.LedProps;
    board: _tscircuit_props.BoardProps;
    jumper: _tscircuit_props.JumperProps;
    solderjumper: _tscircuit_props.SolderJumperProps;
    bug: _tscircuit_props.ChipProps;
    potentiometer: _tscircuit_props.PotentiometerProps;
    chip: _tscircuit_props.ChipProps;
    powersource: _tscircuit_props.PowerSourceProps;
    via: _tscircuit_props.ViaProps;
    schematicbox: _tscircuit_props.SchematicBoxProps;
    schematicline: _tscircuit_props.SchematicLineProps;
    schematicpath: _tscircuit_props.SchematicPathProps;
    schematictext: _tscircuit_props.SchematicTextProps;
    schematictable: _tscircuit_props.SchematicTableProps;
    schematicrow: _tscircuit_props.SchematicRowProps;
    schematiccell: _tscircuit_props.SchematicCellProps;
    smtpad: _tscircuit_props.SmtPadProps;
    platedhole: _tscircuit_props.PlatedHoleProps;
    keepout: _tscircuit_props.PcbKeepoutProps;
    hole: _tscircuit_props.HoleProps;
    port: _tscircuit_props.PortProps;
    group: _tscircuit_props.GroupProps;
    netlabel: _tscircuit_props.NetLabelProps;
    net: _tscircuit_props.NetProps;
    trace: _tscircuit_props.TraceProps;
    breakout: _tscircuit_props.BreakoutProps;
    breakoutpoint: _tscircuit_props.BreakoutPointProps;
    custom: any;
    component: _tscircuit_props.ComponentProps;
    crystal: _tscircuit_props.CrystalProps;
    footprint: any;
    silkscreentext: _tscircuit_props.SilkscreenTextProps;
    cutout: _tscircuit_props.CutoutProps;
    silkscreenpath: _tscircuit_props.SilkscreenPathProps;
    silkscreenline: _tscircuit_props.SilkscreenLineProps;
    silkscreenrect: _tscircuit_props.SilkscreenRectProps;
    silkscreencircle: _tscircuit_props.SilkscreenCircleProps;
    tracehint: _tscircuit_props.TraceHintProps;
    pcbtrace: _tscircuit_props.PcbTraceProps;
    fabricationnotetext: _tscircuit_props.FabricationNoteTextProps;
    fabricationnotepath: _tscircuit_props.FabricationNotePathProps;
    constraint: _tscircuit_props.ConstraintProps;
    constrainedlayout: _tscircuit_props.ConstrainedLayoutProps;
    battery: _tscircuit_props.BatteryProps;
    pinheader: _tscircuit_props.PinHeaderProps;
    resonator: _tscircuit_props.ResonatorProps;
    subcircuit: _tscircuit_props.SubcircuitGroupProps;
    transistor: _tscircuit_props.TransistorProps;
    switch: _tscircuit_props.SwitchProps;
    mosfet: _tscircuit_props.MosfetProps;
    testpoint: _tscircuit_props.TestpointProps;
    jscad: any;
}
declare module "react" {
    namespace JSX {
        interface IntrinsicElements extends TscircuitElements {
        }
    }
}
declare module "react/jsx-runtime" {
    namespace JSX {
        interface IntrinsicElements extends TscircuitElements {
            switch: DetailedHTMLProps<SVGProps<SVGSwitchElement>, SVGSwitchElement> | TscircuitElements["switch"];
        }
    }
}

export { type AsyncEffect, type AutorouterCompleteEvent, type AutorouterErrorEvent, type AutorouterEvent, type AutorouterProgressEvent, type AutoroutingEndEvent, type AutoroutingErrorEvent, type AutoroutingProgressEvent, type AutoroutingStartEvent, Battery, Board, Breakout, BreakoutPoint, Capacitor, Chip, Circuit, type ComponentWithPins, Constraint, Crystal, Cutout, Diode, FabricationNotePath, FabricationNoteText, Footprint, Fuse, type GenericConnectionsAndSelectorsSel, type GenericLocalAutorouter, Group, Hole, type IRenderable, Inductor, Jumper, Keepout, Led, type LocalCacheEngine, Mosfet, Net, NetLabel, NormalComponent, type Obstacle, PcbTrace, PinHeader, type PinLabelSpec, PlatedHole, Port, Potentiometer, PowerSource, PrimitiveComponent, Project, PushButton, type RenderPhase, type RenderPhaseFn, type RenderPhaseFunctions, type RenderPhaseStates, Renderable, Resistor, Resonator, RootCircuit, type RootCircuitEventName, SchematicBox, SchematicCell, SchematicRow, SchematicTable, SchematicText, type Sel, SilkscreenCircle, SilkscreenLine, SilkscreenPath, SilkscreenRect, SilkscreenText, type SimpleRouteConnection, type SimpleRouteJson, type SimplifiedPcbTrace, SmtPad, SolderJumper, Subcircuit, Switch, TestPoint, Trace, TraceHint, Transistor, Via, applyEditEvents, applyEditEventsToManualEditsFile, applyPcbEditEventsToManualEditsFile, applySchematicEditEventsToManualEditsFile, createUseComponent, getPhaseTimingsFromRenderEvents, getSimpleRouteJsonFromCircuitJson, normalizePinLabels, orderedRenderPhases, sel, useCapacitor, useChip, useDiode, useLed, useRenderedCircuit, useResistor };
