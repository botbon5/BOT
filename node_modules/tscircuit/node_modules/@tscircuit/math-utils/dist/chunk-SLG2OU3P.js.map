{"version":3,"sources":["../src/point-distance.ts"],"sourcesContent":["import type { Point, Bounds } from \"./common\"\nimport { distance } from \"./line-intersections\"\nimport { clamp } from \"./nearest-box\"\nimport type { Box } from \"./nearest-box\"\n\n/**\n * Returns the minimum distance from a point to a box.\n * If the point is inside the box, the distance is 0.\n */\nexport function pointToBoxDistance(p: Point, box: Box): number {\n  const halfWidth = box.width / 2\n  const halfHeight = box.height / 2\n  const minX = box.center.x - halfWidth\n  const maxX = box.center.x + halfWidth\n  const minY = box.center.y - halfHeight\n  const maxY = box.center.y + halfHeight\n\n  // Check if the point is inside the box\n  if (p.x >= minX && p.x <= maxX && p.y >= minY && p.y <= maxY) {\n    return 0\n  }\n\n  // Find the closest point on the box boundary\n  const closestX = clamp(p.x, minX, maxX)\n  const closestY = clamp(p.y, minY, maxY)\n\n  // Calculate the distance to the closest point\n  return distance(p, { x: closestX, y: closestY })\n}\n\n/**\n * Returns the minimum distance from a point to a bounds rectangle.\n * If the point is inside the bounds, the distance is 0.\n */\nexport function pointToBoundsDistance(p: Point, bounds: Bounds): number {\n  // Check if the point is inside the bounds\n  if (\n    p.x >= bounds.minX &&\n    p.x <= bounds.maxX &&\n    p.y >= bounds.minY &&\n    p.y <= bounds.maxY\n  ) {\n    return 0\n  }\n\n  // Find the closest point on the bounds boundary\n  const closestX = clamp(p.x, bounds.minX, bounds.maxX)\n  const closestY = clamp(p.y, bounds.minY, bounds.maxY)\n\n  // Calculate the distance to the closest point\n  return distance(p, { x: closestX, y: closestY })\n}\n\nexport function midpoint(p1: Point, p2: Point): Point {\n  return {\n    x: (p1.x + p2.x) / 2,\n    y: (p1.y + p2.y) / 2,\n  }\n}\n\nexport function distSq(p1: Point, p2: Point): number {\n  const dx = p1.x - p2.x\n  const dy = p1.y - p2.y\n  return dx * dx + dy * dy\n}\n"],"mappings":";;;;;;;;AASO,SAAS,mBAAmB,GAAU,KAAkB;AAC7D,QAAM,YAAY,IAAI,QAAQ;AAC9B,QAAM,aAAa,IAAI,SAAS;AAChC,QAAM,OAAO,IAAI,OAAO,IAAI;AAC5B,QAAM,OAAO,IAAI,OAAO,IAAI;AAC5B,QAAM,OAAO,IAAI,OAAO,IAAI;AAC5B,QAAM,OAAO,IAAI,OAAO,IAAI;AAG5B,MAAI,EAAE,KAAK,QAAQ,EAAE,KAAK,QAAQ,EAAE,KAAK,QAAQ,EAAE,KAAK,MAAM;AAC5D,WAAO;AAAA,EACT;AAGA,QAAM,WAAW,MAAM,EAAE,GAAG,MAAM,IAAI;AACtC,QAAM,WAAW,MAAM,EAAE,GAAG,MAAM,IAAI;AAGtC,SAAO,SAAS,GAAG,EAAE,GAAG,UAAU,GAAG,SAAS,CAAC;AACjD;AAMO,SAAS,sBAAsB,GAAU,QAAwB;AAEtE,MACE,EAAE,KAAK,OAAO,QACd,EAAE,KAAK,OAAO,QACd,EAAE,KAAK,OAAO,QACd,EAAE,KAAK,OAAO,MACd;AACA,WAAO;AAAA,EACT;AAGA,QAAM,WAAW,MAAM,EAAE,GAAG,OAAO,MAAM,OAAO,IAAI;AACpD,QAAM,WAAW,MAAM,EAAE,GAAG,OAAO,MAAM,OAAO,IAAI;AAGpD,SAAO,SAAS,GAAG,EAAE,GAAG,UAAU,GAAG,SAAS,CAAC;AACjD;AAEO,SAAS,SAAS,IAAW,IAAkB;AACpD,SAAO;AAAA,IACL,IAAI,GAAG,IAAI,GAAG,KAAK;AAAA,IACnB,IAAI,GAAG,IAAI,GAAG,KAAK;AAAA,EACrB;AACF;AAEO,SAAS,OAAO,IAAW,IAAmB;AACnD,QAAM,KAAK,GAAG,IAAI,GAAG;AACrB,QAAM,KAAK,GAAG,IAAI,GAAG;AACrB,SAAO,KAAK,KAAK,KAAK;AACxB;","names":[]}