<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="white" />
  <g>
    <circle data-type="point" data-label="schematic_component_0_center
component_center
center_schematic_component_0" data-x="0" data-y="0" cx="319.55323458935385" cy="101.26784145875266" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_0
vcc
unnamedsubcircuit428_connectivity_net2" data-x="-0.5191471000000001" data-y="0.0005122999999986888" cx="64.55896152236863" cy="101.01621033899511" r="3" fill="orange" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_1
vcc
unnamedsubcircuit428_connectivity_net1" data-x="0.5191471000000001" data-y="-0.0005122999999986888" cx="574.5475076563391" cy="101.5194725785102" r="3" fill="orange" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_component_1_center
component_center
center_schematic_component_1" data-x="0.0018191543247429928" data-y="-0.8906409106184038" cx="320.4467654106461" cy="538.7321585412474" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_2
vcc
unnamedsubcircuit428_connectivity_net0" data-x="-0.5173279456752571" data-y="-0.8901286106184051" cx="65.45249234366091" cy="538.4805274214898" r="3" fill="orange" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_3
vcc
unnamedsubcircuit428_connectivity_net1" data-x="0.5209662543247431" data-y="-0.8911532106184025" cx="575.4410384776313" cy="538.983789661005" r="3" fill="orange" />
  </g>
  <g>
    <polyline data-points="0.5191471000000001,-0.0005122999999986888 0.5209662543247431,-0.8911532106184025" data-type="line" data-label="" points="574.5475076563391,101.5194725785102 575.4410384776313,538.983789661005" fill="none" stroke="hsl(144, 100%, 50%, 0.5)" stroke-width="1" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_0" data-x="0" data-y="0" x="40" y="76.45724881662647" width="559.1064691787077" height="49.62118528425236" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.002035916704151327" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_1" data-x="0.0018191543247429998" data-y="-0.8906409106184038" x="40.893530821292245" y="513.9215658991211" width="559.1064691787078" height="49.62118528425242" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.002035916704151327" />
  </g>
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 491.17923044737256,
        "c": 0,
        "e": 319.55323458935385,
        "b": 0,
        "d": -491.17923044737256,
        "f": 101.26784145875266
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>