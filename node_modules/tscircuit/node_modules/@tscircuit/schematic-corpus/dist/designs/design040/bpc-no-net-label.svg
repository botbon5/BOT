<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="white" />
  <g>
    <circle data-type="point" data-label="schematic_component_0_center
component_center
center_schematic_component_0" data-x="0" data-y="0" cx="180.15516836628515" cy="320" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_0
vcc
unnamedsubcircuit1719_connectivity_net0" data-x="-0.5512907000000002" data-y="0.0002732499999993365" cx="51.65452653485954" cy="319.93630801248713" r="3" fill="orange" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_1
normal
unnamedsubcircuit1719_connectivity_net1" data-x="0.5512907000000002" data-y="-0.0002732499999993365" cx="308.65581019771076" cy="320.06369198751287" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_component_1_center
component_center
center_schematic_component_1" data-x="1.2" data-y="0" cx="459.86380520291357" cy="320" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_2
normal
unnamedsubcircuit1719_connectivity_net1" data-x="0.6487906999999997" data-y="-0.00027334999999961695" cx="331.3821369406867" cy="320.063715296566" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_3
gnd
unnamedsubcircuit1719_connectivity_net2" data-x="1.7512093000000002" data-y="0.00027334999999961695" cx="588.3454734651405" cy="319.936284703434" r="3" fill="purple" />
  </g>
  <g>
    <polyline data-points="0.5512907000000002,-0.0002732499999993365 0.6487906999999997,-0.00027334999999961695" data-type="line" data-label="" points="308.65581019771076,320.06369198751287 331.3821369406867,320.063715296566" fill="none" stroke="hsl(144, 100%, 50%, 0.5)" stroke-width="1" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_0" data-x="0" data-y="0" x="40" y="308.28178147762765" width="280.3103367325703" height="23.436437044744707" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.004290178571428572" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_1" data-x="1.2" data-y="0" x="319.7276104058272" y="308.28175816857447" width="280.2723895941728" height="23.43648366285106" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.004290178571428572" />
  </g>
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 233.09053069719036,
        "c": 0,
        "e": 180.15516836628515,
        "b": 0,
        "d": -233.09053069719036,
        "f": 320
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>