<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="white" />
  <g>
    <circle data-type="point" data-label="schematic_component_0_center
component_center
center_schematic_component_0" data-x="0.2" data-y="1.609699501685428" cx="55.07066693568803" cy="265.96929796406147" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_0
vcc
unnamedsubcircuit1374_connectivity_net2" data-x="0.8" data-y="2.009699501685428" cx="235.91867016394374" cy="145.40396247855767" r="3" fill="orange" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_1
vcc
unnamedsubcircuit1374_connectivity_net1" data-x="0.8" data-y="1.809699501685428" cx="235.91867016394374" cy="205.68663022130954" r="3" fill="orange" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_2
vcc
unnamedsubcircuit1374_connectivity_net3" data-x="0.8" data-y="1.609699501685428" cx="235.91867016394374" cy="265.96929796406147" r="3" fill="orange" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_3
normal
unnamedsubcircuit1374_connectivity_net0" data-x="0.8" data-y="1.209699501685428" cx="235.91867016394374" cy="386.5346334495653" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_component_1_center
component_center
center_schematic_component_1" data-x="1.5121129950222238" data-y="1.103782864516479" cx="450.55902553504706" cy="418.45932068399213" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_4
normal
unnamedsubcircuit1374_connectivity_net0" data-x="1.0663121950222239" data-y="1.2053701350164785" cx="316.18871800578205" cy="387.83956231176944" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_5
normal
unnamedsubcircuit1374_connectivity_net5" data-x="1.5086201950222238" data-y="0.8511838350164793" cx="449.5062490255876" cy="494.59603752144244" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_6
normal
unnamedsubcircuit1374_connectivity_net4" data-x="1.9579137950222238" data-y="1.2052457350164785" cx="584.929333064312" cy="387.87705813110546" r="3" fill="blue" />
  </g>
  <g>
    <polyline data-points="0.8,1.209699501685428 1.0663121950222239,1.2053701350164785" data-type="line" data-label="" points="235.91867016394374,386.5346334495653 316.18871800578205,387.83956231176944" fill="none" stroke="hsl(180, 100%, 50%, 0.5)" stroke-width="1" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_0" data-x="0.5" data-y="1.609699501685428" x="40.00000000000004" y="130.33329554286968" width="210.9893370996317" height="271.27200484238364" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.003317703205396829" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_1" data-x="1.5121129950222238" data-y="1.028276985016479" x="301.1180510700941" y="372.76889537608145" width="298.8819489299059" height="136.89780908104893" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.003317703205396829" />
  </g>
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 301.4133387137595,
        "c": 0,
        "e": -5.212000807063873,
        "b": 0,
        "d": -301.4133387137595,
        "f": 751.1541990929413
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>