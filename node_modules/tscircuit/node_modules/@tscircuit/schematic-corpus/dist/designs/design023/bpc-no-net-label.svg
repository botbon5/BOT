<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="white" />
  <g>
    <circle data-type="point" data-label="schematic_component_0_center
component_center
center_schematic_component_0" data-x="6.505" data-y="0.5" cx="320.51149371980705" cy="170.13441236714982" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_0
normal
unnamedsubcircuit924_connectivity_net1" data-x="6.504726750000001" data-y="-0.051290700000000355" cx="320.45235555555587" cy="289.4475686956523" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_1
vcc
unnamedsubcircuit924_connectivity_net0" data-x="6.505273249999999" data-y="1.0512907000000002" cx="320.570631884058" cy="50.82125603864736" r="3" fill="orange" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_component_1_center
component_center
center_schematic_component_1" data-x="6.5" data-y="-0.9" cx="319.4293681159422" cy="473.1295814492754" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_2
normal
unnamedsubcircuit924_connectivity_net1" data-x="6.504432900000001" data-y="-0.3637907" cx="320.388759033817" cy="357.0804189371981" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_3
gnd
unnamedsubcircuit924_connectivity_net2" data-x="6.504886400000004" data-y="-1.4362093" cx="320.4869078260879" cy="589.1787439613527" r="3" fill="purple" />
  </g>
  <g>
    <polyline data-points="6.504726750000001,-0.051290700000000355 6.504432900000001,-0.3637907" data-type="line" data-label="" points="320.45235555555587,289.4475686956523 320.388759033817,357.0804189371981" fill="none" stroke="hsl(72, 100%, 50%, 0.5)" stroke-width="1" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_0" data-x="6.505" data-y="0.49999999999999994" x="309.63109951690853" y="40" width="21.760788405796802" height="260.26882473429964" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.004620535714285715" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_1" data-x="6.502443200000002" data-y="-0.9" x="308.6081120772949" y="346.25916289855076" width="22.700051787440316" height="253.74083710144924" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.004620535714285715" />
  </g>
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 216.42512077294683,
        "c": 0,
        "e": -1087.3339169082121,
        "b": 0,
        "d": -216.42512077294683,
        "f": 278.3469727536232
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>