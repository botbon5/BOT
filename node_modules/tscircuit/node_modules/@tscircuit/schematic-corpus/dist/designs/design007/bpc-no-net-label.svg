<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="white" />
  <g>
    <circle data-type="point" data-label="schematic_component_0_center
component_center
center_schematic_component_0" data-x="0" data-y="0" cx="55.34346875969317" cy="320.71386940600775" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_0
vcc
unnamedsubcircuit250_connectivity_net1" data-x="0.6000000000000001" data-y="0.55" cx="239.46509387601137" cy="151.93571304938274" r="3" fill="orange" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_1
gnd
unnamedsubcircuit250_connectivity_net0" data-x="0.6000000000000001" data-y="-0.55" cx="239.46509387601137" cy="489.49202576263275" r="3" fill="purple" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_component_1_center
component_center
center_schematic_component_1" data-x="1.7246073493080432" data-y="0.003443294645892641" cx="584.5726484965976" cy="319.6572277294143" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_2
gnd
unnamedsubcircuit250_connectivity_net0" data-x="1.7248806993080428" data-y="-0.5477660053541076" cx="584.6565312403068" cy="488.8064812214613" r="3" fill="purple" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_3
vcc
unnamedsubcircuit250_connectivity_net1" data-x="1.7243339993080435" data-y="0.5546525946458929" cx="584.4887657528886" cy="150.50797423736728" r="3" fill="orange" />
  </g>
  <g>
    <polyline data-points="0.6000000000000001,0.55 1.7243339993080435,0.5546525946458929" data-type="line" data-label="" points="239.46509387601137,151.93571304938274 584.4887657528886,150.50797423736728" fill="none" stroke="hsl(90, 100%, 50%, 0.5)" stroke-width="1" />
  </g>
  <g>
    <polyline data-points="0.6000000000000001,-0.55 1.7248806993080428,-0.5477660053541076" data-type="line" data-label="" points="239.46509387601137,489.49202576263275 584.6565312403068,488.8064812214613" fill="none" stroke="hsl(180, 100%, 50%, 0.5)" stroke-width="1" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_0" data-x="0.30000000000000004" data-y="0" x="39.999999999999986" y="136.59224428968955" width="214.80856263570456" height="368.24325023263634" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.0032587155344786477" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_1" data-x="1.7246073493080432" data-y="0.0034432946458926583" x="569.1452969931954" y="135.16450547767408" width="30.854703006804584" height="368.9854445034804" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.0032587155344786477" />
  </g>
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 306.8693751938636,
        "c": 0,
        "e": 55.34346875969317,
        "b": 0,
        "d": -306.8693751938636,
        "f": 320.71386940600775
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>