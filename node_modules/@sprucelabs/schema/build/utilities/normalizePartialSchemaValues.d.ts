import { Schema, SchemaPartialValues, SchemaGetValuesOptions, SchemaFieldNames, SchemaPublicFieldNames, SchemaValues } from '../schemas.static.types';
import { ValuesWithPaths } from '../types/utilities.types';
export default function normalizePartialSchemaValues<S extends Schema, F extends SchemaFieldNames<S> = SchemaFieldNames<S>, PF extends SchemaPublicFieldNames<S> = SchemaPublicFieldNames<S>, CreateEntityInstances extends boolean = false, IncludePrivateFields extends boolean = true, Values extends SchemaPartialValues<S, CreateEntityInstances> = SchemaPartialValues<S, CreateEntityInstances>, IValuesWithPaths extends ValuesWithPaths<Values> = ValuesWithPaths<Values>, Fields extends keyof IValuesWithPaths = keyof IValuesWithPaths>(schema: S, values: IValuesWithPaths, options?: SchemaGetValuesOptions<S, F, PF, CreateEntityInstances, IncludePrivateFields>): Required<Pick<SchemaValues<S, CreateEntityInstances>, 
/** @ts-ignore */
Fields>>;
