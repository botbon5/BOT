import { FieldError } from '../errors/options.types';
import { FieldTemplateDetails, FieldTemplateDetailOptions } from '../types/template.types';
import AbstractField from './AbstractField';
import { ToValueTypeOptions, ValidateOptions } from './field.static.types';
import { TextFieldDefinition } from './TextField.types';
export default class TextField extends AbstractField<TextFieldDefinition> {
    static readonly description = "A text field. Converts non-strings into strings by calling toString(). Size set by options.";
    static generateTemplateDetails(options: FieldTemplateDetailOptions<TextFieldDefinition>): FieldTemplateDetails;
    validate(value: any, options: ValidateOptions<TextFieldDefinition>): FieldError[];
    toValueType<C extends boolean>(value: any, options?: ToValueTypeOptions<TextFieldDefinition, C>): string;
    private convertToString;
}
