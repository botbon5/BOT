import getStartOfDay from '../utilities/getStartOfDay.js';
import isUndefinedOrNull from '../utilities/isUndefinedOrNull.js';
import AbstractField from './AbstractField.js';
class DateField extends AbstractField {
    static generateTemplateDetails(options) {
        return {
            valueType: `${options.importAs}.DateFieldValue${options.definition.isArray ? '[]' : ''}`,
        };
    }
    validate(value, options) {
        const errors = super.validate(value, options);
        if (errors.length > 0) {
            return errors;
        }
        return validateDateValue({
            value,
            isRequired: this.isRequired,
            name: this.name,
        });
    }
    toValueType(value) {
        return value ? getStartOfDay(+value) : value;
    }
}
DateField.description = 'Date and time support.';
export default DateField;
export function validateDateValue(options) {
    const { value, isRequired, name } = options;
    if (isUndefinedOrNull(value) && !isRequired) {
        return [];
    }
    if (typeof value === 'number' || value instanceof Date) {
        return [];
    }
    else if (typeof value === 'string') {
        const date = new Date(value);
        if (date.toString() !== 'Invalid Date') {
            return [];
        }
    }
    return [
        {
            name,
            code: 'INVALID_PARAMETER',
            friendlyMessage: `This doesn't look like a date to me!`,
        },
    ];
}
