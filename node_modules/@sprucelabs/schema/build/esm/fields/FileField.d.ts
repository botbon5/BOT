import { FieldError } from '../errors/options.types';
import { FieldTemplateDetailOptions, FieldTemplateDetails } from '../types/template.types';
import AbstractField from './AbstractField';
import { ToValueTypeOptions, ValidateOptions } from './field.static.types';
import { FileFieldDefinition, FileFieldValue } from './FileField.types';
export default class FileField extends AbstractField<FileFieldDefinition> {
    static readonly description = "A way to handle files. Supports mime-type lookups.";
    static generateTemplateDetails(options: FieldTemplateDetailOptions<FileFieldDefinition>): FieldTemplateDetails;
    validate(value: FileFieldValue, _?: ValidateOptions<FileFieldDefinition>): FieldError[];
    toValueType<C extends boolean>(value: any, _options?: ToValueTypeOptions<FileFieldDefinition, C>): FileFieldValue;
}
