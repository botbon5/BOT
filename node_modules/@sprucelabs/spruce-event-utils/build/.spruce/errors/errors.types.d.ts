import { default as SchemaEntity } from '@sprucelabs/schema';
import * as SpruceSchema from '@sprucelabs/schema';
import AbstractSpruceError from '@sprucelabs/error';
export declare namespace SpruceErrors.SpruceEventUtils {
    interface MercuryResponseError {
        'responseErrors': (AbstractSpruceError<any>)[];
    }
    interface MercuryResponseErrorSchema extends SpruceSchema.Schema {
        id: 'mercuryResponseError';
        namespace: 'SpruceEventUtils';
        name: 'Mercury response error';
        fields: {
            /** . */
            'responseErrors': {
                type: 'raw';
                isRequired: true;
                isArray: true;
                options: {
                    valueType: `AbstractSpruceError<any>`;
                };
            };
        };
    }
    type MercuryResponseErrorEntity = SchemaEntity<SpruceErrors.SpruceEventUtils.MercuryResponseErrorSchema>;
}
export declare namespace SpruceErrors.SpruceEventUtils {
    interface InvalidEventName {
        'fullyQualifiedEventName': string;
        'validNames': string[];
    }
    interface InvalidEventNameSchema extends SpruceSchema.Schema {
        id: 'invalidEventName';
        namespace: 'SpruceEventUtils';
        name: 'Invalid event name';
        fields: {
            /** . */
            'fullyQualifiedEventName': {
                type: 'text';
                isRequired: true;
                options: undefined;
            };
            /** . */
            'validNames': {
                type: 'text';
                isRequired: true;
                isArray: true;
                options: undefined;
            };
        };
    }
    type InvalidEventNameEntity = SchemaEntity<SpruceErrors.SpruceEventUtils.InvalidEventNameSchema>;
}
export declare namespace SpruceErrors.SpruceEventUtils {
    interface EventPluginError {
    }
    interface EventPluginErrorSchema extends SpruceSchema.Schema {
        id: 'eventPluginError';
        namespace: 'SpruceEventUtils';
        name: 'event plugin error';
        fields: {};
    }
    type EventPluginErrorEntity = SchemaEntity<SpruceErrors.SpruceEventUtils.EventPluginErrorSchema>;
}
export declare namespace SpruceErrors.SpruceEventUtils {
    interface EventContractsNotSynced {
    }
    interface EventContractsNotSyncedSchema extends SpruceSchema.Schema {
        id: 'eventContractsNotSynced';
        namespace: 'SpruceEventUtils';
        name: 'EVENT_CONTRACTS_NOT_SYNCED';
        fields: {};
    }
    type EventContractsNotSyncedEntity = SchemaEntity<SpruceErrors.SpruceEventUtils.EventContractsNotSyncedSchema>;
}
export declare namespace SpruceErrors.SpruceEventUtils {
    interface EmptyMercuryResponse {
    }
    interface EmptyMercuryResponseSchema extends SpruceSchema.Schema {
        id: 'emptyMercuryResponse';
        namespace: 'SpruceEventUtils';
        name: 'empty mercury response';
        fields: {};
    }
    type EmptyMercuryResponseEntity = SchemaEntity<SpruceErrors.SpruceEventUtils.EmptyMercuryResponseSchema>;
}
export declare namespace SpruceErrors.SpruceEventUtils {
    interface DuplicateEvent {
        'fullyQualifiedEventName'?: string | undefined | null;
    }
    interface DuplicateEventSchema extends SpruceSchema.Schema {
        id: 'duplicateEvent';
        namespace: 'SpruceEventUtils';
        name: 'Duplicate event';
        fields: {
            /** . */
            'fullyQualifiedEventName': {
                type: 'text';
                options: undefined;
            };
        };
    }
    type DuplicateEventEntity = SchemaEntity<SpruceErrors.SpruceEventUtils.DuplicateEventSchema>;
}
