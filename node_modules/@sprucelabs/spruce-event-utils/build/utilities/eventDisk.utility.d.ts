interface Event {
    eventName: string;
    version: string;
}
interface Listener {
    eventName: string;
    eventNamespace: string;
    fullyQualifiedEventName: string;
    version: string;
}
declare const eventDiskUtil: {
    resolveListenerPath(destination: string, e: {
        eventNamespace?: string;
        eventName: string;
        version: string;
    }): string;
    splitPathToListener(match: string, seperator?: string): Listener;
    splitPathToEvent(match: string, seperator?: string): Event;
    resolveEventPath(destination: string, e: {
        fileName: "emitPayload.builder.ts" | "responsePayload.builder.ts" | "emitPermissions.builder.ts" | "listenPermissions.builder.ts";
        eventName: string;
        version: string;
    }): string;
    resolveCombinedEventsContractFile(cwd: string): string;
};
export default eventDiskUtil;
