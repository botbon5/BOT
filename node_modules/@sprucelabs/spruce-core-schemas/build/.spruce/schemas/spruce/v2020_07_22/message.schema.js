"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const schema_1 = require("@sprucelabs/schema");
const messageTarget_schema_1 = __importDefault(require("./messageTarget.schema"));
const messageSource_schema_1 = __importDefault(require("./messageSource.schema"));
const link_schema_1 = __importDefault(require("./link.schema"));
const choice_schema_1 = __importDefault(require("./choice.schema"));
const messageSchema = {
    id: 'message',
    version: 'v2020_07_22',
    namespace: 'Spruce',
    name: '',
    moduleToImportFromWhenRemote: '@sprucelabs/spruce-core-schemas',
    description: 'A discrete communication between two humans or a human and a machine.',
    fields: {
        /** . */
        'id': {
            type: 'id',
            isRequired: true,
            options: undefined
        },
        /** . An arbitrary id that can be used to track this message when being sent and not yet assigned an Id. */
        'trackingId': {
            type: 'id',
            hint: 'An arbitrary id that can be used to track this message when being sent and not yet assigned an Id.',
            options: undefined
        },
        /** . */
        'dateCreated': {
            type: 'number',
            isRequired: true,
            options: undefined
        },
        /** . */
        'dateSent': {
            type: 'number',
            options: undefined
        },
        /** . */
        'target': {
            type: 'schema',
            isRequired: true,
            options: { schema: messageTarget_schema_1.default, }
        },
        /** . */
        'source': {
            type: 'schema',
            isRequired: true,
            options: { schema: messageSource_schema_1.default, }
        },
        /** . */
        'errors': {
            type: 'text',
            isPrivate: true,
            isArray: true,
            options: undefined
        },
        /** . */
        'classification': {
            type: 'select',
            isRequired: true,
            options: { choices: [{ "value": "auth", "label": "Auth" }, { "value": "transactional", "label": "transactional" }, { "value": "promotional", "label": "Promotional" }, { "value": "incoming", "label": "incoming" }], }
        },
        /** . */
        'status': {
            type: 'select',
            isPrivate: true,
            defaultValue: "pending",
            options: { choices: [{ "value": "pending", "label": "Pending" }, { "value": "processing", "label": "Processing" }, { "value": "sent", "label": "Sent" }, { "value": "failed", "label": "Failed" }, { "value": "ignored", "label": "Ignored" }], }
        },
        /** . */
        'body': {
            type: 'text',
            isRequired: true,
            options: undefined
        },
        /** . */
        'context': {
            type: 'raw',
            isPrivate: true,
            options: { valueType: `Record<string, any>`, }
        },
        /** . */
        'topicId': {
            type: 'id',
            options: undefined
        },
        /** . */
        'links': {
            type: 'schema',
            isArray: true,
            minArrayLength: 0,
            options: { schema: link_schema_1.default, }
        },
        /** . */
        'choices': {
            type: 'schema',
            isArray: true,
            options: { schema: choice_schema_1.default, }
        },
    }
};
schema_1.SchemaRegistry.getInstance().trackSchema(messageSchema);
exports.default = messageSchema;
