var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { buildSchema, schemaChoicesToHash } from '@sprucelabs/schema';
import { roleSchema } from '@sprucelabs/spruce-core-schemas';
import { authorizerStatuses } from '../../constants.js';
const statusFields = authorizerStatuses.reduce((fields, status) => {
    const { name } = status, props = __rest(status
    // @ts-ignore
    , ["name"]);
    // @ts-ignore
    fields[name] = Object.assign(Object.assign({}, props), { type: 'boolean' });
    return fields;
}, {});
const statusFlagsSchema = buildSchema({
    id: 'statusFlags',
    fields: Object.assign({ default: {
            type: 'boolean',
            hint: 'What is the fallback if no status is set?',
        } }, statusFields),
});
const roleBases = schemaChoicesToHash(roleSchema, 'base');
const permissionDefaultsSchema = buildSchema({
    id: 'permissionDefaults',
    fields: Object.assign({ skill: {
            type: 'boolean',
        } }, Object.keys(roleBases).reduce((fields, baseSlug) => {
        //@ts-ignore
        fields[baseSlug] = {
            //@ts-ignore
            label: roleBases[baseSlug],
            type: 'schema',
            options: {
                schema: statusFlagsSchema,
            },
        };
        return fields;
    }, {})),
});
export default buildSchema({
    id: 'permissionContract',
    name: 'Permission contract',
    description: 'A Mercury Permission Contract',
    moduleToImportFromWhenRemote: '@sprucelabs/mercury-types',
    importsWhenRemote: ["import '@sprucelabs/mercury-types'"],
    fields: {
        id: {
            type: 'text',
            isRequired: true,
        },
        name: {
            type: 'text',
            label: 'Name',
            isRequired: true,
            hint: 'Human readable name for this contract',
        },
        description: {
            type: 'text',
            label: 'Description',
        },
        requireAllPermissions: {
            type: 'boolean',
            label: 'Require all permissions',
            defaultValue: false,
        },
        permissions: {
            type: 'schema',
            isRequired: true,
            isArray: true,
            minArrayLength: 0,
            options: {
                schema: {
                    id: 'permission',
                    name: 'Permission',
                    fields: {
                        id: {
                            type: 'text',
                            label: 'id',
                            isRequired: true,
                            hint: 'Hyphen separated id for this permission, e.g. can-unlock-doors',
                        },
                        name: {
                            type: 'text',
                            label: 'Name',
                            isRequired: true,
                            hint: 'Human readable name for this permission',
                        },
                        description: {
                            type: 'text',
                            label: 'Description',
                        },
                        requireAllStatuses: {
                            type: 'boolean',
                            label: 'Require all statuses',
                            defaultValue: false,
                        },
                        defaults: {
                            type: 'schema',
                            options: {
                                schema: permissionDefaultsSchema,
                            },
                        },
                        can: {
                            type: 'schema',
                            options: {
                                schema: statusFlagsSchema,
                            },
                        },
                    },
                },
            },
        },
    },
});
