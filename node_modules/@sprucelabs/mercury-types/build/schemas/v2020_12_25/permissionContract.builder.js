"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const schema_1 = require("@sprucelabs/schema");
const spruce_core_schemas_1 = require("@sprucelabs/spruce-core-schemas");
const constants_1 = require("../../constants");
const statusFields = constants_1.authorizerStatuses.reduce((fields, status) => {
    const { name, ...props } = status;
    // @ts-ignore
    fields[name] = {
        ...props,
        type: 'boolean',
    };
    return fields;
}, {});
const statusFlagsSchema = (0, schema_1.buildSchema)({
    id: 'statusFlags',
    fields: {
        default: {
            type: 'boolean',
            hint: 'What is the fallback if no status is set?',
        },
        ...statusFields,
    },
});
const roleBases = (0, schema_1.schemaChoicesToHash)(spruce_core_schemas_1.roleSchema, 'base');
const permissionDefaultsSchema = (0, schema_1.buildSchema)({
    id: 'permissionDefaults',
    fields: {
        skill: {
            type: 'boolean',
        },
        ...Object.keys(roleBases).reduce((fields, baseSlug) => {
            //@ts-ignore
            fields[baseSlug] = {
                //@ts-ignore
                label: roleBases[baseSlug],
                type: 'schema',
                options: {
                    schema: statusFlagsSchema,
                },
            };
            return fields;
        }, {}),
    },
});
exports.default = (0, schema_1.buildSchema)({
    id: 'permissionContract',
    name: 'Permission contract',
    description: 'A Mercury Permission Contract',
    moduleToImportFromWhenRemote: '@sprucelabs/mercury-types',
    importsWhenRemote: ["import '@sprucelabs/mercury-types'"],
    fields: {
        id: {
            type: 'text',
            isRequired: true,
        },
        name: {
            type: 'text',
            label: 'Name',
            isRequired: true,
            hint: 'Human readable name for this contract',
        },
        description: {
            type: 'text',
            label: 'Description',
        },
        requireAllPermissions: {
            type: 'boolean',
            label: 'Require all permissions',
            defaultValue: false,
        },
        permissions: {
            type: 'schema',
            isRequired: true,
            isArray: true,
            minArrayLength: 0,
            options: {
                schema: {
                    id: 'permission',
                    name: 'Permission',
                    fields: {
                        id: {
                            type: 'text',
                            label: 'id',
                            isRequired: true,
                            hint: 'Hyphen separated id for this permission, e.g. can-unlock-doors',
                        },
                        name: {
                            type: 'text',
                            label: 'Name',
                            isRequired: true,
                            hint: 'Human readable name for this permission',
                        },
                        description: {
                            type: 'text',
                            label: 'Description',
                        },
                        requireAllStatuses: {
                            type: 'boolean',
                            label: 'Require all statuses',
                            defaultValue: false,
                        },
                        defaults: {
                            type: 'schema',
                            options: {
                                schema: permissionDefaultsSchema,
                            },
                        },
                        can: {
                            type: 'schema',
                            options: {
                                schema: statusFlagsSchema,
                            },
                        },
                    },
                },
            },
        },
    },
});
