"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const schema_1 = require("@sprucelabs/schema");
const feedOptions_schema_1 = __importDefault(require("./feedOptions.schema"));
const permissionReference_schema_1 = __importDefault(require("./permissionReference.schema"));
const permissionContract_schema_1 = __importDefault(require("./permissionContract.schema"));
const eventSignatureSchema = {
    id: 'eventSignature',
    version: 'v2020_12_25',
    namespace: 'Mercury',
    name: 'Event Signature',
    moduleToImportFromWhenRemote: '@sprucelabs/mercury-types',
    fields: {
        /** . */
        'description': {
            type: 'text',
            options: undefined
        },
        /** . */
        'aiInstructions': {
            type: 'text',
            options: undefined
        },
        /** . */
        'isGlobal': {
            type: 'boolean',
            defaultValue: false,
            options: undefined
        },
        /** . */
        'responsePayloadSchema': {
            type: 'raw',
            options: { valueType: `SpruceSchema.Schema`, }
        },
        /** . */
        'emitPayloadSchema': {
            type: 'raw',
            options: { valueType: `SpruceSchema.Schema`, }
        },
        /** . */
        'feed': {
            type: 'schema',
            options: { schema: feedOptions_schema_1.default, }
        },
        /** . */
        'listenPermissions': {
            type: 'schema',
            options: { schema: permissionReference_schema_1.default, }
        },
        /** . */
        'emitPermissions': {
            type: 'schema',
            options: { schema: permissionReference_schema_1.default, }
        },
        /** . */
        'listenPermissionContract': {
            type: 'schema',
            options: { schema: permissionContract_schema_1.default, }
        },
        /** . */
        'emitPermissionContract': {
            type: 'schema',
            options: { schema: permissionContract_schema_1.default, }
        },
    }
};
schema_1.SchemaRegistry.getInstance().trackSchema(eventSignatureSchema);
exports.default = eventSignatureSchema;
