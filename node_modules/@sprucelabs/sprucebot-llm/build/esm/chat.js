var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { stdin as input, stdout as output } from 'node:process';
import * as readline from 'node:readline/promises.js';
import dotenv from 'dotenv';
import OpenAiAdapter from './bots/adapters/OpenAi.js';
import SprucebotLlmFactory from './bots/SprucebotLlmFactory.js';
import buildCallbackSkill from './examples/buildCallbackSkill.js';
import buildFileTransformerSkill from './examples/buildFileTransformerSkill.js';
import buildJokeSkill from './examples/buildJokeSkill.js';
import buildProfileSkill from './examples/buildProfileSkill.js';
import buildReceptionistSkill from './examples/buildReceptionistSkill.js';
dotenv.config();
const rl = readline.createInterface({ input, output });
void (() => __awaiter(void 0, void 0, void 0, function* () {
    console.clear();
    const adapter = OpenAiAdapter.Adapter(process.env.OPEN_AI_API_KEY);
    const bots = SprucebotLlmFactory.Factory(adapter);
    const skills = {
        jokes: buildJokeSkill(bots),
        profile: buildProfileSkill(bots),
        callbacks: buildCallbackSkill(bots),
        fileTransformer: buildFileTransformerSkill(bots),
        receptionist: buildReceptionistSkill(bots),
    };
    const bot = bots.Bot({
        skill: skills.callbacks,
        youAre: "a bot named Sprucebot that is in test mode. At the start of every conversation, you introduce yourself and announce that you are in test mode so I don't get confused! You are both hip and adorable. You say things like, 'Jeepers' and 'Golly' or even 'Jeezey peezy'!",
    });
    do {
        const input = yield rl.question('Message > ');
        yield bot.sendMessage(input, (message) => console.log('>', message));
    } while (!bot.getIsDone());
    console.log('Signing off...');
    rl.close();
}))();
