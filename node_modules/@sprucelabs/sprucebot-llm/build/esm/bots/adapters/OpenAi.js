var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { assertOptions } from '@sprucelabs/schema';
import OpenAI from 'openai';
import OpenAiMessageBuilder from './OpenAiMessageBuilder.js';
class OpenAiAdapter {
    // private log = buildLog('SprucebotLLM::OpenAiAdapter')
    constructor(apiKey) {
        assertOptions({ apiKey }, ['apiKey']);
        this.api = new OpenAiAdapter.OpenAI({ apiKey });
    }
    static Adapter(apiKey) {
        return new this(apiKey);
    }
    sendMessage(bot, options) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a, _b, _c, _d, _e, _f;
            const messageBuilder = OpenAiMessageBuilder.Builder(bot);
            const messages = messageBuilder.buildMessages();
            // this.log.info(
            //     'Sending message to OpenAI',
            //     JSON.stringify(messages, null, 2)
            // )
            const response = yield this.api.chat.completions.create({
                messages,
                model: (_a = options === null || options === void 0 ? void 0 : options.model) !== null && _a !== void 0 ? _a : 'gpt-4o',
            });
            const message = (_f = (_e = (_d = (_c = (_b = response.choices) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.content) === null || _e === void 0 ? void 0 : _e.trim()) !== null && _f !== void 0 ? _f : MESSAGE_RESPONSE_ERROR_MESSAGE;
            // this.log.info('Received response from OpenAI', message)
            return message;
        });
    }
}
OpenAiAdapter.OpenAI = OpenAI;
export default OpenAiAdapter;
export const MESSAGE_RESPONSE_ERROR_MESSAGE = "Oh no! Something went wrong and I can't talk right now!";
