var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import OpenAI from 'openai';
class SpyOpenAiApi extends OpenAI {
    constructor(config) {
        super(config);
        //@ts-ignore
        this.chat = {
            completions: {
                create: this.createCompletion.bind(this),
            },
        };
        SpyOpenAiApi.config = config;
    }
    createCompletion(options) {
        return __awaiter(this, void 0, void 0, function* () {
            SpyOpenAiApi.lastSentCompletion = options;
            const choices = [];
            if (SpyOpenAiApi.responseMessage) {
                choices.push({
                    finish_reason: 'stop',
                    index: 0,
                    logprobs: null,
                    message: {
                        content: SpyOpenAiApi.responseMessage,
                        role: 'assistant',
                        refusal: null,
                    },
                });
            }
            return {
                id: 'cmpl-1',
                model: 'text-davinci-003',
                created: 0,
                choices,
                object: 'chat.completion',
            };
        });
    }
}
SpyOpenAiApi.responseMessage = 'hello!';
export default SpyOpenAiApi;
