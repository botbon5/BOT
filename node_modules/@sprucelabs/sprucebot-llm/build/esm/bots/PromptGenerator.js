var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { assertOptions, normalizeSchemaValues, } from '@sprucelabs/schema';
import { Eta } from 'eta';
import { PROMPT_TEMPLATE } from './templates.js';
export default class PromptGenerator {
    constructor(bot, options) {
        var _a;
        this.eta = new Eta();
        this.log = process.env.SHOULD_LOG_GENERATED_PROMPTS === 'true'
            ? console.info
            : () => { };
        assertOptions({ bot }, ['bot']);
        this.bot = bot;
        this.promptTemplate = (_a = options === null || options === void 0 ? void 0 : options.promptTemplate) !== null && _a !== void 0 ? _a : PROMPT_TEMPLATE;
    }
    static Generator(bot, options) {
        var _a;
        return new ((_a = this.Class) !== null && _a !== void 0 ? _a : PromptGenerator)(bot, options);
    }
    generate() {
        return __awaiter(this, void 0, void 0, function* () {
            const _a = this.bot.serialize(), { stateSchema, state } = _a, rest = __rest(_a, ["stateSchema", "state"]);
            const { stateSchemaJson, stateJson } = this.stringifyState(stateSchema, state);
            const rendered = yield this.eta.renderStringAsync(this.promptTemplate, Object.assign({ stateSchemaJson,
                stateJson }, rest));
            this.log('Generated prompt:', rendered);
            return rendered;
        });
    }
    stringifyState(stateSchema, state) {
        if (!stateSchema) {
            return {
                stateSchemaJson: null,
                stateJson: null,
            };
        }
        const normalizedState = normalizeSchemaValues(stateSchema, state !== null && state !== void 0 ? state : {}, {});
        setUndefinedToNull(normalizedState);
        const stateSchemaJson = JSON.stringify(stateSchema);
        const stateJson = JSON.stringify(normalizedState);
        return { stateSchemaJson, stateJson };
    }
}
export function setUndefinedToNull(obj) {
    for (const key in obj) {
        if (obj.hasOwnProperty(key)) {
            if (obj[key] === undefined) {
                obj[key] = null;
            }
            else if (typeof obj[key] === 'object') {
                setUndefinedToNull(obj[key]);
            }
        }
    }
}
