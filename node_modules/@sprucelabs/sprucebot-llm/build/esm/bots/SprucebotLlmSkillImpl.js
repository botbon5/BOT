var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { AbstractEventEmitter } from '@sprucelabs/mercury-event-emitter';
import { defaultSchemaValues } from '@sprucelabs/schema';
import { llmEventContract, } from '../llm.types.js';
export default class SprucebotLlmSkillImpl extends AbstractEventEmitter {
    constructor(options) {
        super(llmEventContract);
        this.state = {};
        const _a = options !== null && options !== void 0 ? options : {}, { state, stateSchema } = _a, rest = __rest(_a, ["state", "stateSchema"]);
        this.options = Object.assign(Object.assign({}, rest), { stateSchema });
        this.stateSchema = stateSchema;
        this.state = stateSchema
            ? Object.assign(Object.assign({}, defaultSchemaValues(stateSchema)), state)
            : undefined;
    }
    updateState(updates) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.emit('did-update-state');
            this.state = Object.assign(Object.assign({}, this.state), updates);
        });
    }
    getState() {
        return this.state;
    }
    serialize() {
        return Object.assign(Object.assign({}, this.options), { stateSchema: this.stateSchema, state: this.state });
    }
}
