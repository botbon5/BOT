var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { assertOptions } from '@sprucelabs/schema';
import { assert } from '@sprucelabs/test-utils';
import SprucebotLlmSkillImpl from '../bots/SprucebotLlmSkillImpl.js';
export default class MockLlmSkill extends SprucebotLlmSkillImpl {
    constructor(options) {
        super(options);
        assertOptions(options, ['yourJobIfYouChooseToAcceptItIs']);
        MockLlmSkill.instance = this;
    }
    assertYourJobEquals(expected) {
        assert.isEqual(this.options.yourJobIfYouChooseToAcceptItIs, expected, 'yourJobIfYouChooseToAcceptItIs passed to constructor does not equal expected');
    }
    assertWeAreDoneWhenEquals(expected) {
        assert.isEqual(this.options.weAreDoneWhen, expected, 'weAreDoneWhen passed to constructor does not equal expected');
    }
    assertPleaseKeepInMindEquals(expected) {
        assert.isEqualDeep(this.options.pleaseKeepInMindThat, expected, 'pleaseKeepInMindThat passed to constructor does not equal expected');
    }
    assertModelEquals(model) {
        assert.isEqual(this.options.model, model, 'model passed to constructor does not equal expected');
    }
    assertStateSchemaEquals(expected) {
        assert.isEqualDeep(this.stateSchema, expected, 'stateSchema passed to constructor does not equal expected');
    }
    assertHasCallback(name, expectedOptions) {
        var _a, _b;
        const _c = (_b = (_a = this.options.callbacks) === null || _a === void 0 ? void 0 : _a[name]) !== null && _b !== void 0 ? _b : {}, { cb } = _c, options = __rest(_c, ["cb"]);
        assert.isTruthy(cb, 'Could not find callback with name: ' + name);
        if (expectedOptions) {
            assert.isEqualDeep(options, expectedOptions, `the options for the '${name}' callback don\`t match`);
        }
        return cb;
    }
    invokeCallback(cbName, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const cb = this.assertHasCallback(cbName);
            return yield cb(options);
        });
    }
}
