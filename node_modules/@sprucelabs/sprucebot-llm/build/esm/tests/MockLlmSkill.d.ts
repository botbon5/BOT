import { Schema, SchemaValues } from '@sprucelabs/schema';
import SprucebotLlmSkillImpl from '../bots/SprucebotLlmSkillImpl';
import { LlmCallback, SkillOptions } from '../llm.types';
export default class MockLlmSkill<StateSchema extends Schema = Schema, State extends SchemaValues<StateSchema> = SchemaValues<StateSchema>> extends SprucebotLlmSkillImpl<StateSchema, State> {
    static instance: MockLlmSkill;
    constructor(options: SkillOptions<StateSchema, State>);
    assertYourJobEquals(expected: string): void;
    assertWeAreDoneWhenEquals(expected: string | undefined): void;
    assertPleaseKeepInMindEquals(expected: string[] | undefined): void;
    assertModelEquals(model: string | undefined): void;
    assertStateSchemaEquals(expected: Schema | undefined): void;
    assertHasCallback(name: string, expectedOptions?: Omit<LlmCallback, 'cb'>): (options?: Record<string, any>) => import("../llm.types").LmmCallbackResponse | Promise<import("../llm.types").LmmCallbackResponse>;
    invokeCallback(cbName: string, options?: Record<string, any>): Promise<import("../llm.types").LmmCallbackResponse>;
}
