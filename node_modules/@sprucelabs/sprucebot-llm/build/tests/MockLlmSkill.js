"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const schema_1 = require("@sprucelabs/schema");
const test_utils_1 = require("@sprucelabs/test-utils");
const SprucebotLlmSkillImpl_1 = __importDefault(require("../bots/SprucebotLlmSkillImpl"));
class MockLlmSkill extends SprucebotLlmSkillImpl_1.default {
    constructor(options) {
        super(options);
        (0, schema_1.assertOptions)(options, ['yourJobIfYouChooseToAcceptItIs']);
        MockLlmSkill.instance = this;
    }
    assertYourJobEquals(expected) {
        test_utils_1.assert.isEqual(this.options.yourJobIfYouChooseToAcceptItIs, expected, 'yourJobIfYouChooseToAcceptItIs passed to constructor does not equal expected');
    }
    assertWeAreDoneWhenEquals(expected) {
        test_utils_1.assert.isEqual(this.options.weAreDoneWhen, expected, 'weAreDoneWhen passed to constructor does not equal expected');
    }
    assertPleaseKeepInMindEquals(expected) {
        test_utils_1.assert.isEqualDeep(this.options.pleaseKeepInMindThat, expected, 'pleaseKeepInMindThat passed to constructor does not equal expected');
    }
    assertModelEquals(model) {
        test_utils_1.assert.isEqual(this.options.model, model, 'model passed to constructor does not equal expected');
    }
    assertStateSchemaEquals(expected) {
        test_utils_1.assert.isEqualDeep(this.stateSchema, expected, 'stateSchema passed to constructor does not equal expected');
    }
    assertHasCallback(name, expectedOptions) {
        const { cb, ...options } = this.options.callbacks?.[name] ?? {};
        test_utils_1.assert.isTruthy(cb, 'Could not find callback with name: ' + name);
        if (expectedOptions) {
            test_utils_1.assert.isEqualDeep(options, expectedOptions, `the options for the '${name}' callback don\`t match`);
        }
        return cb;
    }
    async invokeCallback(cbName, options) {
        const cb = this.assertHasCallback(cbName);
        return await cb(options);
    }
}
exports.default = MockLlmSkill;
