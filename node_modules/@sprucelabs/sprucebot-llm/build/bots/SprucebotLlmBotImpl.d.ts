import { AbstractEventEmitter } from '@sprucelabs/mercury-event-emitter';
import { Schema, SchemaValues } from '@sprucelabs/schema';
import { BotOptions, LlmAdapter, LlmEventContract, LlmMessage, MessageResponseCallback, SendMessage, SerializedBot, SprucebotLlmBot, SprucebotLLmSkill } from '../llm.types';
export default class SprucebotLlmBotImpl<StateSchema extends Schema = Schema, State extends SchemaValues<StateSchema> = SchemaValues<StateSchema>> extends AbstractEventEmitter<LlmEventContract> implements SprucebotLlmBot<StateSchema, State> {
    static messageMemoryLimit: number;
    protected adapter: LlmAdapter;
    private youAre;
    private stateSchema?;
    protected state?: Partial<State>;
    private isDone;
    protected messages: LlmMessage[];
    protected skill?: SprucebotLLmSkill;
    constructor(options: BotOptions<StateSchema, State>);
    clearMessageHistory(): void;
    markAsDone(): void;
    getIsDone(): boolean;
    serialize(): SerializedBot<StateSchema, State>;
    sendMessage(message: SendMessage, cb?: MessageResponseCallback): Promise<string>;
    private optionallyUpdateState;
    private parseResponse;
    private sendMessageToAdapter;
    private trackMessage;
    updateState(newState: Partial<State>): Promise<void>;
    setSkill(skill: SprucebotLLmSkill<any>): void;
}
