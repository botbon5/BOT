var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { exec } from 'child_process';
import os from 'os';
import pathUtil from 'path';
import { SchemaError } from '@sprucelabs/schema';
import fsUtil from 'fs-extra';
import * as uuid from 'uuid';
import { HASH_SPRUCE_BUILD_DIR, HASH_SPRUCE_DIR, HASH_SPRUCE_DIR_NAME, } from '../constants.js';
const diskUtil = {
    writeFile(destination, contents) {
        fsUtil.outputFileSync(destination, contents);
    },
    readDir(destination) {
        return fsUtil.readdirSync(destination);
    },
    readFile(source) {
        if (!fsUtil.existsSync(source)) {
            throw new Error(`No file to read at ${source}`);
        }
        return fsUtil.readFileSync(source).toString();
    },
    deleteFile(destination) {
        if (fsUtil.existsSync(destination)) {
            fsUtil.removeSync(destination);
        }
    },
    createDir(destination) {
        fsUtil.ensureDirSync(destination);
    },
    moveDir(source, destination) {
        fsUtil.moveSync(source, destination);
    },
    moveFile(source, destination) {
        fsUtil.moveSync(source, destination);
    },
    copyDir(source, destination) {
        return __awaiter(this, void 0, void 0, function* () {
            this.createDir(destination);
            return new Promise((resolve, reject) => {
                exec(`cd ${source} && tar cf - . | (cd ${destination}; tar xf -)`, { maxBuffer: 1024 * 1024 * 5 }, (err, stdout) => {
                    if (err) {
                        reject(err);
                        return;
                    }
                    resolve(stdout);
                });
            });
        });
    },
    deleteDir(target) {
        const resolved = this.resolvePath(target);
        if (fsUtil.existsSync(resolved)) {
            fsUtil.removeSync(resolved);
        }
    },
    doesFileExist(target) {
        const resolved = this.resolvePath(target);
        return fsUtil.existsSync(resolved);
    },
    isDir(target) {
        const resolved = this.resolvePath(target);
        if (this.doesDirExist(resolved)) {
            return fsUtil.lstatSync(resolved).isDirectory();
        }
        return false;
    },
    isDirPath(path) {
        const resolved = this.resolvePath(path);
        if (this.isDir(resolved)) {
            return true;
        }
        return pathUtil.extname(resolved).length === 0;
    },
    isFile(target) {
        const resolved = this.resolvePath(target);
        if (this.doesFileExist(resolved)) {
            return fsUtil.lstatSync(resolved).isFile();
        }
        return false;
    },
    doesDirExist(target) {
        const resolved = this.resolvePath(target);
        return fsUtil.existsSync(resolved);
    },
    resolveHashSprucePath(cwd, ...filePath) {
        const parts = cwd.split(pathUtil.sep);
        do {
            const path = pathUtil.join('/', ...parts, HASH_SPRUCE_DIR);
            if (this.doesDirExist(path)) {
                return this.resolvePath(path, ...filePath);
            }
            parts.pop();
        } while (parts.length > 0);
        throw new Error(`.spruce directory not found at ${cwd}`);
    },
    doesHashSprucePathExist(cwd, ...filePath) {
        try {
            this.resolveHashSprucePath(cwd, ...filePath);
            return true;
        }
        catch (_a) {
            return false;
        }
    },
    resolveBuiltHashSprucePath(cwd, ...filePath) {
        const parts = cwd.split(pathUtil.sep);
        do {
            const path = pathUtil.join('/', ...parts, HASH_SPRUCE_BUILD_DIR);
            if (this.doesDirExist(path)) {
                return this.resolvePath(path, ...filePath);
            }
            parts.pop();
        } while (parts.length > 0);
        throw new Error(`Built .spruce directory not found at ${cwd}. Try \`spruce build\` and try again.`);
    },
    doesBuiltHashSprucePathExist(cwd, ...filePath) {
        try {
            this.resolveBuiltHashSprucePath(cwd, ...filePath);
            return true;
        }
        catch (_a) {
            return false;
        }
    },
    isFileDifferent(destination, contents) {
        const currentContents = this.readFile(destination);
        return currentContents != contents;
    },
    deleteEmptyDirs(dir) {
        if (!dir) {
            throw new SchemaError({
                code: 'MISSING_PARAMETERS',
                parameters: ['dir'],
            });
        }
        if (!this.doesDirExist(dir)) {
            throw new SchemaError({
                code: 'INVALID_PARAMETERS',
                parameters: ['dir'],
                friendlyMessage: `No directory found at ${dir} to clean.`,
            });
        }
        const dirname = pathUtil.resolve(dir);
        const remove = (dir, depth = 0) => {
            const thisDepth = depth + 1;
            if (!diskUtil.isDir(dir)) {
                return;
            }
            let files = fsUtil.readdirSync(dir);
            for (let filepath of files) {
                remove(pathUtil.join(dir, filepath), thisDepth);
            }
            let filesAfter = fsUtil.readdirSync(dir);
            if (depth > 0 && filesAfter.length === 0) {
                diskUtil.deleteDir(dir);
            }
        };
        return remove(dirname);
    },
    resolvePath(cwd, ...filePath) {
        let builtPath = pathUtil.join(...filePath);
        if (builtPath[0] !== '/') {
            // Relative to the cwd
            if (builtPath.substr(0, 2) === './') {
                builtPath = builtPath.substr(1);
            }
            builtPath = pathUtil.join(cwd, builtPath);
        }
        if (builtPath.search('#') > -1) {
            builtPath = builtPath.replace('#spruce', HASH_SPRUCE_DIR);
        }
        return builtPath;
    },
    resolveRelativePath(path1, path2) {
        const path = pathUtil.relative(path1, path2);
        if (path[0] !== '.') {
            return `.${pathUtil.sep}${path}`;
        }
        return path;
    },
    resolveFile(...pathItems) {
        const extensions = ['', '.js', '.ts'];
        for (const extension of extensions) {
            const items = [...pathItems];
            items[pathItems.length - 1] += extension;
            //@ts-ignore
            const resolved = this.resolvePath(...items);
            if (this.doesFileExist(resolved)) {
                return resolved;
            }
        }
        return false;
    },
    createTempDir(...files) {
        const tmpDir = os.tmpdir();
        const targetDir = pathUtil.join(tmpDir, ...files);
        this.createDir(targetDir);
        return targetDir;
    },
    createRandomTempDir() {
        return this.createTempDir(uuid.v4());
    },
    hasFileChanged(...filePath) {
        if (!filePath || !(filePath.length > 0)) {
            throw new SchemaError({
                code: 'MISSING_PARAMETERS',
                parameters: ['file'],
            });
        }
        //@ts-ignore
        const file = this.resolvePath(...filePath);
        const cacheFile = this.getFileChangedCacheFile(file);
        let fileStat;
        try {
            fileStat = fsUtil.statSync(file);
        }
        catch (err) {
            return true;
        }
        let cacheFileStat;
        try {
            cacheFileStat = fsUtil.statSync(cacheFile);
        }
        catch (err) {
            //@ts-ignore
        }
        if (!cacheFileStat || cacheFileStat.ctimeMs < fileStat.ctimeMs) {
            this.writeFile(cacheFile, '');
            return true;
        }
        return false;
    },
    markFileAsUnchanged(...filePath) {
        const cacheCheckFile = this.getFileChangedCacheFile(
        //@ts-ignore
        this.resolvePath(...filePath));
        diskUtil.writeFile(cacheCheckFile, '');
    },
    resolveCacheDirForDir(dir) {
        return this.resolvePath(dir, '.change_cache');
    },
    resolveFileInHashSpruceDir(cwd, ...filePath) {
        const dirs = ['build', 'src'];
        for (const dir of dirs) {
            const path = this.resolvePath(cwd, ...[dir, HASH_SPRUCE_DIR_NAME, ...filePath]);
            const file = this.resolveFile(path);
            if (file) {
                return file;
            }
        }
        const path = diskUtil.resolvePath(
        //@ts-ignore
        ...[cwd, '[build|src]', HASH_SPRUCE_DIR_NAME, ...filePath]);
        throw new Error(`Could not find ${path}.[ts|js] in the hash spruce dir!`);
    },
    getFileChangedCacheFile(file) {
        if (!file) {
            throw new SchemaError({
                code: 'MISSING_PARAMETERS',
                parameters: ['file'],
            });
        }
        const dirname = pathUtil.dirname(file);
        const filename = pathUtil.basename(file);
        const changeCacheDir = this.resolveCacheDirForDir(dirname);
        const cacheFile = this.resolvePath(changeCacheDir, filename.replace(/\.\./g, '__'));
        if (!this.doesDirExist(changeCacheDir)) {
            fsUtil.mkdirSync(changeCacheDir, { recursive: true });
        }
        const gitignoreFile = diskUtil.resolvePath(changeCacheDir, '.gitignore');
        if (!diskUtil.doesFileExist(gitignoreFile)) {
            diskUtil.writeFile(gitignoreFile, '*');
        }
        return cacheFile;
    },
};
export default diskUtil;
