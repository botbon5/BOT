export const functionDelegationUtil = {
    getAllFuncs(toCheck) {
        const props = [];
        let obj = toCheck;
        do {
            props.push(...Object.getOwnPropertyNames(obj));
        } while ((obj = Object.getPrototypeOf(obj)));
        return props.sort().filter((e, i, arr) => {
            return e != arr[i + 1] && typeof toCheck[e] == 'function';
        });
    },
    delegateFunctionCalls(from, to) {
        const props = this.getAllFuncs(to);
        for (const prop of props) {
            //@ts-ignore
            if (!from[prop]) {
                //@ts-ignore
                from[prop] = (...args) => {
                    //@ts-ignore
                    return to[prop](...args);
                };
            }
        }
    },
};
export default functionDelegationUtil;
