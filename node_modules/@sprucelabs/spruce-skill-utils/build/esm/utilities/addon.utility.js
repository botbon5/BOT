var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import pathUtil from 'path';
import globby from '@sprucelabs/globby';
const addonUtil = {
    import(options, ...path) {
        return __awaiter(this, void 0, void 0, function* () {
            const results = yield globby(pathUtil.join(...path, '**', '*.addon.[t|j]s'));
            const all = results.map((path) => {
                const result = require(path);
                if (typeof (result === null || result === void 0 ? void 0 : result.default) === 'function') {
                    return result.default(options);
                }
            });
            yield Promise.all(all);
            return results.length;
        });
    },
    importSync(options, ...path) {
        const results = globby.sync(pathUtil.join(...path, '**', '*.addon.[t|j]s'));
        results.forEach((path) => {
            const result = require(path);
            if (typeof (result === null || result === void 0 ? void 0 : result.default) === 'function') {
                result.default(options);
            }
        });
        return results.length;
    },
};
export default addonUtil;
