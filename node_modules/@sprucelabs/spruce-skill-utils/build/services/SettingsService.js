"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const get_1 = __importDefault(require("lodash/get"));
const set_1 = __importDefault(require("lodash/set"));
const unset_1 = __importDefault(require("lodash/unset"));
const constants_1 = require("../constants");
const disk_utility_1 = __importDefault(require("../utilities/disk.utility"));
class SettingsService {
    constructor(cwd) {
        this.fileName = 'settings.json';
        this.cwd = cwd;
    }
    isMarkedAsInstalled(code) {
        const settings = this.loadSettings();
        return !!settings.installed?.find((c) => c === code);
    }
    markAsInstalled(code) {
        if (!this.isMarkedAsInstalled(code)) {
            const settings = this.loadSettings();
            if (!settings.installed) {
                settings.installed = [];
            }
            if (settings.installed.indexOf(code) === -1) {
                settings.installed.push(code);
                this.saveSettings(settings);
            }
        }
    }
    markAsPermanentlySkipped(code) {
        const settings = this.loadSettings();
        if (!settings.skipped) {
            settings.skipped = [];
        }
        if (settings.installed) {
            settings.installed = settings.installed.filter((c) => c !== code);
        }
        if (settings.skipped.indexOf(code) === -1) {
            settings.skipped.push(code);
            this.saveSettings(settings);
        }
    }
    isMarkedAsPermanentlySkipped(code) {
        const settings = this.loadSettings();
        return !!settings.skipped?.find((c) => c === code);
    }
    get(key) {
        return (0, get_1.default)(this.loadSettings(), key);
    }
    set(key, value) {
        const settings = this.loadSettings();
        (0, set_1.default)(settings, key, value);
        this.saveSettings(settings);
    }
    unset(key) {
        const doesFileExist = disk_utility_1.default.doesFileExist(this.getSettingsPath());
        if (!doesFileExist) {
            return;
        }
        const settings = this.loadSettings();
        (0, unset_1.default)(settings, key);
        this.saveSettings(settings);
        this.settings = undefined;
    }
    loadSettings() {
        const path = this.getSettingsPath();
        if (!this.settings) {
            try {
                const contents = disk_utility_1.default.readFile(path);
                this.settings = JSON.parse(contents);
            }
            catch {
                this.settings = {};
            }
        }
        return this.settings;
    }
    getSettingsPath() {
        return disk_utility_1.default.resolvePath(this.cwd, constants_1.HASH_SPRUCE_DIR, this.fileName);
    }
    saveSettings(settings) {
        const path = disk_utility_1.default.resolvePath(this.cwd, constants_1.HASH_SPRUCE_DIR, this.fileName);
        const contents = JSON.stringify(settings, null, 2);
        this.write(path, contents);
    }
    write(path, contents) {
        disk_utility_1.default.writeFile(path, contents);
    }
    setFile(name) {
        this.fileName = name;
    }
}
exports.default = SettingsService;
