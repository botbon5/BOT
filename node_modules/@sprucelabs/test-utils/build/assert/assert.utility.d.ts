import { ISpruceAssert } from './assert';
export declare const UNDEFINED_PLACEHOLDER = "_____________undefined_____________";
export declare const FUNCTION_PLACEHOLDER = "_____________function_____________";
export declare const CIRCULAR_PLACEHOLDER = "_____________circular_____________";
export declare const NULL_PLACEHOLDER = "_____________null_____________";
declare const assertUtil: {
    fail(message?: string, stack?: string): never;
    stringify(object: any): string;
    replacePlaceholders(str: string): string;
    dropInPlaceholders(obj: Record<string, any>): any[] | Record<string, any>;
    dropInPlaceholder(obj: Record<string, any>, checker: (obj: any, depth: number) => boolean, placeholder: string, depth?: number): any[] | Record<string, any>;
    doHaystacksPassCheck(haystacks: any[], needle: any, check: ISpruceAssert["doesInclude"]): boolean;
    assertTypeof(actual: any, type: string, message: string | undefined): void;
    assertErrorIncludes(matcher: string | RegExp | undefined, err: Error, msg?: string | undefined): void;
    partialContains(object: any, subObject: any): boolean | undefined;
    valueAtPath(object: Record<string, any>, path: string): any;
    parseIncludeNeedle(needle: any): {
        needleHasArrayNotation: boolean;
        path?: string;
        expected?: any;
    };
    splitPathBasedOnArrayNotation(path: string, haystack: any): {
        actualBeforeArray: any;
        pathAfterFirstArray: string;
    };
    foundUsing3rdPartyIncludes(haystack: any, needle: any, isHaystackObject: boolean): boolean;
};
export default assertUtil;
