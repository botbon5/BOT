var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import path from 'path';
import coreGlobby from 'globby';
const globby = function globby(patterns, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const pats = normalizePaths(patterns);
        return coreGlobby(pats, options);
    });
};
globby.sep = path.sep;
globby.sync = function (patterns, options) {
    const pats = normalizePaths(patterns);
    return coreGlobby.sync(pats, options);
};
function normalizePaths(patterns) {
    const normalized = Array.isArray(patterns) ? patterns : [patterns];
    const pats = normalized.map((n) => n.split(globby.sep).join(path.posix.sep));
    return pats;
}
export default globby;
