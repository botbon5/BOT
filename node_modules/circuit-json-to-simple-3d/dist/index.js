// lib/index.ts
import { cju } from "@tscircuit/circuit-json-util";
import { renderScene } from "@tscircuit/simple-3d-svg";

// lib/getDefaultCameraForPcbBoard.ts
function getDefaultCameraForPcbBoard(pcbBoard) {
  const w = pcbBoard.width;
  const h = pcbBoard.height;
  const cx = pcbBoard.center?.x;
  const cz = pcbBoard.center?.y;
  const dist = Math.max(w, h) * 1.5;
  return {
    position: { x: cx - dist, y: dist, z: cz - dist },
    lookAt: { x: cx, y: 0, z: cz },
    focalLength: 2
  };
}

// lib/index.ts
function convertCircuitJsonToSimple3dSvg(circuitJson, opts = {}) {
  const db = cju(circuitJson);
  const boxes = [];
  const pcbBoard = db.pcb_board.list()[0];
  if (!pcbBoard) throw new Error("No pcb_board, can't render to 3d");
  const camera = opts.camera ?? getDefaultCameraForPcbBoard(pcbBoard);
  if (!camera.focalLength) {
    camera.focalLength = 1;
  }
  boxes.push({
    center: {
      x: pcbBoard.center.x,
      y: 0,
      z: pcbBoard.center.y
    },
    size: {
      x: pcbBoard.width,
      y: pcbBoard.thickness,
      z: pcbBoard.height
    },
    color: "rgba(0,140,0,0.8)"
  });
  const DEFAULT_COMP_HEIGHT = 2;
  for (const comp of db.pcb_component.list()) {
    const sourceComponent = db.source_component.get(comp.source_component_id);
    boxes.push({
      center: {
        x: comp.center.x,
        y: pcbBoard.thickness / 2 + DEFAULT_COMP_HEIGHT / 2,
        z: comp.center.y
      },
      size: {
        x: comp.width,
        y: Math.min(Math.min(comp.width, comp.height), DEFAULT_COMP_HEIGHT),
        z: comp.height
      },
      color: "rgba(128,128,128,0.9)",
      topLabel: sourceComponent?.name ?? "?",
      topLabelColor: "white"
    });
  }
  return renderScene(
    { boxes, camera },
    {
      backgroundColor: "lightgray"
    }
  );
}
export {
  convertCircuitJsonToSimple3dSvg
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbGliL2luZGV4LnRzIiwgIi4uL2xpYi9nZXREZWZhdWx0Q2FtZXJhRm9yUGNiQm9hcmQudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB0eXBlIHsgQ2lyY3VpdEpzb24gfSBmcm9tIFwiY2lyY3VpdC1qc29uXCJcbmltcG9ydCB7IGNqdSB9IGZyb20gXCJAdHNjaXJjdWl0L2NpcmN1aXQtanNvbi11dGlsXCJcbmltcG9ydCB7IHJlbmRlclNjZW5lLCB0eXBlIEJveCB9IGZyb20gXCJAdHNjaXJjdWl0L3NpbXBsZS0zZC1zdmdcIlxuaW1wb3J0IHsgZ2V0RGVmYXVsdENhbWVyYUZvclBjYkJvYXJkIH0gZnJvbSBcIi4vZ2V0RGVmYXVsdENhbWVyYUZvclBjYkJvYXJkXCJcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRDaXJjdWl0SnNvblRvU2ltcGxlM2RTdmcoXG4gIGNpcmN1aXRKc29uOiBDaXJjdWl0SnNvbixcbiAgb3B0czoge1xuICAgIGNhbWVyYT86IHtcbiAgICAgIHBvc2l0aW9uOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB6OiBudW1iZXIgfVxuICAgICAgbG9va0F0OiB7IHg6IG51bWJlcjsgeTogbnVtYmVyOyB6OiBudW1iZXIgfVxuICAgICAgZm9jYWxMZW5ndGg/OiBudW1iZXJcbiAgICB9XG4gIH0gPSB7fSxcbik6IHN0cmluZyB7XG4gIGNvbnN0IGRiID0gY2p1KGNpcmN1aXRKc29uKVxuICBjb25zdCBib3hlczogQm94W10gPSBbXVxuXG4gIGNvbnN0IHBjYkJvYXJkID0gZGIucGNiX2JvYXJkLmxpc3QoKVswXVxuXG4gIGlmICghcGNiQm9hcmQpIHRocm93IG5ldyBFcnJvcihcIk5vIHBjYl9ib2FyZCwgY2FuJ3QgcmVuZGVyIHRvIDNkXCIpXG5cbiAgLy8gVE9ETyBpZiBjYW1lcmEgbm90XG4gIGNvbnN0IGNhbWVyYSA9IG9wdHMuY2FtZXJhID8/IGdldERlZmF1bHRDYW1lcmFGb3JQY2JCb2FyZChwY2JCb2FyZClcbiAgaWYgKCFjYW1lcmEuZm9jYWxMZW5ndGgpIHtcbiAgICBjYW1lcmEuZm9jYWxMZW5ndGggPSAxXG4gIH1cblxuICAvLyBwY2IgYm9hcmQgYXMgYSB0aGluIGdyZWVuIGJveCBseWluZyBpbiB0aGUgWC1aIHBsYW5lXG4gIGJveGVzLnB1c2goe1xuICAgIGNlbnRlcjoge1xuICAgICAgeDogcGNiQm9hcmQuY2VudGVyLngsXG4gICAgICB5OiAwLFxuICAgICAgejogcGNiQm9hcmQuY2VudGVyLnksXG4gICAgfSxcbiAgICBzaXplOiB7XG4gICAgICB4OiBwY2JCb2FyZC53aWR0aCxcbiAgICAgIHk6IHBjYkJvYXJkLnRoaWNrbmVzcyxcbiAgICAgIHo6IHBjYkJvYXJkLmhlaWdodCxcbiAgICB9LFxuICAgIGNvbG9yOiBcInJnYmEoMCwxNDAsMCwwLjgpXCIsXG4gIH0pXG5cbiAgY29uc3QgREVGQVVMVF9DT01QX0hFSUdIVCA9IDIgLy8gbW0gXHUyMDEzIGFyYml0cmFyeSBleHRydXNpb24gZm9yIGNvbXBvbmVudHNcblxuICBmb3IgKGNvbnN0IGNvbXAgb2YgZGIucGNiX2NvbXBvbmVudC5saXN0KCkpIHtcbiAgICBjb25zdCBzb3VyY2VDb21wb25lbnQgPSBkYi5zb3VyY2VfY29tcG9uZW50LmdldChjb21wLnNvdXJjZV9jb21wb25lbnRfaWQpXG4gICAgYm94ZXMucHVzaCh7XG4gICAgICBjZW50ZXI6IHtcbiAgICAgICAgeDogY29tcC5jZW50ZXIueCxcbiAgICAgICAgeTogcGNiQm9hcmQudGhpY2tuZXNzIC8gMiArIERFRkFVTFRfQ09NUF9IRUlHSFQgLyAyLFxuICAgICAgICB6OiBjb21wLmNlbnRlci55LFxuICAgICAgfSxcbiAgICAgIHNpemU6IHtcbiAgICAgICAgeDogY29tcC53aWR0aCxcbiAgICAgICAgeTogTWF0aC5taW4oTWF0aC5taW4oY29tcC53aWR0aCwgY29tcC5oZWlnaHQpLCBERUZBVUxUX0NPTVBfSEVJR0hUKSxcbiAgICAgICAgejogY29tcC5oZWlnaHQsXG4gICAgICB9LFxuICAgICAgY29sb3I6IFwicmdiYSgxMjgsMTI4LDEyOCwwLjkpXCIsXG4gICAgICB0b3BMYWJlbDogc291cmNlQ29tcG9uZW50Py5uYW1lID8/IFwiP1wiLFxuICAgICAgdG9wTGFiZWxDb2xvcjogXCJ3aGl0ZVwiLFxuICAgIH0pXG4gIH1cblxuICByZXR1cm4gcmVuZGVyU2NlbmUoXG4gICAgeyBib3hlcywgY2FtZXJhIH0sXG4gICAge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiBcImxpZ2h0Z3JheVwiLFxuICAgIH0sXG4gIClcbn1cbiIsICJpbXBvcnQgdHlwZSB7IFBjYkJvYXJkIH0gZnJvbSBcImNpcmN1aXQtanNvblwiXG5pbXBvcnQgdHlwZSB7IENhbWVyYSB9IGZyb20gXCJAdHNjaXJjdWl0L3NpbXBsZS0zZC1zdmdcIlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVmYXVsdENhbWVyYUZvclBjYkJvYXJkKHBjYkJvYXJkOiBQY2JCb2FyZCk6IENhbWVyYSB7XG4gIGNvbnN0IHcgPSBwY2JCb2FyZC53aWR0aFxuICBjb25zdCBoID0gcGNiQm9hcmQuaGVpZ2h0XG5cbiAgY29uc3QgY3ggPSBwY2JCb2FyZC5jZW50ZXI/LnhcbiAgY29uc3QgY3ogPSBwY2JCb2FyZC5jZW50ZXI/LnkgLy8gcGNiIHkgXHUyMTkyIHJlbmRlcmVyIHpcblxuICBjb25zdCBkaXN0ID0gTWF0aC5tYXgodywgaCkgKiAxLjVcblxuICByZXR1cm4ge1xuICAgIHBvc2l0aW9uOiB7IHg6IGN4IC0gZGlzdCwgeTogZGlzdCwgejogY3ogLSBkaXN0IH0sXG4gICAgbG9va0F0OiB7IHg6IGN4LCB5OiAwLCB6OiBjeiB9LFxuICAgIGZvY2FsTGVuZ3RoOiAyLFxuICB9XG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQ0EsU0FBUyxXQUFXO0FBQ3BCLFNBQVMsbUJBQTZCOzs7QUNDL0IsU0FBUyw0QkFBNEIsVUFBNEI7QUFDdEUsUUFBTSxJQUFJLFNBQVM7QUFDbkIsUUFBTSxJQUFJLFNBQVM7QUFFbkIsUUFBTSxLQUFLLFNBQVMsUUFBUTtBQUM1QixRQUFNLEtBQUssU0FBUyxRQUFRO0FBRTVCLFFBQU0sT0FBTyxLQUFLLElBQUksR0FBRyxDQUFDLElBQUk7QUFFOUIsU0FBTztBQUFBLElBQ0wsVUFBVSxFQUFFLEdBQUcsS0FBSyxNQUFNLEdBQUcsTUFBTSxHQUFHLEtBQUssS0FBSztBQUFBLElBQ2hELFFBQVEsRUFBRSxHQUFHLElBQUksR0FBRyxHQUFHLEdBQUcsR0FBRztBQUFBLElBQzdCLGFBQWE7QUFBQSxFQUNmO0FBQ0Y7OztBRFpPLFNBQVMsZ0NBQ2QsYUFDQSxPQU1JLENBQUMsR0FDRztBQUNSLFFBQU0sS0FBSyxJQUFJLFdBQVc7QUFDMUIsUUFBTSxRQUFlLENBQUM7QUFFdEIsUUFBTSxXQUFXLEdBQUcsVUFBVSxLQUFLLEVBQUUsQ0FBQztBQUV0QyxNQUFJLENBQUMsU0FBVSxPQUFNLElBQUksTUFBTSxrQ0FBa0M7QUFHakUsUUFBTSxTQUFTLEtBQUssVUFBVSw0QkFBNEIsUUFBUTtBQUNsRSxNQUFJLENBQUMsT0FBTyxhQUFhO0FBQ3ZCLFdBQU8sY0FBYztBQUFBLEVBQ3ZCO0FBR0EsUUFBTSxLQUFLO0FBQUEsSUFDVCxRQUFRO0FBQUEsTUFDTixHQUFHLFNBQVMsT0FBTztBQUFBLE1BQ25CLEdBQUc7QUFBQSxNQUNILEdBQUcsU0FBUyxPQUFPO0FBQUEsSUFDckI7QUFBQSxJQUNBLE1BQU07QUFBQSxNQUNKLEdBQUcsU0FBUztBQUFBLE1BQ1osR0FBRyxTQUFTO0FBQUEsTUFDWixHQUFHLFNBQVM7QUFBQSxJQUNkO0FBQUEsSUFDQSxPQUFPO0FBQUEsRUFDVCxDQUFDO0FBRUQsUUFBTSxzQkFBc0I7QUFFNUIsYUFBVyxRQUFRLEdBQUcsY0FBYyxLQUFLLEdBQUc7QUFDMUMsVUFBTSxrQkFBa0IsR0FBRyxpQkFBaUIsSUFBSSxLQUFLLG1CQUFtQjtBQUN4RSxVQUFNLEtBQUs7QUFBQSxNQUNULFFBQVE7QUFBQSxRQUNOLEdBQUcsS0FBSyxPQUFPO0FBQUEsUUFDZixHQUFHLFNBQVMsWUFBWSxJQUFJLHNCQUFzQjtBQUFBLFFBQ2xELEdBQUcsS0FBSyxPQUFPO0FBQUEsTUFDakI7QUFBQSxNQUNBLE1BQU07QUFBQSxRQUNKLEdBQUcsS0FBSztBQUFBLFFBQ1IsR0FBRyxLQUFLLElBQUksS0FBSyxJQUFJLEtBQUssT0FBTyxLQUFLLE1BQU0sR0FBRyxtQkFBbUI7QUFBQSxRQUNsRSxHQUFHLEtBQUs7QUFBQSxNQUNWO0FBQUEsTUFDQSxPQUFPO0FBQUEsTUFDUCxVQUFVLGlCQUFpQixRQUFRO0FBQUEsTUFDbkMsZUFBZTtBQUFBLElBQ2pCLENBQUM7QUFBQSxFQUNIO0FBRUEsU0FBTztBQUFBLElBQ0wsRUFBRSxPQUFPLE9BQU87QUFBQSxJQUNoQjtBQUFBLE1BQ0UsaUJBQWlCO0FBQUEsSUFDbkI7QUFBQSxFQUNGO0FBQ0Y7IiwKICAibmFtZXMiOiBbXQp9Cg==