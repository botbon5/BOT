//#region lib/index.ts
const calculateElbow = (point1, point2, options = {}) => {
	const overshootAmount = options?.overshoot ?? .1 * Math.max(Math.abs(point1.x - point2.x), Math.abs(point1.y - point2.y));
	const result = [{
		x: point1.x,
		y: point1.y
	}];
	const midX = (point1.x + point2.x) / 2;
	const midY = (point1.y + point2.y) / 2;
	const p2Target = {
		x: point2.x,
		y: point2.y
	};
	switch (point2.facingDirection) {
		case "x+":
			p2Target.x += overshootAmount;
			break;
		case "x-":
			p2Target.x -= overshootAmount;
			break;
		case "y+":
			p2Target.y += overshootAmount;
			break;
		case "y-":
			p2Target.y -= overshootAmount;
			break;
	}
	const startDir = point1.facingDirection ?? "none";
	const endDir = point2.facingDirection ?? "none";
	const push = (pt) => {
		const last = result[result.length - 1];
		if (last.x !== pt.x || last.y !== pt.y) result.push(pt);
	};
	if (startDir === "none" && endDir === "none") {
		push({
			x: midX,
			y: point1.y
		});
		push({
			x: midX,
			y: point2.y
		});
	} else if (startDir === "y+" && endDir === "x-") push({
		x: point1.x,
		y: point2.y
	});
	else if (startDir === "y-" && endDir === "x-") if (point1.y >= point2.y) push({
		x: point1.x,
		y: point2.y
	});
	else {
		const p1OvershootY = point1.y - overshootAmount;
		push({
			x: point1.x,
			y: p1OvershootY
		});
		push({
			x: midX,
			y: p1OvershootY
		});
		push({
			x: midX,
			y: point2.y
		});
		push({
			x: p2Target.x,
			y: point2.y
		});
	}
	else if (startDir === "x-" && endDir === "x+") if (point1.x > point2.x) {
		push({
			x: midX,
			y: point1.y
		});
		push({
			x: midX,
			y: point2.y
		});
	} else {
		push({
			x: point1.x - overshootAmount,
			y: point1.y
		});
		push({
			x: point1.x - overshootAmount,
			y: midY
		});
		push({
			x: p2Target.x,
			y: midY
		});
		push({
			x: p2Target.x,
			y: point2.y
		});
	}
	else if (startDir === "y+" && endDir === "y+") {
		const commonY = Math.max(point1.y + overshootAmount, p2Target.y);
		push({
			x: point1.x,
			y: commonY
		});
		push({
			x: point2.x,
			y: commonY
		});
	} else if (startDir === "y-" && endDir === "x+") if (point1.x > point2.x && point1.y >= point2.y) {
		push({
			x: point1.x,
			y: point2.y
		});
		push({
			x: point2.x,
			y: point2.y
		});
	} else {
		const p1OvershotY = point1.y - overshootAmount;
		push({
			x: point1.x,
			y: p1OvershotY
		});
		push({
			x: p2Target.x,
			y: p1OvershotY
		});
		push({
			x: p2Target.x,
			y: point2.y
		});
	}
	else if (startDir === "y+" && endDir === "x+") if (point1.x > point2.x && point1.y < point2.y) {
		push({
			x: point1.x,
			y: point2.y
		});
		push({
			x: point2.x,
			y: point2.y
		});
	} else {
		const p1OvershootY = point1.y + overshootAmount;
		push({
			x: point1.x,
			y: p1OvershootY
		});
		push({
			x: p2Target.x,
			y: p1OvershootY
		});
		push({
			x: p2Target.x,
			y: point2.y
		});
	}
	else if (startDir === "x+" && endDir === "y+") if (point1.x > point2.x && point1.y < point2.y) {
		push({
			x: point1.x,
			y: point2.y
		});
		push({
			x: point2.x,
			y: point2.y
		});
	} else if (point1.x < point2.x && point1.y > point2.y) push({
		x: point2.x,
		y: point1.y
	});
	else if (point1.x === point2.x) {
		push({
			x: point1.x + overshootAmount,
			y: point1.y
		});
		push({
			x: point1.x + overshootAmount,
			y: midY
		});
		push({
			x: point2.x,
			y: midY
		});
	} else if (point1.x < point2.x) {
		push({
			x: midX,
			y: point1.y
		});
		push({
			x: midX,
			y: p2Target.y
		});
		push({
			x: point2.x,
			y: p2Target.y
		});
	} else {
		const p1OvershootX = point1.x + overshootAmount;
		push({
			x: p1OvershootX,
			y: point1.y
		});
		push({
			x: p1OvershootX,
			y: p2Target.y
		});
		push({
			x: point2.x,
			y: p2Target.y
		});
	}
	else if (startDir === "y-" && endDir === "y-") {
		const commonY = Math.min(point1.y - overshootAmount, p2Target.y);
		push({
			x: point1.x,
			y: commonY
		});
		push({
			x: point2.x,
			y: commonY
		});
	} else if (startDir === "x+" && endDir === "x+") {
		const commonX = Math.max(point1.x + overshootAmount, p2Target.x);
		push({
			x: commonX,
			y: point1.y
		});
		push({
			x: commonX,
			y: point2.y
		});
	} else if (startDir === "x-" && endDir === "x-") {
		const commonX = Math.min(point1.x - overshootAmount, p2Target.x);
		push({
			x: commonX,
			y: point1.y
		});
		push({
			x: commonX,
			y: point2.y
		});
	} else if (startDir === "x-" && endDir === "y+") if (point1.x > point2.x) push({
		x: point2.x,
		y: point1.y
	});
	else {
		push({
			x: point1.x - overshootAmount,
			y: point1.y
		});
		push({
			x: point1.x - overshootAmount,
			y: p2Target.y
		});
		push({
			x: point2.x,
			y: p2Target.y
		});
	}
	else if (startDir === "x-" && endDir === "y-") if (point1.x > point2.x && point1.y <= point2.y) push({
		x: point2.x,
		y: point1.y
	});
	else {
		const p1OvershotX = point1.x - overshootAmount;
		push({
			x: p1OvershotX,
			y: point1.y
		});
		push({
			x: p1OvershotX,
			y: p2Target.y
		});
		push({
			x: p2Target.x,
			y: p2Target.y
		});
	}
	else if (startDir === "x+" && endDir === "y-") if (point1.x === point2.x) {
		push({
			x: point1.x + overshootAmount,
			y: point1.y
		});
		push({
			x: point1.x + overshootAmount,
			y: midY
		});
		push({
			x: point2.x,
			y: midY
		});
	} else if (point1.x < point2.x && point1.y < point2.y) push({
		x: point2.x,
		y: point1.y
	});
	else {
		push({
			x: point1.x + overshootAmount,
			y: point1.y
		});
		push({
			x: point1.x + overshootAmount,
			y: p2Target.y
		});
		push({
			x: point2.x,
			y: p2Target.y
		});
	}
	else if (startDir === "y-" && endDir === "y+") if (point1.y >= point2.y) {
		push({
			x: point1.x,
			y: midY
		});
		push({
			x: point2.x,
			y: midY
		});
	} else {
		const p1OvershootY = point1.y - overshootAmount;
		push({
			x: point1.x,
			y: p1OvershootY
		});
		push({
			x: midX,
			y: p1OvershootY
		});
		push({
			x: midX,
			y: p2Target.y
		});
		push({
			x: point2.x,
			y: p2Target.y
		});
	}
	else if (startDir === "y+" && endDir === "y-") if (point1.y <= point2.y) {
		push({
			x: point1.x,
			y: midY
		});
		push({
			x: point2.x,
			y: midY
		});
	} else {
		const p1OvershootY = point1.y + overshootAmount;
		push({
			x: point1.x,
			y: p1OvershootY
		});
		push({
			x: midX,
			y: p1OvershootY
		});
		push({
			x: midX,
			y: p2Target.y
		});
		push({
			x: point2.x,
			y: p2Target.y
		});
	}
	else {
		if (startDir.startsWith("x")) push({
			x: point1.x + (startDir === "x+" ? overshootAmount : -overshootAmount),
			y: point1.y
		});
		else if (startDir.startsWith("y")) push({
			x: point1.x,
			y: point1.y + (startDir === "y+" ? overshootAmount : -overshootAmount)
		});
		push({
			x: midX,
			y: result[result.length - 1].y
		});
		push({
			x: midX,
			y: p2Target.y
		});
		push({
			x: p2Target.x,
			y: p2Target.y
		});
	}
	push({
		x: point2.x,
		y: point2.y
	});
	return result;
};

//#endregion
export { calculateElbow };