{"version":3,"file":"actions-IcIrbHat.cjs","names":["client: Client<transport, chain, account>","parameters: EstimateAddInputGasParameters<chain, account, chainOverride>","inputBoxAbi","inputBoxAddress","client: Client<Transport, TChain, TAccount>","params: AddInputParameters<TChain, TAccount, TChainOverride>","inputBoxAbi","inputBoxAddress","client: Client<transport, chain, account>","parameters: EstimateDepositBatchERC1155TokenGasParameters<\n        chain,\n        account,\n        chainOverride\n    >","erc1155BatchPortalAbi","erc1155BatchPortalAddress","client: Client<Transport, TChain, TAccount>","params: DepositBatchERC1155TokenParameters<\n        TChain,\n        TAccount,\n        TChainOverride\n    >","erc1155BatchPortalAbi","erc1155BatchPortalAddress","client: Client<transport, chain, account>","parameters: EstimateDepositERC20TokensGasParameters<\n        chain,\n        account,\n        chainOverride\n    >","erc20PortalAbi","erc20PortalAddress","client: Client<Transport, TChain, TAccount>","params: DepositERC20TokensParameters<TChain, TAccount, TChainOverride>","erc20PortalAbi","erc20PortalAddress","client: Client<transport, chain, account>","parameters: EstimateDepositERC721TokenGasParameters<\n        chain,\n        account,\n        chainOverride\n    >","erc721PortalAbi","erc721PortalAddress","client: Client<Transport, TChain, TAccount>","params: DepositERC721TokenParameters<TChain, TAccount, TChainOverride>","erc721PortalAbi","erc721PortalAddress","client: Client<transport, chain, account>","parameters: EstimateDepositEtherGasParameters<\n        chain,\n        account,\n        chainOverride\n    >","etherPortalAbi","etherPortalAddress","client: Client<Transport, TChain, TAccount>","params: DepositEtherParameters<TChain, TAccount, TChainOverride>","etherPortalAbi","etherPortalAddress","client: Client<transport, chain, account>","parameters: EstimateDepositSingleERC1155TokenGasParameters<\n        chain,\n        account,\n        chainOverride\n    >","erc1155SinglePortalAbi","erc1155SinglePortalAddress","client: Client<Transport, TChain, TAccount>","params: DepositSingleERC1155TokenParameters<\n        TChain,\n        TAccount,\n        TChainOverride\n    >","erc1155SinglePortalAbi","erc1155SinglePortalAddress","output: Output","client: Client<transport, chain, account>","parameters: EstimateExecuteOutputGasParameters<\n        chain,\n        account,\n        chainOverride\n    >","iApplicationAbi","client: Client<Transport, TChain, TAccount>","params: ExecuteOutputParameters<TChain, TAccount, TChainOverride>","iApplicationAbi","pagination: PaginationRpc","data: Hex","dataAvailabilityAbi","inputBoxAddress","application: ApplicationRpc","epoch: EpochRpc","input: InputRpc","output: NoticeRpc | VoucherRpc | DelegateCallVoucherRpc","output: OutputRpc","report: ReportRpc","client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>","params: GetApplicationParams","client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>","client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>","params: GetEpochParams","client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>","params: GetInputParams","client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>","params: GetLastAcceptedEpochIndexParams","client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>","client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>","params: GetOutputParams","client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>","params: GetProcessedInputCountParams","client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>","params: GetReportParams","client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>","params: ListApplicationsParams","client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>","params: ListEpochsParams","client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>","params: ListInputsParams","outputType?: OutputType","outputsAbi","client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>","params: ListOutputsParams","client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>","params: ListReportsParams","client: Client<transport, chain, account>","parameters: ValidateOutputParameters","iApplicationAbi","client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>","params: WaitForInputParams","input","AbortError"],"sources":["../src/actions/estimateAddInputGas.ts","../src/actions/addInput.ts","../src/actions/estimateDepositBatchERC1155TokenGas.ts","../src/actions/depositBatchERC1155Token.ts","../src/actions/estimateDepositERC20TokensGas.ts","../src/actions/depositERC20Tokens.ts","../src/actions/estimateDepositERC721TokenGas.ts","../src/actions/depositERC721Token.ts","../src/actions/estimateDepositEtherGas.ts","../src/actions/depositEther.ts","../src/actions/estimateDepositSingleERC1155TokenGas.ts","../src/actions/depositSingleERC1155Token.ts","../src/types/output.ts","../src/actions/estimateExecuteOutputGas.ts","../src/actions/executeOutput.ts","../src/types/converter.ts","../src/actions/getApplication.ts","../src/actions/getChainId.ts","../src/actions/getEpoch.ts","../src/actions/getInput.ts","../src/actions/getLastAcceptedEpochIndex.ts","../src/actions/getNodeVersion.ts","../src/actions/getOutput.ts","../src/actions/getProcessedInputCount.ts","../src/actions/getReport.ts","../src/actions/listApplications.ts","../src/actions/listEpochs.ts","../src/actions/listInputs.ts","../src/actions/listOutputs.ts","../src/actions/listReports.ts","../src/actions/validateOutput.ts","../src/actions/waitForInput.ts"],"sourcesContent":["import type {\n    Account,\n    Address,\n    Chain,\n    Client,\n    DeriveChain,\n    EstimateContractGasErrorType,\n    EstimateContractGasParameters,\n    FormattedTransactionRequest,\n    GetChainParameter,\n    Hex,\n    Transport,\n    UnionOmit,\n} from \"viem\";\nimport { estimateContractGas } from \"viem/actions\";\nimport { inputBoxAbi, inputBoxAddress } from \"../rollups.js\";\nimport type {\n    ErrorType,\n    GetAccountParameter,\n    UnionEvaluate,\n} from \"../types/utils.js\";\n\nexport type EstimateAddInputGasParameters<\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n    chainOverride extends Chain | undefined = Chain | undefined,\n    _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionEvaluate<\n    UnionOmit<\n        FormattedTransactionRequest<_derivedChain>,\n        | \"accessList\"\n        | \"data\"\n        | \"from\"\n        | \"gas\"\n        | \"gasPrice\"\n        | \"to\"\n        | \"type\"\n        | \"value\"\n    >\n> &\n    GetAccountParameter<account, Account | Address> &\n    GetChainParameter<chain, chainOverride> & {\n        /** Gas limit for transaction execution */\n        gas?: bigint | undefined;\n        application: Address;\n        payload: Hex;\n    };\nexport type EstimateAddInputGasReturnType = bigint;\nexport type EstimateAddInputGasErrorType =\n    | EstimateContractGasErrorType\n    | ErrorType;\n\nexport const estimateAddInputGas = <\n    transport extends Transport,\n    chain extends Chain | undefined,\n    account extends Account | undefined,\n    chainOverride extends Chain | undefined = undefined,\n>(\n    client: Client<transport, chain, account>,\n    parameters: EstimateAddInputGasParameters<chain, account, chainOverride>,\n) => {\n    const {\n        account,\n        chain = client.chain,\n        application,\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        payload,\n    } = parameters;\n\n    const params = {\n        account,\n        abi: inputBoxAbi,\n        address: inputBoxAddress,\n        functionName: \"addInput\",\n        args: [application, payload],\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        // TODO: Not sure `chain` is necessary since it's not used downstream\n        // in `estimateContractGas` or `estimateGas`\n        // @ts-ignore\n        chain,\n    } satisfies EstimateContractGasParameters<typeof inputBoxAbi, \"addInput\">;\n    // biome-ignore lint/suspicious/noExplicitAny: viem pattern\n    return estimateContractGas(client, params as any);\n};\n","import type {\n    Account,\n    Address,\n    Chain,\n    Client,\n    DeriveChain,\n    FormattedTransactionRequest,\n    GetChainParameter,\n    Hash,\n    Hex,\n    Transport,\n    UnionOmit,\n    WriteContractErrorType,\n    WriteContractParameters,\n    WriteContractReturnType,\n} from \"viem\";\nimport { writeContract } from \"viem/actions\";\nimport { inputBoxAbi, inputBoxAddress } from \"../rollups.js\";\nimport type {\n    ErrorType,\n    GetAccountParameter,\n    UnionEvaluate,\n} from \"../types/utils.js\";\nimport {\n    type EstimateAddInputGasErrorType,\n    type EstimateAddInputGasParameters,\n    estimateAddInputGas,\n} from \"./estimateAddInputGas.js\";\n\nexport type AddInputParameters<\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n    chainOverride extends Chain | undefined = Chain | undefined,\n    _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionEvaluate<\n    UnionOmit<\n        FormattedTransactionRequest<_derivedChain>,\n        | \"accessList\"\n        | \"data\"\n        | \"from\"\n        | \"gas\"\n        | \"gasPrice\"\n        | \"to\"\n        | \"type\"\n        | \"value\"\n    >\n> &\n    GetAccountParameter<account, Account | Address> &\n    GetChainParameter<chain, chainOverride> & {\n        /**\n         * Gas limit for transaction execution on the L1.\n         * `null` to skip gas estimation & defer calculation to signer.\n         */\n        gas?: bigint | null | undefined;\n        application: Address;\n        payload: Hex;\n    };\nexport type AddInputReturnType = Hash;\nexport type AddInputErrorType =\n    | EstimateAddInputGasErrorType\n    | WriteContractErrorType\n    | ErrorType;\n\nexport const addInput = async <\n    TChain extends Chain | undefined,\n    TAccount extends Account | undefined,\n    TChainOverride extends Chain | undefined = undefined,\n>(\n    client: Client<Transport, TChain, TAccount>,\n    params: AddInputParameters<TChain, TAccount, TChainOverride>,\n): Promise<WriteContractReturnType> => {\n    const {\n        account,\n        application,\n        chain = client.chain,\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        payload,\n    } = params;\n\n    const gas_ =\n        typeof gas !== \"number\" && gas !== null\n            ? await estimateAddInputGas(\n                  client,\n                  params as EstimateAddInputGasParameters,\n              )\n            : undefined;\n\n    return writeContract(client, {\n        // biome-ignore lint/style/noNonNullAssertion: viem pattern\n        account: account!,\n        abi: inputBoxAbi,\n        address: inputBoxAddress,\n        chain,\n        functionName: \"addInput\",\n        args: [application, payload],\n        gas: gas_,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        // biome-ignore lint/suspicious/noExplicitAny: viem pattern\n    } satisfies WriteContractParameters as any);\n};\n","import type {\n    Account,\n    Address,\n    Chain,\n    Client,\n    DeriveChain,\n    EstimateContractGasErrorType,\n    EstimateContractGasParameters,\n    FormattedTransactionRequest,\n    GetChainParameter,\n    Hex,\n    Transport,\n    UnionOmit,\n} from \"viem\";\nimport { estimateContractGas } from \"viem/actions\";\nimport {\n    erc1155BatchPortalAbi,\n    erc1155BatchPortalAddress,\n} from \"../rollups.js\";\nimport type {\n    ErrorType,\n    GetAccountParameter,\n    UnionEvaluate,\n} from \"../types/utils.js\";\n\nexport type EstimateDepositBatchERC1155TokenGasParameters<\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n    chainOverride extends Chain | undefined = Chain | undefined,\n    _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionEvaluate<\n    UnionOmit<\n        FormattedTransactionRequest<_derivedChain>,\n        | \"accessList\"\n        | \"data\"\n        | \"from\"\n        | \"gas\"\n        | \"gasPrice\"\n        | \"to\"\n        | \"type\"\n        | \"value\"\n    >\n> &\n    GetAccountParameter<account, Account | Address> &\n    GetChainParameter<chain, chainOverride> & {\n        /** Gas limit for transaction execution */\n        gas?: bigint | undefined;\n        application: Address;\n        baseLayerData: Hex;\n        execLayerData: Hex;\n        token: Address;\n        tokenIds: bigint[];\n        values: bigint[];\n    };\nexport type EstimateDepositBatchERC1155TokenGasReturnType = bigint;\nexport type EstimateDepositBatchERC1155TokenGasErrorType =\n    | EstimateContractGasErrorType\n    | ErrorType;\n\nexport const estimateDepositBatchERC1155TokenGas = <\n    transport extends Transport,\n    chain extends Chain | undefined,\n    account extends Account | undefined,\n    chainOverride extends Chain | undefined = undefined,\n>(\n    client: Client<transport, chain, account>,\n    parameters: EstimateDepositBatchERC1155TokenGasParameters<\n        chain,\n        account,\n        chainOverride\n    >,\n) => {\n    const {\n        account,\n        application,\n        baseLayerData,\n        chain = client.chain,\n        execLayerData,\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        token,\n        tokenIds,\n        values,\n    } = parameters;\n\n    const params = {\n        account,\n        abi: erc1155BatchPortalAbi,\n        address: erc1155BatchPortalAddress,\n        functionName: \"depositBatchERC1155Token\",\n        args: [\n            token,\n            application,\n            tokenIds,\n            values,\n            baseLayerData,\n            execLayerData,\n        ],\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        // TODO: Not sure `chain` is necessary since it's not used downstream\n        // in `estimateContractGas` or `estimateGas`\n        // @ts-ignore\n        chain,\n    } satisfies EstimateContractGasParameters<\n        typeof erc1155BatchPortalAbi,\n        \"depositBatchERC1155Token\"\n    >;\n    // biome-ignore lint/suspicious/noExplicitAny: viem pattern\n    return estimateContractGas(client, params as any);\n};\n","import type {\n    Account,\n    Address,\n    Chain,\n    Client,\n    DeriveChain,\n    FormattedTransactionRequest,\n    GetChainParameter,\n    Hash,\n    Hex,\n    Transport,\n    UnionOmit,\n    WriteContractErrorType,\n    WriteContractParameters,\n    WriteContractReturnType,\n} from \"viem\";\nimport { writeContract } from \"viem/actions\";\nimport { erc1155BatchPortalAbi, erc1155BatchPortalAddress } from \"../rollups\";\nimport type {\n    ErrorType,\n    GetAccountParameter,\n    UnionEvaluate,\n} from \"../types/utils.js\";\nimport {\n    type EstimateDepositBatchERC1155TokenGasErrorType,\n    type EstimateDepositBatchERC1155TokenGasParameters,\n    estimateDepositBatchERC1155TokenGas,\n} from \"./estimateDepositBatchERC1155TokenGas.js\";\n\nexport type DepositBatchERC1155TokenParameters<\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n    chainOverride extends Chain | undefined = Chain | undefined,\n    _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionEvaluate<\n    UnionOmit<\n        FormattedTransactionRequest<_derivedChain>,\n        | \"accessList\"\n        | \"data\"\n        | \"from\"\n        | \"gas\"\n        | \"gasPrice\"\n        | \"to\"\n        | \"type\"\n        | \"value\"\n    >\n> &\n    GetAccountParameter<account, Account | Address> &\n    GetChainParameter<chain, chainOverride> & {\n        /**\n         * Gas limit for transaction execution on the L1.\n         * `null` to skip gas estimation & defer calculation to signer.\n         */\n        gas?: bigint | null | undefined;\n        application: Address;\n        baseLayerData: Hex;\n        execLayerData: Hex;\n        token: Address;\n        tokenIds: bigint[];\n        values: bigint[];\n    };\nexport type DepositBatchERC1155TokenReturnType = Hash;\nexport type DepositBatchERC1155TokenErrorType =\n    | EstimateDepositBatchERC1155TokenGasErrorType\n    | WriteContractErrorType\n    | ErrorType;\n\nexport const depositBatchERC1155Token = async <\n    TChain extends Chain | undefined,\n    TAccount extends Account | undefined,\n    TChainOverride extends Chain | undefined = undefined,\n>(\n    client: Client<Transport, TChain, TAccount>,\n    params: DepositBatchERC1155TokenParameters<\n        TChain,\n        TAccount,\n        TChainOverride\n    >,\n): Promise<WriteContractReturnType> => {\n    const {\n        account,\n        application,\n        baseLayerData,\n        chain = client.chain,\n        execLayerData,\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        token,\n        tokenIds,\n        values,\n    } = params;\n\n    const gas_ =\n        typeof gas !== \"number\" && gas !== null\n            ? await estimateDepositBatchERC1155TokenGas(\n                  client,\n                  params as EstimateDepositBatchERC1155TokenGasParameters,\n              )\n            : undefined;\n\n    return writeContract(client, {\n        // biome-ignore lint/style/noNonNullAssertion: viem pattern\n        account: account!,\n        abi: erc1155BatchPortalAbi,\n        address: erc1155BatchPortalAddress,\n        chain,\n        functionName: \"depositBatchERC1155Token\",\n        args: [\n            token,\n            application,\n            tokenIds,\n            values,\n            baseLayerData,\n            execLayerData,\n        ],\n        gas: gas_,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        // biome-ignore lint/suspicious/noExplicitAny: viem pattern\n    } satisfies WriteContractParameters as any);\n};\n","import type {\n    Account,\n    Address,\n    Chain,\n    Client,\n    DeriveChain,\n    EstimateContractGasErrorType,\n    EstimateContractGasParameters,\n    FormattedTransactionRequest,\n    GetChainParameter,\n    Hex,\n    Transport,\n    UnionOmit,\n} from \"viem\";\nimport { estimateContractGas } from \"viem/actions\";\nimport { erc20PortalAbi, erc20PortalAddress } from \"../rollups.js\";\nimport type {\n    ErrorType,\n    GetAccountParameter,\n    UnionEvaluate,\n} from \"../types/utils.js\";\n\nexport type EstimateDepositERC20TokensGasParameters<\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n    chainOverride extends Chain | undefined = Chain | undefined,\n    _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionEvaluate<\n    UnionOmit<\n        FormattedTransactionRequest<_derivedChain>,\n        | \"accessList\"\n        | \"data\"\n        | \"from\"\n        | \"gas\"\n        | \"gasPrice\"\n        | \"to\"\n        | \"type\"\n        | \"value\"\n    >\n> &\n    GetAccountParameter<account, Account | Address> &\n    GetChainParameter<chain, chainOverride> & {\n        /** Gas limit for transaction execution */\n        gas?: bigint | undefined;\n        amount: bigint;\n        application: Address;\n        execLayerData: Hex;\n        token: Address;\n    };\nexport type EstimateDepositERC20TokensGasReturnType = bigint;\nexport type EstimateDepositERC20TokensGasErrorType =\n    | EstimateContractGasErrorType\n    | ErrorType;\n\nexport const estimateDepositERC20TokensGas = <\n    transport extends Transport,\n    chain extends Chain | undefined,\n    account extends Account | undefined,\n    chainOverride extends Chain | undefined = undefined,\n>(\n    client: Client<transport, chain, account>,\n    parameters: EstimateDepositERC20TokensGasParameters<\n        chain,\n        account,\n        chainOverride\n    >,\n) => {\n    const {\n        account,\n        amount,\n        application,\n        chain = client.chain,\n        execLayerData,\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        token,\n    } = parameters;\n\n    const params = {\n        account,\n        abi: erc20PortalAbi,\n        address: erc20PortalAddress,\n        functionName: \"depositERC20Tokens\",\n        args: [token, application, amount, execLayerData],\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        // TODO: Not sure `chain` is necessary since it's not used downstream\n        // in `estimateContractGas` or `estimateGas`\n        // @ts-ignore\n        chain,\n    } satisfies EstimateContractGasParameters<\n        typeof erc20PortalAbi,\n        \"depositERC20Tokens\"\n    >;\n    // biome-ignore lint/suspicious/noExplicitAny: viem pattern\n    return estimateContractGas(client, params as any);\n};\n","import type {\n    Account,\n    Address,\n    Chain,\n    Client,\n    DeriveChain,\n    FormattedTransactionRequest,\n    GetChainParameter,\n    Hash,\n    Hex,\n    Transport,\n    UnionOmit,\n    WriteContractErrorType,\n    WriteContractParameters,\n    WriteContractReturnType,\n} from \"viem\";\nimport { writeContract } from \"viem/actions\";\nimport { erc20PortalAbi, erc20PortalAddress } from \"../rollups.js\";\nimport type {\n    ErrorType,\n    GetAccountParameter,\n    UnionEvaluate,\n} from \"../types/utils.js\";\nimport {\n    type EstimateDepositERC20TokensGasErrorType,\n    type EstimateDepositERC20TokensGasParameters,\n    estimateDepositERC20TokensGas,\n} from \"./estimateDepositERC20TokensGas.js\";\n\nexport type DepositERC20TokensParameters<\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n    chainOverride extends Chain | undefined = Chain | undefined,\n    _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionEvaluate<\n    UnionOmit<\n        FormattedTransactionRequest<_derivedChain>,\n        | \"accessList\"\n        | \"data\"\n        | \"from\"\n        | \"gas\"\n        | \"gasPrice\"\n        | \"to\"\n        | \"type\"\n        | \"value\"\n    >\n> &\n    GetAccountParameter<account, Account | Address> &\n    GetChainParameter<chain, chainOverride> & {\n        /**\n         * Gas limit for transaction execution on the L1.\n         * `null` to skip gas estimation & defer calculation to signer.\n         */\n        gas?: bigint | null | undefined;\n        amount: bigint;\n        application: Address;\n        execLayerData: Hex;\n        token: Address;\n    };\nexport type DepositERC20TokensReturnType = Hash;\nexport type DepositERC20TokensErrorType =\n    | EstimateDepositERC20TokensGasErrorType\n    | WriteContractErrorType\n    | ErrorType;\n\nexport const depositERC20Tokens = async <\n    TChain extends Chain | undefined,\n    TAccount extends Account | undefined,\n    TChainOverride extends Chain | undefined = undefined,\n>(\n    client: Client<Transport, TChain, TAccount>,\n    params: DepositERC20TokensParameters<TChain, TAccount, TChainOverride>,\n): Promise<WriteContractReturnType> => {\n    const {\n        account,\n        amount,\n        application,\n        chain = client.chain,\n        execLayerData,\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        token,\n    } = params;\n\n    const gas_ =\n        typeof gas !== \"number\" && gas !== null\n            ? await estimateDepositERC20TokensGas(\n                  client,\n                  params as EstimateDepositERC20TokensGasParameters,\n              )\n            : undefined;\n\n    return writeContract(client, {\n        // biome-ignore lint/style/noNonNullAssertion: viem pattern\n        account: account!,\n        abi: erc20PortalAbi,\n        address: erc20PortalAddress,\n        chain,\n        functionName: \"depositERC20Tokens\",\n        args: [token, application, amount, execLayerData],\n        gas: gas_,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        // biome-ignore lint/suspicious/noExplicitAny: viem pattern\n    } satisfies WriteContractParameters as any);\n};\n","import type {\n    Account,\n    Address,\n    Chain,\n    Client,\n    DeriveChain,\n    EstimateContractGasErrorType,\n    EstimateContractGasParameters,\n    FormattedTransactionRequest,\n    GetChainParameter,\n    Hex,\n    Transport,\n    UnionOmit,\n} from \"viem\";\nimport { estimateContractGas } from \"viem/actions\";\nimport { erc721PortalAbi, erc721PortalAddress } from \"../rollups.js\";\nimport type {\n    ErrorType,\n    GetAccountParameter,\n    UnionEvaluate,\n} from \"../types/utils.js\";\n\nexport type EstimateDepositERC721TokenGasParameters<\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n    chainOverride extends Chain | undefined = Chain | undefined,\n    _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionEvaluate<\n    UnionOmit<\n        FormattedTransactionRequest<_derivedChain>,\n        | \"accessList\"\n        | \"data\"\n        | \"from\"\n        | \"gas\"\n        | \"gasPrice\"\n        | \"to\"\n        | \"type\"\n        | \"value\"\n    >\n> &\n    GetAccountParameter<account, Account | Address> &\n    GetChainParameter<chain, chainOverride> & {\n        /** Gas limit for transaction execution */\n        gas?: bigint | undefined;\n        application: Address;\n        baseLayerData: Hex;\n        execLayerData: Hex;\n        token: Address;\n        tokenId: bigint;\n    };\nexport type EstimateDepositERC721TokenGasReturnType = bigint;\nexport type EstimateDepositERC721TokenGasErrorType =\n    | EstimateContractGasErrorType\n    | ErrorType;\n\nexport const estimateDepositERC721TokenGas = <\n    transport extends Transport,\n    chain extends Chain | undefined,\n    account extends Account | undefined,\n    chainOverride extends Chain | undefined = undefined,\n>(\n    client: Client<transport, chain, account>,\n    parameters: EstimateDepositERC721TokenGasParameters<\n        chain,\n        account,\n        chainOverride\n    >,\n) => {\n    const {\n        account,\n        application,\n        baseLayerData,\n        chain = client.chain,\n        execLayerData,\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        token,\n        tokenId,\n    } = parameters;\n\n    const params = {\n        account,\n        abi: erc721PortalAbi,\n        address: erc721PortalAddress,\n        functionName: \"depositERC721Token\",\n        args: [token, application, tokenId, baseLayerData, execLayerData],\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        // TODO: Not sure `chain` is necessary since it's not used downstream\n        // in `estimateContractGas` or `estimateGas`\n        // @ts-ignore\n        chain,\n    } satisfies EstimateContractGasParameters<\n        typeof erc721PortalAbi,\n        \"depositERC721Token\"\n    >;\n    // biome-ignore lint/suspicious/noExplicitAny: viem pattern\n    return estimateContractGas(client, params as any);\n};\n","import type {\n    Account,\n    Address,\n    Chain,\n    Client,\n    DeriveChain,\n    FormattedTransactionRequest,\n    GetChainParameter,\n    Hash,\n    Hex,\n    Transport,\n    UnionOmit,\n    WriteContractErrorType,\n    WriteContractParameters,\n    WriteContractReturnType,\n} from \"viem\";\nimport { writeContract } from \"viem/actions\";\nimport { erc721PortalAbi, erc721PortalAddress } from \"../rollups.js\";\nimport type {\n    ErrorType,\n    GetAccountParameter,\n    UnionEvaluate,\n} from \"../types/utils.js\";\nimport {\n    type EstimateDepositERC721TokenGasErrorType,\n    type EstimateDepositERC721TokenGasParameters,\n    estimateDepositERC721TokenGas,\n} from \"./estimateDepositERC721TokenGas.js\";\n\nexport type DepositERC721TokenParameters<\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n    chainOverride extends Chain | undefined = Chain | undefined,\n    _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionEvaluate<\n    UnionOmit<\n        FormattedTransactionRequest<_derivedChain>,\n        | \"accessList\"\n        | \"data\"\n        | \"from\"\n        | \"gas\"\n        | \"gasPrice\"\n        | \"to\"\n        | \"type\"\n        | \"value\"\n    >\n> &\n    GetAccountParameter<account, Account | Address> &\n    GetChainParameter<chain, chainOverride> & {\n        /**\n         * Gas limit for transaction execution on the L1.\n         * `null` to skip gas estimation & defer calculation to signer.\n         */\n        gas?: bigint | null | undefined;\n        application: Address;\n        baseLayerData: Hex;\n        execLayerData: Hex;\n        token: Address;\n        tokenId: bigint;\n    };\nexport type DepositERC721TokenReturnType = Hash;\nexport type DepositERC721TokenErrorType =\n    | EstimateDepositERC721TokenGasErrorType\n    | WriteContractErrorType\n    | ErrorType;\n\nexport const depositERC721Token = async <\n    TChain extends Chain | undefined,\n    TAccount extends Account | undefined,\n    TChainOverride extends Chain | undefined = undefined,\n>(\n    client: Client<Transport, TChain, TAccount>,\n    params: DepositERC721TokenParameters<TChain, TAccount, TChainOverride>,\n): Promise<WriteContractReturnType> => {\n    const {\n        account,\n        application,\n        baseLayerData,\n        chain = client.chain,\n        execLayerData,\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        token,\n        tokenId,\n    } = params;\n\n    const gas_ =\n        typeof gas !== \"number\" && gas !== null\n            ? await estimateDepositERC721TokenGas(\n                  client,\n                  params as EstimateDepositERC721TokenGasParameters,\n              )\n            : undefined;\n\n    return writeContract(client, {\n        // biome-ignore lint/style/noNonNullAssertion: viem pattern\n        account: account!,\n        abi: erc721PortalAbi,\n        address: erc721PortalAddress,\n        chain,\n        functionName: \"depositERC721Token\",\n        args: [token, application, tokenId, baseLayerData, execLayerData],\n        gas: gas_,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        // biome-ignore lint/suspicious/noExplicitAny: viem pattern\n    } satisfies WriteContractParameters as any);\n};\n","import type {\n    Account,\n    Address,\n    Chain,\n    Client,\n    DeriveChain,\n    EstimateContractGasErrorType,\n    EstimateContractGasParameters,\n    FormattedTransactionRequest,\n    GetChainParameter,\n    Hex,\n    Transport,\n    UnionOmit,\n} from \"viem\";\nimport { estimateContractGas } from \"viem/actions\";\nimport { etherPortalAbi, etherPortalAddress } from \"../rollups.js\";\nimport type {\n    ErrorType,\n    GetAccountParameter,\n    UnionEvaluate,\n} from \"../types/utils.js\";\n\nexport type EstimateDepositEtherGasParameters<\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n    chainOverride extends Chain | undefined = Chain | undefined,\n    _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionEvaluate<\n    UnionOmit<\n        FormattedTransactionRequest<_derivedChain>,\n        \"accessList\" | \"data\" | \"from\" | \"gas\" | \"gasPrice\" | \"to\" | \"type\"\n    >\n> &\n    GetAccountParameter<account, Account | Address> &\n    GetChainParameter<chain, chainOverride> & {\n        /** Gas limit for transaction execution */\n        gas?: bigint | undefined;\n        application: Address;\n        execLayerData: Hex;\n    };\nexport type EstimateDepositEtherGasReturnType = bigint;\nexport type EstimateDepositEtherGasErrorType =\n    | EstimateContractGasErrorType\n    | ErrorType;\n\nexport const estimateDepositEtherGas = <\n    transport extends Transport,\n    chain extends Chain | undefined,\n    account extends Account | undefined,\n    chainOverride extends Chain | undefined = undefined,\n>(\n    client: Client<transport, chain, account>,\n    parameters: EstimateDepositEtherGasParameters<\n        chain,\n        account,\n        chainOverride\n    >,\n) => {\n    const {\n        account,\n        chain = client.chain,\n        application,\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        execLayerData,\n        value,\n    } = parameters;\n\n    const params = {\n        account,\n        abi: etherPortalAbi,\n        address: etherPortalAddress,\n        functionName: \"depositEther\",\n        args: [application, execLayerData],\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        value,\n        // TODO: Not sure `chain` is necessary since it's not used downstream\n        // in `estimateContractGas` or `estimateGas`\n        // @ts-ignore\n        chain,\n    } satisfies EstimateContractGasParameters<\n        typeof etherPortalAbi,\n        \"depositEther\"\n    >;\n    // biome-ignore lint/suspicious/noExplicitAny: viem pattern\n    return estimateContractGas(client, params as any);\n};\n","import type {\n    Account,\n    Address,\n    Chain,\n    Client,\n    DeriveChain,\n    FormattedTransactionRequest,\n    GetChainParameter,\n    Hash,\n    Hex,\n    Transport,\n    UnionOmit,\n    WriteContractErrorType,\n    WriteContractParameters,\n    WriteContractReturnType,\n} from \"viem\";\nimport { writeContract } from \"viem/actions\";\nimport { etherPortalAbi, etherPortalAddress } from \"../rollups.js\";\nimport type {\n    ErrorType,\n    GetAccountParameter,\n    UnionEvaluate,\n} from \"../types/utils.js\";\nimport {\n    type EstimateDepositEtherGasErrorType,\n    type EstimateDepositEtherGasParameters,\n    estimateDepositEtherGas,\n} from \"./estimateDepositEtherGas.js\";\n\nexport type DepositEtherParameters<\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n    chainOverride extends Chain | undefined = Chain | undefined,\n    _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionEvaluate<\n    UnionOmit<\n        FormattedTransactionRequest<_derivedChain>,\n        | \"accessList\"\n        | \"data\"\n        | \"from\"\n        | \"gas\"\n        | \"gasPrice\"\n        | \"to\"\n        | \"type\"\n        | \"value\"\n    >\n> &\n    GetAccountParameter<account, Account | Address> &\n    GetChainParameter<chain, chainOverride> & {\n        /**\n         * Gas limit for transaction execution on the L1.\n         * `null` to skip gas estimation & defer calculation to signer.\n         */\n        gas?: bigint | null | undefined;\n        application: Address;\n        execLayerData: Hex;\n        value: bigint;\n    };\nexport type DepositEtherReturnType = Hash;\nexport type DepositEtherErrorType =\n    | EstimateDepositEtherGasErrorType\n    | WriteContractErrorType\n    | ErrorType;\n\nexport const depositEther = async <\n    TChain extends Chain | undefined,\n    TAccount extends Account | undefined,\n    TChainOverride extends Chain | undefined = undefined,\n>(\n    client: Client<Transport, TChain, TAccount>,\n    params: DepositEtherParameters<TChain, TAccount, TChainOverride>,\n): Promise<WriteContractReturnType> => {\n    const {\n        account,\n        application,\n        chain = client.chain,\n        execLayerData,\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        value,\n    } = params;\n\n    const gas_ =\n        typeof gas !== \"number\" && gas !== null\n            ? await estimateDepositEtherGas(\n                  client,\n                  params as EstimateDepositEtherGasParameters,\n              )\n            : undefined;\n\n    return writeContract(client, {\n        // biome-ignore lint/style/noNonNullAssertion: viem pattern\n        account: account!,\n        abi: etherPortalAbi,\n        address: etherPortalAddress,\n        chain,\n        functionName: \"depositEther\",\n        args: [application, execLayerData],\n        gas: gas_,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        value,\n        // biome-ignore lint/suspicious/noExplicitAny: viem pattern\n    } satisfies WriteContractParameters as any);\n};\n","import type {\n    Account,\n    Address,\n    Chain,\n    Client,\n    DeriveChain,\n    EstimateContractGasErrorType,\n    EstimateContractGasParameters,\n    FormattedTransactionRequest,\n    GetChainParameter,\n    Hex,\n    Transport,\n    UnionOmit,\n} from \"viem\";\nimport { estimateContractGas } from \"viem/actions\";\nimport {\n    erc1155SinglePortalAbi,\n    erc1155SinglePortalAddress,\n} from \"../rollups.js\";\nimport type {\n    ErrorType,\n    GetAccountParameter,\n    UnionEvaluate,\n} from \"../types/utils.js\";\n\nexport type EstimateDepositSingleERC1155TokenGasParameters<\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n    chainOverride extends Chain | undefined = Chain | undefined,\n    _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionEvaluate<\n    UnionOmit<\n        FormattedTransactionRequest<_derivedChain>,\n        | \"accessList\"\n        | \"data\"\n        | \"from\"\n        | \"gas\"\n        | \"gasPrice\"\n        | \"to\"\n        | \"type\"\n        | \"value\"\n    >\n> &\n    GetAccountParameter<account, Account | Address> &\n    GetChainParameter<chain, chainOverride> & {\n        /** Gas limit for transaction execution */\n        gas?: bigint | undefined;\n        application: Address;\n        baseLayerData: Hex;\n        execLayerData: Hex;\n        token: Address;\n        tokenId: bigint;\n        value: bigint;\n    };\nexport type EstimateDepositSingleERC1155TokenGasReturnType = bigint;\nexport type EstimateDepositSingleERC1155TokenGasErrorType =\n    | EstimateContractGasErrorType\n    | ErrorType;\n\nexport const estimateDepositSingleERC1155TokenGas = <\n    transport extends Transport,\n    chain extends Chain | undefined,\n    account extends Account | undefined,\n    chainOverride extends Chain | undefined = undefined,\n>(\n    client: Client<transport, chain, account>,\n    parameters: EstimateDepositSingleERC1155TokenGasParameters<\n        chain,\n        account,\n        chainOverride\n    >,\n) => {\n    const {\n        account,\n        application,\n        baseLayerData,\n        chain = client.chain,\n        execLayerData,\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        token,\n        tokenId,\n        value,\n    } = parameters;\n\n    const params = {\n        account,\n        abi: erc1155SinglePortalAbi,\n        address: erc1155SinglePortalAddress,\n        functionName: \"depositSingleERC1155Token\",\n        args: [\n            token,\n            application,\n            tokenId,\n            value,\n            baseLayerData,\n            execLayerData,\n        ],\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        // TODO: Not sure `chain` is necessary since it's not used downstream\n        // in `estimateContractGas` or `estimateGas`\n        // @ts-ignore\n        chain,\n    } satisfies EstimateContractGasParameters<\n        typeof erc1155SinglePortalAbi,\n        \"depositSingleERC1155Token\"\n    >;\n    // biome-ignore lint/suspicious/noExplicitAny: viem pattern\n    return estimateContractGas(client, params as any);\n};\n","import type {\n    Account,\n    Address,\n    Chain,\n    Client,\n    DeriveChain,\n    FormattedTransactionRequest,\n    GetChainParameter,\n    Hash,\n    Hex,\n    Transport,\n    UnionOmit,\n    WriteContractErrorType,\n    WriteContractParameters,\n    WriteContractReturnType,\n} from \"viem\";\nimport { writeContract } from \"viem/actions\";\nimport {\n    erc1155SinglePortalAbi,\n    erc1155SinglePortalAddress,\n} from \"../rollups.js\";\nimport type {\n    ErrorType,\n    GetAccountParameter,\n    UnionEvaluate,\n} from \"../types/utils.js\";\nimport {\n    type EstimateDepositSingleERC1155TokenGasErrorType,\n    type EstimateDepositSingleERC1155TokenGasParameters,\n    estimateDepositSingleERC1155TokenGas,\n} from \"./estimateDepositSingleERC1155TokenGas.js\";\n\nexport type DepositSingleERC1155TokenParameters<\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n    chainOverride extends Chain | undefined = Chain | undefined,\n    _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionEvaluate<\n    UnionOmit<\n        FormattedTransactionRequest<_derivedChain>,\n        | \"accessList\"\n        | \"data\"\n        | \"from\"\n        | \"gas\"\n        | \"gasPrice\"\n        | \"to\"\n        | \"type\"\n        | \"value\"\n    >\n> &\n    GetAccountParameter<account, Account | Address> &\n    GetChainParameter<chain, chainOverride> & {\n        /**\n         * Gas limit for transaction execution on the L1.\n         * `null` to skip gas estimation & defer calculation to signer.\n         */\n        gas?: bigint | null | undefined;\n        application: Address;\n        baseLayerData: Hex;\n        execLayerData: Hex;\n        token: Address;\n        tokenId: bigint;\n        value: bigint;\n    };\nexport type DepositSingleERC1155TokenReturnType = Hash;\nexport type DepositSingleERC1155TokenErrorType =\n    | EstimateDepositSingleERC1155TokenGasErrorType\n    | WriteContractErrorType\n    | ErrorType;\n\nexport const depositSingleERC1155Token = async <\n    TChain extends Chain | undefined,\n    TAccount extends Account | undefined,\n    TChainOverride extends Chain | undefined = undefined,\n>(\n    client: Client<Transport, TChain, TAccount>,\n    params: DepositSingleERC1155TokenParameters<\n        TChain,\n        TAccount,\n        TChainOverride\n    >,\n): Promise<WriteContractReturnType> => {\n    const {\n        account,\n        application,\n        baseLayerData,\n        chain = client.chain,\n        execLayerData,\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        token,\n        tokenId,\n        value,\n    } = params;\n\n    const gas_ =\n        typeof gas !== \"number\" && gas !== null\n            ? await estimateDepositSingleERC1155TokenGas(\n                  client,\n                  params as EstimateDepositSingleERC1155TokenGasParameters,\n              )\n            : undefined;\n\n    return writeContract(client, {\n        // biome-ignore lint/style/noNonNullAssertion: viem pattern\n        account: account!,\n        abi: erc1155SinglePortalAbi,\n        address: erc1155SinglePortalAddress,\n        chain,\n        functionName: \"depositSingleERC1155Token\",\n        args: [\n            token,\n            application,\n            tokenId,\n            value,\n            baseLayerData,\n            execLayerData,\n        ],\n        gas: gas_,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        // biome-ignore lint/suspicious/noExplicitAny: viem pattern\n    } satisfies WriteContractParameters as any);\n};\n","import type {\n    AbiParametersToPrimitiveTypes,\n    ExtractAbiFunction,\n} from \"abitype\";\nimport type { iApplicationAbi } from \"../rollups.js\";\nimport type { Output } from \"./actions.js\";\n\ntype ExecuteOutputArgs = AbiParametersToPrimitiveTypes<\n    ExtractAbiFunction<typeof iApplicationAbi, \"executeOutput\">[\"inputs\"]\n>;\n\nexport const toEVM = (output: Output): ExecuteOutputArgs => {\n    const { index: outputIndex, outputHashesSiblings, rawData } = output;\n    if (!outputHashesSiblings) {\n        throw new Error(\"Output has no proof\");\n    }\n    return [rawData, { outputIndex, outputHashesSiblings }];\n};\n","import type {\n    Account,\n    Address,\n    Chain,\n    Client,\n    DeriveChain,\n    EstimateContractGasErrorType,\n    EstimateContractGasParameters,\n    FormattedTransactionRequest,\n    GetChainParameter,\n    Transport,\n    UnionOmit,\n} from \"viem\";\nimport { estimateContractGas } from \"viem/actions\";\nimport { iApplicationAbi } from \"../rollups.js\";\nimport type { GetOutputReturnType } from \"../types/actions.js\";\nimport { toEVM } from \"../types/output.js\";\nimport type {\n    ErrorType,\n    GetAccountParameter,\n    UnionEvaluate,\n} from \"../types/utils.js\";\n\nexport type EstimateExecuteOutputGasParameters<\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n    chainOverride extends Chain | undefined = Chain | undefined,\n    _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionEvaluate<\n    UnionOmit<\n        FormattedTransactionRequest<_derivedChain>,\n        | \"accessList\"\n        | \"data\"\n        | \"from\"\n        | \"gas\"\n        | \"gasPrice\"\n        | \"to\"\n        | \"type\"\n        | \"value\"\n    >\n> &\n    GetAccountParameter<account, Account | Address> &\n    GetChainParameter<chain, chainOverride> & {\n        /** Gas limit for transaction execution */\n        gas?: bigint | undefined;\n        application: Address;\n        output: GetOutputReturnType;\n    };\nexport type EstimateExecuteOutputGasReturnType = bigint;\nexport type EstimateExecuteOutputGasErrorType =\n    | EstimateContractGasErrorType\n    | ErrorType;\n\nexport const estimateExecuteOutputGas = <\n    transport extends Transport,\n    chain extends Chain | undefined,\n    account extends Account | undefined,\n    chainOverride extends Chain | undefined = undefined,\n>(\n    client: Client<transport, chain, account>,\n    parameters: EstimateExecuteOutputGasParameters<\n        chain,\n        account,\n        chainOverride\n    >,\n) => {\n    const {\n        account,\n        chain = client.chain,\n        application,\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        output,\n    } = parameters;\n\n    const args = toEVM(output);\n\n    const params = {\n        account,\n        abi: iApplicationAbi,\n        address: application,\n        functionName: \"executeOutput\",\n        args,\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        // TODO: Not sure `chain` is necessary since it's not used downstream\n        // in `estimateContractGas` or `estimateGas`\n        // @ts-ignore\n        chain,\n    } satisfies EstimateContractGasParameters<\n        typeof iApplicationAbi,\n        \"executeOutput\"\n    >;\n    // biome-ignore lint/suspicious/noExplicitAny: viem pattern\n    return estimateContractGas(client, params as any);\n};\n","import type {\n    Account,\n    Address,\n    Chain,\n    Client,\n    DeriveChain,\n    FormattedTransactionRequest,\n    GetChainParameter,\n    Hash,\n    Transport,\n    UnionOmit,\n    WriteContractErrorType,\n    WriteContractParameters,\n    WriteContractReturnType,\n} from \"viem\";\nimport { writeContract } from \"viem/actions\";\nimport { iApplicationAbi } from \"../rollups.js\";\nimport type { GetOutputReturnType } from \"../types/actions.js\";\nimport { toEVM } from \"../types/output.js\";\nimport type {\n    ErrorType,\n    GetAccountParameter,\n    UnionEvaluate,\n} from \"../types/utils.js\";\nimport {\n    type EstimateExecuteOutputGasErrorType,\n    type EstimateExecuteOutputGasParameters,\n    estimateExecuteOutputGas,\n} from \"./estimateExecuteOutputGas.js\";\n\nexport type ExecuteOutputParameters<\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n    chainOverride extends Chain | undefined = Chain | undefined,\n    _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionEvaluate<\n    UnionOmit<\n        FormattedTransactionRequest<_derivedChain>,\n        | \"accessList\"\n        | \"data\"\n        | \"from\"\n        | \"gas\"\n        | \"gasPrice\"\n        | \"to\"\n        | \"type\"\n        | \"value\"\n    >\n> &\n    GetAccountParameter<account, Account | Address> &\n    GetChainParameter<chain, chainOverride> & {\n        /**\n         * Gas limit for transaction execution on the L1.\n         * `null` to skip gas estimation & defer calculation to signer.\n         */\n        gas?: bigint | null | undefined;\n        application: Address;\n        output: GetOutputReturnType;\n    };\nexport type ExecuteOutputReturnType = Hash;\nexport type ExecuteOutputErrorType =\n    | EstimateExecuteOutputGasErrorType\n    | WriteContractErrorType\n    | ErrorType;\n\nexport const executeOutput = async <\n    TChain extends Chain | undefined,\n    TAccount extends Account | undefined,\n    TChainOverride extends Chain | undefined = undefined,\n>(\n    client: Client<Transport, TChain, TAccount>,\n    params: ExecuteOutputParameters<TChain, TAccount, TChainOverride>,\n): Promise<WriteContractReturnType> => {\n    const {\n        account,\n        application,\n        chain = client.chain,\n        gas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        output,\n    } = params;\n\n    const gas_ =\n        typeof gas !== \"number\" && gas !== null\n            ? await estimateExecuteOutputGas(\n                  client,\n                  params as EstimateExecuteOutputGasParameters,\n              )\n            : undefined;\n\n    const args = toEVM(output);\n    return writeContract(client, {\n        // biome-ignore lint/style/noNonNullAssertion: viem pattern\n        account: account!,\n        abi: iApplicationAbi,\n        address: application,\n        chain,\n        functionName: \"executeOutput\",\n        args,\n        gas: gas_,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        // biome-ignore lint/suspicious/noExplicitAny: viem pattern\n    } satisfies WriteContractParameters as any);\n};\n","import type {\n    Application as ApplicationRpc,\n    DelegateCallVoucher as DelegateCallVoucherRpc,\n    Epoch as EpochRpc,\n    Input as InputRpc,\n    Notice as NoticeRpc,\n    Output as OutputRpc,\n    Pagination as PaginationRpc,\n    Report as ReportRpc,\n    Voucher as VoucherRpc,\n} from \"@cartesi/rpc\";\nimport { type Hex, decodeFunctionData, getAddress, hexToBigInt } from \"viem\";\nimport { dataAvailabilityAbi } from \"../rollups.js\";\nimport type {\n    Application,\n    DataAvailability,\n    DelegateCallVoucher,\n    Epoch,\n    Input,\n    Notice,\n    Output,\n    Pagination,\n    Report,\n    Voucher,\n} from \"./actions.js\";\n\nexport const paginationConverter = (pagination: PaginationRpc): Pagination => {\n    return {\n        limit: pagination.limit,\n        offset: pagination.offset,\n        totalCount: pagination.total_count,\n    };\n};\n\nconst parseDataAvailability = (data: Hex): DataAvailability => {\n    const { functionName, args } = decodeFunctionData({\n        abi: dataAvailabilityAbi,\n        data,\n    });\n    switch (functionName) {\n        case \"InputBox\": {\n            const [inputBoxAddress] = args;\n            return {\n                type: functionName,\n                inputBoxAddress,\n            };\n        }\n        case \"InputBoxAndEspresso\": {\n            const [inputBoxAddress, fromBlock, namespaceId] = args;\n            return {\n                type: functionName,\n                inputBoxAddress: getAddress(inputBoxAddress),\n                fromBlock,\n                namespaceId,\n            };\n        }\n    }\n};\n\nexport const applicationConverter = (\n    application: ApplicationRpc,\n): Application => {\n    return {\n        name: application.name,\n        applicationAddress: getAddress(application.iapplication_address),\n        consensusAddress: getAddress(application.iconsensus_address),\n        inputBoxAddress: getAddress(application.iinputbox_address),\n        templateHash: application.template_hash,\n        epochLength: hexToBigInt(application.epoch_length),\n        dataAvailability: parseDataAvailability(application.data_availability),\n        state: application.state,\n        reason: application.reason,\n        inputBoxBlock: hexToBigInt(application.iinputbox_block),\n        lastInputCheckBlock: hexToBigInt(application.last_input_check_block),\n        lastOutputCheckBlock: hexToBigInt(application.last_output_check_block),\n        processedInputs: hexToBigInt(application.processed_inputs),\n        createdAt: new Date(application.created_at),\n        updatedAt: new Date(application.updated_at),\n        executionParameters: {\n            snapshotPolicy: application.execution_parameters.snapshot_policy,\n            advanceIncCycles: hexToBigInt(\n                application.execution_parameters.advance_inc_cycles,\n            ),\n            advanceMaxCycles: hexToBigInt(\n                application.execution_parameters.advance_max_cycles,\n            ),\n            inspectIncCycles: hexToBigInt(\n                application.execution_parameters.inspect_inc_cycles,\n            ),\n            inspectMaxCycles: hexToBigInt(\n                application.execution_parameters.inspect_max_cycles,\n            ),\n            advanceIncDeadline: hexToBigInt(\n                application.execution_parameters.advance_inc_deadline,\n            ),\n            advanceMaxDeadline: hexToBigInt(\n                application.execution_parameters.advance_max_deadline,\n            ),\n            inspectIncDeadline: hexToBigInt(\n                application.execution_parameters.inspect_inc_deadline,\n            ),\n            inspectMaxDeadline: hexToBigInt(\n                application.execution_parameters.inspect_max_deadline,\n            ),\n            loadDeadline: hexToBigInt(\n                application.execution_parameters.load_deadline,\n            ),\n            storeDeadline: hexToBigInt(\n                application.execution_parameters.store_deadline,\n            ),\n            fastDeadline: hexToBigInt(\n                application.execution_parameters.fast_deadline,\n            ),\n            maxConcurrentInspects:\n                application.execution_parameters.max_concurrent_inspects,\n            createdAt: new Date(application.execution_parameters.created_at),\n            updatedAt: new Date(application.execution_parameters.updated_at),\n        },\n    };\n};\n\nexport const epochConverter = (epoch: EpochRpc): Epoch => {\n    return {\n        index: hexToBigInt(epoch.index),\n        firstBlock: hexToBigInt(epoch.first_block),\n        lastBlock: hexToBigInt(epoch.last_block),\n        claimHash: epoch.claim_hash,\n        claimTransactionHash: epoch.claim_transaction_hash,\n        status: epoch.status,\n        virtualIndex: hexToBigInt(epoch.virtual_index),\n        createdAt: new Date(epoch.created_at),\n        updatedAt: new Date(epoch.updated_at),\n    };\n};\n\nexport const inputConverter = (input: InputRpc): Input => {\n    return {\n        epochIndex: hexToBigInt(input.epoch_index),\n        index: hexToBigInt(input.index),\n        blockNumber: hexToBigInt(input.block_number),\n        rawData: input.raw_data,\n        decodedData: {\n            chainId: hexToBigInt(input.decoded_data.chain_id as Hex),\n            applicationContract: getAddress(\n                input.decoded_data.application_contract,\n            ),\n            sender: getAddress(input.decoded_data.sender),\n            blockNumber: hexToBigInt(input.decoded_data.block_number),\n            blockTimestamp: hexToBigInt(input.decoded_data.block_timestamp),\n            prevRandao: hexToBigInt(input.decoded_data.prev_randao as Hex),\n            index: hexToBigInt(input.decoded_data.index),\n            payload: input.decoded_data.payload,\n        },\n        status: input.status,\n        machineHash: input.machine_hash,\n        outputsHash: input.outputs_hash,\n        transactionReference: input.transaction_reference,\n        createdAt: new Date(input.created_at),\n        updatedAt: new Date(input.updated_at),\n    };\n};\n\nconst parseOutputDecodedData = (\n    output: NoticeRpc | VoucherRpc | DelegateCallVoucherRpc,\n): Notice | Voucher | DelegateCallVoucher => {\n    switch (output.type) {\n        case \"Notice\": {\n            return {\n                type: \"Notice\",\n                payload: output.payload,\n            };\n        }\n        case \"Voucher\": {\n            return {\n                type: \"Voucher\",\n                payload: output.payload,\n                destination: getAddress(output.destination),\n                value: hexToBigInt(output.value),\n            };\n        }\n        case \"DelegateCallVoucher\": {\n            return {\n                type: \"DelegateCallVoucher\",\n                payload: output.payload,\n                destination: getAddress(output.destination),\n            };\n        }\n    }\n};\n\nexport const outputConverter = (output: OutputRpc): Output => {\n    return {\n        epochIndex: hexToBigInt(output.epoch_index),\n        inputIndex: hexToBigInt(output.input_index),\n        index: hexToBigInt(output.index),\n        rawData: output.raw_data,\n        decodedData: parseOutputDecodedData(output.decoded_data),\n        hash: output.hash,\n        outputHashesSiblings: output.output_hashes_siblings,\n        executionTransactionHash: output.execution_transaction_hash,\n        createdAt: new Date(output.created_at),\n        updatedAt: new Date(output.updated_at),\n    };\n};\n\nexport const reportConverter = (report: ReportRpc): Report => {\n    return {\n        inputIndex: hexToBigInt(report.input_index),\n        index: hexToBigInt(report.index),\n        rawData: report.raw_data,\n        createdAt: new Date(report.created_at),\n        updatedAt: new Date(report.updated_at),\n    };\n};\n","import type { Client, Transport } from \"viem\";\nimport type { PublicCartesiRpcSchema } from \"../decorators/publicL2.js\";\nimport type {\n    GetApplicationParams,\n    GetApplicationReturnType,\n} from \"../types/actions.js\";\nimport { applicationConverter } from \"../types/converter.js\";\n\nexport const getApplication = async (\n    client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>,\n    params: GetApplicationParams,\n): Promise<GetApplicationReturnType> => {\n    const { data: application } = await client.request({\n        method: \"cartesi_getApplication\",\n        params,\n    });\n    return applicationConverter(application);\n};\n","import type { Client, Hex, Transport } from \"viem\";\nimport { hexToNumber } from \"viem\";\nimport type { PublicCartesiRpcSchema } from \"../decorators/publicL2.js\";\nimport type { GetChainIdReturnType } from \"../types/actions.js\";\n\nexport const getChainId = async (\n    client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>,\n): Promise<GetChainIdReturnType> => {\n    const { data: chainId } = await client.request({\n        method: \"cartesi_getChainId\",\n        params: [],\n    });\n    return hexToNumber(chainId as Hex);\n};\n","import { type Client, type Transport, numberToHex } from \"viem\";\nimport type { PublicCartesiRpcSchema } from \"../decorators/publicL2.js\";\nimport type { GetEpochParams, GetEpochReturnType } from \"../types/actions.js\";\nimport { epochConverter } from \"../types/converter.js\";\n\nexport const getEpoch = async (\n    client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>,\n    params: GetEpochParams,\n): Promise<GetEpochReturnType> => {\n    const { data: epoch } = await client.request({\n        method: \"cartesi_getEpoch\",\n        params: {\n            application: params.application,\n            epoch_index: numberToHex(params.epochIndex),\n        },\n    });\n    return epochConverter(epoch);\n};\n","import { type Client, type Transport, numberToHex } from \"viem\";\nimport type { PublicCartesiRpcSchema } from \"../decorators/publicL2.js\";\nimport type { GetInputParams, GetInputReturnType } from \"../types/actions.js\";\nimport { inputConverter } from \"../types/converter.js\";\n\nexport const getInput = async (\n    client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>,\n    params: GetInputParams,\n): Promise<GetInputReturnType> => {\n    const { data: input } = await client.request({\n        method: \"cartesi_getInput\",\n        params: {\n            application: params.application,\n            input_index: numberToHex(params.inputIndex),\n        },\n    });\n    return inputConverter(input);\n};\n","import { type Client, type Transport, hexToBigInt } from \"viem\";\nimport type { PublicCartesiRpcSchema } from \"../decorators/publicL2.js\";\nimport type {\n    GetLastAcceptedEpochIndexParams,\n    GetLastAcceptedEpochIndexReturnType,\n} from \"../types/actions.js\";\n\nexport const getLastAcceptedEpochIndex = async (\n    client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>,\n    params: GetLastAcceptedEpochIndexParams,\n): Promise<GetLastAcceptedEpochIndexReturnType> => {\n    const { data: epochIndex } = await client.request({\n        method: \"cartesi_getLastAcceptedEpochIndex\",\n        params,\n    });\n    return hexToBigInt(epochIndex);\n};\n","import type { Client, Transport } from \"viem\";\nimport type { PublicCartesiRpcSchema } from \"../decorators/publicL2.js\";\nimport type { GetNodeVersionReturnType } from \"../types/actions.js\";\n\nexport const getNodeVersion = async (\n    client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>,\n): Promise<GetNodeVersionReturnType> => {\n    const { data: version } = await client.request({\n        method: \"cartesi_getNodeVersion\",\n        params: [],\n    });\n    return version;\n};\n","import { type Client, type Transport, numberToHex } from \"viem\";\nimport type { PublicCartesiRpcSchema } from \"../decorators/publicL2.js\";\nimport type { GetOutputParams, GetOutputReturnType } from \"../types/actions.js\";\nimport { outputConverter } from \"../types/converter.js\";\n\nexport const getOutput = async (\n    client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>,\n    params: GetOutputParams,\n): Promise<GetOutputReturnType> => {\n    const { data: output } = await client.request({\n        method: \"cartesi_getOutput\",\n        params: {\n            application: params.application,\n            output_index: numberToHex(params.outputIndex),\n        },\n    });\n    return outputConverter(output);\n};\n","import { type Client, type Transport, hexToBigInt } from \"viem\";\nimport type { PublicCartesiRpcSchema } from \"../decorators/publicL2.js\";\nimport type {\n    GetProcessedInputCountParams,\n    GetProcessedInputCountReturnType,\n} from \"../types/actions.js\";\n\nexport const getProcessedInputCount = async (\n    client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>,\n    params: GetProcessedInputCountParams,\n): Promise<GetProcessedInputCountReturnType> => {\n    const { processed_inputs } = await client.request({\n        method: \"cartesi_getProcessedInputCount\",\n        params,\n    });\n    return hexToBigInt(processed_inputs);\n};\n","import { type Client, type Transport, numberToHex } from \"viem\";\nimport type { PublicCartesiRpcSchema } from \"../decorators/publicL2.js\";\nimport type { GetReportParams, GetReportReturnType } from \"../types/actions.js\";\nimport { reportConverter } from \"../types/converter.js\";\n\nexport const getReport = async (\n    client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>,\n    params: GetReportParams,\n): Promise<GetReportReturnType> => {\n    const { data: report } = await client.request({\n        method: \"cartesi_getReport\",\n        params: {\n            application: params.application,\n            report_index: numberToHex(params.reportIndex),\n        },\n    });\n    return reportConverter(report);\n};\n","import type { Client, Transport } from \"viem\";\nimport type { PublicCartesiRpcSchema } from \"../decorators/publicL2.js\";\nimport type {\n    ListApplicationsParams,\n    ListApplicationsReturnType,\n} from \"../types/actions.js\";\nimport {\n    applicationConverter,\n    paginationConverter,\n} from \"../types/converter.js\";\n\nexport const listApplications = async (\n    client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>,\n    params: ListApplicationsParams,\n): Promise<ListApplicationsReturnType> => {\n    const result = await client.request({\n        method: \"cartesi_listApplications\",\n        params: params ?? {},\n    });\n    return {\n        pagination: paginationConverter(result.pagination),\n        data: result.data.map(applicationConverter),\n    };\n};\n","import type { Client, Transport } from \"viem\";\nimport type { PublicCartesiRpcSchema } from \"../decorators/publicL2.js\";\nimport type {\n    ListEpochsParams,\n    ListEpochsReturnType,\n} from \"../types/actions.js\";\nimport { epochConverter, paginationConverter } from \"../types/converter.js\";\n\nexport const listEpochs = async (\n    client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>,\n    params: ListEpochsParams,\n): Promise<ListEpochsReturnType> => {\n    const epochs = await client.request({\n        method: \"cartesi_listEpochs\",\n        params,\n    });\n    return {\n        data: epochs.data.map(epochConverter),\n        pagination: paginationConverter(epochs.pagination),\n    };\n};\n","import { type Client, type Transport, numberToHex } from \"viem\";\nimport type { PublicCartesiRpcSchema } from \"../decorators/publicL2.js\";\nimport type {\n    ListInputsParams,\n    ListInputsReturnType,\n} from \"../types/actions.js\";\nimport { inputConverter, paginationConverter } from \"../types/converter.js\";\n\nexport const listInputs = async (\n    client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>,\n    params: ListInputsParams,\n): Promise<ListInputsReturnType> => {\n    const inputs = await client.request({\n        method: \"cartesi_listInputs\",\n        params: {\n            application: params.application,\n            epoch_index:\n                params.epochIndex !== undefined\n                    ? numberToHex(params.epochIndex)\n                    : undefined,\n            sender: params.sender,\n            limit: params.limit,\n            offset: params.offset,\n        },\n    });\n    return {\n        data: inputs.data.map(inputConverter),\n        pagination: paginationConverter(inputs.pagination),\n    };\n};\n","import type { Client, Hex, Transport } from \"viem\";\nimport { getAbiItem, numberToHex, toFunctionSelector } from \"viem\";\nimport type { PublicCartesiRpcSchema } from \"../decorators/publicL2.js\";\nimport { outputsAbi } from \"../rollups.js\";\nimport type {\n    ListOutputsParams,\n    ListOutputsReturnType,\n    OutputType,\n} from \"../types/actions.js\";\nimport { outputConverter, paginationConverter } from \"../types/converter.js\";\n\nconst toOutputType = (outputType?: OutputType): Hex | undefined => {\n    switch (outputType) {\n        case \"Notice\":\n            return toFunctionSelector(\n                getAbiItem({\n                    abi: outputsAbi,\n                    name: \"Notice\",\n                }),\n            );\n        case \"Voucher\":\n            return toFunctionSelector(\n                getAbiItem({\n                    abi: outputsAbi,\n                    name: \"Voucher\",\n                }),\n            );\n        case \"DelegateCallVoucher\":\n            return toFunctionSelector(\n                getAbiItem({\n                    abi: outputsAbi,\n                    name: \"DelegateCallVoucher\",\n                }),\n            );\n    }\n    return undefined;\n};\n\nexport const listOutputs = async (\n    client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>,\n    params: ListOutputsParams,\n): Promise<ListOutputsReturnType> => {\n    const output_type = toOutputType(params.outputType);\n    const outputs = await client.request({\n        method: \"cartesi_listOutputs\",\n        params: {\n            application: params.application,\n            epoch_index:\n                params.epochIndex !== undefined\n                    ? numberToHex(params.epochIndex)\n                    : undefined,\n            input_index:\n                params.inputIndex !== undefined\n                    ? numberToHex(params.inputIndex)\n                    : undefined,\n            output_type,\n            voucher_address: params.voucherAddress,\n            limit: params.limit,\n            offset: params.offset,\n        },\n    });\n    return {\n        data: outputs.data.map(outputConverter),\n        pagination: paginationConverter(outputs.pagination),\n    };\n};\n","import { type Client, type Transport, numberToHex } from \"viem\";\nimport type { PublicCartesiRpcSchema } from \"../decorators/publicL2.js\";\nimport type {\n    ListReportsParams,\n    ListReportsReturnType,\n} from \"../types/actions.js\";\nimport { paginationConverter, reportConverter } from \"../types/converter.js\";\n\nexport const listReports = async (\n    client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>,\n    params: ListReportsParams,\n): Promise<ListReportsReturnType> => {\n    const reports = await client.request({\n        method: \"cartesi_listReports\",\n        params: {\n            application: params.application,\n            epoch_index:\n                params.epochIndex !== undefined\n                    ? numberToHex(params.epochIndex)\n                    : undefined,\n            input_index:\n                params.inputIndex !== undefined\n                    ? numberToHex(params.inputIndex)\n                    : undefined,\n            limit: params.limit,\n            offset: params.offset,\n        },\n    });\n    return {\n        data: reports.data.map(reportConverter),\n        pagination: paginationConverter(reports.pagination),\n    };\n};\n","import type {\n    Account,\n    Address,\n    Chain,\n    Client,\n    DeriveChain,\n    ReadContractParameters,\n    Transport,\n} from \"viem\";\nimport { readContract } from \"viem/actions\";\nimport { iApplicationAbi } from \"../rollups.js\";\nimport type { GetOutputReturnType } from \"../types/actions.js\";\nimport { toEVM } from \"../types/output.js\";\n\nexport type ValidateOutputParameters<\n    chain extends Chain | undefined = Chain | undefined,\n    chainOverride extends Chain | undefined = Chain | undefined,\n    _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = Omit<\n    ReadContractParameters<typeof iApplicationAbi, \"validateOutput\">,\n    \"abi\" | \"address\" | \"args\" | \"functionName\"\n> & {\n    application: Address;\n    output: GetOutputReturnType;\n};\n\nexport type ValidateOutputReturnType = boolean;\n\nexport const validateOutput = async <\n    transport extends Transport,\n    chain extends Chain | undefined,\n    account extends Account | undefined,\n>(\n    client: Client<transport, chain, account>,\n    parameters: ValidateOutputParameters,\n): Promise<ValidateOutputReturnType> => {\n    const { application, output } = parameters;\n    const args = toEVM(output);\n    try {\n        await readContract(client, {\n            ...parameters,\n            abi: iApplicationAbi,\n            address: application,\n            args,\n            functionName: \"validateOutput\",\n        });\n        return true;\n    } catch {\n        return false;\n    }\n};\n","import pRetry, { AbortError } from \"p-retry\";\nimport { type Client, type Transport, numberToHex } from \"viem\";\nimport type { PublicCartesiRpcSchema } from \"../decorators/publicL2.js\";\nimport type {\n    WaitForInputParams,\n    WaitForInputReturnType,\n} from \"../types/actions.js\";\nimport { inputConverter } from \"../types/converter.js\";\n\nexport const waitForInput = async (\n    client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>,\n    params: WaitForInputParams,\n): Promise<WaitForInputReturnType> => {\n    const pollingInterval = params.pollingInterval ?? client.pollingInterval;\n    const retryCount = params.retryCount ?? 10;\n    const timeout = params.timeout;\n\n    // wait processing by default\n    const waitProcessing =\n        params.waitProcessing === undefined ? true : params.waitProcessing;\n\n    // reject if input was not successfully processed\n    const rejectErrors =\n        params.rejectErrors === undefined ? false : params.rejectErrors;\n\n    const input = await pRetry(\n        async () => {\n            const { data: input } = await client.request({\n                method: \"cartesi_getInput\",\n                params: {\n                    application: params.application,\n                    input_index: numberToHex(params.inputIndex),\n                },\n            });\n\n            if (waitProcessing && input.status === \"NONE\") {\n                throw new Error(\"Input is not processed\");\n            }\n\n            if (\n                rejectErrors &&\n                (input.status === \"CYCLE_LIMIT_EXCEEDED\" ||\n                    input.status === \"EXCEPTION\" ||\n                    input.status === \"MACHINE_HALTED\" ||\n                    input.status === \"PAYLOAD_LENGTH_LIMIT_EXCEEDED\" ||\n                    input.status === \"REJECTED\" ||\n                    input.status === \"TIME_LIMIT_EXCEEDED\" ||\n                    input.status === \"OUTPUTS_LIMIT_EXCEEDED\")\n            ) {\n                throw new AbortError(`Input status: ${input.status}`);\n            }\n\n            return input;\n        },\n        {\n            retries: retryCount,\n            minTimeout: pollingInterval,\n            factor: 1,\n            maxRetryTime: timeout,\n        },\n    );\n\n    return inputConverter(input);\n};\n"],"mappings":"8KAoDa,EAAsB,CAM/B6F,EACA5F,IACC,CACD,GAAM,CACF,UACA,QAAQ,EAAO,MACf,cACA,MACA,eACA,uBACA,QACA,UACH,CAAG,EAEE,EAAS,CACX,UACA,IAAKK,EAAAA,YACL,QAASoD,EAAAA,gBACT,aAAc,WACd,KAAM,CAAC,EAAa,CAAQ,EAC5B,MACA,eACA,uBACA,QAIA,OACH,EAED,OAAA,EAAA,EAAA,qBAA2B,EAAQ,EAAc,AACpD,EC1BY,EAAW,MAKpBN,EACA/C,IACmC,CACnC,GAAM,CACF,UACA,cACA,QAAQ,EAAO,MACf,MACA,eACA,uBACA,QACA,UACH,CAAG,EAEE,EACF,OAAO,GAAQ,UAAY,IAAQ,KAC7B,MAAM,EACF,EACA,EACH,CACD,IAAA,GAEV,OAAA,EAAA,EAAA,eAAqB,EAAQ,CAEhB,UACT,IAAKC,EAAAA,YACL,QAASoD,EAAAA,gBACT,QACA,aAAc,WACd,KAAM,CAAC,EAAa,CAAQ,EAC5B,IAAK,EACL,eACA,uBACA,OAEH,EAA0C,AAC9C,EC7CY,EAAsC,CAM/CmC,EACApF,IAKC,CACD,GAAM,CACF,UACA,cACA,gBACA,QAAQ,EAAO,MACf,gBACA,MACA,eACA,uBACA,QACA,QACA,WACA,SACH,CAAG,EAEE,EAAS,CACX,UACA,IAAKK,EAAAA,sBACL,QAASC,EAAAA,0BACT,aAAc,2BACd,KAAM,CACF,EACA,EACA,EACA,EACA,EACA,CACH,EACD,MACA,eACA,uBACA,QAIA,OACH,EAKD,OAAA,EAAA,EAAA,qBAA2B,EAAQ,EAAc,AACpD,EC/CY,EAA2B,MAKpCqC,EACAvC,IAKmC,CACnC,GAAM,CACF,UACA,cACA,gBACA,QAAQ,EAAO,MACf,gBACA,MACA,eACA,uBACA,QACA,QACA,WACA,SACH,CAAG,EAEE,EACF,OAAO,GAAQ,UAAY,IAAQ,KAC7B,MAAM,EACF,EACA,EACH,CACD,IAAA,GAEV,OAAA,EAAA,EAAA,eAAqB,EAAQ,CAEhB,UACT,IAAKC,EAAAA,sBACL,QAASC,EAAAA,0BACT,QACA,aAAc,2BACd,KAAM,CACF,EACA,EACA,EACA,EACA,EACA,CACH,EACD,IAAK,EACL,eACA,uBACA,OAEH,EAA0C,AAC9C,ECrEY,EAAgC,CAMzC8E,EACA5E,IAKC,CACD,GAAM,CACF,UACA,SACA,cACA,QAAQ,EAAO,MACf,gBACA,MACA,eACA,uBACA,QACA,QACH,CAAG,EAEE,EAAS,CACX,UACA,IAAKK,EAAAA,eACL,QAASC,EAAAA,mBACT,aAAc,qBACd,KAAM,CAAC,EAAO,EAAa,EAAQ,CAAc,EACjD,MACA,eACA,uBACA,QAIA,OACH,EAKD,OAAA,EAAA,EAAA,qBAA2B,EAAQ,EAAc,AACpD,ECnCY,EAAqB,MAK9B6B,EACA/B,IACmC,CACnC,GAAM,CACF,UACA,SACA,cACA,QAAQ,EAAO,MACf,gBACA,MACA,eACA,uBACA,QACA,QACH,CAAG,EAEE,EACF,OAAO,GAAQ,UAAY,IAAQ,KAC7B,MAAM,EACF,EACA,EACH,CACD,IAAA,GAEV,OAAA,EAAA,EAAA,eAAqB,EAAQ,CAEhB,UACT,IAAKC,EAAAA,eACL,QAASC,EAAAA,mBACT,QACA,aAAc,qBACd,KAAM,CAAC,EAAO,EAAa,EAAQ,CAAc,EACjD,IAAK,EACL,eACA,uBACA,OAEH,EAA0C,AAC9C,ECrDY,EAAgC,CAMzCsE,EACApE,IAKC,CACD,GAAM,CACF,UACA,cACA,gBACA,QAAQ,EAAO,MACf,gBACA,MACA,eACA,uBACA,QACA,QACA,UACH,CAAG,EAEE,EAAS,CACX,UACA,IAAKK,EAAAA,gBACL,QAASC,EAAAA,oBACT,aAAc,qBACd,KAAM,CAAC,EAAO,EAAa,EAAS,EAAe,CAAc,EACjE,MACA,eACA,uBACA,QAIA,OACH,EAKD,OAAA,EAAA,EAAA,qBAA2B,EAAQ,EAAc,AACpD,ECpCY,EAAqB,MAK9BqB,EACAvB,IACmC,CACnC,GAAM,CACF,UACA,cACA,gBACA,QAAQ,EAAO,MACf,gBACA,MACA,eACA,uBACA,QACA,QACA,UACH,CAAG,EAEE,EACF,OAAO,GAAQ,UAAY,IAAQ,KAC7B,MAAM,EACF,EACA,EACH,CACD,IAAA,GAEV,OAAA,EAAA,EAAA,eAAqB,EAAQ,CAEhB,UACT,IAAKC,EAAAA,gBACL,QAASC,EAAAA,oBACT,QACA,aAAc,qBACd,KAAM,CAAC,EAAO,EAAa,EAAS,EAAe,CAAc,EACjE,IAAK,EACL,eACA,uBACA,OAEH,EAA0C,AAC9C,ECjEY,EAA0B,CAMnC8D,EACA5D,IAKC,CACD,GAAM,CACF,UACA,QAAQ,EAAO,MACf,cACA,MACA,eACA,uBACA,QACA,gBACA,QACH,CAAG,EAEE,EAAS,CACX,UACA,IAAKK,EAAAA,eACL,QAASC,EAAAA,mBACT,aAAc,eACd,KAAM,CAAC,EAAa,CAAc,EAClC,MACA,eACA,uBACA,QACA,QAIA,OACH,EAKD,OAAA,EAAA,EAAA,qBAA2B,EAAQ,EAAc,AACpD,EC3BY,EAAe,MAKxBa,EACAf,IACmC,CACnC,GAAM,CACF,UACA,cACA,QAAQ,EAAO,MACf,gBACA,MACA,eACA,uBACA,QACA,QACH,CAAG,EAEE,EACF,OAAO,GAAQ,UAAY,IAAQ,KAC7B,MAAM,EACF,EACA,EACH,CACD,IAAA,GAEV,OAAA,EAAA,EAAA,eAAqB,EAAQ,CAEhB,UACT,IAAKC,EAAAA,eACL,QAASC,EAAAA,mBACT,QACA,aAAc,eACd,KAAM,CAAC,EAAa,CAAc,EAClC,IAAK,EACL,eACA,uBACA,QACA,OAEH,EAA0C,AAC9C,EChDY,EAAuC,CAMhDsD,EACApD,IAKC,CACD,GAAM,CACF,UACA,cACA,gBACA,QAAQ,EAAO,MACf,gBACA,MACA,eACA,uBACA,QACA,QACA,UACA,QACH,CAAG,EAEE,EAAS,CACX,UACA,IAAKK,EAAAA,uBACL,QAASC,EAAAA,2BACT,aAAc,4BACd,KAAM,CACF,EACA,EACA,EACA,EACA,EACA,CACH,EACD,MACA,eACA,uBACA,QAIA,OACH,EAKD,OAAA,EAAA,EAAA,qBAA2B,EAAQ,EAAc,AACpD,EC5CY,EAA4B,MAKrCK,EACAP,IAKmC,CACnC,GAAM,CACF,UACA,cACA,gBACA,QAAQ,EAAO,MACf,gBACA,MACA,eACA,uBACA,QACA,QACA,UACA,QACH,CAAG,EAEE,EACF,OAAO,GAAQ,UAAY,IAAQ,KAC7B,MAAM,EACF,EACA,EACH,CACD,IAAA,GAEV,OAAA,EAAA,EAAA,eAAqB,EAAQ,CAEhB,UACT,IAAKC,EAAAA,uBACL,QAASC,EAAAA,2BACT,QACA,aAAc,4BACd,KAAM,CACF,EACA,EACA,EACA,EACA,EACA,CACH,EACD,IAAK,EACL,eACA,uBACA,OAEH,EAA0C,AAC9C,ECnHY,EAAQ,AAACC,GAAsC,CACxD,GAAM,CAAE,MAAO,EAAa,uBAAsB,UAAS,CAAG,EAC9D,GAAI,CAAC,EACD,MAAU,MAAM,sBAAA,CAEpB,MAAO,CAAC,EAAS,CAAE,cAAa,sBAAuB,CAAA,CAC1D,ECoCY,EAA2B,CAMpC6C,EACA3C,IAKC,CACD,GAAM,CACF,UACA,QAAQ,EAAO,MACf,cACA,MACA,eACA,uBACA,QACA,SACH,CAAG,EAEE,EAAO,EAAM,EAAO,CAEpB,EAAS,CACX,UACA,IAAK6C,EAAAA,gBACL,QAAS,EACT,aAAc,gBACd,OACA,MACA,eACA,uBACA,QAIA,OACH,EAKD,OAAA,EAAA,EAAA,qBAA2B,EAAQ,EAAc,AACpD,ECnCY,EAAgB,MAKzB3C,EACAC,IACmC,CACnC,GAAM,CACF,UACA,cACA,QAAQ,EAAO,MACf,MACA,eACA,uBACA,QACA,SACH,CAAG,EAEE,EACF,OAAO,GAAQ,UAAY,IAAQ,KAC7B,MAAM,EACF,EACA,EACH,CACD,IAAA,GAEJ,EAAO,EAAM,EAAO,CAC1B,OAAA,EAAA,EAAA,eAAqB,EAAQ,CAEhB,UACT,IAAK0C,EAAAA,gBACL,QAAS,EACT,QACA,aAAc,gBACd,OACA,IAAK,EACL,eACA,uBACA,OAEH,EAA0C,AAC9C,EChFY,EAAsB,AAACxC,IACzB,CACH,MAAO,EAAW,MAClB,OAAQ,EAAW,OACnB,WAAY,EAAW,WAC1B,GAGC,EAAwB,AAACC,GAAgC,CAC3D,GAAM,CAAE,eAAc,OAAM,EAAA,EAAA,EAAA,oBAAsB,CAC9C,IAAKC,EAAAA,oBACL,MACH,EAAC,CACF,OAAQ,EAAR,CACI,IAAK,WAAY,CACb,GAAM,CAACC,EAAgB,CAAG,EAC1B,MAAO,CACH,KAAM,EACN,gBAAA,CACH,CACJ,CACD,IAAK,sBAAuB,CACxB,GAAM,CAACA,EAAiB,EAAW,EAAY,CAAG,EAClD,MAAO,CACH,KAAM,EACN,iBAAA,EAAA,EAAA,YAA4BA,EAAgB,CAC5C,YACA,aACH,CACJ,CACJ,CACJ,EAEY,EAAuB,AAChCC,IAEO,CACH,KAAM,EAAY,KAClB,oBAAA,EAAA,EAAA,YAA+B,EAAY,qBAAqB,CAChE,kBAAA,EAAA,EAAA,YAA6B,EAAY,mBAAmB,CAC5D,iBAAA,EAAA,EAAA,YAA4B,EAAY,kBAAkB,CAC1D,aAAc,EAAY,cAC1B,aAAA,EAAA,EAAA,aAAyB,EAAY,aAAa,CAClD,iBAAkB,EAAsB,EAAY,kBAAkB,CACtE,MAAO,EAAY,MACnB,OAAQ,EAAY,OACpB,eAAA,EAAA,EAAA,aAA2B,EAAY,gBAAgB,CACvD,qBAAA,EAAA,EAAA,aAAiC,EAAY,uBAAuB,CACpE,sBAAA,EAAA,EAAA,aAAkC,EAAY,wBAAwB,CACtE,iBAAA,EAAA,EAAA,aAA6B,EAAY,iBAAiB,CAC1D,UAAW,IAAI,KAAK,EAAY,YAChC,UAAW,IAAI,KAAK,EAAY,YAChC,oBAAqB,CACjB,eAAgB,EAAY,qBAAqB,gBACjD,kBAAA,EAAA,EAAA,aACI,EAAY,qBAAqB,mBACpC,CACD,kBAAA,EAAA,EAAA,aACI,EAAY,qBAAqB,mBACpC,CACD,kBAAA,EAAA,EAAA,aACI,EAAY,qBAAqB,mBACpC,CACD,kBAAA,EAAA,EAAA,aACI,EAAY,qBAAqB,mBACpC,CACD,oBAAA,EAAA,EAAA,aACI,EAAY,qBAAqB,qBACpC,CACD,oBAAA,EAAA,EAAA,aACI,EAAY,qBAAqB,qBACpC,CACD,oBAAA,EAAA,EAAA,aACI,EAAY,qBAAqB,qBACpC,CACD,oBAAA,EAAA,EAAA,aACI,EAAY,qBAAqB,qBACpC,CACD,cAAA,EAAA,EAAA,aACI,EAAY,qBAAqB,cACpC,CACD,eAAA,EAAA,EAAA,aACI,EAAY,qBAAqB,eACpC,CACD,cAAA,EAAA,EAAA,aACI,EAAY,qBAAqB,cACpC,CACD,sBACI,EAAY,qBAAqB,wBACrC,UAAW,IAAI,KAAK,EAAY,qBAAqB,YACrD,UAAW,IAAI,KAAK,EAAY,qBAAqB,WACxD,CACJ,GAGQ,EAAiB,AAACC,IACpB,CACH,OAAA,EAAA,EAAA,aAAmB,EAAM,MAAM,CAC/B,YAAA,EAAA,EAAA,aAAwB,EAAM,YAAY,CAC1C,WAAA,EAAA,EAAA,aAAuB,EAAM,WAAW,CACxC,UAAW,EAAM,WACjB,qBAAsB,EAAM,uBAC5B,OAAQ,EAAM,OACd,cAAA,EAAA,EAAA,aAA0B,EAAM,cAAc,CAC9C,UAAW,IAAI,KAAK,EAAM,YAC1B,UAAW,IAAI,KAAK,EAAM,WAC7B,GAGQ,EAAiB,AAACC,IACpB,CACH,YAAA,EAAA,EAAA,aAAwB,EAAM,YAAY,CAC1C,OAAA,EAAA,EAAA,aAAmB,EAAM,MAAM,CAC/B,aAAA,EAAA,EAAA,aAAyB,EAAM,aAAa,CAC5C,QAAS,EAAM,SACf,YAAa,CACT,SAAA,EAAA,EAAA,aAAqB,EAAM,aAAa,SAAgB,CACxD,qBAAA,EAAA,EAAA,YACI,EAAM,aAAa,qBACtB,CACD,QAAA,EAAA,EAAA,YAAmB,EAAM,aAAa,OAAO,CAC7C,aAAA,EAAA,EAAA,aAAyB,EAAM,aAAa,aAAa,CACzD,gBAAA,EAAA,EAAA,aAA4B,EAAM,aAAa,gBAAgB,CAC/D,YAAA,EAAA,EAAA,aAAwB,EAAM,aAAa,YAAmB,CAC9D,OAAA,EAAA,EAAA,aAAmB,EAAM,aAAa,MAAM,CAC5C,QAAS,EAAM,aAAa,OAC/B,EACD,OAAQ,EAAM,OACd,YAAa,EAAM,aACnB,YAAa,EAAM,aACnB,qBAAsB,EAAM,sBAC5B,UAAW,IAAI,KAAK,EAAM,YAC1B,UAAW,IAAI,KAAK,EAAM,WAC7B,GAGC,EAAyB,AAC3BC,GACyC,CACzC,OAAQ,EAAO,KAAf,CACI,IAAK,SACD,MAAO,CACH,KAAM,SACN,QAAS,EAAO,OACnB,EAEL,IAAK,UACD,MAAO,CACH,KAAM,UACN,QAAS,EAAO,QAChB,aAAA,EAAA,EAAA,YAAwB,EAAO,YAAY,CAC3C,OAAA,EAAA,EAAA,aAAmB,EAAO,MAAM,AACnC,EAEL,IAAK,sBACD,MAAO,CACH,KAAM,sBACN,QAAS,EAAO,QAChB,aAAA,EAAA,EAAA,YAAwB,EAAO,YAAY,AAC9C,CAER,CACJ,EAEY,EAAkB,AAACC,IACrB,CACH,YAAA,EAAA,EAAA,aAAwB,EAAO,YAAY,CAC3C,YAAA,EAAA,EAAA,aAAwB,EAAO,YAAY,CAC3C,OAAA,EAAA,EAAA,aAAmB,EAAO,MAAM,CAChC,QAAS,EAAO,SAChB,YAAa,EAAuB,EAAO,aAAa,CACxD,KAAM,EAAO,KACb,qBAAsB,EAAO,uBAC7B,yBAA0B,EAAO,2BACjC,UAAW,IAAI,KAAK,EAAO,YAC3B,UAAW,IAAI,KAAK,EAAO,WAC9B,GAGQ,EAAkB,AAACC,IACrB,CACH,YAAA,EAAA,EAAA,aAAwB,EAAO,YAAY,CAC3C,OAAA,EAAA,EAAA,aAAmB,EAAO,MAAM,CAChC,QAAS,EAAO,SAChB,UAAW,IAAI,KAAK,EAAO,YAC3B,UAAW,IAAI,KAAK,EAAO,WAC9B,GC5MQ,EAAiB,MAC1BgC,EACA9B,IACoC,CACpC,GAAM,CAAE,KAAM,EAAa,CAAG,MAAM,EAAO,QAAQ,CAC/C,OAAQ,yBACR,QACH,EAAC,CACF,OAAO,EAAqB,EAAY,AAC3C,ECZY,EAAa,MACtB8B,GACgC,CAChC,GAAM,CAAE,KAAM,EAAS,CAAG,MAAM,EAAO,QAAQ,CAC3C,OAAQ,qBACR,OAAQ,CAAE,CACb,EAAC,CACF,OAAA,EAAA,EAAA,aAAmB,EAAe,AACrC,ECRY,EAAW,MACpBA,EACA3B,IAC8B,CAC9B,GAAM,CAAE,KAAM,EAAO,CAAG,MAAM,EAAO,QAAQ,CACzC,OAAQ,mBACR,OAAQ,CACJ,YAAa,EAAO,YACpB,aAAA,EAAA,EAAA,aAAyB,EAAO,WAAW,AAC9C,CACJ,EAAC,CACF,OAAO,EAAe,EAAM,AAC/B,ECZY,EAAW,MACpB2B,EACAzB,IAC8B,CAC9B,GAAM,CAAE,KAAM,EAAO,CAAG,MAAM,EAAO,QAAQ,CACzC,OAAQ,mBACR,OAAQ,CACJ,YAAa,EAAO,YACpB,aAAA,EAAA,EAAA,aAAyB,EAAO,WAAW,AAC9C,CACJ,EAAC,CACF,OAAO,EAAe,EAAM,AAC/B,ECVY,EAA4B,MACrCyB,EACAvB,IAC+C,CAC/C,GAAM,CAAE,KAAM,EAAY,CAAG,MAAM,EAAO,QAAQ,CAC9C,OAAQ,oCACR,QACH,EAAC,CACF,OAAA,EAAA,EAAA,aAAmB,EAAW,AACjC,ECZY,EAAiB,MAC1BuB,GACoC,CACpC,GAAM,CAAE,KAAM,EAAS,CAAG,MAAM,EAAO,QAAQ,CAC3C,OAAQ,yBACR,OAAQ,CAAE,CACb,EAAC,CACF,OAAO,CACV,ECPY,EAAY,MACrBA,EACApB,IAC+B,CAC/B,GAAM,CAAE,KAAM,EAAQ,CAAG,MAAM,EAAO,QAAQ,CAC1C,OAAQ,oBACR,OAAQ,CACJ,YAAa,EAAO,YACpB,cAAA,EAAA,EAAA,aAA0B,EAAO,YAAY,AAChD,CACJ,EAAC,CACF,OAAO,EAAgB,EAAO,AACjC,ECVY,EAAyB,MAClCoB,EACAlB,IAC4C,CAC5C,GAAM,CAAE,mBAAkB,CAAG,MAAM,EAAO,QAAQ,CAC9C,OAAQ,iCACR,QACH,EAAC,CACF,OAAA,EAAA,EAAA,aAAmB,EAAiB,AACvC,ECXY,EAAY,MACrBkB,EACAhB,IAC+B,CAC/B,GAAM,CAAE,KAAM,EAAQ,CAAG,MAAM,EAAO,QAAQ,CAC1C,OAAQ,oBACR,OAAQ,CACJ,YAAa,EAAO,YACpB,cAAA,EAAA,EAAA,aAA0B,EAAO,YAAY,AAChD,CACJ,EAAC,CACF,OAAO,EAAgB,EAAO,AACjC,ECNY,EAAmB,MAC5BgB,EACAd,IACsC,CACtC,IAAM,EAAS,MAAM,EAAO,QAAQ,CAChC,OAAQ,2BACR,OAAQ,GAAU,CAAE,CACvB,EAAC,CACF,MAAO,CACH,WAAY,EAAoB,EAAO,WAAW,CAClD,KAAM,EAAO,KAAK,IAAI,EAAqB,AAC9C,CACJ,ECfY,EAAa,MACtBc,EACAZ,IACgC,CAChC,IAAM,EAAS,MAAM,EAAO,QAAQ,CAChC,OAAQ,qBACR,QACH,EAAC,CACF,MAAO,CACH,KAAM,EAAO,KAAK,IAAI,EAAe,CACrC,WAAY,EAAoB,EAAO,WAAW,AACrD,CACJ,ECZY,EAAa,MACtBY,EACAV,IACgC,CAChC,IAAM,EAAS,MAAM,EAAO,QAAQ,CAChC,OAAQ,qBACR,OAAQ,CACJ,YAAa,EAAO,YACpB,YACI,EAAO,aAAe,IAAA,GAEhB,IAAA,IAFgB,EAAA,EAAA,aACJ,EAAO,WAAW,CAExC,OAAQ,EAAO,OACf,MAAO,EAAO,MACd,OAAQ,EAAO,MAClB,CACJ,EAAC,CACF,MAAO,CACH,KAAM,EAAO,KAAK,IAAI,EAAe,CACrC,WAAY,EAAoB,EAAO,WAAW,AACrD,CACJ,EClBK,EAAe,AAACC,GAA6C,CAC/D,OAAQ,EAAR,CACI,IAAK,SACD,OAAA,EAAA,EAAA,qBAAA,EAAA,EAAA,YACe,CACP,IAAKC,EAAAA,WACL,KAAM,QACT,EAAC,CACL,CACL,IAAK,UACD,OAAA,EAAA,EAAA,qBAAA,EAAA,EAAA,YACe,CACP,IAAKA,EAAAA,WACL,KAAM,SACT,EAAC,CACL,CACL,IAAK,sBACD,OAAA,EAAA,EAAA,qBAAA,EAAA,EAAA,YACe,CACP,IAAKA,EAAAA,WACL,KAAM,qBACT,EAAC,CACL,AACR,CAEJ,EAEY,EAAc,MACvBQ,EACAN,IACiC,CACjC,IAAM,EAAc,EAAa,EAAO,WAAW,CAC7C,EAAU,MAAM,EAAO,QAAQ,CACjC,OAAQ,sBACR,OAAQ,CACJ,YAAa,EAAO,YACpB,YACI,EAAO,aAAe,IAAA,GAEhB,IAAA,IAFgB,EAAA,EAAA,aACJ,EAAO,WAAW,CAExC,YACI,EAAO,aAAe,IAAA,GAEhB,IAAA,IAFgB,EAAA,EAAA,aACJ,EAAO,WAAW,CAExC,cACA,gBAAiB,EAAO,eACxB,MAAO,EAAO,MACd,OAAQ,EAAO,MAClB,CACJ,EAAC,CACF,MAAO,CACH,KAAM,EAAQ,KAAK,IAAI,EAAgB,CACvC,WAAY,EAAoB,EAAQ,WAAW,AACtD,CACJ,ECzDY,EAAc,MACvBM,EACAJ,IACiC,CACjC,IAAM,EAAU,MAAM,EAAO,QAAQ,CACjC,OAAQ,sBACR,OAAQ,CACJ,YAAa,EAAO,YACpB,YACI,EAAO,aAAe,IAAA,GAEhB,IAAA,IAFgB,EAAA,EAAA,aACJ,EAAO,WAAW,CAExC,YACI,EAAO,aAAe,IAAA,GAEhB,IAAA,IAFgB,EAAA,EAAA,aACJ,EAAO,WAAW,CAExC,MAAO,EAAO,MACd,OAAQ,EAAO,MAClB,CACJ,EAAC,CACF,MAAO,CACH,KAAM,EAAQ,KAAK,IAAI,EAAgB,CACvC,WAAY,EAAoB,EAAQ,WAAW,AACtD,CACJ,ECJY,EAAiB,MAK1BC,EACAC,IACoC,CACpC,GAAM,CAAE,cAAa,SAAQ,CAAG,EAC1B,EAAO,EAAM,EAAO,CAC1B,GAAI,CAQA,OAPA,MAAA,EAAA,EAAA,cAAmB,EAAQ,CACvB,GAAG,EACH,IAAKC,EAAAA,gBACL,QAAS,EACT,OACA,aAAc,gBACjB,EAAC,CACK,EACV,MAAO,CACJ,MAAO,EACV,CACJ,ECzCY,EAAe,MACxBC,EACAC,IACkC,CAClC,IAAM,EAAkB,EAAO,iBAAmB,EAAO,gBACnD,EAAa,EAAO,YAAc,GAClC,EAAU,EAAO,QAGjB,EACF,EAAO,iBAAmB,IAAA,GAAY,GAAO,EAAO,eAGlD,EACF,EAAO,eAAiB,IAAA,GAAY,GAAQ,EAAO,aAEjD,EAAQ,MAAA,EAAA,EAAA,SACV,SAAY,CACR,GAAM,CAAE,KAAMC,EAAO,CAAG,MAAM,EAAO,QAAQ,CACzC,OAAQ,mBACR,OAAQ,CACJ,YAAa,EAAO,YACpB,aAAA,EAAA,EAAA,aAAyB,EAAO,WAAW,AAC9C,CACJ,EAAC,CAEF,GAAI,GAAkBA,EAAM,SAAW,OACnC,MAAU,MAAM,yBAAA,CAGpB,GACI,IACCA,EAAM,SAAW,wBACdA,EAAM,SAAW,aACjBA,EAAM,SAAW,kBACjBA,EAAM,SAAW,iCACjBA,EAAM,SAAW,YACjBA,EAAM,SAAW,uBACjBA,EAAM,SAAW,0BAErB,MAAM,IAAIC,EAAAA,WAAW,CAAC,cAAc,EAAED,EAAM,QAAQ,EAGxD,OAAOA,CACV,EACD,CACI,QAAS,EACT,WAAY,EACZ,OAAQ,EACR,aAAc,CACjB,EACJ,CAED,OAAO,EAAe,EAAM,AAC/B"}