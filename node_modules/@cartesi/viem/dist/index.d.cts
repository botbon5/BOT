import { AddInputParameters, AddInputReturnType, Application, DataAvailability, DataAvailabilityInputBox, DataAvailabilityInputBoxAndEspresso, DelegateCallVoucher, DepositBatchERC1155TokenParameters, DepositBatchERC1155TokenReturnType, DepositERC20TokensParameters, DepositERC20TokensReturnType, DepositERC721TokenParameters, DepositERC721TokenReturnType, DepositEtherParameters, DepositEtherReturnType, DepositSingleERC1155TokenParameters, DepositSingleERC1155TokenReturnType, Epoch, EpochStatus, EstimateAddInputGasParameters, EstimateAddInputGasReturnType, EstimateDepositBatchERC1155TokenGasParameters, EstimateDepositBatchERC1155TokenGasReturnType, EstimateDepositERC20TokensGasParameters, EstimateDepositERC20TokensGasReturnType, EstimateDepositERC721TokenGasParameters, EstimateDepositERC721TokenGasReturnType, EstimateDepositEtherGasParameters, EstimateDepositEtherGasReturnType, EstimateDepositSingleERC1155TokenGasParameters, EstimateDepositSingleERC1155TokenGasReturnType, EstimateExecuteOutputGasParameters, EstimateExecuteOutputGasReturnType, ExecuteOutputParameters, ExecuteOutputReturnType, GetApplicationParams, GetApplicationReturnType, GetChainIdReturnType, GetEpochParams, GetEpochReturnType, GetInputParams, GetInputReturnType, GetLastAcceptedEpochIndexParams, GetLastAcceptedEpochIndexReturnType, GetNodeVersionReturnType, GetOutputParams, GetOutputReturnType, GetProcessedInputCountParams, GetProcessedInputCountReturnType, GetReportParams, GetReportReturnType, Input, InputStatus, ListApplicationsParams, ListApplicationsReturnType, ListEpochsParams, ListEpochsReturnType, ListInputsParams, ListInputsReturnType, ListOutputsParams, ListOutputsReturnType, ListReportsParams, ListReportsReturnType, Notice, Output, OutputType, Pagination, PaginationParams, PublicCartesiRpcSchema, Report, ValidateOutputParameters, ValidateOutputReturnType, Voucher, WaitForInputParams, WaitForInputReturnType, addInput, depositBatchERC1155Token, depositERC20Tokens, depositERC721Token, depositEther, depositSingleERC1155Token, estimateAddInputGas, estimateDepositBatchERC1155TokenGas, estimateDepositERC20TokensGas, estimateDepositERC721TokenGas, estimateDepositEtherGas, estimateDepositSingleERC1155TokenGas, estimateExecuteOutputGas, executeOutput, getApplication, getChainId, getEpoch, getInput, getLastAcceptedEpochIndex, getNodeVersion, getOutput, getProcessedInputCount, getReport, listApplications, listEpochs, listInputs, listOutputs, listReports, publicActionsL2, validateOutput, waitForInput } from "./index-Na7tILI4.cjs";
import { iApplicationAbi, inputBoxAbi } from "./rollups-j2l7rlPC.cjs";
import * as viem2 from "viem";
import { Account, Chain, Client, ClientConfig, ContractEventArgsFromTopics, Prettify, TransactionReceipt, Transport } from "viem";

//#region src/clients/createCartesiPublicClient.d.ts
type CartesiPublicClientConfig<transport extends Transport = Transport> = Prettify<ClientConfig<transport, undefined, undefined, PublicCartesiRpcSchema>>;
declare const createCartesiPublicClient: <transport extends Transport = Transport>(parameters: CartesiPublicClientConfig<transport>) => viem2.Client<transport, undefined, undefined, PublicCartesiRpcSchema, {
  listApplications: (params?: ListApplicationsParams) => Promise<ListApplicationsReturnType>;
  listEpochs: (params: ListEpochsParams) => Promise<ListEpochsReturnType>;
  listInputs: (params: ListInputsParams) => Promise<ListInputsReturnType>;
  listOutputs: (params: ListOutputsParams) => Promise<ListOutputsReturnType>;
  listReports: (params: ListReportsParams) => Promise<ListReportsReturnType>;
  getApplication: (params: GetApplicationParams) => Promise<GetApplicationReturnType>;
  getChainId: () => Promise<GetChainIdReturnType>;
  getEpoch: (params: GetEpochParams) => Promise<GetEpochReturnType>;
  getNodeVersion: () => Promise<GetNodeVersionReturnType>;
  getInput: (params: GetInputParams) => Promise<GetInputReturnType>;
  getOutput: (params: GetOutputParams) => Promise<GetOutputReturnType>;
  getReport: (params: GetReportParams) => Promise<GetReportReturnType>;
  getProcessedInputCount: (params: GetProcessedInputCountParams) => Promise<GetProcessedInputCountReturnType>;
  getLastAcceptedEpochIndex: (params: GetLastAcceptedEpochIndexParams) => Promise<GetLastAcceptedEpochIndexReturnType>;
  waitForInput: (params: WaitForInputParams) => Promise<WaitForInputReturnType>;
}>;
type CartesiPublicClient = ReturnType<typeof createCartesiPublicClient>;
//# sourceMappingURL=createCartesiPublicClient.d.ts.map
//#endregion
//#region src/decorators/publicL1.d.ts
type PublicActionsL1<TChain extends Chain | undefined = Chain | undefined, TAccount extends Account | undefined = Account | undefined> = {
  estimateAddInputGas: <chainOverride extends Chain | undefined = undefined>(parameters: EstimateAddInputGasParameters<TChain, TAccount, chainOverride>) => Promise<EstimateAddInputGasReturnType>;
  estimateDepositEtherGas: <chainOverride extends Chain | undefined = undefined>(parameters: EstimateDepositEtherGasParameters<TChain, TAccount, chainOverride>) => Promise<EstimateDepositEtherGasReturnType>;
  estimateDepositERC20TokensGas: <chainOverride extends Chain | undefined = undefined>(parameters: EstimateDepositERC20TokensGasParameters<TChain, TAccount, chainOverride>) => Promise<EstimateDepositERC20TokensGasReturnType>;
  estimateDepositERC721TokenGas: <chainOverride extends Chain | undefined = undefined>(parameters: EstimateDepositERC721TokenGasParameters<TChain, TAccount, chainOverride>) => Promise<EstimateDepositERC721TokenGasReturnType>;
  estimateDepositSingleERC1155TokenGas: <chainOverride extends Chain | undefined = undefined>(parameters: EstimateDepositSingleERC1155TokenGasParameters<TChain, TAccount, chainOverride>) => Promise<EstimateDepositSingleERC1155TokenGasReturnType>;
  estimateDepositBatchERC1155TokenGas: <chainOverride extends Chain | undefined = undefined>(parameters: EstimateDepositBatchERC1155TokenGasParameters<TChain, TAccount, chainOverride>) => Promise<EstimateDepositBatchERC1155TokenGasReturnType>;
  estimateExecuteOutputGas: <chainOverride extends Chain | undefined = undefined>(parameters: EstimateExecuteOutputGasParameters<TChain, TAccount, chainOverride>) => Promise<EstimateExecuteOutputGasReturnType>;
  validateOutput: <chainOverride extends Chain | undefined = undefined>(parameters: ValidateOutputParameters<TChain, chainOverride>) => Promise<ValidateOutputReturnType>;
};
declare const publicActionsL1: () => <TTransport extends Transport = Transport, TChain extends Chain | undefined = Chain | undefined, TAccount extends Account | undefined = Account | undefined>(client: Client<TTransport, TChain, TAccount>) => PublicActionsL1;
//# sourceMappingURL=publicL1.d.ts.map
//#endregion
//#region src/decorators/walletL1.d.ts
type WalletActionsL1<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined> = {
  addInput: <chainOverride extends Chain | undefined = undefined>(parameters: AddInputParameters<chain, account, chainOverride>) => Promise<AddInputReturnType>;
  depositEther: <chainOverride extends Chain | undefined = undefined>(parameters: DepositEtherParameters<chain, account, chainOverride>) => Promise<DepositEtherReturnType>;
  depositERC20Tokens: <chainOverride extends Chain | undefined = undefined>(parameters: DepositERC20TokensParameters<chain, account, chainOverride>) => Promise<DepositERC20TokensReturnType>;
  depositERC721Token: <chainOverride extends Chain | undefined = undefined>(parameters: DepositERC721TokenParameters<chain, account, chainOverride>) => Promise<DepositERC721TokenReturnType>;
  depositSingleERC1155Token: <chainOverride extends Chain | undefined = undefined>(parameters: DepositSingleERC1155TokenParameters<chain, account, chainOverride>) => Promise<DepositSingleERC1155TokenReturnType>;
  depositBatchERC1155Token: <chainOverride extends Chain | undefined = undefined>(parameters: DepositBatchERC1155TokenParameters<chain, account, chainOverride>) => Promise<DepositBatchERC1155TokenReturnType>;
  executeOutput: <chainOverride extends Chain | undefined = undefined>(parameters: ExecuteOutputParameters<chain, account, chainOverride>) => Promise<ExecuteOutputReturnType>;
};
declare const walletActionsL1: () => (client: Client) => WalletActionsL1;
//# sourceMappingURL=walletL1.d.ts.map
//#endregion
//#region src/utils/getInputsAdded.d.ts
type InputAdded = ContractEventArgsFromTopics<typeof inputBoxAbi, "InputAdded", true>;
declare const getInputsAdded: (receipt: TransactionReceipt) => InputAdded[];
//# sourceMappingURL=getInputsAdded.d.ts.map
//#endregion
//#region src/utils/getOutputsExecuted.d.ts
type OutputExecuted = ContractEventArgsFromTopics<typeof iApplicationAbi, "OutputExecuted", true>;
declare const getOutputsExecuted: (receipt: TransactionReceipt) => OutputExecuted[];
//# sourceMappingURL=getOutputsExecuted.d.ts.map

//#endregion
export { AddInputParameters, AddInputReturnType, Application, type CartesiPublicClient, DataAvailability, DataAvailabilityInputBox, DataAvailabilityInputBoxAndEspresso, DelegateCallVoucher, DepositBatchERC1155TokenParameters, DepositBatchERC1155TokenReturnType, DepositERC20TokensParameters, DepositERC20TokensReturnType, DepositERC721TokenParameters, DepositERC721TokenReturnType, DepositEtherParameters, DepositEtherReturnType, DepositSingleERC1155TokenParameters, DepositSingleERC1155TokenReturnType, Epoch, EpochStatus, EstimateAddInputGasParameters, EstimateAddInputGasReturnType, EstimateDepositBatchERC1155TokenGasParameters, EstimateDepositBatchERC1155TokenGasReturnType, EstimateDepositERC20TokensGasParameters, EstimateDepositERC20TokensGasReturnType, EstimateDepositERC721TokenGasParameters, EstimateDepositERC721TokenGasReturnType, EstimateDepositEtherGasParameters, EstimateDepositEtherGasReturnType, EstimateDepositSingleERC1155TokenGasParameters, EstimateDepositSingleERC1155TokenGasReturnType, EstimateExecuteOutputGasParameters, EstimateExecuteOutputGasReturnType, ExecuteOutputParameters, ExecuteOutputReturnType, GetApplicationParams, GetApplicationReturnType, GetChainIdReturnType, GetEpochParams, GetEpochReturnType, GetInputParams, GetInputReturnType, GetLastAcceptedEpochIndexParams, GetLastAcceptedEpochIndexReturnType, GetNodeVersionReturnType, GetOutputParams, GetOutputReturnType, GetProcessedInputCountParams, GetProcessedInputCountReturnType, GetReportParams, GetReportReturnType, Input, InputAdded, InputStatus, ListApplicationsParams, ListApplicationsReturnType, ListEpochsParams, ListEpochsReturnType, ListInputsParams, ListInputsReturnType, ListOutputsParams, ListOutputsReturnType, ListReportsParams, ListReportsReturnType, Notice, Output, OutputExecuted, OutputType, Pagination, PaginationParams, Report, ValidateOutputParameters, ValidateOutputReturnType, Voucher, WaitForInputParams, WaitForInputReturnType, addInput, createCartesiPublicClient, depositBatchERC1155Token, depositERC20Tokens, depositERC721Token, depositEther, depositSingleERC1155Token, estimateAddInputGas, estimateDepositBatchERC1155TokenGas, estimateDepositERC20TokensGas, estimateDepositERC721TokenGas, estimateDepositEtherGas, estimateDepositSingleERC1155TokenGas, estimateExecuteOutputGas, executeOutput, getApplication, getChainId, getEpoch, getInput, getInputsAdded, getLastAcceptedEpochIndex, getNodeVersion, getOutput, getOutputsExecuted, getProcessedInputCount, getReport, listApplications, listEpochs, listInputs, listOutputs, listReports, publicActionsL1, publicActionsL2, validateOutput, waitForInput, walletActionsL1 };
//# sourceMappingURL=index.d.cts.map