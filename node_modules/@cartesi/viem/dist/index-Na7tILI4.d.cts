import { iApplicationAbi, outputsAbi } from "./rollups-j2l7rlPC.cjs";
import { Account, Address, Chain, Client, DeriveChain, FormattedTransactionRequest, GetChainParameter, Hash, Hex, ReadContractParameters, Transport, UnionOmit, WriteContractReturnType } from "viem";
import { Prettify as Prettify$1 } from "viem/chains";
import { ExtractAbiFunctionNames } from "abitype";
import { GetApplicationParams, GetApplicationReturnType, GetChainIdReturnType, GetEpochParams, GetEpochReturnType, GetInputParams, GetInputReturnType, GetLastAcceptedEpochIndexParams, GetLastAcceptedEpochIndexReturnType, GetNodeVersionReturnType, GetOutputParams, GetOutputReturnType, GetProcessedInputCountParams, GetProcessedInputCountReturnType, GetReportParams, GetReportReturnType, ListApplicationsParams, ListApplicationsReturnType, ListEpochsParams, ListEpochsReturnType, ListInputsParams, ListInputsReturnType, ListOutputsParams, ListOutputsReturnType, ListReportsParams, ListReportsReturnType } from "@cartesi/rpc";

//#region src/types/utils.d.ts
type GetAccountParameter<account extends Account | undefined = Account | undefined, accountOverride extends Account | Address | undefined = Account | Address, required extends boolean = true> = IsUndefined<account> extends true ? required extends true ? {
  account: accountOverride | Account | Address;
} : {
  account?: accountOverride | Account | Address | undefined;
} : {
  account?: accountOverride | Account | Address | undefined;
};
type IsUndefined<T> = [undefined] extends [T] ? true : false;
type UnionEvaluate<type> = type extends object ? Prettify$1<type> : type;
//# sourceMappingURL=utils.d.ts.map
//#endregion
//#region src/actions/estimateAddInputGas.d.ts
type EstimateAddInputGasParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionEvaluate<UnionOmit<FormattedTransactionRequest<_derivedChain>, "accessList" | "data" | "from" | "gas" | "gasPrice" | "to" | "type" | "value">> & GetAccountParameter<account, Account | Address> & GetChainParameter<chain, chainOverride> & {
  /** Gas limit for transaction execution */
  gas?: bigint | undefined;
  application: Address;
  payload: Hex;
};
type EstimateAddInputGasReturnType = bigint;
declare const estimateAddInputGas: <transport extends Transport, chain extends Chain | undefined, account extends Account | undefined, chainOverride extends Chain | undefined = undefined>(client: Client<transport, chain, account>, parameters: EstimateAddInputGasParameters<chain, account, chainOverride>) => Promise<bigint>;
//# sourceMappingURL=estimateAddInputGas.d.ts.map
//#endregion
//#region src/actions/addInput.d.ts
type AddInputParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionEvaluate<UnionOmit<FormattedTransactionRequest<_derivedChain>, "accessList" | "data" | "from" | "gas" | "gasPrice" | "to" | "type" | "value">> & GetAccountParameter<account, Account | Address> & GetChainParameter<chain, chainOverride> & {
  /**
   * Gas limit for transaction execution on the L1.
   * `null` to skip gas estimation & defer calculation to signer.
   */
  gas?: bigint | null | undefined;
  application: Address;
  payload: Hex;
};
type AddInputReturnType = Hash;
declare const addInput: <TChain extends Chain | undefined, TAccount extends Account | undefined, TChainOverride extends Chain | undefined = undefined>(client: Client<Transport, TChain, TAccount>, params: AddInputParameters<TChain, TAccount, TChainOverride>) => Promise<WriteContractReturnType>;
//# sourceMappingURL=addInput.d.ts.map
//#endregion
//#region src/actions/estimateDepositBatchERC1155TokenGas.d.ts
type EstimateDepositBatchERC1155TokenGasParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionEvaluate<UnionOmit<FormattedTransactionRequest<_derivedChain>, "accessList" | "data" | "from" | "gas" | "gasPrice" | "to" | "type" | "value">> & GetAccountParameter<account, Account | Address> & GetChainParameter<chain, chainOverride> & {
  /** Gas limit for transaction execution */
  gas?: bigint | undefined;
  application: Address;
  baseLayerData: Hex;
  execLayerData: Hex;
  token: Address;
  tokenIds: bigint[];
  values: bigint[];
};
type EstimateDepositBatchERC1155TokenGasReturnType = bigint;
declare const estimateDepositBatchERC1155TokenGas: <transport extends Transport, chain extends Chain | undefined, account extends Account | undefined, chainOverride extends Chain | undefined = undefined>(client: Client<transport, chain, account>, parameters: EstimateDepositBatchERC1155TokenGasParameters<chain, account, chainOverride>) => Promise<bigint>;
//# sourceMappingURL=estimateDepositBatchERC1155TokenGas.d.ts.map
//#endregion
//#region src/actions/depositBatchERC1155Token.d.ts
type DepositBatchERC1155TokenParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionEvaluate<UnionOmit<FormattedTransactionRequest<_derivedChain>, "accessList" | "data" | "from" | "gas" | "gasPrice" | "to" | "type" | "value">> & GetAccountParameter<account, Account | Address> & GetChainParameter<chain, chainOverride> & {
  /**
   * Gas limit for transaction execution on the L1.
   * `null` to skip gas estimation & defer calculation to signer.
   */
  gas?: bigint | null | undefined;
  application: Address;
  baseLayerData: Hex;
  execLayerData: Hex;
  token: Address;
  tokenIds: bigint[];
  values: bigint[];
};
type DepositBatchERC1155TokenReturnType = Hash;
declare const depositBatchERC1155Token: <TChain extends Chain | undefined, TAccount extends Account | undefined, TChainOverride extends Chain | undefined = undefined>(client: Client<Transport, TChain, TAccount>, params: DepositBatchERC1155TokenParameters<TChain, TAccount, TChainOverride>) => Promise<WriteContractReturnType>;
//# sourceMappingURL=depositBatchERC1155Token.d.ts.map
//#endregion
//#region src/actions/estimateDepositERC20TokensGas.d.ts
type EstimateDepositERC20TokensGasParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionEvaluate<UnionOmit<FormattedTransactionRequest<_derivedChain>, "accessList" | "data" | "from" | "gas" | "gasPrice" | "to" | "type" | "value">> & GetAccountParameter<account, Account | Address> & GetChainParameter<chain, chainOverride> & {
  /** Gas limit for transaction execution */
  gas?: bigint | undefined;
  amount: bigint;
  application: Address;
  execLayerData: Hex;
  token: Address;
};
type EstimateDepositERC20TokensGasReturnType = bigint;
declare const estimateDepositERC20TokensGas: <transport extends Transport, chain extends Chain | undefined, account extends Account | undefined, chainOverride extends Chain | undefined = undefined>(client: Client<transport, chain, account>, parameters: EstimateDepositERC20TokensGasParameters<chain, account, chainOverride>) => Promise<bigint>;
//# sourceMappingURL=estimateDepositERC20TokensGas.d.ts.map
//#endregion
//#region src/actions/depositERC20Tokens.d.ts
type DepositERC20TokensParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionEvaluate<UnionOmit<FormattedTransactionRequest<_derivedChain>, "accessList" | "data" | "from" | "gas" | "gasPrice" | "to" | "type" | "value">> & GetAccountParameter<account, Account | Address> & GetChainParameter<chain, chainOverride> & {
  /**
   * Gas limit for transaction execution on the L1.
   * `null` to skip gas estimation & defer calculation to signer.
   */
  gas?: bigint | null | undefined;
  amount: bigint;
  application: Address;
  execLayerData: Hex;
  token: Address;
};
type DepositERC20TokensReturnType = Hash;
declare const depositERC20Tokens: <TChain extends Chain | undefined, TAccount extends Account | undefined, TChainOverride extends Chain | undefined = undefined>(client: Client<Transport, TChain, TAccount>, params: DepositERC20TokensParameters<TChain, TAccount, TChainOverride>) => Promise<WriteContractReturnType>;
//# sourceMappingURL=depositERC20Tokens.d.ts.map
//#endregion
//#region src/actions/estimateDepositERC721TokenGas.d.ts
type EstimateDepositERC721TokenGasParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionEvaluate<UnionOmit<FormattedTransactionRequest<_derivedChain>, "accessList" | "data" | "from" | "gas" | "gasPrice" | "to" | "type" | "value">> & GetAccountParameter<account, Account | Address> & GetChainParameter<chain, chainOverride> & {
  /** Gas limit for transaction execution */
  gas?: bigint | undefined;
  application: Address;
  baseLayerData: Hex;
  execLayerData: Hex;
  token: Address;
  tokenId: bigint;
};
type EstimateDepositERC721TokenGasReturnType = bigint;
declare const estimateDepositERC721TokenGas: <transport extends Transport, chain extends Chain | undefined, account extends Account | undefined, chainOverride extends Chain | undefined = undefined>(client: Client<transport, chain, account>, parameters: EstimateDepositERC721TokenGasParameters<chain, account, chainOverride>) => Promise<bigint>;
//# sourceMappingURL=estimateDepositERC721TokenGas.d.ts.map
//#endregion
//#region src/actions/depositERC721Token.d.ts
type DepositERC721TokenParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionEvaluate<UnionOmit<FormattedTransactionRequest<_derivedChain>, "accessList" | "data" | "from" | "gas" | "gasPrice" | "to" | "type" | "value">> & GetAccountParameter<account, Account | Address> & GetChainParameter<chain, chainOverride> & {
  /**
   * Gas limit for transaction execution on the L1.
   * `null` to skip gas estimation & defer calculation to signer.
   */
  gas?: bigint | null | undefined;
  application: Address;
  baseLayerData: Hex;
  execLayerData: Hex;
  token: Address;
  tokenId: bigint;
};
type DepositERC721TokenReturnType = Hash;
declare const depositERC721Token: <TChain extends Chain | undefined, TAccount extends Account | undefined, TChainOverride extends Chain | undefined = undefined>(client: Client<Transport, TChain, TAccount>, params: DepositERC721TokenParameters<TChain, TAccount, TChainOverride>) => Promise<WriteContractReturnType>;
//# sourceMappingURL=depositERC721Token.d.ts.map
//#endregion
//#region src/actions/estimateDepositEtherGas.d.ts
type EstimateDepositEtherGasParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionEvaluate<UnionOmit<FormattedTransactionRequest<_derivedChain>, "accessList" | "data" | "from" | "gas" | "gasPrice" | "to" | "type">> & GetAccountParameter<account, Account | Address> & GetChainParameter<chain, chainOverride> & {
  /** Gas limit for transaction execution */
  gas?: bigint | undefined;
  application: Address;
  execLayerData: Hex;
};
type EstimateDepositEtherGasReturnType = bigint;
declare const estimateDepositEtherGas: <transport extends Transport, chain extends Chain | undefined, account extends Account | undefined, chainOverride extends Chain | undefined = undefined>(client: Client<transport, chain, account>, parameters: EstimateDepositEtherGasParameters<chain, account, chainOverride>) => Promise<bigint>;
//# sourceMappingURL=estimateDepositEtherGas.d.ts.map
//#endregion
//#region src/actions/depositEther.d.ts
type DepositEtherParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionEvaluate<UnionOmit<FormattedTransactionRequest<_derivedChain>, "accessList" | "data" | "from" | "gas" | "gasPrice" | "to" | "type" | "value">> & GetAccountParameter<account, Account | Address> & GetChainParameter<chain, chainOverride> & {
  /**
   * Gas limit for transaction execution on the L1.
   * `null` to skip gas estimation & defer calculation to signer.
   */
  gas?: bigint | null | undefined;
  application: Address;
  execLayerData: Hex;
  value: bigint;
};
type DepositEtherReturnType = Hash;
declare const depositEther: <TChain extends Chain | undefined, TAccount extends Account | undefined, TChainOverride extends Chain | undefined = undefined>(client: Client<Transport, TChain, TAccount>, params: DepositEtherParameters<TChain, TAccount, TChainOverride>) => Promise<WriteContractReturnType>;
//# sourceMappingURL=depositEther.d.ts.map
//#endregion
//#region src/actions/estimateDepositSingleERC1155TokenGas.d.ts
type EstimateDepositSingleERC1155TokenGasParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionEvaluate<UnionOmit<FormattedTransactionRequest<_derivedChain>, "accessList" | "data" | "from" | "gas" | "gasPrice" | "to" | "type" | "value">> & GetAccountParameter<account, Account | Address> & GetChainParameter<chain, chainOverride> & {
  /** Gas limit for transaction execution */
  gas?: bigint | undefined;
  application: Address;
  baseLayerData: Hex;
  execLayerData: Hex;
  token: Address;
  tokenId: bigint;
  value: bigint;
};
type EstimateDepositSingleERC1155TokenGasReturnType = bigint;
declare const estimateDepositSingleERC1155TokenGas: <transport extends Transport, chain extends Chain | undefined, account extends Account | undefined, chainOverride extends Chain | undefined = undefined>(client: Client<transport, chain, account>, parameters: EstimateDepositSingleERC1155TokenGasParameters<chain, account, chainOverride>) => Promise<bigint>;
//# sourceMappingURL=estimateDepositSingleERC1155TokenGas.d.ts.map
//#endregion
//#region src/actions/depositSingleERC1155Token.d.ts
type DepositSingleERC1155TokenParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionEvaluate<UnionOmit<FormattedTransactionRequest<_derivedChain>, "accessList" | "data" | "from" | "gas" | "gasPrice" | "to" | "type" | "value">> & GetAccountParameter<account, Account | Address> & GetChainParameter<chain, chainOverride> & {
  /**
   * Gas limit for transaction execution on the L1.
   * `null` to skip gas estimation & defer calculation to signer.
   */
  gas?: bigint | null | undefined;
  application: Address;
  baseLayerData: Hex;
  execLayerData: Hex;
  token: Address;
  tokenId: bigint;
  value: bigint;
};
type DepositSingleERC1155TokenReturnType = Hash;
declare const depositSingleERC1155Token: <TChain extends Chain | undefined, TAccount extends Account | undefined, TChainOverride extends Chain | undefined = undefined>(client: Client<Transport, TChain, TAccount>, params: DepositSingleERC1155TokenParameters<TChain, TAccount, TChainOverride>) => Promise<WriteContractReturnType>;
//# sourceMappingURL=depositSingleERC1155Token.d.ts.map
//#endregion
//#region src/types/actions.d.ts
type PaginationParams = {
  limit?: number;
  offset?: number;
  descending?: boolean;
};
type Pagination = {
  totalCount: number;
  limit: number;
  offset: number;
};
type EpochStatus = "OPEN" | "CLOSED" | "INPUTS_PROCESSED" | "CLAIM_COMPUTED" | "CLAIM_SUBMITTED" | "CLAIM_ACCEPTED" | "CLAIM_REJECTED";
type InputStatus = "NONE" | "ACCEPTED" | "REJECTED" | "EXCEPTION" | "MACHINE_HALTED" | "OUTPUTS_LIMIT_EXCEEDED" | "CYCLE_LIMIT_EXCEEDED" | "TIME_LIMIT_EXCEEDED" | "PAYLOAD_LENGTH_LIMIT_EXCEEDED";
type DataAvailabilityInputBox = {
  type: "InputBox";
  inputBoxAddress: Address;
};
type DataAvailabilityInputBoxAndEspresso = {
  type: "InputBoxAndEspresso";
  inputBoxAddress: Address;
  fromBlock: bigint;
  namespaceId: number;
};
type DataAvailability = DataAvailabilityInputBox | DataAvailabilityInputBoxAndEspresso;
type GetApplicationParams$1 = {
  application: Address | string;
};
type Application = {
  name: string;
  applicationAddress: Address;
  consensusAddress: Address;
  inputBoxAddress: Address;
  templateHash: Hash;
  epochLength: bigint;
  dataAvailability: DataAvailability;
  state: string;
  reason?: string | null;
  inputBoxBlock: bigint;
  lastInputCheckBlock: bigint;
  lastOutputCheckBlock: bigint;
  processedInputs: bigint;
  createdAt: Date;
  updatedAt: Date;
  executionParameters: {
    snapshotPolicy: "NONE" | "EACH_INPUT" | "EACH_EPOCH";
    advanceIncCycles: bigint;
    advanceMaxCycles: bigint;
    inspectIncCycles: bigint;
    inspectMaxCycles: bigint;
    advanceIncDeadline: bigint;
    advanceMaxDeadline: bigint;
    inspectIncDeadline: bigint;
    inspectMaxDeadline: bigint;
    loadDeadline: bigint;
    storeDeadline: bigint;
    fastDeadline: bigint;
    maxConcurrentInspects: number;
    createdAt: Date;
    updatedAt: Date;
  };
};
type GetApplicationReturnType$1 = Application;
type GetChainIdReturnType$1 = number;
type GetNodeVersionReturnType$1 = string;
type GetEpochParams$1 = {
  application: Address | string;
  epochIndex: bigint;
};
type Epoch = {
  index: bigint;
  firstBlock: bigint;
  lastBlock: bigint;
  claimHash: Hash;
  claimTransactionHash: Hash;
  status: EpochStatus;
  virtualIndex: bigint;
  createdAt: Date;
  updatedAt: Date;
};
type GetEpochReturnType$1 = Epoch;
type GetInputParams$1 = {
  application: Address | string;
  inputIndex: bigint;
};
type Input = {
  epochIndex: bigint;
  index: bigint;
  blockNumber: bigint;
  rawData: Hex;
  decodedData: {
    chainId: bigint;
    applicationContract: Address;
    sender: Address;
    blockNumber: bigint;
    blockTimestamp: bigint;
    prevRandao: bigint;
    index: bigint;
    payload: Hex;
  };
  status: InputStatus;
  machineHash: Hash;
  outputsHash: Hash;
  transactionReference: Hash;
  createdAt: Date;
  updatedAt: Date;
};
type GetInputReturnType$1 = Input;
type GetLastAcceptedEpochIndexParams$1 = {
  application: Address | string;
};
type GetLastAcceptedEpochIndexReturnType$1 = bigint;
type GetOutputParams$1 = {
  application: Address | string;
  outputIndex: bigint;
};
type Notice = {
  type: "Notice";
  payload: Hex;
};
type Voucher = {
  type: "Voucher";
  destination: Address;
  value: bigint;
  payload: Hex;
};
type DelegateCallVoucher = {
  type: "DelegateCallVoucher";
  destination: Address;
  payload: Hex;
};
type Output = {
  epochIndex: bigint;
  inputIndex: bigint;
  index: bigint;
  rawData: Hex;
  decodedData: Notice | Voucher | DelegateCallVoucher;
  hash: Hash;
  outputHashesSiblings: Hash[] | null;
  executionTransactionHash: Hash | null;
  createdAt: Date;
  updatedAt: Date;
};
type GetOutputReturnType$1 = Output;
type GetProcessedInputCountParams$1 = {
  application: Address | string;
};
type GetProcessedInputCountReturnType$1 = bigint;
type GetReportParams$1 = {
  application: Address | string;
  reportIndex: bigint;
};
type Report = {
  inputIndex: bigint;
  index: bigint;
  rawData: Hex;
  createdAt: Date;
  updatedAt: Date;
};
type GetReportReturnType$1 = Report;
type ListApplicationsParams$1 = PaginationParams;
type ListApplicationsReturnType$1 = {
  data: Application[];
  pagination: Pagination;
};
type ListEpochsParams$1 = PaginationParams & {
  application: Address | string;
  status?: EpochStatus;
};
type ListEpochsReturnType$1 = {
  data: Epoch[];
  pagination: Pagination;
};
type ListInputsParams$1 = PaginationParams & {
  application: Address | string;
  epochIndex?: bigint;
  sender?: Address;
};
type ListInputsReturnType$1 = {
  data: Input[];
  pagination: Pagination;
};
type OutputType = ExtractAbiFunctionNames<typeof outputsAbi>;
type ListOutputsParams$1 = PaginationParams & {
  application: Address | string;
  epochIndex?: bigint;
  inputIndex?: bigint;
  outputType?: OutputType;
  voucherAddress?: Address;
};
type ListOutputsReturnType$1 = {
  data: Output[];
  pagination: Pagination;
};
type ListReportsParams$1 = PaginationParams & {
  application: Address | string;
  epochIndex?: bigint;
  inputIndex?: bigint;
};
type ListReportsReturnType$1 = {
  data: Report[];
  pagination: Pagination;
};
type WaitForInputParams = GetInputParams$1 & {
  waitProcessing?: boolean;
  rejectErrors?: boolean;
  pollingInterval?: number;
  retryCount?: number;
  timeout?: number;
};
type WaitForInputReturnType = Input;
//# sourceMappingURL=actions.d.ts.map
//#endregion
//#region src/actions/estimateExecuteOutputGas.d.ts
type EstimateExecuteOutputGasParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionEvaluate<UnionOmit<FormattedTransactionRequest<_derivedChain>, "accessList" | "data" | "from" | "gas" | "gasPrice" | "to" | "type" | "value">> & GetAccountParameter<account, Account | Address> & GetChainParameter<chain, chainOverride> & {
  /** Gas limit for transaction execution */
  gas?: bigint | undefined;
  application: Address;
  output: GetOutputReturnType$1;
};
type EstimateExecuteOutputGasReturnType = bigint;
declare const estimateExecuteOutputGas: <transport extends Transport, chain extends Chain | undefined, account extends Account | undefined, chainOverride extends Chain | undefined = undefined>(client: Client<transport, chain, account>, parameters: EstimateExecuteOutputGasParameters<chain, account, chainOverride>) => Promise<bigint>;
//# sourceMappingURL=estimateExecuteOutputGas.d.ts.map
//#endregion
//#region src/actions/executeOutput.d.ts
type ExecuteOutputParameters<chain extends Chain | undefined = Chain | undefined, account extends Account | undefined = Account | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = UnionEvaluate<UnionOmit<FormattedTransactionRequest<_derivedChain>, "accessList" | "data" | "from" | "gas" | "gasPrice" | "to" | "type" | "value">> & GetAccountParameter<account, Account | Address> & GetChainParameter<chain, chainOverride> & {
  /**
   * Gas limit for transaction execution on the L1.
   * `null` to skip gas estimation & defer calculation to signer.
   */
  gas?: bigint | null | undefined;
  application: Address;
  output: GetOutputReturnType$1;
};
type ExecuteOutputReturnType = Hash;
declare const executeOutput: <TChain extends Chain | undefined, TAccount extends Account | undefined, TChainOverride extends Chain | undefined = undefined>(client: Client<Transport, TChain, TAccount>, params: ExecuteOutputParameters<TChain, TAccount, TChainOverride>) => Promise<WriteContractReturnType>;
//# sourceMappingURL=executeOutput.d.ts.map
//#endregion
//#region src/decorators/publicL2.d.ts
type PublicCartesiRpcSchema = [{
  Method: "cartesi_listApplications";
  Parameters: ListApplicationsParams;
  ReturnType: ListApplicationsReturnType;
}, {
  Method: "cartesi_getApplication";
  Parameters: GetApplicationParams;
  ReturnType: GetApplicationReturnType;
}, {
  Method: "cartesi_listEpochs";
  Parameters: ListEpochsParams;
  ReturnType: ListEpochsReturnType;
}, {
  Method: "cartesi_getEpoch";
  Parameters: GetEpochParams;
  ReturnType: GetEpochReturnType;
}, {
  Method: "cartesi_getLastAcceptedEpochIndex";
  Parameters: GetLastAcceptedEpochIndexParams;
  ReturnType: GetLastAcceptedEpochIndexReturnType;
}, {
  Method: "cartesi_listInputs";
  Parameters: ListInputsParams;
  ReturnType: ListInputsReturnType;
}, {
  Method: "cartesi_getInput";
  Parameters: GetInputParams;
  ReturnType: GetInputReturnType;
}, {
  Method: "cartesi_getProcessedInputCount";
  Parameters: GetProcessedInputCountParams;
  ReturnType: GetProcessedInputCountReturnType;
}, {
  Method: "cartesi_listOutputs";
  Parameters: ListOutputsParams;
  ReturnType: ListOutputsReturnType;
}, {
  Method: "cartesi_getOutput";
  Parameters: GetOutputParams;
  ReturnType: GetOutputReturnType;
}, {
  Method: "cartesi_listReports";
  Parameters: ListReportsParams;
  ReturnType: ListReportsReturnType;
}, {
  Method: "cartesi_getReport";
  Parameters: GetReportParams;
  ReturnType: GetReportReturnType;
}, {
  Method: "cartesi_getChainId";
  ReturnType: GetChainIdReturnType;
}, {
  Method: "cartesi_getNodeVersion";
  ReturnType: GetNodeVersionReturnType;
}];
type PublicActionsL2 = {
  listApplications: (params?: ListApplicationsParams$1) => Promise<ListApplicationsReturnType$1>;
  listEpochs: (params: ListEpochsParams$1) => Promise<ListEpochsReturnType$1>;
  listInputs: (params: ListInputsParams$1) => Promise<ListInputsReturnType$1>;
  listOutputs: (params: ListOutputsParams$1) => Promise<ListOutputsReturnType$1>;
  listReports: (params: ListReportsParams$1) => Promise<ListReportsReturnType$1>;
  getApplication: (params: GetApplicationParams$1) => Promise<GetApplicationReturnType$1>;
  getChainId: () => Promise<GetChainIdReturnType$1>;
  getEpoch: (params: GetEpochParams$1) => Promise<GetEpochReturnType$1>;
  getNodeVersion: () => Promise<GetNodeVersionReturnType$1>;
  getInput: (params: GetInputParams$1) => Promise<GetInputReturnType$1>;
  getOutput: (params: GetOutputParams$1) => Promise<GetOutputReturnType$1>;
  getReport: (params: GetReportParams$1) => Promise<GetReportReturnType$1>;
  getProcessedInputCount: (params: GetProcessedInputCountParams$1) => Promise<GetProcessedInputCountReturnType$1>;
  getLastAcceptedEpochIndex: (params: GetLastAcceptedEpochIndexParams$1) => Promise<GetLastAcceptedEpochIndexReturnType$1>;
  waitForInput: (params: WaitForInputParams) => Promise<WaitForInputReturnType>;
};
declare const publicActionsL2: () => <TTransport extends Transport>(client: Client<TTransport, undefined, undefined, PublicCartesiRpcSchema>) => PublicActionsL2;
//# sourceMappingURL=publicL2.d.ts.map
//#endregion
//#region src/actions/getApplication.d.ts
declare const getApplication: (client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>, params: GetApplicationParams$1) => Promise<GetApplicationReturnType$1>;
//# sourceMappingURL=getApplication.d.ts.map
//#endregion
//#region src/actions/getChainId.d.ts
declare const getChainId: (client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>) => Promise<GetChainIdReturnType$1>;
//# sourceMappingURL=getChainId.d.ts.map
//#endregion
//#region src/actions/getEpoch.d.ts
declare const getEpoch: (client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>, params: GetEpochParams$1) => Promise<GetEpochReturnType$1>;
//# sourceMappingURL=getEpoch.d.ts.map
//#endregion
//#region src/actions/getInput.d.ts
declare const getInput: (client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>, params: GetInputParams$1) => Promise<GetInputReturnType$1>;
//# sourceMappingURL=getInput.d.ts.map
//#endregion
//#region src/actions/getLastAcceptedEpochIndex.d.ts
declare const getLastAcceptedEpochIndex: (client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>, params: GetLastAcceptedEpochIndexParams$1) => Promise<GetLastAcceptedEpochIndexReturnType$1>;
//# sourceMappingURL=getLastAcceptedEpochIndex.d.ts.map
//#endregion
//#region src/actions/getNodeVersion.d.ts
declare const getNodeVersion: (client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>) => Promise<GetNodeVersionReturnType$1>;
//# sourceMappingURL=getNodeVersion.d.ts.map
//#endregion
//#region src/actions/getOutput.d.ts
declare const getOutput: (client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>, params: GetOutputParams$1) => Promise<GetOutputReturnType$1>;
//# sourceMappingURL=getOutput.d.ts.map
//#endregion
//#region src/actions/getProcessedInputCount.d.ts
declare const getProcessedInputCount: (client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>, params: GetProcessedInputCountParams$1) => Promise<GetProcessedInputCountReturnType$1>;
//# sourceMappingURL=getProcessedInputCount.d.ts.map
//#endregion
//#region src/actions/getReport.d.ts
declare const getReport: (client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>, params: GetReportParams$1) => Promise<GetReportReturnType$1>;
//# sourceMappingURL=getReport.d.ts.map
//#endregion
//#region src/actions/listApplications.d.ts
declare const listApplications: (client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>, params: ListApplicationsParams$1) => Promise<ListApplicationsReturnType$1>;
//# sourceMappingURL=listApplications.d.ts.map
//#endregion
//#region src/actions/listEpochs.d.ts
declare const listEpochs: (client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>, params: ListEpochsParams$1) => Promise<ListEpochsReturnType$1>;
//# sourceMappingURL=listEpochs.d.ts.map
//#endregion
//#region src/actions/listInputs.d.ts
declare const listInputs: (client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>, params: ListInputsParams$1) => Promise<ListInputsReturnType$1>;
//# sourceMappingURL=listInputs.d.ts.map
//#endregion
//#region src/actions/listOutputs.d.ts
declare const listOutputs: (client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>, params: ListOutputsParams$1) => Promise<ListOutputsReturnType$1>;
//# sourceMappingURL=listOutputs.d.ts.map
//#endregion
//#region src/actions/listReports.d.ts
declare const listReports: (client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>, params: ListReportsParams$1) => Promise<ListReportsReturnType$1>;
//# sourceMappingURL=listReports.d.ts.map
//#endregion
//#region src/actions/validateOutput.d.ts
type ValidateOutputParameters<chain extends Chain | undefined = Chain | undefined, chainOverride extends Chain | undefined = Chain | undefined, _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>> = Omit<ReadContractParameters<typeof iApplicationAbi, "validateOutput">, "abi" | "address" | "args" | "functionName"> & {
  application: Address;
  output: GetOutputReturnType$1;
};
type ValidateOutputReturnType = boolean;
declare const validateOutput: <transport extends Transport, chain extends Chain | undefined, account extends Account | undefined>(client: Client<transport, chain, account>, parameters: ValidateOutputParameters) => Promise<ValidateOutputReturnType>;
//# sourceMappingURL=validateOutput.d.ts.map
//#endregion
//#region src/actions/waitForInput.d.ts
declare const waitForInput: (client: Client<Transport, undefined, undefined, PublicCartesiRpcSchema>, params: WaitForInputParams) => Promise<WaitForInputReturnType>;
//# sourceMappingURL=waitForInput.d.ts.map

//#endregion
export { type AddInputParameters, type AddInputReturnType, Application, DataAvailability, DataAvailabilityInputBox, DataAvailabilityInputBoxAndEspresso, DelegateCallVoucher, type DepositBatchERC1155TokenParameters, type DepositBatchERC1155TokenReturnType, type DepositERC20TokensParameters, type DepositERC20TokensReturnType, type DepositERC721TokenParameters, type DepositERC721TokenReturnType, type DepositEtherParameters, type DepositEtherReturnType, type DepositSingleERC1155TokenParameters, type DepositSingleERC1155TokenReturnType, Epoch, EpochStatus, type EstimateAddInputGasParameters, type EstimateAddInputGasReturnType, type EstimateDepositBatchERC1155TokenGasParameters, type EstimateDepositBatchERC1155TokenGasReturnType, type EstimateDepositERC20TokensGasParameters, type EstimateDepositERC20TokensGasReturnType, type EstimateDepositERC721TokenGasParameters, type EstimateDepositERC721TokenGasReturnType, type EstimateDepositEtherGasParameters, type EstimateDepositEtherGasReturnType, type EstimateDepositSingleERC1155TokenGasParameters, type EstimateDepositSingleERC1155TokenGasReturnType, type EstimateExecuteOutputGasParameters, type EstimateExecuteOutputGasReturnType, type ExecuteOutputParameters, type ExecuteOutputReturnType, GetApplicationParams$1 as GetApplicationParams, GetApplicationReturnType$1 as GetApplicationReturnType, GetChainIdReturnType$1 as GetChainIdReturnType, GetEpochParams$1 as GetEpochParams, GetEpochReturnType$1 as GetEpochReturnType, GetInputParams$1 as GetInputParams, GetInputReturnType$1 as GetInputReturnType, GetLastAcceptedEpochIndexParams$1 as GetLastAcceptedEpochIndexParams, GetLastAcceptedEpochIndexReturnType$1 as GetLastAcceptedEpochIndexReturnType, GetNodeVersionReturnType$1 as GetNodeVersionReturnType, GetOutputParams$1 as GetOutputParams, GetOutputReturnType$1 as GetOutputReturnType, GetProcessedInputCountParams$1 as GetProcessedInputCountParams, GetProcessedInputCountReturnType$1 as GetProcessedInputCountReturnType, GetReportParams$1 as GetReportParams, GetReportReturnType$1 as GetReportReturnType, Input, InputStatus, ListApplicationsParams$1 as ListApplicationsParams, ListApplicationsReturnType$1 as ListApplicationsReturnType, ListEpochsParams$1 as ListEpochsParams, ListEpochsReturnType$1 as ListEpochsReturnType, ListInputsParams$1 as ListInputsParams, ListInputsReturnType$1 as ListInputsReturnType, ListOutputsParams$1 as ListOutputsParams, ListOutputsReturnType$1 as ListOutputsReturnType, ListReportsParams$1 as ListReportsParams, ListReportsReturnType$1 as ListReportsReturnType, Notice, Output, OutputType, Pagination, PaginationParams, PublicCartesiRpcSchema, Report, type ValidateOutputParameters, type ValidateOutputReturnType, Voucher, WaitForInputParams, WaitForInputReturnType, addInput, depositBatchERC1155Token, depositERC20Tokens, depositERC721Token, depositEther, depositSingleERC1155Token, estimateAddInputGas, estimateDepositBatchERC1155TokenGas, estimateDepositERC20TokensGas, estimateDepositERC721TokenGas, estimateDepositEtherGas, estimateDepositSingleERC1155TokenGas, estimateExecuteOutputGas, executeOutput, getApplication, getChainId, getEpoch, getInput, getLastAcceptedEpochIndex, getNodeVersion, getOutput, getProcessedInputCount, getReport, listApplications, listEpochs, listInputs, listOutputs, listReports, publicActionsL2, validateOutput, waitForInput };
//# sourceMappingURL=index-Na7tILI4.d.cts.map