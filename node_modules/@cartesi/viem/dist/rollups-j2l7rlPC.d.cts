//#region src/rollups.d.ts
declare const abstractConsensusAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getEpochLength";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "isOutputsMerkleRootValid";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "submitClaim";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "interfaceId";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly name: "supportsInterface";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
    readonly indexed: false;
  }];
  readonly name: "ClaimAccepted";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "submitter";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
    readonly indexed: false;
  }];
  readonly name: "ClaimSubmitted";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotEpochFinalBlock";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotFirstClaim";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "currentBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotPastBlock";
}];
declare const applicationAbi: readonly [{
  readonly type: "constructor";
  readonly inputs: readonly [{
    readonly name: "outputsMerkleRootValidator";
    readonly internalType: "contract IOutputsMerkleRootValidator";
    readonly type: "address";
  }, {
    readonly name: "initialOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "templateHash";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }, {
    readonly name: "dataAvailability";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "receive";
  readonly stateMutability: "payable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "output";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "proof";
    readonly internalType: "struct OutputValidityProof";
    readonly type: "tuple";
    readonly components: readonly [{
      readonly name: "outputIndex";
      readonly internalType: "uint64";
      readonly type: "uint64";
    }, {
      readonly name: "outputHashesSiblings";
      readonly internalType: "bytes32[]";
      readonly type: "bytes32[]";
    }];
  }];
  readonly name: "executeOutput";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getDataAvailability";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getDeploymentBlockNumber";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getOutputsMerkleRootValidator";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IOutputsMerkleRootValidator";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getTemplateHash";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "newOutputsMerkleRootValidator";
    readonly internalType: "contract IOutputsMerkleRootValidator";
    readonly type: "address";
  }];
  readonly name: "migrateToOutputsMerkleRootValidator";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "";
    readonly internalType: "uint256[]";
    readonly type: "uint256[]";
  }, {
    readonly name: "";
    readonly internalType: "uint256[]";
    readonly type: "uint256[]";
  }, {
    readonly name: "";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "onERC1155BatchReceived";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "onERC1155Received";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "onERC721Received";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "owner";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "renounceOwnership";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "interfaceId";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly name: "supportsInterface";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "newOwner";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "transferOwnership";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "output";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "proof";
    readonly internalType: "struct OutputValidityProof";
    readonly type: "tuple";
    readonly components: readonly [{
      readonly name: "outputIndex";
      readonly internalType: "uint64";
      readonly type: "uint64";
    }, {
      readonly name: "outputHashesSiblings";
      readonly internalType: "bytes32[]";
      readonly type: "bytes32[]";
    }];
  }];
  readonly name: "validateOutput";
  readonly outputs: readonly [];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "outputHash";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }, {
    readonly name: "proof";
    readonly internalType: "struct OutputValidityProof";
    readonly type: "tuple";
    readonly components: readonly [{
      readonly name: "outputIndex";
      readonly internalType: "uint64";
      readonly type: "uint64";
    }, {
      readonly name: "outputHashesSiblings";
      readonly internalType: "bytes32[]";
      readonly type: "bytes32[]";
    }];
  }];
  readonly name: "validateOutputHash";
  readonly outputs: readonly [];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "outputIndex";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "wasOutputExecuted";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "outputIndex";
    readonly internalType: "uint64";
    readonly type: "uint64";
    readonly indexed: false;
  }, {
    readonly name: "output";
    readonly internalType: "bytes";
    readonly type: "bytes";
    readonly indexed: false;
  }];
  readonly name: "OutputExecuted";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "newOutputsMerkleRootValidator";
    readonly internalType: "contract IOutputsMerkleRootValidator";
    readonly type: "address";
    readonly indexed: false;
  }];
  readonly name: "OutputsMerkleRootValidatorChanged";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "previousOwner";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "newOwner";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }];
  readonly name: "OwnershipTransferred";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "balance";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "InsufficientFunds";
}, {
  readonly type: "error";
  readonly inputs: readonly [];
  readonly name: "InvalidOutputHashesSiblingsArrayLength";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "InvalidOutputsMerkleRoot";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "output";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "OutputNotExecutable";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "output";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "OutputNotReexecutable";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "owner";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "OwnableInvalidOwner";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "account";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "OwnableUnauthorizedAccount";
}, {
  readonly type: "error";
  readonly inputs: readonly [];
  readonly name: "ReentrancyGuardReentrantCall";
}];
declare const applicationFactoryAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "outputsMerkleRootValidator";
    readonly internalType: "contract IOutputsMerkleRootValidator";
    readonly type: "address";
  }, {
    readonly name: "appOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "templateHash";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }, {
    readonly name: "dataAvailability";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "salt";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "calculateApplicationAddress";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "outputsMerkleRootValidator";
    readonly internalType: "contract IOutputsMerkleRootValidator";
    readonly type: "address";
  }, {
    readonly name: "appOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "templateHash";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }, {
    readonly name: "dataAvailability";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "salt";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "newApplication";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IApplication";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "outputsMerkleRootValidator";
    readonly internalType: "contract IOutputsMerkleRootValidator";
    readonly type: "address";
  }, {
    readonly name: "appOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "templateHash";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }, {
    readonly name: "dataAvailability";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "newApplication";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IApplication";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "outputsMerkleRootValidator";
    readonly internalType: "contract IOutputsMerkleRootValidator";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "appOwner";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: false;
  }, {
    readonly name: "templateHash";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
    readonly indexed: false;
  }, {
    readonly name: "dataAvailability";
    readonly internalType: "bytes";
    readonly type: "bytes";
    readonly indexed: false;
  }, {
    readonly name: "appContract";
    readonly internalType: "contract IApplication";
    readonly type: "address";
    readonly indexed: false;
  }];
  readonly name: "ApplicationCreated";
}];
declare const applicationFactoryAddress: "0xc7006f70875BaDe89032001262A846D3Ee160051";
declare const applicationFactoryConfig: {
  readonly address: "0xc7006f70875BaDe89032001262A846D3Ee160051";
  readonly abi: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "outputsMerkleRootValidator";
      readonly internalType: "contract IOutputsMerkleRootValidator";
      readonly type: "address";
    }, {
      readonly name: "appOwner";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "templateHash";
      readonly internalType: "bytes32";
      readonly type: "bytes32";
    }, {
      readonly name: "dataAvailability";
      readonly internalType: "bytes";
      readonly type: "bytes";
    }, {
      readonly name: "salt";
      readonly internalType: "bytes32";
      readonly type: "bytes32";
    }];
    readonly name: "calculateApplicationAddress";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "address";
      readonly type: "address";
    }];
    readonly stateMutability: "view";
  }, {
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "outputsMerkleRootValidator";
      readonly internalType: "contract IOutputsMerkleRootValidator";
      readonly type: "address";
    }, {
      readonly name: "appOwner";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "templateHash";
      readonly internalType: "bytes32";
      readonly type: "bytes32";
    }, {
      readonly name: "dataAvailability";
      readonly internalType: "bytes";
      readonly type: "bytes";
    }, {
      readonly name: "salt";
      readonly internalType: "bytes32";
      readonly type: "bytes32";
    }];
    readonly name: "newApplication";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "contract IApplication";
      readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "outputsMerkleRootValidator";
      readonly internalType: "contract IOutputsMerkleRootValidator";
      readonly type: "address";
    }, {
      readonly name: "appOwner";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "templateHash";
      readonly internalType: "bytes32";
      readonly type: "bytes32";
    }, {
      readonly name: "dataAvailability";
      readonly internalType: "bytes";
      readonly type: "bytes";
    }];
    readonly name: "newApplication";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "contract IApplication";
      readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
      readonly name: "outputsMerkleRootValidator";
      readonly internalType: "contract IOutputsMerkleRootValidator";
      readonly type: "address";
      readonly indexed: true;
    }, {
      readonly name: "appOwner";
      readonly internalType: "address";
      readonly type: "address";
      readonly indexed: false;
    }, {
      readonly name: "templateHash";
      readonly internalType: "bytes32";
      readonly type: "bytes32";
      readonly indexed: false;
    }, {
      readonly name: "dataAvailability";
      readonly internalType: "bytes";
      readonly type: "bytes";
      readonly indexed: false;
    }, {
      readonly name: "appContract";
      readonly internalType: "contract IApplication";
      readonly type: "address";
      readonly indexed: false;
    }];
    readonly name: "ApplicationCreated";
  }];
};
declare const authorityAbi: readonly [{
  readonly type: "constructor";
  readonly inputs: readonly [{
    readonly name: "initialOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getEpochLength";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "isOutputsMerkleRootValid";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "owner";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "renounceOwnership";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "submitClaim";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "interfaceId";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly name: "supportsInterface";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "newOwner";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "transferOwnership";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
    readonly indexed: false;
  }];
  readonly name: "ClaimAccepted";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "submitter";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
    readonly indexed: false;
  }];
  readonly name: "ClaimSubmitted";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "previousOwner";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "newOwner";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }];
  readonly name: "OwnershipTransferred";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotEpochFinalBlock";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotFirstClaim";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "currentBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotPastBlock";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "owner";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "OwnableInvalidOwner";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "account";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "OwnableUnauthorizedAccount";
}];
declare const authorityFactoryAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "authorityOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "salt";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "calculateAuthorityAddress";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "authorityOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "newAuthority";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IAuthority";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "authorityOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "salt";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "newAuthority";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IAuthority";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "authority";
    readonly internalType: "contract IAuthority";
    readonly type: "address";
    readonly indexed: false;
  }];
  readonly name: "AuthorityCreated";
}];
declare const authorityFactoryAddress: "0xC7003566dD09Aa0fC0Ce201aC2769aFAe3BF0051";
declare const authorityFactoryConfig: {
  readonly address: "0xC7003566dD09Aa0fC0Ce201aC2769aFAe3BF0051";
  readonly abi: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "authorityOwner";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "epochLength";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }, {
      readonly name: "salt";
      readonly internalType: "bytes32";
      readonly type: "bytes32";
    }];
    readonly name: "calculateAuthorityAddress";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "address";
      readonly type: "address";
    }];
    readonly stateMutability: "view";
  }, {
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "authorityOwner";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "epochLength";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }];
    readonly name: "newAuthority";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "contract IAuthority";
      readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "authorityOwner";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "epochLength";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }, {
      readonly name: "salt";
      readonly internalType: "bytes32";
      readonly type: "bytes32";
    }];
    readonly name: "newAuthority";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "contract IAuthority";
      readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
      readonly name: "authority";
      readonly internalType: "contract IAuthority";
      readonly type: "address";
      readonly indexed: false;
    }];
    readonly name: "AuthorityCreated";
  }];
};
declare const create2Abi: readonly [{
  readonly type: "error";
  readonly inputs: readonly [];
  readonly name: "Create2EmptyBytecode";
}];
declare const dataAvailabilityAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "inputBox";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly name: "InputBox";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "inputBox";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }, {
    readonly name: "fromBlock";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "namespaceId";
    readonly internalType: "uint32";
    readonly type: "uint32";
  }];
  readonly name: "InputBoxAndEspresso";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}];
declare const erc1155BatchPortalAbi: readonly [{
  readonly type: "constructor";
  readonly inputs: readonly [{
    readonly name: "inputBox";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "token";
    readonly internalType: "contract IERC1155";
    readonly type: "address";
  }, {
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "tokenIds";
    readonly internalType: "uint256[]";
    readonly type: "uint256[]";
  }, {
    readonly name: "values";
    readonly internalType: "uint256[]";
    readonly type: "uint256[]";
  }, {
    readonly name: "baseLayerData";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "execLayerData";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "depositBatchERC1155Token";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getInputBox";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}];
declare const erc1155BatchPortalAddress: "0xc700A2e5531E720a2434433b6ccf4c0eA2400051";
declare const erc1155BatchPortalConfig: {
  readonly address: "0xc700A2e5531E720a2434433b6ccf4c0eA2400051";
  readonly abi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
      readonly name: "inputBox";
      readonly internalType: "contract IInputBox";
      readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "token";
      readonly internalType: "contract IERC1155";
      readonly type: "address";
    }, {
      readonly name: "appContract";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "tokenIds";
      readonly internalType: "uint256[]";
      readonly type: "uint256[]";
    }, {
      readonly name: "values";
      readonly internalType: "uint256[]";
      readonly type: "uint256[]";
    }, {
      readonly name: "baseLayerData";
      readonly internalType: "bytes";
      readonly type: "bytes";
    }, {
      readonly name: "execLayerData";
      readonly internalType: "bytes";
      readonly type: "bytes";
    }];
    readonly name: "depositBatchERC1155Token";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getInputBox";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "contract IInputBox";
      readonly type: "address";
    }];
    readonly stateMutability: "view";
  }];
};
declare const erc1155HolderAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "";
    readonly internalType: "uint256[]";
    readonly type: "uint256[]";
  }, {
    readonly name: "";
    readonly internalType: "uint256[]";
    readonly type: "uint256[]";
  }, {
    readonly name: "";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "onERC1155BatchReceived";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "onERC1155Received";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "interfaceId";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly name: "supportsInterface";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}];
declare const erc1155SinglePortalAbi: readonly [{
  readonly type: "constructor";
  readonly inputs: readonly [{
    readonly name: "inputBox";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "token";
    readonly internalType: "contract IERC1155";
    readonly type: "address";
  }, {
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "tokenId";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "baseLayerData";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "execLayerData";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "depositSingleERC1155Token";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getInputBox";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}];
declare const erc1155SinglePortalAddress: "0xc700A261279aFC6F755A3a67D86ae43E2eBD0051";
declare const erc1155SinglePortalConfig: {
  readonly address: "0xc700A261279aFC6F755A3a67D86ae43E2eBD0051";
  readonly abi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
      readonly name: "inputBox";
      readonly internalType: "contract IInputBox";
      readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "token";
      readonly internalType: "contract IERC1155";
      readonly type: "address";
    }, {
      readonly name: "appContract";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "tokenId";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }, {
      readonly name: "value";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }, {
      readonly name: "baseLayerData";
      readonly internalType: "bytes";
      readonly type: "bytes";
    }, {
      readonly name: "execLayerData";
      readonly internalType: "bytes";
      readonly type: "bytes";
    }];
    readonly name: "depositSingleERC1155Token";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getInputBox";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "contract IInputBox";
      readonly type: "address";
    }];
    readonly stateMutability: "view";
  }];
};
declare const erc165Abi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "interfaceId";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly name: "supportsInterface";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}];
declare const erc20PortalAbi: readonly [{
  readonly type: "constructor";
  readonly inputs: readonly [{
    readonly name: "inputBox";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "token";
    readonly internalType: "contract IERC20";
    readonly type: "address";
  }, {
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "execLayerData";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "depositERC20Tokens";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getInputBox";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "error";
  readonly inputs: readonly [];
  readonly name: "ERC20TransferFailed";
}];
declare const erc20PortalAddress: "0xc700D6aDd016eECd59d989C028214Eaa0fCC0051";
declare const erc20PortalConfig: {
  readonly address: "0xc700D6aDd016eECd59d989C028214Eaa0fCC0051";
  readonly abi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
      readonly name: "inputBox";
      readonly internalType: "contract IInputBox";
      readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "token";
      readonly internalType: "contract IERC20";
      readonly type: "address";
    }, {
      readonly name: "appContract";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "value";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }, {
      readonly name: "execLayerData";
      readonly internalType: "bytes";
      readonly type: "bytes";
    }];
    readonly name: "depositERC20Tokens";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getInputBox";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "contract IInputBox";
      readonly type: "address";
    }];
    readonly stateMutability: "view";
  }, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "ERC20TransferFailed";
  }];
};
declare const erc721HolderAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "onERC721Received";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly stateMutability: "nonpayable";
}];
declare const erc721PortalAbi: readonly [{
  readonly type: "constructor";
  readonly inputs: readonly [{
    readonly name: "inputBox";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "token";
    readonly internalType: "contract IERC721";
    readonly type: "address";
  }, {
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "tokenId";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "baseLayerData";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "execLayerData";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "depositERC721Token";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getInputBox";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}];
declare const erc721PortalAddress: "0xc700d52F5290e978e9CAe7D1E092935263b60051";
declare const erc721PortalConfig: {
  readonly address: "0xc700d52F5290e978e9CAe7D1E092935263b60051";
  readonly abi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
      readonly name: "inputBox";
      readonly internalType: "contract IInputBox";
      readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "token";
      readonly internalType: "contract IERC721";
      readonly type: "address";
    }, {
      readonly name: "appContract";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "tokenId";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }, {
      readonly name: "baseLayerData";
      readonly internalType: "bytes";
      readonly type: "bytes";
    }, {
      readonly name: "execLayerData";
      readonly internalType: "bytes";
      readonly type: "bytes";
    }];
    readonly name: "depositERC721Token";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getInputBox";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "contract IInputBox";
      readonly type: "address";
    }];
    readonly stateMutability: "view";
  }];
};
declare const errorsAbi: readonly [{
  readonly type: "error";
  readonly inputs: readonly [];
  readonly name: "FailedCall";
}, {
  readonly type: "error";
  readonly inputs: readonly [];
  readonly name: "FailedDeployment";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "balance";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "needed";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "InsufficientBalance";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "MissingPrecompile";
}];
declare const etherPortalAbi: readonly [{
  readonly type: "constructor";
  readonly inputs: readonly [{
    readonly name: "inputBox";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "execLayerData";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "depositEther";
  readonly outputs: readonly [];
  readonly stateMutability: "payable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getInputBox";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "error";
  readonly inputs: readonly [];
  readonly name: "EtherTransferFailed";
}];
declare const etherPortalAddress: "0xc70076a466789B595b50959cdc261227F0D70051";
declare const etherPortalConfig: {
  readonly address: "0xc70076a466789B595b50959cdc261227F0D70051";
  readonly abi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
      readonly name: "inputBox";
      readonly internalType: "contract IInputBox";
      readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "appContract";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "execLayerData";
      readonly internalType: "bytes";
      readonly type: "bytes";
    }];
    readonly name: "depositEther";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
  }, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getInputBox";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "contract IInputBox";
      readonly type: "address";
    }];
    readonly stateMutability: "view";
  }, {
    readonly type: "error";
    readonly inputs: readonly [];
    readonly name: "EtherTransferFailed";
  }];
};
declare const iApplicationAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "output";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "proof";
    readonly internalType: "struct OutputValidityProof";
    readonly type: "tuple";
    readonly components: readonly [{
      readonly name: "outputIndex";
      readonly internalType: "uint64";
      readonly type: "uint64";
    }, {
      readonly name: "outputHashesSiblings";
      readonly internalType: "bytes32[]";
      readonly type: "bytes32[]";
    }];
  }];
  readonly name: "executeOutput";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getDataAvailability";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getDeploymentBlockNumber";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getOutputsMerkleRootValidator";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IOutputsMerkleRootValidator";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getTemplateHash";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "newOutputsMerkleRootValidator";
    readonly internalType: "contract IOutputsMerkleRootValidator";
    readonly type: "address";
  }];
  readonly name: "migrateToOutputsMerkleRootValidator";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "owner";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "renounceOwnership";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "newOwner";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "transferOwnership";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "output";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "proof";
    readonly internalType: "struct OutputValidityProof";
    readonly type: "tuple";
    readonly components: readonly [{
      readonly name: "outputIndex";
      readonly internalType: "uint64";
      readonly type: "uint64";
    }, {
      readonly name: "outputHashesSiblings";
      readonly internalType: "bytes32[]";
      readonly type: "bytes32[]";
    }];
  }];
  readonly name: "validateOutput";
  readonly outputs: readonly [];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "outputHash";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }, {
    readonly name: "proof";
    readonly internalType: "struct OutputValidityProof";
    readonly type: "tuple";
    readonly components: readonly [{
      readonly name: "outputIndex";
      readonly internalType: "uint64";
      readonly type: "uint64";
    }, {
      readonly name: "outputHashesSiblings";
      readonly internalType: "bytes32[]";
      readonly type: "bytes32[]";
    }];
  }];
  readonly name: "validateOutputHash";
  readonly outputs: readonly [];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "outputIndex";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "wasOutputExecuted";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "outputIndex";
    readonly internalType: "uint64";
    readonly type: "uint64";
    readonly indexed: false;
  }, {
    readonly name: "output";
    readonly internalType: "bytes";
    readonly type: "bytes";
    readonly indexed: false;
  }];
  readonly name: "OutputExecuted";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "newOutputsMerkleRootValidator";
    readonly internalType: "contract IOutputsMerkleRootValidator";
    readonly type: "address";
    readonly indexed: false;
  }];
  readonly name: "OutputsMerkleRootValidatorChanged";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "balance";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "InsufficientFunds";
}, {
  readonly type: "error";
  readonly inputs: readonly [];
  readonly name: "InvalidOutputHashesSiblingsArrayLength";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "InvalidOutputsMerkleRoot";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "output";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "OutputNotExecutable";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "output";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "OutputNotReexecutable";
}];
declare const iApplicationFactoryAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "outputsMerkleRootValidator";
    readonly internalType: "contract IOutputsMerkleRootValidator";
    readonly type: "address";
  }, {
    readonly name: "appOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "templateHash";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }, {
    readonly name: "dataAvailability";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "salt";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "calculateApplicationAddress";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "outputsMerkleRootValidator";
    readonly internalType: "contract IOutputsMerkleRootValidator";
    readonly type: "address";
  }, {
    readonly name: "appOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "templateHash";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }, {
    readonly name: "dataAvailability";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "salt";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "newApplication";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IApplication";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "outputsMerkleRootValidator";
    readonly internalType: "contract IOutputsMerkleRootValidator";
    readonly type: "address";
  }, {
    readonly name: "appOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "templateHash";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }, {
    readonly name: "dataAvailability";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "newApplication";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IApplication";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "outputsMerkleRootValidator";
    readonly internalType: "contract IOutputsMerkleRootValidator";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "appOwner";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: false;
  }, {
    readonly name: "templateHash";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
    readonly indexed: false;
  }, {
    readonly name: "dataAvailability";
    readonly internalType: "bytes";
    readonly type: "bytes";
    readonly indexed: false;
  }, {
    readonly name: "appContract";
    readonly internalType: "contract IApplication";
    readonly type: "address";
    readonly indexed: false;
  }];
  readonly name: "ApplicationCreated";
}];
declare const iAuthorityAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getEpochLength";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "isOutputsMerkleRootValid";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "owner";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "renounceOwnership";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "submitClaim";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "interfaceId";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly name: "supportsInterface";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "newOwner";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "transferOwnership";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
    readonly indexed: false;
  }];
  readonly name: "ClaimAccepted";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "submitter";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
    readonly indexed: false;
  }];
  readonly name: "ClaimSubmitted";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotEpochFinalBlock";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotFirstClaim";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "currentBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotPastBlock";
}];
declare const iAuthorityFactoryAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "authorityOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "salt";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "calculateAuthorityAddress";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "authorityOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "newAuthority";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IAuthority";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "authorityOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "salt";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "newAuthority";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IAuthority";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "authority";
    readonly internalType: "contract IAuthority";
    readonly type: "address";
    readonly indexed: false;
  }];
  readonly name: "AuthorityCreated";
}];
declare const iConsensusAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getEpochLength";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "isOutputsMerkleRootValid";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "submitClaim";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "interfaceId";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly name: "supportsInterface";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
    readonly indexed: false;
  }];
  readonly name: "ClaimAccepted";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "submitter";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
    readonly indexed: false;
  }];
  readonly name: "ClaimSubmitted";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotEpochFinalBlock";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotFirstClaim";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "currentBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotPastBlock";
}];
declare const ierc1155Abi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "account";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "id";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "balanceOf";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "accounts";
    readonly internalType: "address[]";
    readonly type: "address[]";
  }, {
    readonly name: "ids";
    readonly internalType: "uint256[]";
    readonly type: "uint256[]";
  }];
  readonly name: "balanceOfBatch";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256[]";
    readonly type: "uint256[]";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "account";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "operator";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "isApprovedForAll";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "from";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "ids";
    readonly internalType: "uint256[]";
    readonly type: "uint256[]";
  }, {
    readonly name: "values";
    readonly internalType: "uint256[]";
    readonly type: "uint256[]";
  }, {
    readonly name: "data";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "safeBatchTransferFrom";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "from";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "id";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "data";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "safeTransferFrom";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "operator";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "approved";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly name: "setApprovalForAll";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "interfaceId";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly name: "supportsInterface";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "account";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "operator";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "approved";
    readonly internalType: "bool";
    readonly type: "bool";
    readonly indexed: false;
  }];
  readonly name: "ApprovalForAll";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "operator";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "from";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "ids";
    readonly internalType: "uint256[]";
    readonly type: "uint256[]";
    readonly indexed: false;
  }, {
    readonly name: "values";
    readonly internalType: "uint256[]";
    readonly type: "uint256[]";
    readonly indexed: false;
  }];
  readonly name: "TransferBatch";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "operator";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "from";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "id";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }];
  readonly name: "TransferSingle";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "value";
    readonly internalType: "string";
    readonly type: "string";
    readonly indexed: false;
  }, {
    readonly name: "id";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: true;
  }];
  readonly name: "URI";
}];
declare const ierc1155BatchPortalAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "token";
    readonly internalType: "contract IERC1155";
    readonly type: "address";
  }, {
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "tokenIds";
    readonly internalType: "uint256[]";
    readonly type: "uint256[]";
  }, {
    readonly name: "values";
    readonly internalType: "uint256[]";
    readonly type: "uint256[]";
  }, {
    readonly name: "baseLayerData";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "execLayerData";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "depositBatchERC1155Token";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getInputBox";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}];
declare const ierc1155ReceiverAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "operator";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "from";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "ids";
    readonly internalType: "uint256[]";
    readonly type: "uint256[]";
  }, {
    readonly name: "values";
    readonly internalType: "uint256[]";
    readonly type: "uint256[]";
  }, {
    readonly name: "data";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "onERC1155BatchReceived";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "operator";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "from";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "id";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "data";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "onERC1155Received";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "interfaceId";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly name: "supportsInterface";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}];
declare const ierc1155SinglePortalAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "token";
    readonly internalType: "contract IERC1155";
    readonly type: "address";
  }, {
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "tokenId";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "baseLayerData";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "execLayerData";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "depositSingleERC1155Token";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getInputBox";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}];
declare const ierc1363Abi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "owner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "spender";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "allowance";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "spender";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "approve";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "spender";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "approveAndCall";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "spender";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "data";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "approveAndCall";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "account";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "balanceOf";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "interfaceId";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly name: "supportsInterface";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "totalSupply";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "transfer";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "transferAndCall";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "data";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "transferAndCall";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "from";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "transferFrom";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "from";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "data";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "transferFromAndCall";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "from";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "transferFromAndCall";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "owner";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "spender";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }];
  readonly name: "Approval";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "from";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }];
  readonly name: "Transfer";
}];
declare const ierc165Abi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "interfaceId";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly name: "supportsInterface";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}];
declare const ierc20Abi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "owner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "spender";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "allowance";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "spender";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "approve";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "account";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "balanceOf";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "totalSupply";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "transfer";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "from";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "transferFrom";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "owner";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "spender";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }];
  readonly name: "Approval";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "from";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }];
  readonly name: "Transfer";
}];
declare const ierc20PortalAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "token";
    readonly internalType: "contract IERC20";
    readonly type: "address";
  }, {
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "execLayerData";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "depositERC20Tokens";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getInputBox";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "error";
  readonly inputs: readonly [];
  readonly name: "ERC20TransferFailed";
}];
declare const ierc721Abi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "tokenId";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "approve";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "owner";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "balanceOf";
  readonly outputs: readonly [{
    readonly name: "balance";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "tokenId";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "getApproved";
  readonly outputs: readonly [{
    readonly name: "operator";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "owner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "operator";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "isApprovedForAll";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "tokenId";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "ownerOf";
  readonly outputs: readonly [{
    readonly name: "owner";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "from";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "tokenId";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "safeTransferFrom";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "from";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "tokenId";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "data";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "safeTransferFrom";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "operator";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "approved";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly name: "setApprovalForAll";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "interfaceId";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly name: "supportsInterface";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "from";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "tokenId";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "transferFrom";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "owner";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "approved";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "tokenId";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: true;
  }];
  readonly name: "Approval";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "owner";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "operator";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "approved";
    readonly internalType: "bool";
    readonly type: "bool";
    readonly indexed: false;
  }];
  readonly name: "ApprovalForAll";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "from";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "tokenId";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: true;
  }];
  readonly name: "Transfer";
}];
declare const ierc721PortalAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "token";
    readonly internalType: "contract IERC721";
    readonly type: "address";
  }, {
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "tokenId";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "baseLayerData";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "execLayerData";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "depositERC721Token";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getInputBox";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}];
declare const ierc721ReceiverAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "operator";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "from";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "tokenId";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "data";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "onERC721Received";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly stateMutability: "nonpayable";
}];
declare const iEtherPortalAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "execLayerData";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "depositEther";
  readonly outputs: readonly [];
  readonly stateMutability: "payable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getInputBox";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "error";
  readonly inputs: readonly [];
  readonly name: "EtherTransferFailed";
}];
declare const iInputBoxAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "payload";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "addInput";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getDeploymentBlockNumber";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "index";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "getInputHash";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "getNumberOfInputs";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "index";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: true;
  }, {
    readonly name: "input";
    readonly internalType: "bytes";
    readonly type: "bytes";
    readonly indexed: false;
  }];
  readonly name: "InputAdded";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "inputLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "maxInputLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "InputTooLarge";
}];
declare const iOutputsMerkleRootValidatorAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "isOutputsMerkleRootValid";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "interfaceId";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly name: "supportsInterface";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}];
declare const iOwnableAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "owner";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "renounceOwnership";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "newOwner";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "transferOwnership";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}];
declare const iPortalAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getInputBox";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}];
declare const iQuorumAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getEpochLength";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "isOutputsMerkleRootValid";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }, {
    readonly name: "id";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "isValidatorInFavorOf";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "id";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "isValidatorInFavorOfAnyClaimInEpoch";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "numOfValidators";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "numOfValidatorsInFavorOf";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "numOfValidatorsInFavorOfAnyClaimInEpoch";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "submitClaim";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "interfaceId";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly name: "supportsInterface";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "id";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "validatorById";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "validator";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "validatorId";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
    readonly indexed: false;
  }];
  readonly name: "ClaimAccepted";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "submitter";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
    readonly indexed: false;
  }];
  readonly name: "ClaimSubmitted";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotEpochFinalBlock";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotFirstClaim";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "currentBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotPastBlock";
}];
declare const iQuorumFactoryAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "validators";
    readonly internalType: "address[]";
    readonly type: "address[]";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "salt";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "calculateQuorumAddress";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "validators";
    readonly internalType: "address[]";
    readonly type: "address[]";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "salt";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "newQuorum";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IQuorum";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "validators";
    readonly internalType: "address[]";
    readonly type: "address[]";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "newQuorum";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IQuorum";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "quorum";
    readonly internalType: "contract IQuorum";
    readonly type: "address";
    readonly indexed: false;
  }];
  readonly name: "QuorumCreated";
}];
declare const iSelfHostedApplicationFactoryAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "authorityOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "appOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "templateHash";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }, {
    readonly name: "dataAvailability";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "salt";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "calculateAddresses";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "authorityOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "appOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "templateHash";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }, {
    readonly name: "dataAvailability";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "salt";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "deployContracts";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IApplication";
    readonly type: "address";
  }, {
    readonly name: "";
    readonly internalType: "contract IAuthority";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getApplicationFactory";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IApplicationFactory";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getAuthorityFactory";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IAuthorityFactory";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}];
declare const inputBoxAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "payload";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "addInput";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getDeploymentBlockNumber";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "index";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "getInputHash";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "getNumberOfInputs";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "index";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: true;
  }, {
    readonly name: "input";
    readonly internalType: "bytes";
    readonly type: "bytes";
    readonly indexed: false;
  }];
  readonly name: "InputAdded";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "inputLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "maxInputLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "InputTooLarge";
}];
declare const inputBoxAddress: "0xc70074BDD26d8cF983Ca6A5b89b8db52D5850051";
declare const inputBoxConfig: {
  readonly address: "0xc70074BDD26d8cF983Ca6A5b89b8db52D5850051";
  readonly abi: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "appContract";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "payload";
      readonly internalType: "bytes";
      readonly type: "bytes";
    }];
    readonly name: "addInput";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "bytes32";
      readonly type: "bytes32";
    }];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getDeploymentBlockNumber";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }];
    readonly stateMutability: "view";
  }, {
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "appContract";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "index";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }];
    readonly name: "getInputHash";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "bytes32";
      readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
  }, {
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "appContract";
      readonly internalType: "address";
      readonly type: "address";
    }];
    readonly name: "getNumberOfInputs";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }];
    readonly stateMutability: "view";
  }, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
      readonly name: "appContract";
      readonly internalType: "address";
      readonly type: "address";
      readonly indexed: true;
    }, {
      readonly name: "index";
      readonly internalType: "uint256";
      readonly type: "uint256";
      readonly indexed: true;
    }, {
      readonly name: "input";
      readonly internalType: "bytes";
      readonly type: "bytes";
      readonly indexed: false;
    }];
    readonly name: "InputAdded";
  }, {
    readonly type: "error";
    readonly inputs: readonly [{
      readonly name: "appContract";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "inputLength";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }, {
      readonly name: "maxInputLength";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }];
    readonly name: "InputTooLarge";
  }];
};
declare const inputsAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "chainId";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "msgSender";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "blockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "blockTimestamp";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "prevRandao";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "index";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "payload";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "EvmAdvance";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}];
declare const outputsAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "destination";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "payload";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "DelegateCallVoucher";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "payload";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "Notice";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "destination";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "payload";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }];
  readonly name: "Voucher";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}];
declare const ownableAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "owner";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "renounceOwnership";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "newOwner";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "transferOwnership";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "previousOwner";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "newOwner";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }];
  readonly name: "OwnershipTransferred";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "owner";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "OwnableInvalidOwner";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "account";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "OwnableUnauthorizedAccount";
}];
declare const portalAbi: readonly [{
  readonly type: "constructor";
  readonly inputs: readonly [{
    readonly name: "inputBox";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getInputBox";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IInputBox";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}];
declare const quorumAbi: readonly [{
  readonly type: "constructor";
  readonly inputs: readonly [{
    readonly name: "validators";
    readonly internalType: "address[]";
    readonly type: "address[]";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getEpochLength";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "isOutputsMerkleRootValid";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }, {
    readonly name: "id";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "isValidatorInFavorOf";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "id";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "isValidatorInFavorOfAnyClaimInEpoch";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "numOfValidators";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "numOfValidatorsInFavorOf";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "numOfValidatorsInFavorOfAnyClaimInEpoch";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "submitClaim";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "interfaceId";
    readonly internalType: "bytes4";
    readonly type: "bytes4";
  }];
  readonly name: "supportsInterface";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "bool";
    readonly type: "bool";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "id";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "validatorById";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "validator";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "validatorId";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
    readonly indexed: false;
  }];
  readonly name: "ClaimAccepted";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "submitter";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
    readonly indexed: true;
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
    readonly indexed: false;
  }, {
    readonly name: "outputsMerkleRoot";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
    readonly indexed: false;
  }];
  readonly name: "ClaimSubmitted";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotEpochFinalBlock";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "appContract";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotFirstClaim";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "lastProcessedBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "currentBlockNumber";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "NotPastBlock";
}];
declare const quorumFactoryAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "validators";
    readonly internalType: "address[]";
    readonly type: "address[]";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "salt";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "calculateQuorumAddress";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "validators";
    readonly internalType: "address[]";
    readonly type: "address[]";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "salt";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "newQuorum";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IQuorum";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "validators";
    readonly internalType: "address[]";
    readonly type: "address[]";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "newQuorum";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IQuorum";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "event";
  readonly anonymous: false;
  readonly inputs: readonly [{
    readonly name: "quorum";
    readonly internalType: "contract IQuorum";
    readonly type: "address";
    readonly indexed: false;
  }];
  readonly name: "QuorumCreated";
}];
declare const quorumFactoryAddress: "0xC7003CAb437640b91C3351B98e9e8aA413410051";
declare const quorumFactoryConfig: {
  readonly address: "0xC7003CAb437640b91C3351B98e9e8aA413410051";
  readonly abi: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "validators";
      readonly internalType: "address[]";
      readonly type: "address[]";
    }, {
      readonly name: "epochLength";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }, {
      readonly name: "salt";
      readonly internalType: "bytes32";
      readonly type: "bytes32";
    }];
    readonly name: "calculateQuorumAddress";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "address";
      readonly type: "address";
    }];
    readonly stateMutability: "view";
  }, {
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "validators";
      readonly internalType: "address[]";
      readonly type: "address[]";
    }, {
      readonly name: "epochLength";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }, {
      readonly name: "salt";
      readonly internalType: "bytes32";
      readonly type: "bytes32";
    }];
    readonly name: "newQuorum";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "contract IQuorum";
      readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "validators";
      readonly internalType: "address[]";
      readonly type: "address[]";
    }, {
      readonly name: "epochLength";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }];
    readonly name: "newQuorum";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "contract IQuorum";
      readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "event";
    readonly anonymous: false;
    readonly inputs: readonly [{
      readonly name: "quorum";
      readonly internalType: "contract IQuorum";
      readonly type: "address";
      readonly indexed: false;
    }];
    readonly name: "QuorumCreated";
  }];
};
declare const reentrancyGuardAbi: readonly [{
  readonly type: "error";
  readonly inputs: readonly [];
  readonly name: "ReentrancyGuardReentrantCall";
}];
declare const safeErc20Abi: readonly [{
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "spender";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "currentAllowance";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "requestedDecrease";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "SafeERC20FailedDecreaseAllowance";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "token";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "SafeERC20FailedOperation";
}];
declare const safeErc20TransferAbi: readonly [{
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "token";
    readonly internalType: "contract IERC20";
    readonly type: "address";
  }, {
    readonly name: "to";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "value";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }];
  readonly name: "safeTransfer";
  readonly outputs: readonly [];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "error";
  readonly inputs: readonly [{
    readonly name: "token";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly name: "SafeERC20FailedOperation";
}];
declare const safeErc20TransferAddress: "0xc700903d822E108a93B21F69A0a6475F42930051";
declare const safeErc20TransferConfig: {
  readonly address: "0xc700903d822E108a93B21F69A0a6475F42930051";
  readonly abi: readonly [{
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "token";
      readonly internalType: "contract IERC20";
      readonly type: "address";
    }, {
      readonly name: "to";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "value";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }];
    readonly name: "safeTransfer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "error";
    readonly inputs: readonly [{
      readonly name: "token";
      readonly internalType: "address";
      readonly type: "address";
    }];
    readonly name: "SafeERC20FailedOperation";
  }];
};
declare const selfHostedApplicationFactoryAbi: readonly [{
  readonly type: "constructor";
  readonly inputs: readonly [{
    readonly name: "authorityFactory";
    readonly internalType: "contract IAuthorityFactory";
    readonly type: "address";
  }, {
    readonly name: "applicationFactory";
    readonly internalType: "contract IApplicationFactory";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "authorityOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "appOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "templateHash";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }, {
    readonly name: "dataAvailability";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "salt";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "calculateAddresses";
  readonly outputs: readonly [{
    readonly name: "application";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "authority";
    readonly internalType: "address";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [{
    readonly name: "authorityOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "epochLength";
    readonly internalType: "uint256";
    readonly type: "uint256";
  }, {
    readonly name: "appOwner";
    readonly internalType: "address";
    readonly type: "address";
  }, {
    readonly name: "templateHash";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }, {
    readonly name: "dataAvailability";
    readonly internalType: "bytes";
    readonly type: "bytes";
  }, {
    readonly name: "salt";
    readonly internalType: "bytes32";
    readonly type: "bytes32";
  }];
  readonly name: "deployContracts";
  readonly outputs: readonly [{
    readonly name: "application";
    readonly internalType: "contract IApplication";
    readonly type: "address";
  }, {
    readonly name: "authority";
    readonly internalType: "contract IAuthority";
    readonly type: "address";
  }];
  readonly stateMutability: "nonpayable";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getApplicationFactory";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IApplicationFactory";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}, {
  readonly type: "function";
  readonly inputs: readonly [];
  readonly name: "getAuthorityFactory";
  readonly outputs: readonly [{
    readonly name: "";
    readonly internalType: "contract IAuthorityFactory";
    readonly type: "address";
  }];
  readonly stateMutability: "view";
}];
declare const selfHostedApplicationFactoryAddress: "0xc700285Ab555eeB5201BC00CFD4b2CC8DED90051";
declare const selfHostedApplicationFactoryConfig: {
  readonly address: "0xc700285Ab555eeB5201BC00CFD4b2CC8DED90051";
  readonly abi: readonly [{
    readonly type: "constructor";
    readonly inputs: readonly [{
      readonly name: "authorityFactory";
      readonly internalType: "contract IAuthorityFactory";
      readonly type: "address";
    }, {
      readonly name: "applicationFactory";
      readonly internalType: "contract IApplicationFactory";
      readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "authorityOwner";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "epochLength";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }, {
      readonly name: "appOwner";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "templateHash";
      readonly internalType: "bytes32";
      readonly type: "bytes32";
    }, {
      readonly name: "dataAvailability";
      readonly internalType: "bytes";
      readonly type: "bytes";
    }, {
      readonly name: "salt";
      readonly internalType: "bytes32";
      readonly type: "bytes32";
    }];
    readonly name: "calculateAddresses";
    readonly outputs: readonly [{
      readonly name: "application";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "authority";
      readonly internalType: "address";
      readonly type: "address";
    }];
    readonly stateMutability: "view";
  }, {
    readonly type: "function";
    readonly inputs: readonly [{
      readonly name: "authorityOwner";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "epochLength";
      readonly internalType: "uint256";
      readonly type: "uint256";
    }, {
      readonly name: "appOwner";
      readonly internalType: "address";
      readonly type: "address";
    }, {
      readonly name: "templateHash";
      readonly internalType: "bytes32";
      readonly type: "bytes32";
    }, {
      readonly name: "dataAvailability";
      readonly internalType: "bytes";
      readonly type: "bytes";
    }, {
      readonly name: "salt";
      readonly internalType: "bytes32";
      readonly type: "bytes32";
    }];
    readonly name: "deployContracts";
    readonly outputs: readonly [{
      readonly name: "application";
      readonly internalType: "contract IApplication";
      readonly type: "address";
    }, {
      readonly name: "authority";
      readonly internalType: "contract IAuthority";
      readonly type: "address";
    }];
    readonly stateMutability: "nonpayable";
  }, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getApplicationFactory";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "contract IApplicationFactory";
      readonly type: "address";
    }];
    readonly stateMutability: "view";
  }, {
    readonly type: "function";
    readonly inputs: readonly [];
    readonly name: "getAuthorityFactory";
    readonly outputs: readonly [{
      readonly name: "";
      readonly internalType: "contract IAuthorityFactory";
      readonly type: "address";
    }];
    readonly stateMutability: "view";
  }];
};
//# sourceMappingURL=rollups.d.ts.map
//#endregion
export { abstractConsensusAbi, applicationAbi, applicationFactoryAbi, applicationFactoryAddress, applicationFactoryConfig, authorityAbi, authorityFactoryAbi, authorityFactoryAddress, authorityFactoryConfig, create2Abi, dataAvailabilityAbi, erc1155BatchPortalAbi, erc1155BatchPortalAddress, erc1155BatchPortalConfig, erc1155HolderAbi, erc1155SinglePortalAbi, erc1155SinglePortalAddress, erc1155SinglePortalConfig, erc165Abi, erc20PortalAbi, erc20PortalAddress, erc20PortalConfig, erc721HolderAbi, erc721PortalAbi, erc721PortalAddress, erc721PortalConfig, errorsAbi, etherPortalAbi, etherPortalAddress, etherPortalConfig, iApplicationAbi, iApplicationFactoryAbi, iAuthorityAbi, iAuthorityFactoryAbi, iConsensusAbi, iEtherPortalAbi, iInputBoxAbi, iOutputsMerkleRootValidatorAbi, iOwnableAbi, iPortalAbi, iQuorumAbi, iQuorumFactoryAbi, iSelfHostedApplicationFactoryAbi, ierc1155Abi, ierc1155BatchPortalAbi, ierc1155ReceiverAbi, ierc1155SinglePortalAbi, ierc1363Abi, ierc165Abi, ierc20Abi, ierc20PortalAbi, ierc721Abi, ierc721PortalAbi, ierc721ReceiverAbi, inputBoxAbi, inputBoxAddress, inputBoxConfig, inputsAbi, outputsAbi, ownableAbi, portalAbi, quorumAbi, quorumFactoryAbi, quorumFactoryAddress, quorumFactoryConfig, reentrancyGuardAbi, safeErc20Abi, safeErc20TransferAbi, safeErc20TransferAddress, safeErc20TransferConfig, selfHostedApplicationFactoryAbi, selfHostedApplicationFactoryAddress, selfHostedApplicationFactoryConfig };
//# sourceMappingURL=rollups-j2l7rlPC.d.cts.map