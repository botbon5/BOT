{"version":3,"file":"index.js","names":["client: Client<\n            TTransport,\n            undefined,\n            undefined,\n            PublicCartesiRpcSchema\n        >","parameters: CartesiPublicClientConfig<transport>","client: Client<TTransport, TChain, TAccount>","client: Client","receipt: TransactionReceipt","receipt: TransactionReceipt"],"sources":["../src/decorators/publicL2.ts","../src/clients/createCartesiPublicClient.ts","../src/decorators/publicL1.ts","../src/decorators/walletL1.ts","../src/utils/getInputsAdded.ts","../src/utils/getOutputsExecuted.ts"],"sourcesContent":["import type {\n    GetApplicationParams as GetApplicationParamsRpc,\n    GetApplicationReturnType as GetApplicationReturnTypeRpc,\n    GetChainIdReturnType as GetChainIdReturnTypeRpc,\n    GetEpochParams as GetEpochParamsRpc,\n    GetEpochReturnType as GetEpochReturnTypeRpc,\n    GetInputParams as GetInputParamsRpc,\n    GetInputReturnType as GetInputReturnTypeRpc,\n    GetLastAcceptedEpochIndexParams as GetLastAcceptedEpochIndexParamsRpc,\n    GetLastAcceptedEpochIndexReturnType as GetLastAcceptedEpochIndexReturnTypeRpc,\n    GetNodeVersionReturnType as GetNodeVersionReturnTypeRpc,\n    GetOutputParams as GetOutputParamsRpc,\n    GetOutputReturnType as GetOutputReturnTypeRpc,\n    GetProcessedInputCountParams as GetProcessedInputCountParamsRpc,\n    GetProcessedInputCountReturnType as GetProcessedInputCountReturnTypeRpc,\n    GetReportParams as GetReportParamsRpc,\n    GetReportReturnType as GetReportReturnTypeRpc,\n    ListApplicationsParams as ListApplicationsParamsRpc,\n    ListApplicationsReturnType as ListApplicationsReturnTypeRpc,\n    ListEpochsParams as ListEpochsParamsRpc,\n    ListEpochsReturnType as ListEpochsReturnTypeRpc,\n    ListInputsParams as ListInputsParamsRpc,\n    ListInputsReturnType as ListInputsReturnTypeRpc,\n    ListOutputsParams as ListOutputsParamsRpc,\n    ListOutputsReturnType as ListOutputsReturnTypeRpc,\n    ListReportsParams as ListReportsParamsRpc,\n    ListReportsReturnType as ListReportsReturnTypeRpc,\n} from \"@cartesi/rpc\";\nimport type { Client, Transport } from \"viem\";\n\nimport {\n    getApplication,\n    getChainId,\n    getEpoch,\n    getInput,\n    getLastAcceptedEpochIndex,\n    getNodeVersion,\n    getOutput,\n    getProcessedInputCount,\n    getReport,\n    listApplications,\n    listEpochs,\n    listInputs,\n    listOutputs,\n    listReports,\n    waitForInput,\n} from \"../actions/index.js\";\nimport type {\n    GetApplicationParams,\n    GetApplicationReturnType,\n    GetChainIdReturnType,\n    GetEpochParams,\n    GetEpochReturnType,\n    GetInputParams,\n    GetInputReturnType,\n    GetLastAcceptedEpochIndexParams,\n    GetLastAcceptedEpochIndexReturnType,\n    GetNodeVersionReturnType,\n    GetOutputParams,\n    GetOutputReturnType,\n    GetProcessedInputCountParams,\n    GetProcessedInputCountReturnType,\n    GetReportParams,\n    GetReportReturnType,\n    ListApplicationsParams,\n    ListApplicationsReturnType,\n    ListEpochsParams,\n    ListEpochsReturnType,\n    ListInputsParams,\n    ListInputsReturnType,\n    ListOutputsParams,\n    ListOutputsReturnType,\n    ListReportsParams,\n    ListReportsReturnType,\n    WaitForInputParams,\n    WaitForInputReturnType,\n} from \"../types/actions.js\";\n\nexport type PublicCartesiRpcSchema = [\n    {\n        Method: \"cartesi_listApplications\";\n        Parameters: ListApplicationsParamsRpc;\n        ReturnType: ListApplicationsReturnTypeRpc;\n    },\n    {\n        Method: \"cartesi_getApplication\";\n        Parameters: GetApplicationParamsRpc;\n        ReturnType: GetApplicationReturnTypeRpc;\n    },\n    {\n        Method: \"cartesi_listEpochs\";\n        Parameters: ListEpochsParamsRpc;\n        ReturnType: ListEpochsReturnTypeRpc;\n    },\n    {\n        Method: \"cartesi_getEpoch\";\n        Parameters: GetEpochParamsRpc;\n        ReturnType: GetEpochReturnTypeRpc;\n    },\n    {\n        Method: \"cartesi_getLastAcceptedEpochIndex\";\n        Parameters: GetLastAcceptedEpochIndexParamsRpc;\n        ReturnType: GetLastAcceptedEpochIndexReturnTypeRpc;\n    },\n    {\n        Method: \"cartesi_listInputs\";\n        Parameters: ListInputsParamsRpc;\n        ReturnType: ListInputsReturnTypeRpc;\n    },\n    {\n        Method: \"cartesi_getInput\";\n        Parameters: GetInputParamsRpc;\n        ReturnType: GetInputReturnTypeRpc;\n    },\n    {\n        Method: \"cartesi_getProcessedInputCount\";\n        Parameters: GetProcessedInputCountParamsRpc;\n        ReturnType: GetProcessedInputCountReturnTypeRpc;\n    },\n    {\n        Method: \"cartesi_listOutputs\";\n        Parameters: ListOutputsParamsRpc;\n        ReturnType: ListOutputsReturnTypeRpc;\n    },\n    {\n        Method: \"cartesi_getOutput\";\n        Parameters: GetOutputParamsRpc;\n        ReturnType: GetOutputReturnTypeRpc;\n    },\n    {\n        Method: \"cartesi_listReports\";\n        Parameters: ListReportsParamsRpc;\n        ReturnType: ListReportsReturnTypeRpc;\n    },\n    {\n        Method: \"cartesi_getReport\";\n        Parameters: GetReportParamsRpc;\n        ReturnType: GetReportReturnTypeRpc;\n    },\n    {\n        Method: \"cartesi_getChainId\";\n        ReturnType: GetChainIdReturnTypeRpc;\n    },\n    {\n        Method: \"cartesi_getNodeVersion\";\n        ReturnType: GetNodeVersionReturnTypeRpc;\n    },\n];\n\nexport type PublicActionsL2 = {\n    listApplications: (\n        params?: ListApplicationsParams,\n    ) => Promise<ListApplicationsReturnType>;\n    listEpochs: (params: ListEpochsParams) => Promise<ListEpochsReturnType>;\n    listInputs: (params: ListInputsParams) => Promise<ListInputsReturnType>;\n    listOutputs: (params: ListOutputsParams) => Promise<ListOutputsReturnType>;\n    listReports: (params: ListReportsParams) => Promise<ListReportsReturnType>;\n\n    getApplication: (\n        params: GetApplicationParams,\n    ) => Promise<GetApplicationReturnType>;\n    getChainId: () => Promise<GetChainIdReturnType>;\n    getEpoch: (params: GetEpochParams) => Promise<GetEpochReturnType>;\n    getNodeVersion: () => Promise<GetNodeVersionReturnType>;\n    getInput: (params: GetInputParams) => Promise<GetInputReturnType>;\n    getOutput: (params: GetOutputParams) => Promise<GetOutputReturnType>;\n    getReport: (params: GetReportParams) => Promise<GetReportReturnType>;\n\n    getProcessedInputCount: (\n        params: GetProcessedInputCountParams,\n    ) => Promise<GetProcessedInputCountReturnType>;\n    getLastAcceptedEpochIndex: (\n        params: GetLastAcceptedEpochIndexParams,\n    ) => Promise<GetLastAcceptedEpochIndexReturnType>;\n    waitForInput: (\n        params: WaitForInputParams,\n    ) => Promise<WaitForInputReturnType>;\n};\n\nexport const publicActionsL2 =\n    () =>\n    <TTransport extends Transport>(\n        client: Client<\n            TTransport,\n            undefined,\n            undefined,\n            PublicCartesiRpcSchema\n        >,\n    ): PublicActionsL2 => ({\n        listApplications: (params) => listApplications(client, params ?? {}),\n        getApplication: (params) => getApplication(client, params),\n        listEpochs: (params) => listEpochs(client, params),\n        getEpoch: (params) => getEpoch(client, params),\n        getChainId: () => getChainId(client),\n        getNodeVersion: () => getNodeVersion(client),\n        listInputs: (params) => listInputs(client, params),\n        getInput: (params) => getInput(client, params),\n        listOutputs: (params) => listOutputs(client, params),\n        getOutput: (params) => getOutput(client, params),\n        listReports: (params) => listReports(client, params),\n        getReport: (params) => getReport(client, params),\n        getProcessedInputCount: (params) =>\n            getProcessedInputCount(client, params),\n        getLastAcceptedEpochIndex: (params) =>\n            getLastAcceptedEpochIndex(client, params),\n        waitForInput: (params) => waitForInput(client, params),\n    });\n","import {\n    type ClientConfig,\n    type Prettify,\n    type Transport,\n    createClient,\n} from \"viem\";\nimport {\n    type PublicCartesiRpcSchema,\n    publicActionsL2,\n} from \"../decorators/publicL2.js\";\n\n// Define a simpler type that doesn't use the generic parameters for account\nexport type CartesiPublicClientConfig<transport extends Transport = Transport> =\n    Prettify<\n        ClientConfig<transport, undefined, undefined, PublicCartesiRpcSchema>\n    >;\n\nexport const createCartesiPublicClient = <\n    transport extends Transport = Transport,\n>(\n    parameters: CartesiPublicClientConfig<transport>,\n) => {\n    const client = createClient<\n        transport,\n        undefined,\n        undefined,\n        PublicCartesiRpcSchema\n    >(parameters);\n    return client.extend(publicActionsL2());\n};\n\nexport type CartesiPublicClient = ReturnType<typeof createCartesiPublicClient>;\n","import type { Account, Chain, Client, Transport } from \"viem\";\nimport {\n    type EstimateAddInputGasParameters,\n    type EstimateAddInputGasReturnType,\n    type EstimateDepositBatchERC1155TokenGasParameters,\n    type EstimateDepositBatchERC1155TokenGasReturnType,\n    type EstimateDepositERC20TokensGasParameters,\n    type EstimateDepositERC20TokensGasReturnType,\n    type EstimateDepositERC721TokenGasParameters,\n    type EstimateDepositERC721TokenGasReturnType,\n    type EstimateDepositEtherGasParameters,\n    type EstimateDepositEtherGasReturnType,\n    type EstimateDepositSingleERC1155TokenGasParameters,\n    type EstimateDepositSingleERC1155TokenGasReturnType,\n    type EstimateExecuteOutputGasParameters,\n    type EstimateExecuteOutputGasReturnType,\n    type ValidateOutputParameters,\n    type ValidateOutputReturnType,\n    estimateAddInputGas,\n    estimateDepositBatchERC1155TokenGas,\n    estimateDepositERC20TokensGas,\n    estimateDepositERC721TokenGas,\n    estimateDepositEtherGas,\n    estimateDepositSingleERC1155TokenGas,\n    estimateExecuteOutputGas,\n    validateOutput,\n} from \"../actions/index.js\";\n\nexport type PublicActionsL1<\n    TChain extends Chain | undefined = Chain | undefined,\n    TAccount extends Account | undefined = Account | undefined,\n> = {\n    estimateAddInputGas: <chainOverride extends Chain | undefined = undefined>(\n        parameters: EstimateAddInputGasParameters<\n            TChain,\n            TAccount,\n            chainOverride\n        >,\n    ) => Promise<EstimateAddInputGasReturnType>;\n\n    estimateDepositEtherGas: <\n        chainOverride extends Chain | undefined = undefined,\n    >(\n        parameters: EstimateDepositEtherGasParameters<\n            TChain,\n            TAccount,\n            chainOverride\n        >,\n    ) => Promise<EstimateDepositEtherGasReturnType>;\n\n    estimateDepositERC20TokensGas: <\n        chainOverride extends Chain | undefined = undefined,\n    >(\n        parameters: EstimateDepositERC20TokensGasParameters<\n            TChain,\n            TAccount,\n            chainOverride\n        >,\n    ) => Promise<EstimateDepositERC20TokensGasReturnType>;\n\n    estimateDepositERC721TokenGas: <\n        chainOverride extends Chain | undefined = undefined,\n    >(\n        parameters: EstimateDepositERC721TokenGasParameters<\n            TChain,\n            TAccount,\n            chainOverride\n        >,\n    ) => Promise<EstimateDepositERC721TokenGasReturnType>;\n\n    estimateDepositSingleERC1155TokenGas: <\n        chainOverride extends Chain | undefined = undefined,\n    >(\n        parameters: EstimateDepositSingleERC1155TokenGasParameters<\n            TChain,\n            TAccount,\n            chainOverride\n        >,\n    ) => Promise<EstimateDepositSingleERC1155TokenGasReturnType>;\n\n    estimateDepositBatchERC1155TokenGas: <\n        chainOverride extends Chain | undefined = undefined,\n    >(\n        parameters: EstimateDepositBatchERC1155TokenGasParameters<\n            TChain,\n            TAccount,\n            chainOverride\n        >,\n    ) => Promise<EstimateDepositBatchERC1155TokenGasReturnType>;\n\n    estimateExecuteOutputGas: <\n        chainOverride extends Chain | undefined = undefined,\n    >(\n        parameters: EstimateExecuteOutputGasParameters<\n            TChain,\n            TAccount,\n            chainOverride\n        >,\n    ) => Promise<EstimateExecuteOutputGasReturnType>;\n\n    validateOutput: <chainOverride extends Chain | undefined = undefined>(\n        parameters: ValidateOutputParameters<TChain, chainOverride>,\n    ) => Promise<ValidateOutputReturnType>;\n};\n\nexport const publicActionsL1 =\n    () =>\n    <\n        TTransport extends Transport = Transport,\n        TChain extends Chain | undefined = Chain | undefined,\n        TAccount extends Account | undefined = Account | undefined,\n    >(\n        client: Client<TTransport, TChain, TAccount>,\n    ): PublicActionsL1 => ({\n        estimateAddInputGas: (params) => estimateAddInputGas(client, params),\n        estimateDepositEtherGas: (params) =>\n            estimateDepositEtherGas(client, params),\n        estimateDepositERC20TokensGas: (params) =>\n            estimateDepositERC20TokensGas(client, params),\n        estimateDepositERC721TokenGas: (params) =>\n            estimateDepositERC721TokenGas(client, params),\n        estimateDepositSingleERC1155TokenGas: (params) =>\n            estimateDepositSingleERC1155TokenGas(client, params),\n        estimateDepositBatchERC1155TokenGas: (params) =>\n            estimateDepositBatchERC1155TokenGas(client, params),\n        estimateExecuteOutputGas: (params) =>\n            estimateExecuteOutputGas(client, params),\n        validateOutput: (params) => validateOutput(client, params),\n    });\n","import type { Account, Chain, Client } from \"viem\";\nimport {\n    type AddInputParameters,\n    type AddInputReturnType,\n    type DepositBatchERC1155TokenParameters,\n    type DepositBatchERC1155TokenReturnType,\n    type DepositERC20TokensParameters,\n    type DepositERC20TokensReturnType,\n    type DepositERC721TokenParameters,\n    type DepositERC721TokenReturnType,\n    type DepositEtherParameters,\n    type DepositEtherReturnType,\n    type DepositSingleERC1155TokenParameters,\n    type DepositSingleERC1155TokenReturnType,\n    type ExecuteOutputParameters,\n    type ExecuteOutputReturnType,\n    addInput,\n    depositBatchERC1155Token,\n    depositERC20Tokens,\n    depositERC721Token,\n    depositEther,\n    depositSingleERC1155Token,\n    executeOutput,\n} from \"../actions/index.js\";\n\nexport type WalletActionsL1<\n    chain extends Chain | undefined = Chain | undefined,\n    account extends Account | undefined = Account | undefined,\n> = {\n    addInput: <chainOverride extends Chain | undefined = undefined>(\n        parameters: AddInputParameters<chain, account, chainOverride>,\n    ) => Promise<AddInputReturnType>;\n\n    depositEther: <chainOverride extends Chain | undefined = undefined>(\n        parameters: DepositEtherParameters<chain, account, chainOverride>,\n    ) => Promise<DepositEtherReturnType>;\n\n    depositERC20Tokens: <chainOverride extends Chain | undefined = undefined>(\n        parameters: DepositERC20TokensParameters<chain, account, chainOverride>,\n    ) => Promise<DepositERC20TokensReturnType>;\n\n    depositERC721Token: <chainOverride extends Chain | undefined = undefined>(\n        parameters: DepositERC721TokenParameters<chain, account, chainOverride>,\n    ) => Promise<DepositERC721TokenReturnType>;\n\n    depositSingleERC1155Token: <\n        chainOverride extends Chain | undefined = undefined,\n    >(\n        parameters: DepositSingleERC1155TokenParameters<\n            chain,\n            account,\n            chainOverride\n        >,\n    ) => Promise<DepositSingleERC1155TokenReturnType>;\n\n    depositBatchERC1155Token: <\n        chainOverride extends Chain | undefined = undefined,\n    >(\n        parameters: DepositBatchERC1155TokenParameters<\n            chain,\n            account,\n            chainOverride\n        >,\n    ) => Promise<DepositBatchERC1155TokenReturnType>;\n\n    executeOutput: <chainOverride extends Chain | undefined = undefined>(\n        parameters: ExecuteOutputParameters<chain, account, chainOverride>,\n    ) => Promise<ExecuteOutputReturnType>;\n};\n\nexport const walletActionsL1 =\n    () =>\n    (client: Client): WalletActionsL1 => ({\n        addInput: (params) => addInput(client, params),\n        depositEther: (params) => depositEther(client, params),\n        depositERC20Tokens: (params) => depositERC20Tokens(client, params),\n        depositERC721Token: (params) => depositERC721Token(client, params),\n        depositSingleERC1155Token: (params) =>\n            depositSingleERC1155Token(client, params),\n        depositBatchERC1155Token: (params) =>\n            depositBatchERC1155Token(client, params),\n        executeOutput: (params) => executeOutput(client, params),\n    });\n","import {\n    type ContractEventArgsFromTopics,\n    type TransactionReceipt,\n    parseEventLogs,\n} from \"viem\";\nimport { inputBoxAbi } from \"../rollups.js\";\n\nexport type InputAdded = ContractEventArgsFromTopics<\n    typeof inputBoxAbi,\n    \"InputAdded\",\n    true\n>;\n\nexport const getInputsAdded = (receipt: TransactionReceipt): InputAdded[] => {\n    const logs = parseEventLogs({\n        abi: inputBoxAbi,\n        logs: receipt.logs,\n        eventName: \"InputAdded\",\n    });\n    return logs.map((log) => log.args);\n};\n","import {\n    type ContractEventArgsFromTopics,\n    type TransactionReceipt,\n    parseEventLogs,\n} from \"viem\";\nimport { iApplicationAbi } from \"../rollups.js\";\n\nexport type OutputExecuted = ContractEventArgsFromTopics<\n    typeof iApplicationAbi,\n    \"OutputExecuted\",\n    true\n>;\n\nexport const getOutputsExecuted = (\n    receipt: TransactionReceipt,\n): OutputExecuted[] => {\n    const logs = parseEventLogs({\n        abi: iApplicationAbi,\n        logs: receipt.logs,\n        eventName: \"OutputExecuted\",\n    });\n    return logs.map((log) => log.args);\n};\n"],"mappings":"41BAmLA,MAAa,EACT,IACA,AACIA,IAMmB,CACnB,iBAAkB,AAAC,GAAW,EAAiB,EAAQ,GAAU,CAAE,EAAC,CACpE,eAAgB,AAAC,GAAW,EAAe,EAAQ,EAAO,CAC1D,WAAY,AAAC,GAAW,EAAW,EAAQ,EAAO,CAClD,SAAU,AAAC,GAAW,EAAS,EAAQ,EAAO,CAC9C,WAAY,IAAM,EAAW,EAAO,CACpC,eAAgB,IAAM,EAAe,EAAO,CAC5C,WAAY,AAAC,GAAW,EAAW,EAAQ,EAAO,CAClD,SAAU,AAAC,GAAW,EAAS,EAAQ,EAAO,CAC9C,YAAa,AAAC,GAAW,EAAY,EAAQ,EAAO,CACpD,UAAW,AAAC,GAAW,EAAU,EAAQ,EAAO,CAChD,YAAa,AAAC,GAAW,EAAY,EAAQ,EAAO,CACpD,UAAW,AAAC,GAAW,EAAU,EAAQ,EAAO,CAChD,uBAAwB,AAAC,GACrB,EAAuB,EAAQ,EAAO,CAC1C,0BAA2B,AAAC,GACxB,EAA0B,EAAQ,EAAO,CAC7C,aAAc,AAAC,GAAW,EAAa,EAAQ,EAAO,AACzD,GC7LQ,EAA4B,AAGrCC,GACC,CACD,IAAM,EAAS,EAKb,EAAW,CACb,OAAO,EAAO,OAAO,GAAiB,CAAC,AAC1C,EC4EY,EACT,IACA,AAKIC,IACmB,CACnB,oBAAqB,AAAC,GAAW,EAAoB,EAAQ,EAAO,CACpE,wBAAyB,AAAC,GACtB,EAAwB,EAAQ,EAAO,CAC3C,8BAA+B,AAAC,GAC5B,EAA8B,EAAQ,EAAO,CACjD,8BAA+B,AAAC,GAC5B,EAA8B,EAAQ,EAAO,CACjD,qCAAsC,AAAC,GACnC,EAAqC,EAAQ,EAAO,CACxD,oCAAqC,AAAC,GAClC,EAAoC,EAAQ,EAAO,CACvD,yBAA0B,AAAC,GACvB,EAAyB,EAAQ,EAAO,CAC5C,eAAgB,AAAC,GAAW,EAAe,EAAQ,EAAO,AAC7D,GC1DQ,EACT,IACA,AAACC,IAAqC,CAClC,SAAU,AAAC,GAAW,EAAS,EAAQ,EAAO,CAC9C,aAAc,AAAC,GAAW,EAAa,EAAQ,EAAO,CACtD,mBAAoB,AAAC,GAAW,EAAmB,EAAQ,EAAO,CAClE,mBAAoB,AAAC,GAAW,EAAmB,EAAQ,EAAO,CAClE,0BAA2B,AAAC,GACxB,EAA0B,EAAQ,EAAO,CAC7C,yBAA0B,AAAC,GACvB,EAAyB,EAAQ,EAAO,CAC5C,cAAe,AAAC,GAAW,EAAc,EAAQ,EAAO,AAC3D,GCrEQ,EAAiB,AAACE,GAA8C,CACzE,IAAM,EAAO,EAAe,CACxB,IAAK,EACL,KAAM,EAAQ,KACd,UAAW,YACd,EAAC,CACF,OAAO,EAAK,IAAI,AAAC,GAAQ,EAAI,KAAK,AACrC,ECPY,EAAqB,AAC9BA,GACmB,CACnB,IAAM,EAAO,EAAe,CACxB,IAAK,EACL,KAAM,EAAQ,KACd,UAAW,gBACd,EAAC,CACF,OAAO,EAAK,IAAI,AAAC,GAAQ,EAAI,KAAK,AACrC"}