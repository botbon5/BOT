import { TypedJSONRPCClient } from "json-rpc-2.0";

//#region src/types.d.ts
type PaginationParams = {
  limit?: number;
  offset?: number;
  descending?: boolean;
};
type Address = `0x${string}`;
type Hash = `0x${string}`;
type Hex = `0x${string}`;
type HexNumber = `0x${string}`;
type DateTime = string;
type Pagination = {
  total_count: number;
  limit: number;
  offset: number;
};
type PaginatedReturnType<T> = {
  data: T[];
  pagination: Pagination;
};
type EpochStatus = "OPEN" | "CLOSED" | "INPUTS_PROCESSED" | "CLAIM_COMPUTED" | "CLAIM_SUBMITTED" | "CLAIM_ACCEPTED" | "CLAIM_REJECTED";
type InputStatus = "NONE" | "ACCEPTED" | "REJECTED" | "EXCEPTION" | "MACHINE_HALTED" | "OUTPUTS_LIMIT_EXCEEDED" | "CYCLE_LIMIT_EXCEEDED" | "TIME_LIMIT_EXCEEDED" | "PAYLOAD_LENGTH_LIMIT_EXCEEDED";
type GetApplicationParams = {
  application: string | Address;
};
type Application = {
  name: string;
  iapplication_address: Address;
  iconsensus_address: Address;
  iinputbox_address: Address;
  template_hash: Hash;
  epoch_length: HexNumber;
  data_availability: Hex;
  state: "ENABLED" | "DISABLED" | "INOPERABLE";
  reason?: string | null;
  iinputbox_block: HexNumber;
  last_input_check_block: HexNumber;
  last_output_check_block: HexNumber;
  processed_inputs: HexNumber;
  created_at: DateTime;
  updated_at: DateTime;
  execution_parameters: {
    snapshot_policy: "NONE" | "EACH_INPUT" | "EACH_EPOCH";
    advance_inc_cycles: HexNumber;
    advance_max_cycles: HexNumber;
    inspect_inc_cycles: HexNumber;
    inspect_max_cycles: HexNumber;
    advance_inc_deadline: HexNumber;
    advance_max_deadline: HexNumber;
    inspect_inc_deadline: HexNumber;
    inspect_max_deadline: HexNumber;
    load_deadline: HexNumber;
    store_deadline: HexNumber;
    fast_deadline: HexNumber;
    max_concurrent_inspects: number;
    created_at: DateTime;
    updated_at: DateTime;
  };
};
type GetApplicationReturnType = {
  data: Application;
};
type GetEpochParams = {
  application: string | Address;
  epoch_index: HexNumber;
};
type Epoch = {
  index: HexNumber;
  first_block: HexNumber;
  last_block: HexNumber;
  claim_hash: Hash;
  claim_transaction_hash: Hash;
  status: EpochStatus;
  virtual_index: HexNumber;
  created_at: DateTime;
  updated_at: DateTime;
};
type GetEpochReturnType = {
  data: Epoch;
};
type GetLastAcceptedEpochIndexParams = {
  application: string | Address;
};
type GetLastAcceptedEpochIndexReturnType = {
  data: HexNumber;
};
type GetInputParams = {
  application: string | Address;
  input_index: HexNumber;
};
type Input = {
  epoch_index: HexNumber;
  index: HexNumber;
  block_number: HexNumber;
  raw_data: Hex;
  decoded_data: {
    chain_id: string;
    application_contract: Address;
    sender: Address;
    block_number: HexNumber;
    block_timestamp: HexNumber;
    prev_randao: string;
    index: HexNumber;
    payload: Hex;
  };
  status: InputStatus;
  machine_hash: Hash;
  outputs_hash: Hash;
  transaction_reference: Hex;
  created_at: DateTime;
  updated_at: DateTime;
};
type GetInputReturnType = {
  data: Input;
};
type GetOutputParams = {
  application: string | Address;
  output_index: HexNumber;
};
type Notice = {
  type: "Notice";
  payload: Hex;
};
type Voucher = {
  type: "Voucher";
  destination: Address;
  value: HexNumber;
  payload: Hex;
};
type DelegateCallVoucher = {
  type: "DelegateCallVoucher";
  destination: Address;
  payload: Hex;
};
type Output = {
  epoch_index: HexNumber;
  input_index: HexNumber;
  index: HexNumber;
  raw_data: Hex;
  decoded_data: Notice | Voucher | DelegateCallVoucher;
  hash: Hash;
  output_hashes_siblings: Hash[] | null;
  execution_transaction_hash: Hash | null;
  created_at: DateTime;
  updated_at: DateTime;
};
type GetOutputReturnType = {
  data: Output;
};
type GetProcessedInputCountParams = {
  application: string | Address;
};
type GetProcessedInputCountReturnType = {
  processed_inputs: HexNumber;
};
type GetReportParams = {
  application: string | Address;
  report_index: HexNumber;
};
type Report = {
  epoch_index: HexNumber;
  input_index: HexNumber;
  index: HexNumber;
  raw_data: Hex;
  created_at: DateTime;
  updated_at: DateTime;
};
type GetReportReturnType = {
  data: Report;
};
type ListApplicationsParams = PaginationParams;
type ListApplicationsReturnType = PaginatedReturnType<Application>;
type ListEpochsParams = PaginationParams & {
  application: string | Address;
  status?: EpochStatus;
};
type ListEpochsReturnType = PaginatedReturnType<Epoch>;
type ListInputsParams = PaginationParams & {
  application: string | Address;
  epoch_index?: HexNumber;
  sender?: Address;
};
type ListInputsReturnType = PaginatedReturnType<Input>;
type ListOutputsParams = PaginationParams & {
  application: string | Address;
  epoch_index?: HexNumber;
  input_index?: HexNumber;
  output_type?: Hex;
  voucher_address?: Address;
};
type ListOutputsReturnType = PaginatedReturnType<Output>;
type ListReportsParams = PaginationParams & {
  application: string | Address;
  epoch_index?: HexNumber;
  input_index?: HexNumber;
};
type ListReportsReturnType = PaginatedReturnType<Report>;
type GetChainIdReturnType = {
  data: string;
};
type GetNodeVersionReturnType = {
  data: string;
};
//#endregion
//#region src/methods.d.ts
type Methods = {
  cartesi_listApplications(params: ListApplicationsParams): ListApplicationsReturnType;
  cartesi_getApplication(params: GetApplicationParams): GetApplicationReturnType;
  cartesi_listEpochs(params: ListEpochsParams): ListEpochsReturnType;
  cartesi_getEpoch(params: GetEpochParams): GetEpochReturnType;
  cartesi_getLastAcceptedEpochIndex(params: GetLastAcceptedEpochIndexParams): GetLastAcceptedEpochIndexReturnType;
  cartesi_listInputs(params: ListInputsParams): ListInputsReturnType;
  cartesi_getInput(params: GetInputParams): GetInputReturnType;
  cartesi_getProcessedInputCount(params: GetProcessedInputCountParams): GetProcessedInputCountReturnType;
  cartesi_listOutputs(params: ListOutputsParams): ListOutputsReturnType;
  cartesi_getOutput(params: GetOutputParams): GetOutputReturnType;
  cartesi_listReports(params: ListReportsParams): ListReportsReturnType;
  cartesi_getReport(params: GetReportParams): GetReportReturnType;
  cartesi_getChainId(): GetChainIdReturnType;
  cartesi_getNodeVersion(): GetNodeVersionReturnType;
};
//# sourceMappingURL=methods.d.ts.map
//#endregion
//#region src/index.d.ts
type ClientOptions = {
  uri: string;
  token?: string;
};
type CartesiClient = TypedJSONRPCClient<Methods>;
declare const createClient: (options: ClientOptions) => CartesiClient;
//# sourceMappingURL=index.d.ts.map

//#endregion
export { Address, Application, CartesiClient, ClientOptions, DateTime, DelegateCallVoucher, Epoch, EpochStatus, GetApplicationParams, GetApplicationReturnType, GetChainIdReturnType, GetEpochParams, GetEpochReturnType, GetInputParams, GetInputReturnType, GetLastAcceptedEpochIndexParams, GetLastAcceptedEpochIndexReturnType, GetNodeVersionReturnType, GetOutputParams, GetOutputReturnType, GetProcessedInputCountParams, GetProcessedInputCountReturnType, GetReportParams, GetReportReturnType, Hash, Hex, HexNumber, Input, InputStatus, ListApplicationsParams, ListApplicationsReturnType, ListEpochsParams, ListEpochsReturnType, ListInputsParams, ListInputsReturnType, ListOutputsParams, ListOutputsReturnType, ListReportsParams, ListReportsReturnType, Notice, Output, Pagination, PaginationParams, Report, Voucher, createClient };
//# sourceMappingURL=index.d.cts.map