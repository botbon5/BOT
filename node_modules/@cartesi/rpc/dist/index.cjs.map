{"version":3,"file":"index.cjs","names":["options: ClientOptions","JSONRPCClient","headers: HeadersInit"],"sources":["../src/index.ts"],"sourcesContent":["import { JSONRPCClient, type TypedJSONRPCClient } from \"json-rpc-2.0\";\nimport type { Methods } from \"./methods.js\";\n\nexport * from \"./types.js\";\n\nexport type ClientOptions = {\n    uri: string;\n    token?: string;\n};\n\nexport type CartesiClient = TypedJSONRPCClient<Methods>;\n\nexport const createClient = (options: ClientOptions): CartesiClient => {\n    const { uri, token } = options;\n    const client = new JSONRPCClient((jsonRPCRequest) => {\n        // setup auth headers, if token is provided\n        const headers: HeadersInit = { \"content-type\": \"application/json\" };\n        if (token) {\n            headers.authorization = `Bearer ${token}`;\n        }\n\n        fetch(uri, {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify(jsonRPCRequest),\n        }).then((response) => {\n            if (response.status === 200) {\n                return response\n                    .json()\n                    .then((jsonRPCResponse) => client.receive(jsonRPCResponse));\n            }\n            if (jsonRPCRequest.id !== undefined) {\n                return Promise.reject(new Error(response.statusText));\n            }\n        });\n    });\n    return client;\n};\n"],"mappings":"igBAYa,EAAe,AAACA,GAA0C,CACnE,GAAM,CAAE,MAAK,QAAO,CAAG,EACjB,EAAS,IAAIC,EAAAA,cAAc,AAAC,GAAmB,CAEjD,IAAMC,EAAuB,CAAE,eAAgB,kBAAoB,EAC/D,IACA,EAAQ,cAAgB,CAAC,OAAO,EAAE,GAAO,EAG7C,MAAM,EAAK,CACP,OAAQ,OACR,UACA,KAAM,KAAK,UAAU,EAAe,AACvC,EAAC,CAAC,KAAK,AAAC,GAAa,CAClB,GAAI,EAAS,SAAW,IACpB,OAAO,EACF,MAAM,CACN,KAAK,AAAC,GAAoB,EAAO,QAAQ,EAAgB,CAAC,CAEnE,GAAI,EAAe,KAAO,IAAA,GACtB,OAAO,QAAQ,OAAW,MAAM,EAAS,WAAA,CAAY,AAE5D,EAAC,AACL,GACD,OAAO,CACV"}