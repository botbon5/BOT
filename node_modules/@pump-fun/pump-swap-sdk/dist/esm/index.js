// src/sdk/pda.ts
import { PublicKey } from "@solana/web3.js";
import BN from "bn.js";
import {
  getAssociatedTokenAddressSync,
  NATIVE_MINT,
  TOKEN_2022_PROGRAM_ID
} from "@solana/spl-token";
var PUMP_AMM_PROGRAM_ID = "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA";
var PUMP_AMM_PROGRAM_ID_PUBKEY = new PublicKey(PUMP_AMM_PROGRAM_ID);
var PUMP_PROGRAM_ID = "6EF8rrecthR5Dkzon8Nwu78hRvfCKubJ14M5uBEwF6P";
var PUMP_PROGRAM_ID_PUBKEY = new PublicKey(PUMP_PROGRAM_ID);
var CANONICAL_POOL_INDEX = 0;
var PUMP_MINT = new PublicKey(
  "pumpCmXqMfrsAkQ5r49WcJnRayYRqmXz6ae8H7H9Dfn"
);
function globalConfigPda(programId = PUMP_AMM_PROGRAM_ID_PUBKEY) {
  return PublicKey.findProgramAddressSync(
    [Buffer.from("global_config")],
    programId
  );
}
function poolPda(index, owner, baseMint, quoteMint, programId = PUMP_AMM_PROGRAM_ID_PUBKEY) {
  return PublicKey.findProgramAddressSync(
    [
      Buffer.from("pool"),
      new BN(index).toArrayLike(Buffer, "le", 2),
      owner.toBuffer(),
      baseMint.toBuffer(),
      quoteMint.toBuffer()
    ],
    programId
  );
}
function lpMintPda(pool, programId = PUMP_AMM_PROGRAM_ID_PUBKEY) {
  return PublicKey.findProgramAddressSync(
    [Buffer.from("pool_lp_mint"), pool.toBuffer()],
    programId
  );
}
function lpMintAta(lpMint, owner) {
  return getAssociatedTokenAddressSync(
    lpMint,
    owner,
    true,
    TOKEN_2022_PROGRAM_ID
  );
}
function pumpPoolAuthorityPda(mint, pumpProgramId = PUMP_PROGRAM_ID_PUBKEY) {
  return PublicKey.findProgramAddressSync(
    [Buffer.from("pool-authority"), mint.toBuffer()],
    pumpProgramId
  );
}
function canonicalPumpPoolPda(mint, programId = PUMP_AMM_PROGRAM_ID_PUBKEY, pumpProgramId = PUMP_PROGRAM_ID_PUBKEY) {
  const [pumpPoolAuthority] = pumpPoolAuthorityPda(mint, pumpProgramId);
  return poolPda(
    CANONICAL_POOL_INDEX,
    pumpPoolAuthority,
    mint,
    NATIVE_MINT,
    programId
  );
}
function pumpAmmEventAuthorityPda(programId = PUMP_AMM_PROGRAM_ID_PUBKEY) {
  return PublicKey.findProgramAddressSync(
    [Buffer.from("__event_authority")],
    programId
  );
}
function globalVolumeAccumulatorPda(programId = PUMP_AMM_PROGRAM_ID_PUBKEY) {
  return PublicKey.findProgramAddressSync(
    [Buffer.from("global_volume_accumulator")],
    programId
  );
}
function userVolumeAccumulatorPda(user, programId = PUMP_AMM_PROGRAM_ID_PUBKEY) {
  return PublicKey.findProgramAddressSync(
    [Buffer.from("user_volume_accumulator"), user.toBuffer()],
    programId
  );
}

// src/sdk/pumpAmm.ts
import { TOKEN_2022_PROGRAM_ID as TOKEN_2022_PROGRAM_ID3 } from "@solana/spl-token";

// src/sdk/deposit.ts
import BN2 from "bn.js";
function depositToken0Internal(token0, slippage, token0Reserve, token1Reserve, totalLpTokens) {
  if (slippage < 0 || slippage > 100) {
    throw new Error("Slippage must be between 0 and 100 (0% to 100%)");
  }
  const token1 = token0.mul(token1Reserve).div(token0Reserve);
  const slippageFactor = new BN2((1 + slippage / 100) * 1e9);
  const maxToken0 = token0.mul(slippageFactor).div(new BN2(1e9));
  const maxToken1 = token1.mul(slippageFactor).div(new BN2(1e9));
  const lpToken = token0.mul(totalLpTokens).div(token0Reserve);
  return {
    token1,
    lpToken,
    maxToken0,
    maxToken1
  };
}
function ceilDiv(numerator, denominator) {
  return numerator.add(denominator).sub(new BN2(1)).div(denominator);
}
function depositLpToken(lpToken, slippage, baseReserve, quoteReserve, totalLpTokens) {
  if (totalLpTokens.isZero()) {
    throw new Error("Division by zero: totalLpTokens cannot be zero");
  }
  const baseAmountIn = ceilDiv(baseReserve.mul(lpToken), totalLpTokens);
  const quoteAmountIn = ceilDiv(quoteReserve.mul(lpToken), totalLpTokens);
  const slippageFactor = new BN2((1 + slippage / 100) * 1e9);
  const slippageDenominator = new BN2(1e9);
  const maxBase = baseAmountIn.mul(slippageFactor).div(slippageDenominator);
  const maxQuote = quoteAmountIn.mul(slippageFactor).div(slippageDenominator);
  return {
    maxBase,
    maxQuote
  };
}

// src/sdk/pumpAmmInternal.ts
import {
  PublicKey as PublicKey4,
  SystemProgram
} from "@solana/web3.js";
import {
  AccountLayout,
  ASSOCIATED_TOKEN_PROGRAM_ID,
  createAssociatedTokenAccountIdempotentInstruction,
  createCloseAccountInstruction,
  createSyncNativeInstruction,
  getAccount,
  getAssociatedTokenAddressSync as getAssociatedTokenAddressSync2,
  NATIVE_MINT as NATIVE_MINT2,
  TOKEN_2022_PROGRAM_ID as TOKEN_2022_PROGRAM_ID2,
  TOKEN_PROGRAM_ID
} from "@solana/spl-token";

// src/sdk/withdraw.ts
import BN3 from "bn.js";
function withdrawInternal(lpAmount, slippage, baseReserve, quoteReserve, totalLpTokens) {
  if (lpAmount.isZero() || totalLpTokens.isZero()) {
    throw new Error("LP amount or total LP tokens cannot be zero.");
  }
  const base = baseReserve.mul(lpAmount).div(totalLpTokens);
  const quote = quoteReserve.mul(lpAmount).div(totalLpTokens);
  const scaleFactor = new BN3(1e9);
  const slippageFactor = new BN3((1 - slippage / 100) * 1e9);
  const minBase = base.mul(slippageFactor).div(scaleFactor);
  const minQuote = quote.mul(slippageFactor).div(scaleFactor);
  return {
    base,
    quote,
    minBase,
    minQuote
  };
}

// src/sdk/buy.ts
import BN5 from "bn.js";

// src/sdk/util.ts
import BN4 from "bn.js";
import { AnchorProvider, Program } from "@coral-xyz/anchor";

// src/idl/pump_amm.json
var pump_amm_default = {
  address: "pAMMBay6oceH9fJKBRHGP5D4bD4sWpmSwMn52FMfXEA",
  metadata: {
    name: "pump_amm",
    version: "0.1.0",
    spec: "0.1.0",
    description: "Created with Anchor"
  },
  instructions: [
    {
      name: "admin_set_coin_creator",
      docs: [
        "Overrides the coin creator for a canonical pump pool"
      ],
      discriminator: [
        242,
        40,
        117,
        145,
        73,
        96,
        105,
        104
      ],
      accounts: [
        {
          name: "admin_set_coin_creator_authority",
          signer: true,
          relations: [
            "global_config"
          ]
        },
        {
          name: "global_config"
        },
        {
          name: "pool",
          writable: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "coin_creator",
          type: "pubkey"
        }
      ]
    },
    {
      name: "admin_update_token_incentives",
      discriminator: [
        209,
        11,
        115,
        87,
        213,
        23,
        124,
        204
      ],
      accounts: [
        {
          name: "admin",
          writable: true,
          signer: true,
          relations: [
            "global_config"
          ]
        },
        {
          name: "global_config"
        },
        {
          name: "global_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  103,
                  108,
                  111,
                  98,
                  97,
                  108,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              }
            ]
          }
        },
        {
          name: "mint"
        },
        {
          name: "global_incentive_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "global_volume_accumulator"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "token_program"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "start_time",
          type: "i64"
        },
        {
          name: "end_time",
          type: "i64"
        },
        {
          name: "seconds_in_a_day",
          type: "i64"
        },
        {
          name: "day_number",
          type: "u64"
        },
        {
          name: "token_supply_per_day",
          type: "u64"
        }
      ]
    },
    {
      name: "buy",
      discriminator: [
        102,
        6,
        61,
        18,
        1,
        218,
        235,
        234
      ],
      accounts: [
        {
          name: "pool"
        },
        {
          name: "user",
          writable: true,
          signer: true
        },
        {
          name: "global_config"
        },
        {
          name: "base_mint",
          relations: [
            "pool"
          ]
        },
        {
          name: "quote_mint",
          relations: [
            "pool"
          ]
        },
        {
          name: "user_base_token_account",
          writable: true
        },
        {
          name: "user_quote_token_account",
          writable: true
        },
        {
          name: "pool_base_token_account",
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "pool_quote_token_account",
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "protocol_fee_recipient"
        },
        {
          name: "protocol_fee_recipient_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "protocol_fee_recipient"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "base_token_program"
        },
        {
          name: "quote_token_program"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        },
        {
          name: "coin_creator_vault_ata",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "coin_creator_vault_authority"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "coin_creator_vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  99,
                  114,
                  101,
                  97,
                  116,
                  111,
                  114,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "pool.coin_creator",
                account: "Pool"
              }
            ]
          }
        },
        {
          name: "global_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  103,
                  108,
                  111,
                  98,
                  97,
                  108,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              }
            ]
          }
        },
        {
          name: "user_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  117,
                  115,
                  101,
                  114,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                kind: "account",
                path: "user"
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "base_amount_out",
          type: "u64"
        },
        {
          name: "max_quote_amount_in",
          type: "u64"
        }
      ]
    },
    {
      name: "claim_token_incentives",
      discriminator: [
        16,
        4,
        71,
        28,
        204,
        1,
        40,
        27
      ],
      accounts: [
        {
          name: "user"
        },
        {
          name: "user_ata",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "user"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "global_volume_accumulator",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  103,
                  108,
                  111,
                  98,
                  97,
                  108,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              }
            ]
          }
        },
        {
          name: "global_incentive_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "global_volume_accumulator"
              },
              {
                kind: "account",
                path: "token_program"
              },
              {
                kind: "account",
                path: "mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "user_volume_accumulator",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  117,
                  115,
                  101,
                  114,
                  95,
                  118,
                  111,
                  108,
                  117,
                  109,
                  101,
                  95,
                  97,
                  99,
                  99,
                  117,
                  109,
                  117,
                  108,
                  97,
                  116,
                  111,
                  114
                ]
              },
              {
                kind: "account",
                path: "user"
              }
            ]
          }
        },
        {
          name: "mint",
          relations: [
            "global_volume_accumulator"
          ]
        },
        {
          name: "token_program"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        },
        {
          name: "payer",
          writable: true,
          signer: true
        }
      ],
      args: []
    },
    {
      name: "collect_coin_creator_fee",
      discriminator: [
        160,
        57,
        89,
        42,
        181,
        139,
        43,
        66
      ],
      accounts: [
        {
          name: "quote_mint"
        },
        {
          name: "quote_token_program"
        },
        {
          name: "coin_creator"
        },
        {
          name: "coin_creator_vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  99,
                  114,
                  101,
                  97,
                  116,
                  111,
                  114,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "coin_creator"
              }
            ]
          }
        },
        {
          name: "coin_creator_vault_ata",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "coin_creator_vault_authority"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "coin_creator_token_account",
          writable: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "create_config",
      discriminator: [
        201,
        207,
        243,
        114,
        75,
        111,
        47,
        189
      ],
      accounts: [
        {
          name: "admin",
          writable: true,
          signer: true,
          address: "8LWu7QM2dGR1G8nKDHthckea57bkCzXyBTAKPJUBDHo8"
        },
        {
          name: "global_config",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  103,
                  108,
                  111,
                  98,
                  97,
                  108,
                  95,
                  99,
                  111,
                  110,
                  102,
                  105,
                  103
                ]
              }
            ]
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "lp_fee_basis_points",
          type: "u64"
        },
        {
          name: "protocol_fee_basis_points",
          type: "u64"
        },
        {
          name: "protocol_fee_recipients",
          type: {
            array: [
              "pubkey",
              8
            ]
          }
        },
        {
          name: "coin_creator_fee_basis_points",
          type: "u64"
        },
        {
          name: "admin_set_coin_creator_authority",
          type: "pubkey"
        }
      ]
    },
    {
      name: "create_pool",
      discriminator: [
        233,
        146,
        209,
        142,
        207,
        104,
        64,
        188
      ],
      accounts: [
        {
          name: "pool",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108
                ]
              },
              {
                kind: "arg",
                path: "index"
              },
              {
                kind: "account",
                path: "creator"
              },
              {
                kind: "account",
                path: "base_mint"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ]
          }
        },
        {
          name: "global_config"
        },
        {
          name: "creator",
          writable: true,
          signer: true
        },
        {
          name: "base_mint"
        },
        {
          name: "quote_mint"
        },
        {
          name: "lp_mint",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  112,
                  111,
                  111,
                  108,
                  95,
                  108,
                  112,
                  95,
                  109,
                  105,
                  110,
                  116
                ]
              },
              {
                kind: "account",
                path: "pool"
              }
            ]
          }
        },
        {
          name: "user_base_token_account",
          writable: true
        },
        {
          name: "user_quote_token_account",
          writable: true
        },
        {
          name: "user_pool_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "creator"
              },
              {
                kind: "account",
                path: "token_2022_program"
              },
              {
                kind: "account",
                path: "lp_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "pool_base_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "pool"
              },
              {
                kind: "account",
                path: "base_token_program"
              },
              {
                kind: "account",
                path: "base_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "pool_quote_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "pool"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "token_2022_program",
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "base_token_program"
        },
        {
          name: "quote_token_program"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "index",
          type: "u16"
        },
        {
          name: "base_amount_in",
          type: "u64"
        },
        {
          name: "quote_amount_in",
          type: "u64"
        },
        {
          name: "coin_creator",
          type: "pubkey"
        }
      ]
    },
    {
      name: "deposit",
      discriminator: [
        242,
        35,
        198,
        137,
        82,
        225,
        242,
        182
      ],
      accounts: [
        {
          name: "pool",
          writable: true
        },
        {
          name: "global_config"
        },
        {
          name: "user",
          signer: true
        },
        {
          name: "base_mint",
          relations: [
            "pool"
          ]
        },
        {
          name: "quote_mint",
          relations: [
            "pool"
          ]
        },
        {
          name: "lp_mint",
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "user_base_token_account",
          writable: true
        },
        {
          name: "user_quote_token_account",
          writable: true
        },
        {
          name: "user_pool_token_account",
          writable: true
        },
        {
          name: "pool_base_token_account",
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "pool_quote_token_account",
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_2022_program",
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "lp_token_amount_out",
          type: "u64"
        },
        {
          name: "max_base_amount_in",
          type: "u64"
        },
        {
          name: "max_quote_amount_in",
          type: "u64"
        }
      ]
    },
    {
      name: "disable",
      discriminator: [
        185,
        173,
        187,
        90,
        216,
        15,
        238,
        233
      ],
      accounts: [
        {
          name: "admin",
          signer: true,
          relations: [
            "global_config"
          ]
        },
        {
          name: "global_config",
          writable: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "disable_create_pool",
          type: "bool"
        },
        {
          name: "disable_deposit",
          type: "bool"
        },
        {
          name: "disable_withdraw",
          type: "bool"
        },
        {
          name: "disable_buy",
          type: "bool"
        },
        {
          name: "disable_sell",
          type: "bool"
        }
      ]
    },
    {
      name: "extend_account",
      discriminator: [
        234,
        102,
        194,
        203,
        150,
        72,
        62,
        229
      ],
      accounts: [
        {
          name: "account",
          writable: true
        },
        {
          name: "user",
          signer: true
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "sell",
      discriminator: [
        51,
        230,
        133,
        164,
        1,
        127,
        131,
        173
      ],
      accounts: [
        {
          name: "pool"
        },
        {
          name: "user",
          writable: true,
          signer: true
        },
        {
          name: "global_config"
        },
        {
          name: "base_mint",
          relations: [
            "pool"
          ]
        },
        {
          name: "quote_mint",
          relations: [
            "pool"
          ]
        },
        {
          name: "user_base_token_account",
          writable: true
        },
        {
          name: "user_quote_token_account",
          writable: true
        },
        {
          name: "pool_base_token_account",
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "pool_quote_token_account",
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "protocol_fee_recipient"
        },
        {
          name: "protocol_fee_recipient_token_account",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "protocol_fee_recipient"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "base_token_program"
        },
        {
          name: "quote_token_program"
        },
        {
          name: "system_program",
          address: "11111111111111111111111111111111"
        },
        {
          name: "associated_token_program",
          address: "ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        },
        {
          name: "coin_creator_vault_ata",
          writable: true,
          pda: {
            seeds: [
              {
                kind: "account",
                path: "coin_creator_vault_authority"
              },
              {
                kind: "account",
                path: "quote_token_program"
              },
              {
                kind: "account",
                path: "quote_mint"
              }
            ],
            program: {
              kind: "const",
              value: [
                140,
                151,
                37,
                143,
                78,
                36,
                137,
                241,
                187,
                61,
                16,
                41,
                20,
                142,
                13,
                131,
                11,
                90,
                19,
                153,
                218,
                255,
                16,
                132,
                4,
                142,
                123,
                216,
                219,
                233,
                248,
                89
              ]
            }
          }
        },
        {
          name: "coin_creator_vault_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  99,
                  114,
                  101,
                  97,
                  116,
                  111,
                  114,
                  95,
                  118,
                  97,
                  117,
                  108,
                  116
                ]
              },
              {
                kind: "account",
                path: "pool.coin_creator",
                account: "Pool"
              }
            ]
          }
        }
      ],
      args: [
        {
          name: "base_amount_in",
          type: "u64"
        },
        {
          name: "min_quote_amount_out",
          type: "u64"
        }
      ]
    },
    {
      name: "set_coin_creator",
      docs: [
        "Sets Pool::coin_creator from Metaplex metadata creator or BondingCurve::creator"
      ],
      discriminator: [
        210,
        149,
        128,
        45,
        188,
        58,
        78,
        175
      ],
      accounts: [
        {
          name: "pool",
          writable: true
        },
        {
          name: "metadata",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  109,
                  101,
                  116,
                  97,
                  100,
                  97,
                  116,
                  97
                ]
              },
              {
                kind: "const",
                value: [
                  11,
                  112,
                  101,
                  177,
                  227,
                  209,
                  124,
                  69,
                  56,
                  157,
                  82,
                  127,
                  107,
                  4,
                  195,
                  205,
                  88,
                  184,
                  108,
                  115,
                  26,
                  160,
                  253,
                  181,
                  73,
                  182,
                  209,
                  188,
                  3,
                  248,
                  41,
                  70
                ]
              },
              {
                kind: "account",
                path: "pool.base_mint",
                account: "Pool"
              }
            ],
            program: {
              kind: "const",
              value: [
                11,
                112,
                101,
                177,
                227,
                209,
                124,
                69,
                56,
                157,
                82,
                127,
                107,
                4,
                195,
                205,
                88,
                184,
                108,
                115,
                26,
                160,
                253,
                181,
                73,
                182,
                209,
                188,
                3,
                248,
                41,
                70
              ]
            }
          }
        },
        {
          name: "bonding_curve",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  98,
                  111,
                  110,
                  100,
                  105,
                  110,
                  103,
                  45,
                  99,
                  117,
                  114,
                  118,
                  101
                ]
              },
              {
                kind: "account",
                path: "pool.base_mint",
                account: "Pool"
              }
            ],
            program: {
              kind: "const",
              value: [
                1,
                86,
                224,
                246,
                147,
                102,
                90,
                207,
                68,
                219,
                21,
                104,
                191,
                23,
                91,
                170,
                81,
                137,
                203,
                151,
                245,
                210,
                255,
                59,
                101,
                93,
                43,
                182,
                253,
                109,
                24,
                176
              ]
            }
          }
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "update_admin",
      discriminator: [
        161,
        176,
        40,
        213,
        60,
        184,
        179,
        228
      ],
      accounts: [
        {
          name: "admin",
          signer: true,
          relations: [
            "global_config"
          ]
        },
        {
          name: "global_config",
          writable: true
        },
        {
          name: "new_admin"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: []
    },
    {
      name: "update_fee_config",
      discriminator: [
        104,
        184,
        103,
        242,
        88,
        151,
        107,
        20
      ],
      accounts: [
        {
          name: "admin",
          signer: true,
          relations: [
            "global_config"
          ]
        },
        {
          name: "global_config",
          writable: true
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "lp_fee_basis_points",
          type: "u64"
        },
        {
          name: "protocol_fee_basis_points",
          type: "u64"
        },
        {
          name: "protocol_fee_recipients",
          type: {
            array: [
              "pubkey",
              8
            ]
          }
        },
        {
          name: "coin_creator_fee_basis_points",
          type: "u64"
        },
        {
          name: "admin_set_coin_creator_authority",
          type: "pubkey"
        }
      ]
    },
    {
      name: "withdraw",
      discriminator: [
        183,
        18,
        70,
        156,
        148,
        109,
        161,
        34
      ],
      accounts: [
        {
          name: "pool",
          writable: true
        },
        {
          name: "global_config"
        },
        {
          name: "user",
          signer: true
        },
        {
          name: "base_mint",
          relations: [
            "pool"
          ]
        },
        {
          name: "quote_mint",
          relations: [
            "pool"
          ]
        },
        {
          name: "lp_mint",
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "user_base_token_account",
          writable: true
        },
        {
          name: "user_quote_token_account",
          writable: true
        },
        {
          name: "user_pool_token_account",
          writable: true
        },
        {
          name: "pool_base_token_account",
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "pool_quote_token_account",
          writable: true,
          relations: [
            "pool"
          ]
        },
        {
          name: "token_program",
          address: "TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"
        },
        {
          name: "token_2022_program",
          address: "TokenzQdBNbLqP5VEhdkAS6EPFLC1PHnBqCXEpPxuEb"
        },
        {
          name: "event_authority",
          pda: {
            seeds: [
              {
                kind: "const",
                value: [
                  95,
                  95,
                  101,
                  118,
                  101,
                  110,
                  116,
                  95,
                  97,
                  117,
                  116,
                  104,
                  111,
                  114,
                  105,
                  116,
                  121
                ]
              }
            ]
          }
        },
        {
          name: "program"
        }
      ],
      args: [
        {
          name: "lp_token_amount_in",
          type: "u64"
        },
        {
          name: "min_base_amount_out",
          type: "u64"
        },
        {
          name: "min_quote_amount_out",
          type: "u64"
        }
      ]
    }
  ],
  accounts: [
    {
      name: "BondingCurve",
      discriminator: [
        23,
        183,
        248,
        55,
        96,
        216,
        172,
        96
      ]
    },
    {
      name: "GlobalConfig",
      discriminator: [
        149,
        8,
        156,
        202,
        160,
        252,
        176,
        217
      ]
    },
    {
      name: "GlobalVolumeAccumulator",
      discriminator: [
        202,
        42,
        246,
        43,
        142,
        190,
        30,
        255
      ]
    },
    {
      name: "Pool",
      discriminator: [
        241,
        154,
        109,
        4,
        17,
        177,
        109,
        188
      ]
    },
    {
      name: "UserVolumeAccumulator",
      discriminator: [
        86,
        255,
        112,
        14,
        102,
        53,
        154,
        250
      ]
    }
  ],
  events: [
    {
      name: "AdminSetCoinCreatorEvent",
      discriminator: [
        45,
        220,
        93,
        24,
        25,
        97,
        172,
        104
      ]
    },
    {
      name: "AdminUpdateTokenIncentivesEvent",
      discriminator: [
        147,
        250,
        108,
        120,
        247,
        29,
        67,
        222
      ]
    },
    {
      name: "BuyEvent",
      discriminator: [
        103,
        244,
        82,
        31,
        44,
        245,
        119,
        119
      ]
    },
    {
      name: "ClaimTokenIncentivesEvent",
      discriminator: [
        79,
        172,
        246,
        49,
        205,
        91,
        206,
        232
      ]
    },
    {
      name: "CollectCoinCreatorFeeEvent",
      discriminator: [
        232,
        245,
        194,
        238,
        234,
        218,
        58,
        89
      ]
    },
    {
      name: "CreateConfigEvent",
      discriminator: [
        107,
        52,
        89,
        129,
        55,
        226,
        81,
        22
      ]
    },
    {
      name: "CreatePoolEvent",
      discriminator: [
        177,
        49,
        12,
        210,
        160,
        118,
        167,
        116
      ]
    },
    {
      name: "DepositEvent",
      discriminator: [
        120,
        248,
        61,
        83,
        31,
        142,
        107,
        144
      ]
    },
    {
      name: "DisableEvent",
      discriminator: [
        107,
        253,
        193,
        76,
        228,
        202,
        27,
        104
      ]
    },
    {
      name: "ExtendAccountEvent",
      discriminator: [
        97,
        97,
        215,
        144,
        93,
        146,
        22,
        124
      ]
    },
    {
      name: "SellEvent",
      discriminator: [
        62,
        47,
        55,
        10,
        165,
        3,
        220,
        42
      ]
    },
    {
      name: "SetBondingCurveCoinCreatorEvent",
      discriminator: [
        242,
        231,
        235,
        102,
        65,
        99,
        189,
        211
      ]
    },
    {
      name: "SetMetaplexCoinCreatorEvent",
      discriminator: [
        150,
        107,
        199,
        123,
        124,
        207,
        102,
        228
      ]
    },
    {
      name: "UpdateAdminEvent",
      discriminator: [
        225,
        152,
        171,
        87,
        246,
        63,
        66,
        234
      ]
    },
    {
      name: "UpdateFeeConfigEvent",
      discriminator: [
        90,
        23,
        65,
        35,
        62,
        244,
        188,
        208
      ]
    },
    {
      name: "WithdrawEvent",
      discriminator: [
        22,
        9,
        133,
        26,
        160,
        44,
        71,
        192
      ]
    }
  ],
  errors: [
    {
      code: 6e3,
      name: "FeeBasisPointsExceedsMaximum"
    },
    {
      code: 6001,
      name: "ZeroBaseAmount"
    },
    {
      code: 6002,
      name: "ZeroQuoteAmount"
    },
    {
      code: 6003,
      name: "TooLittlePoolTokenLiquidity"
    },
    {
      code: 6004,
      name: "ExceededSlippage"
    },
    {
      code: 6005,
      name: "InvalidAdmin"
    },
    {
      code: 6006,
      name: "UnsupportedBaseMint"
    },
    {
      code: 6007,
      name: "UnsupportedQuoteMint"
    },
    {
      code: 6008,
      name: "InvalidBaseMint"
    },
    {
      code: 6009,
      name: "InvalidQuoteMint"
    },
    {
      code: 6010,
      name: "InvalidLpMint"
    },
    {
      code: 6011,
      name: "AllProtocolFeeRecipientsShouldBeNonZero"
    },
    {
      code: 6012,
      name: "UnsortedNotUniqueProtocolFeeRecipients"
    },
    {
      code: 6013,
      name: "InvalidProtocolFeeRecipient"
    },
    {
      code: 6014,
      name: "InvalidPoolBaseTokenAccount"
    },
    {
      code: 6015,
      name: "InvalidPoolQuoteTokenAccount"
    },
    {
      code: 6016,
      name: "BuyMoreBaseAmountThanPoolReserves"
    },
    {
      code: 6017,
      name: "DisabledCreatePool"
    },
    {
      code: 6018,
      name: "DisabledDeposit"
    },
    {
      code: 6019,
      name: "DisabledWithdraw"
    },
    {
      code: 6020,
      name: "DisabledBuy"
    },
    {
      code: 6021,
      name: "DisabledSell"
    },
    {
      code: 6022,
      name: "SameMint"
    },
    {
      code: 6023,
      name: "Overflow"
    },
    {
      code: 6024,
      name: "Truncation"
    },
    {
      code: 6025,
      name: "DivisionByZero"
    },
    {
      code: 6026,
      name: "NewSizeLessThanCurrentSize"
    },
    {
      code: 6027,
      name: "AccountTypeNotSupported"
    },
    {
      code: 6028,
      name: "OnlyCanonicalPumpPoolsCanHaveCoinCreator"
    },
    {
      code: 6029,
      name: "InvalidAdminSetCoinCreatorAuthority"
    },
    {
      code: 6030,
      name: "StartTimeInThePast"
    },
    {
      code: 6031,
      name: "EndTimeInThePast"
    },
    {
      code: 6032,
      name: "EndTimeBeforeStartTime"
    },
    {
      code: 6033,
      name: "TimeRangeTooLarge"
    },
    {
      code: 6034,
      name: "EndTimeBeforeCurrentDay"
    },
    {
      code: 6035,
      name: "SupplyUpdateForFinishedRange"
    },
    {
      code: 6036,
      name: "DayIndexAfterEndIndex"
    },
    {
      code: 6037,
      name: "DayInActiveRange"
    },
    {
      code: 6038,
      name: "InvalidIncentiveMint"
    }
  ],
  types: [
    {
      name: "AdminSetCoinCreatorEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "admin_set_coin_creator_authority",
            type: "pubkey"
          },
          {
            name: "base_mint",
            type: "pubkey"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "old_coin_creator",
            type: "pubkey"
          },
          {
            name: "new_coin_creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "AdminUpdateTokenIncentivesEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "start_time",
            type: "i64"
          },
          {
            name: "end_time",
            type: "i64"
          },
          {
            name: "day_number",
            type: "u64"
          },
          {
            name: "token_supply_per_day",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "BondingCurve",
      type: {
        kind: "struct",
        fields: [
          {
            name: "virtual_token_reserves",
            type: "u64"
          },
          {
            name: "virtual_sol_reserves",
            type: "u64"
          },
          {
            name: "real_token_reserves",
            type: "u64"
          },
          {
            name: "real_sol_reserves",
            type: "u64"
          },
          {
            name: "token_total_supply",
            type: "u64"
          },
          {
            name: "complete",
            type: "bool"
          },
          {
            name: "creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "BuyEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "base_amount_out",
            type: "u64"
          },
          {
            name: "max_quote_amount_in",
            type: "u64"
          },
          {
            name: "user_base_token_reserves",
            type: "u64"
          },
          {
            name: "user_quote_token_reserves",
            type: "u64"
          },
          {
            name: "pool_base_token_reserves",
            type: "u64"
          },
          {
            name: "pool_quote_token_reserves",
            type: "u64"
          },
          {
            name: "quote_amount_in",
            type: "u64"
          },
          {
            name: "lp_fee_basis_points",
            type: "u64"
          },
          {
            name: "lp_fee",
            type: "u64"
          },
          {
            name: "protocol_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee",
            type: "u64"
          },
          {
            name: "quote_amount_in_with_lp_fee",
            type: "u64"
          },
          {
            name: "user_quote_amount_in",
            type: "u64"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "user_base_token_account",
            type: "pubkey"
          },
          {
            name: "user_quote_token_account",
            type: "pubkey"
          },
          {
            name: "protocol_fee_recipient",
            type: "pubkey"
          },
          {
            name: "protocol_fee_recipient_token_account",
            type: "pubkey"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          },
          {
            name: "coin_creator_fee_basis_points",
            type: "u64"
          },
          {
            name: "coin_creator_fee",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "ClaimTokenIncentivesEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "amount",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "CollectCoinCreatorFeeEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          },
          {
            name: "coin_creator_fee",
            type: "u64"
          },
          {
            name: "coin_creator_vault_ata",
            type: "pubkey"
          },
          {
            name: "coin_creator_token_account",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "CreateConfigEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "admin",
            type: "pubkey"
          },
          {
            name: "lp_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee_recipients",
            type: {
              array: [
                "pubkey",
                8
              ]
            }
          },
          {
            name: "coin_creator_fee_basis_points",
            type: "u64"
          },
          {
            name: "admin_set_coin_creator_authority",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "CreatePoolEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "index",
            type: "u16"
          },
          {
            name: "creator",
            type: "pubkey"
          },
          {
            name: "base_mint",
            type: "pubkey"
          },
          {
            name: "quote_mint",
            type: "pubkey"
          },
          {
            name: "base_mint_decimals",
            type: "u8"
          },
          {
            name: "quote_mint_decimals",
            type: "u8"
          },
          {
            name: "base_amount_in",
            type: "u64"
          },
          {
            name: "quote_amount_in",
            type: "u64"
          },
          {
            name: "pool_base_amount",
            type: "u64"
          },
          {
            name: "pool_quote_amount",
            type: "u64"
          },
          {
            name: "minimum_liquidity",
            type: "u64"
          },
          {
            name: "initial_liquidity",
            type: "u64"
          },
          {
            name: "lp_token_amount_out",
            type: "u64"
          },
          {
            name: "pool_bump",
            type: "u8"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "lp_mint",
            type: "pubkey"
          },
          {
            name: "user_base_token_account",
            type: "pubkey"
          },
          {
            name: "user_quote_token_account",
            type: "pubkey"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "DepositEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "lp_token_amount_out",
            type: "u64"
          },
          {
            name: "max_base_amount_in",
            type: "u64"
          },
          {
            name: "max_quote_amount_in",
            type: "u64"
          },
          {
            name: "user_base_token_reserves",
            type: "u64"
          },
          {
            name: "user_quote_token_reserves",
            type: "u64"
          },
          {
            name: "pool_base_token_reserves",
            type: "u64"
          },
          {
            name: "pool_quote_token_reserves",
            type: "u64"
          },
          {
            name: "base_amount_in",
            type: "u64"
          },
          {
            name: "quote_amount_in",
            type: "u64"
          },
          {
            name: "lp_mint_supply",
            type: "u64"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "user_base_token_account",
            type: "pubkey"
          },
          {
            name: "user_quote_token_account",
            type: "pubkey"
          },
          {
            name: "user_pool_token_account",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "DisableEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "admin",
            type: "pubkey"
          },
          {
            name: "disable_create_pool",
            type: "bool"
          },
          {
            name: "disable_deposit",
            type: "bool"
          },
          {
            name: "disable_withdraw",
            type: "bool"
          },
          {
            name: "disable_buy",
            type: "bool"
          },
          {
            name: "disable_sell",
            type: "bool"
          }
        ]
      }
    },
    {
      name: "ExtendAccountEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "account",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "current_size",
            type: "u64"
          },
          {
            name: "new_size",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "GlobalConfig",
      type: {
        kind: "struct",
        fields: [
          {
            name: "admin",
            docs: [
              "The admin pubkey"
            ],
            type: "pubkey"
          },
          {
            name: "lp_fee_basis_points",
            docs: [
              "The lp fee in basis points (0.01%)"
            ],
            type: "u64"
          },
          {
            name: "protocol_fee_basis_points",
            docs: [
              "The protocol fee in basis points (0.01%)"
            ],
            type: "u64"
          },
          {
            name: "disable_flags",
            docs: [
              "Flags to disable certain functionality",
              "bit 0 - Disable create pool",
              "bit 1 - Disable deposit",
              "bit 2 - Disable withdraw",
              "bit 3 - Disable buy",
              "bit 4 - Disable sell"
            ],
            type: "u8"
          },
          {
            name: "protocol_fee_recipients",
            docs: [
              "Addresses of the protocol fee recipients"
            ],
            type: {
              array: [
                "pubkey",
                8
              ]
            }
          },
          {
            name: "coin_creator_fee_basis_points",
            docs: [
              "The coin creator fee in basis points (0.01%)"
            ],
            type: "u64"
          },
          {
            name: "admin_set_coin_creator_authority",
            docs: [
              "The admin authority for setting coin creators"
            ],
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "GlobalVolumeAccumulator",
      type: {
        kind: "struct",
        fields: [
          {
            name: "start_time",
            type: "i64"
          },
          {
            name: "end_time",
            type: "i64"
          },
          {
            name: "seconds_in_a_day",
            type: "i64"
          },
          {
            name: "mint",
            type: "pubkey"
          },
          {
            name: "total_token_supply",
            type: {
              array: [
                "u64",
                30
              ]
            }
          },
          {
            name: "sol_volumes",
            type: {
              array: [
                "u64",
                30
              ]
            }
          }
        ]
      }
    },
    {
      name: "Pool",
      type: {
        kind: "struct",
        fields: [
          {
            name: "pool_bump",
            type: "u8"
          },
          {
            name: "index",
            type: "u16"
          },
          {
            name: "creator",
            type: "pubkey"
          },
          {
            name: "base_mint",
            type: "pubkey"
          },
          {
            name: "quote_mint",
            type: "pubkey"
          },
          {
            name: "lp_mint",
            type: "pubkey"
          },
          {
            name: "pool_base_token_account",
            type: "pubkey"
          },
          {
            name: "pool_quote_token_account",
            type: "pubkey"
          },
          {
            name: "lp_supply",
            docs: [
              "True circulating supply without burns and lock-ups"
            ],
            type: "u64"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "SellEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "base_amount_in",
            type: "u64"
          },
          {
            name: "min_quote_amount_out",
            type: "u64"
          },
          {
            name: "user_base_token_reserves",
            type: "u64"
          },
          {
            name: "user_quote_token_reserves",
            type: "u64"
          },
          {
            name: "pool_base_token_reserves",
            type: "u64"
          },
          {
            name: "pool_quote_token_reserves",
            type: "u64"
          },
          {
            name: "quote_amount_out",
            type: "u64"
          },
          {
            name: "lp_fee_basis_points",
            type: "u64"
          },
          {
            name: "lp_fee",
            type: "u64"
          },
          {
            name: "protocol_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee",
            type: "u64"
          },
          {
            name: "quote_amount_out_without_lp_fee",
            type: "u64"
          },
          {
            name: "user_quote_amount_out",
            type: "u64"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "user_base_token_account",
            type: "pubkey"
          },
          {
            name: "user_quote_token_account",
            type: "pubkey"
          },
          {
            name: "protocol_fee_recipient",
            type: "pubkey"
          },
          {
            name: "protocol_fee_recipient_token_account",
            type: "pubkey"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          },
          {
            name: "coin_creator_fee_basis_points",
            type: "u64"
          },
          {
            name: "coin_creator_fee",
            type: "u64"
          }
        ]
      }
    },
    {
      name: "SetBondingCurveCoinCreatorEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "base_mint",
            type: "pubkey"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "bonding_curve",
            type: "pubkey"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "SetMetaplexCoinCreatorEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "base_mint",
            type: "pubkey"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "metadata",
            type: "pubkey"
          },
          {
            name: "coin_creator",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "UpdateAdminEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "admin",
            type: "pubkey"
          },
          {
            name: "new_admin",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "UpdateFeeConfigEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "admin",
            type: "pubkey"
          },
          {
            name: "lp_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee_basis_points",
            type: "u64"
          },
          {
            name: "protocol_fee_recipients",
            type: {
              array: [
                "pubkey",
                8
              ]
            }
          },
          {
            name: "coin_creator_fee_basis_points",
            type: "u64"
          },
          {
            name: "admin_set_coin_creator_authority",
            type: "pubkey"
          }
        ]
      }
    },
    {
      name: "UserVolumeAccumulator",
      type: {
        kind: "struct",
        fields: [
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "needs_claim",
            type: "bool"
          },
          {
            name: "total_unclaimed_tokens",
            type: "u64"
          },
          {
            name: "total_claimed_tokens",
            type: "u64"
          },
          {
            name: "current_sol_volume",
            type: "u64"
          },
          {
            name: "last_update_timestamp",
            type: "i64"
          }
        ]
      }
    },
    {
      name: "WithdrawEvent",
      type: {
        kind: "struct",
        fields: [
          {
            name: "timestamp",
            type: "i64"
          },
          {
            name: "lp_token_amount_in",
            type: "u64"
          },
          {
            name: "min_base_amount_out",
            type: "u64"
          },
          {
            name: "min_quote_amount_out",
            type: "u64"
          },
          {
            name: "user_base_token_reserves",
            type: "u64"
          },
          {
            name: "user_quote_token_reserves",
            type: "u64"
          },
          {
            name: "pool_base_token_reserves",
            type: "u64"
          },
          {
            name: "pool_quote_token_reserves",
            type: "u64"
          },
          {
            name: "base_amount_out",
            type: "u64"
          },
          {
            name: "quote_amount_out",
            type: "u64"
          },
          {
            name: "lp_mint_supply",
            type: "u64"
          },
          {
            name: "pool",
            type: "pubkey"
          },
          {
            name: "user",
            type: "pubkey"
          },
          {
            name: "user_base_token_account",
            type: "pubkey"
          },
          {
            name: "user_quote_token_account",
            type: "pubkey"
          },
          {
            name: "user_pool_token_account",
            type: "pubkey"
          }
        ]
      }
    }
  ]
};

// src/sdk/util.ts
function ceilDiv2(a, b) {
  if (b.isZero()) {
    throw new Error("Cannot divide by zero.");
  }
  return a.add(b.subn(1)).div(b);
}
function fee(amount, basisPoints) {
  return ceilDiv2(amount.mul(basisPoints), new BN4(1e4));
}
function getPumpAmmProgram(connection, programId = PUMP_AMM_PROGRAM_ID) {
  const pumpAmmIdlAddressOverride = { ...pump_amm_default };
  pumpAmmIdlAddressOverride.address = programId;
  return new Program(
    pumpAmmIdlAddressOverride,
    new AnchorProvider(connection, null, {})
  );
}

// src/sdk/buy.ts
import { PublicKey as PublicKey2 } from "@solana/web3.js";
function buyBaseInputInternal(base, slippage, baseReserve, quoteReserve, globalConfig, coinCreator) {
  if (baseReserve.isZero() || quoteReserve.isZero()) {
    throw new Error(
      "Invalid input: 'baseReserve' or 'quoteReserve' cannot be zero."
    );
  }
  if (base.gt(baseReserve)) {
    throw new Error("Cannot buy more base tokens than the pool reserves.");
  }
  const numerator = quoteReserve.mul(base);
  const denominator = baseReserve.sub(base);
  if (denominator.isZero()) {
    throw new Error("Pool would be depleted; denominator is zero.");
  }
  const quoteAmountIn = ceilDiv2(numerator, denominator);
  const lpFee = fee(quoteAmountIn, globalConfig.lpFeeBasisPoints);
  const protocolFee = fee(quoteAmountIn, globalConfig.protocolFeeBasisPoints);
  const coinCreatorFee = PublicKey2.default.equals(coinCreator) ? new BN5(0) : fee(quoteAmountIn, globalConfig.coinCreatorFeeBasisPoints);
  const totalQuote = quoteAmountIn.add(lpFee).add(protocolFee).add(coinCreatorFee);
  const precision = new BN5(1e9);
  const slippageFactorFloat = (1 + slippage / 100) * 1e9;
  const slippageFactor = new BN5(Math.floor(slippageFactorFloat));
  const maxQuote = totalQuote.mul(slippageFactor).div(precision);
  return {
    internalQuoteAmount: quoteAmountIn,
    uiQuote: totalQuote,
    // Final total quote after fees
    maxQuote
  };
}
function buyQuoteInputInternal(quote, slippage, baseReserve, quoteReserve, globalConfig, coinCreator) {
  if (baseReserve.isZero() || quoteReserve.isZero()) {
    throw new Error(
      "Invalid input: 'baseReserve' or 'quoteReserve' cannot be zero."
    );
  }
  const totalFeeBps = globalConfig.lpFeeBasisPoints.add(globalConfig.protocolFeeBasisPoints).add(
    PublicKey2.default.equals(coinCreator) ? new BN5(0) : globalConfig.coinCreatorFeeBasisPoints
  );
  const denominator = new BN5(1e4).add(totalFeeBps);
  const effectiveQuote = quote.mul(new BN5(1e4)).div(denominator);
  const numerator = baseReserve.mul(effectiveQuote);
  const denominatorEffective = quoteReserve.add(effectiveQuote);
  if (denominatorEffective.isZero()) {
    throw new Error("Pool would be depleted; denominator is zero.");
  }
  const baseAmountOut = numerator.div(denominatorEffective);
  const precision = new BN5(1e9);
  const slippageFactorFloat = (1 + slippage / 100) * 1e9;
  const slippageFactor = new BN5(Math.floor(slippageFactorFloat));
  const maxQuote = quote.mul(slippageFactor).div(precision);
  return {
    base: baseAmountOut,
    // Base tokens received after fees
    internalQuoteWithoutFees: effectiveQuote,
    maxQuote
    // Maximum quote tokens to pay (with slippage)
  };
}

// src/sdk/sell.ts
import BN6 from "bn.js";
import { PublicKey as PublicKey3 } from "@solana/web3.js";
function sellBaseInputInternal(base, slippage, baseReserve, quoteReserve, globalConfig, coinCreator) {
  if (baseReserve.isZero() || quoteReserve.isZero()) {
    throw new Error(
      "Invalid input: 'baseReserve' or 'quoteReserve' cannot be zero."
    );
  }
  const quoteAmountOut = quoteReserve.mul(base).div(baseReserve.add(base));
  const lpFee = fee(quoteAmountOut, globalConfig.lpFeeBasisPoints);
  const protocolFee = fee(quoteAmountOut, globalConfig.protocolFeeBasisPoints);
  const coinCreatorFee = PublicKey3.default.equals(coinCreator) ? new BN6(0) : fee(quoteAmountOut, globalConfig.coinCreatorFeeBasisPoints);
  const finalQuote = quoteAmountOut.sub(lpFee).sub(protocolFee).sub(coinCreatorFee);
  if (finalQuote.isNeg()) {
    throw new Error("Fees exceed total output; final quote is negative.");
  }
  const precision = new BN6(1e9);
  const slippageFactorFloat = (1 - slippage / 100) * 1e9;
  const slippageFactor = new BN6(Math.floor(slippageFactorFloat));
  const minQuote = finalQuote.mul(slippageFactor).div(precision);
  return {
    uiQuote: finalQuote,
    // actual tokens user receives after fees
    minQuote,
    // minimum acceptable tokens after applying slippage
    internalQuoteAmountOut: quoteAmountOut
  };
}
var MAX_FEE_BASIS_POINTS = new BN6(1e4);
function calculateQuoteAmountOut(userQuoteAmountOut, lpFeeBasisPoints, protocolFeeBasisPoints, coinCreatorFeeBasisPoints) {
  const totalFeeBasisPoints = lpFeeBasisPoints.add(protocolFeeBasisPoints).add(coinCreatorFeeBasisPoints);
  const denominator = MAX_FEE_BASIS_POINTS.sub(totalFeeBasisPoints);
  return ceilDiv2(userQuoteAmountOut.mul(MAX_FEE_BASIS_POINTS), denominator);
}
function sellQuoteInputInternal(quote, slippage, baseReserve, quoteReserve, globalConfig, coinCreator) {
  if (baseReserve.isZero() || quoteReserve.isZero()) {
    throw new Error(
      "Invalid input: 'baseReserve' or 'quoteReserve' cannot be zero."
    );
  }
  if (quote.gt(quoteReserve)) {
    throw new Error(
      "Cannot receive more quote tokens than the pool quote reserves."
    );
  }
  const rawQuote = calculateQuoteAmountOut(
    quote,
    globalConfig.lpFeeBasisPoints,
    globalConfig.protocolFeeBasisPoints,
    PublicKey3.default.equals(coinCreator) ? new BN6(0) : globalConfig.coinCreatorFeeBasisPoints
  );
  if (rawQuote.gte(quoteReserve)) {
    throw new Error(
      "Invalid input: Desired quote amount exceeds available reserve."
    );
  }
  const baseAmountIn = ceilDiv2(
    baseReserve.mul(rawQuote),
    quoteReserve.sub(rawQuote)
  );
  const precision = new BN6(1e9);
  const slippageFactorFloat = (1 - slippage / 100) * 1e9;
  const slippageFactor = new BN6(Math.floor(slippageFactorFloat));
  const minQuote = quote.mul(slippageFactor).div(precision);
  return {
    internalRawQuote: rawQuote,
    base: baseAmountIn,
    // amount of base tokens required to get the desired quote
    minQuote
    // minimum acceptable tokens after applying slippage
  };
}

// src/sdk/pumpAmmInternal.ts
import BN7 from "bn.js";
var POOL_ACCOUNT_NEW_SIZE = 300;
var PumpAmmInternalSdk = class {
  constructor(connection, programId = PUMP_AMM_PROGRAM_ID) {
    this.connection = connection;
    this.program = getPumpAmmProgram(connection, programId);
    this.offlineProgram = getPumpAmmProgram(
      null,
      programId
    );
    this.globalConfig = globalConfigPda(this.offlineProgram.programId)[0];
  }
  programId() {
    return this.offlineProgram.programId;
  }
  globalConfigKey() {
    return this.globalConfig;
  }
  poolKey(index, creator, baseMint, quoteMint) {
    return poolPda(
      index,
      creator,
      baseMint,
      quoteMint,
      this.offlineProgram.programId
    );
  }
  lpMintKey(pool) {
    return lpMintPda(pool, this.offlineProgram.programId);
  }
  fetchGlobalConfigAccount() {
    return this.program.account.globalConfig.fetch(this.globalConfig);
  }
  fetchPool(pool) {
    return this.program.account.pool.fetch(pool);
  }
  decodeGlobalConfig(globalConfigAccountInfo) {
    return this.offlineProgram.coder.accounts.decode(
      "globalConfig",
      globalConfigAccountInfo.data
    );
  }
  decodePool(poolAccountInfo) {
    return this.offlineProgram.coder.accounts.decode(
      "pool",
      poolAccountInfo.data
    );
  }
  fetchGlobalVolumeAccumulator() {
    return this.program.account.globalVolumeAccumulator.fetch(
      globalVolumeAccumulatorPda()[0]
    );
  }
  decodeGlobalVolumeAccumulator(globalVolumeAccumulatorAccountInfo) {
    return this.offlineProgram.coder.accounts.decode(
      "globalVolumeAccumulator",
      globalVolumeAccumulatorAccountInfo.data
    );
  }
  fetchUserVolumeAccumulator(user) {
    return this.program.account.userVolumeAccumulator.fetch(
      userVolumeAccumulatorPda(user)[0]
    );
  }
  decodeUserVolumeAccumulator(userVolumeAccumulatorAccountInfo) {
    return this.offlineProgram.coder.accounts.decode(
      "userVolumeAccumulator",
      userVolumeAccumulatorAccountInfo.data
    );
  }
  async createPoolInstructionsInternal(createPoolSolanaState, baseIn, quoteIn) {
    const {
      index,
      creator,
      baseMint,
      quoteMint,
      poolKey,
      baseTokenProgram,
      quoteTokenProgram,
      userBaseTokenAccount,
      userQuoteTokenAccount,
      poolBaseTokenAccount,
      poolQuoteTokenAccount,
      userBaseAccountInfo,
      userQuoteAccountInfo,
      poolBaseAccountInfo,
      poolQuoteAccountInfo
    } = createPoolSolanaState;
    return await this.withWsolAccounts(
      creator,
      baseMint,
      userBaseTokenAccount,
      this.accountExists(userBaseAccountInfo, baseTokenProgram),
      baseIn,
      quoteMint,
      userQuoteTokenAccount,
      this.accountExists(userQuoteAccountInfo, quoteTokenProgram),
      quoteIn,
      async () => {
        const instructions = [];
        if (!this.accountExists(poolBaseAccountInfo, baseTokenProgram)) {
          instructions.push(
            createAssociatedTokenAccountIdempotentInstruction(
              creator,
              poolBaseTokenAccount,
              poolKey,
              baseMint,
              baseTokenProgram
            )
          );
        }
        if (!this.accountExists(poolQuoteAccountInfo, quoteTokenProgram)) {
          instructions.push(
            createAssociatedTokenAccountIdempotentInstruction(
              creator,
              poolQuoteTokenAccount,
              poolKey,
              quoteMint,
              quoteTokenProgram
            )
          );
        }
        instructions.push(
          await this.offlineProgram.methods.createPool(index, baseIn, quoteIn, SystemProgram.programId).accountsPartial({
            globalConfig: this.globalConfig,
            baseMint,
            quoteMint,
            creator,
            userBaseTokenAccount,
            userQuoteTokenAccount,
            baseTokenProgram,
            quoteTokenProgram
          }).instruction()
        );
        return instructions;
      }
    );
  }
  async depositInstructionsInternal(liquiditySolanaState, lpToken, maxBase, maxQuote) {
    const {
      pool,
      user,
      userPoolAccountInfo,
      userBaseTokenAccount,
      userQuoteTokenAccount,
      userPoolTokenAccount,
      userBaseAccountInfo,
      userQuoteAccountInfo,
      baseTokenProgram,
      quoteTokenProgram
    } = liquiditySolanaState;
    const { baseMint, quoteMint, lpMint } = pool;
    const liquidityAccounts = this.liquidityAccounts(liquiditySolanaState);
    return await this.withFixPoolInstructions(
      liquiditySolanaState,
      async () => {
        return await this.withWsolAccounts(
          user,
          baseMint,
          userBaseTokenAccount,
          this.accountExists(userBaseAccountInfo, baseTokenProgram),
          maxBase,
          quoteMint,
          userQuoteTokenAccount,
          this.accountExists(userQuoteAccountInfo, quoteTokenProgram),
          maxQuote,
          async () => {
            const instructions = [];
            if (!this.accountExists(userPoolAccountInfo, TOKEN_2022_PROGRAM_ID2)) {
              instructions.push(
                createAssociatedTokenAccountIdempotentInstruction(
                  user,
                  userPoolTokenAccount,
                  user,
                  lpMint,
                  TOKEN_2022_PROGRAM_ID2
                )
              );
            }
            instructions.push(
              await this.offlineProgram.methods.deposit(lpToken, maxBase, maxQuote).accounts(liquidityAccounts).instruction()
            );
            return instructions;
          }
        );
      }
    );
  }
  async withWsolAccounts(user, baseMint, userBaseAta, userBaseAtaExists, baseAmount, quoteMint, userQuoteAta, userQuoteAtaExists, quoteAmount, block) {
    return await this.withWsolAccount(
      user,
      user,
      baseMint,
      userBaseAta,
      userBaseAtaExists,
      baseAmount,
      async () => this.withWsolAccount(
        user,
        user,
        quoteMint,
        userQuoteAta,
        userQuoteAtaExists,
        quoteAmount,
        block
      )
    );
  }
  async withWsolAccount(payer, user, mint, ata, ataExists, amount, block, closeWsolAccount = true) {
    const instructions = [];
    if (mint.equals(NATIVE_MINT2)) {
      if (!ataExists) {
        instructions.push(
          createAssociatedTokenAccountIdempotentInstruction(
            payer,
            ata,
            user,
            NATIVE_MINT2
          )
        );
      }
      if (amount.gtn(0)) {
        instructions.push(
          SystemProgram.transfer({
            fromPubkey: user,
            toPubkey: ata,
            lamports: BigInt(amount.toString())
          }),
          createSyncNativeInstruction(ata)
        );
      }
    }
    const blockInstructions = await block();
    instructions.push(...blockInstructions);
    if (mint.equals(NATIVE_MINT2) && closeWsolAccount) {
      instructions.push(
        createCloseAccountInstruction(
          ata,
          user,
          user,
          void 0,
          TOKEN_PROGRAM_ID
        )
      );
    }
    return instructions;
  }
  accountExists(accountInfo, owner) {
    return accountInfo !== null && accountInfo.owner.equals(owner);
  }
  depositBaseInputInternal(liquiditySolanaState, base, slippage) {
    const { pool, poolBaseTokenAccount, poolQuoteTokenAccount } = liquiditySolanaState;
    const { token1, lpToken, maxToken0, maxToken1 } = depositToken0Internal(
      base,
      slippage,
      new BN7(poolBaseTokenAccount.amount.toString()),
      new BN7(poolQuoteTokenAccount.amount.toString()),
      pool.lpSupply
    );
    return {
      quote: token1,
      lpToken,
      maxBase: maxToken0,
      maxQuote: maxToken1
    };
  }
  depositQuoteInputInternal(liquiditySolanaState, quote, slippage) {
    const { pool, poolBaseTokenAccount, poolQuoteTokenAccount } = liquiditySolanaState;
    const { token1, lpToken, maxToken0, maxToken1 } = depositToken0Internal(
      quote,
      slippage,
      new BN7(poolQuoteTokenAccount.amount.toString()),
      new BN7(poolBaseTokenAccount.amount.toString()),
      pool.lpSupply
    );
    return {
      base: token1,
      lpToken,
      maxBase: maxToken1,
      maxQuote: maxToken0
    };
  }
  async withdrawInstructionsInternal(liquiditySolanaState, lpTokenAmountIn, minBaseAmountOut, minQuoteAmountOut) {
    const {
      pool,
      baseTokenProgram,
      quoteTokenProgram,
      user,
      userBaseAccountInfo,
      userQuoteAccountInfo,
      userBaseTokenAccount,
      userQuoteTokenAccount
    } = liquiditySolanaState;
    const { baseMint, quoteMint } = pool;
    const liquidityAccounts = this.liquidityAccounts(liquiditySolanaState);
    return await this.withFixPoolInstructions(
      liquiditySolanaState,
      async () => {
        const instructions = [];
        let baseWsolAtaCreated = false;
        if (!this.accountExists(userBaseAccountInfo, baseTokenProgram)) {
          instructions.push(
            createAssociatedTokenAccountIdempotentInstruction(
              user,
              userBaseTokenAccount,
              user,
              baseMint,
              baseTokenProgram
            )
          );
          if (baseMint.equals(NATIVE_MINT2)) {
            baseWsolAtaCreated = true;
          }
        }
        let quoteWsolAtaCreated = false;
        if (!this.accountExists(userQuoteAccountInfo, quoteTokenProgram)) {
          instructions.push(
            createAssociatedTokenAccountIdempotentInstruction(
              user,
              userQuoteTokenAccount,
              user,
              quoteMint,
              quoteTokenProgram
            )
          );
          if (quoteMint.equals(NATIVE_MINT2)) {
            quoteWsolAtaCreated = true;
          }
        }
        instructions.push(
          await this.offlineProgram.methods.withdraw(lpTokenAmountIn, minBaseAmountOut, minQuoteAmountOut).accounts(liquidityAccounts).instruction()
        );
        if (baseWsolAtaCreated) {
          instructions.push(
            createCloseAccountInstruction(
              userBaseTokenAccount,
              user,
              user,
              void 0,
              TOKEN_PROGRAM_ID
            )
          );
        }
        if (quoteWsolAtaCreated) {
          instructions.push(
            createCloseAccountInstruction(
              userQuoteTokenAccount,
              user,
              user,
              void 0,
              TOKEN_PROGRAM_ID
            )
          );
        }
        return instructions;
      }
    );
  }
  withdrawInputsInternal(liquiditySolanaState, lpAmount, slippage) {
    const { pool, poolBaseTokenAccount, poolQuoteTokenAccount } = liquiditySolanaState;
    return withdrawInternal(
      lpAmount,
      slippage,
      new BN7(poolBaseTokenAccount.amount.toString()),
      new BN7(poolQuoteTokenAccount.amount.toString()),
      pool.lpSupply
    );
  }
  liquidityAccounts(liquiditySolanaState) {
    const {
      poolKey,
      pool,
      user,
      userBaseTokenAccount,
      userQuoteTokenAccount,
      userPoolTokenAccount
    } = liquiditySolanaState;
    const {
      baseMint,
      quoteMint,
      lpMint,
      poolBaseTokenAccount,
      poolQuoteTokenAccount
    } = pool;
    let program = this.programId();
    let [eventAuthority] = pumpAmmEventAuthorityPda(program);
    return {
      pool: poolKey,
      globalConfig: this.globalConfig,
      user,
      baseMint,
      quoteMint,
      lpMint,
      userBaseTokenAccount,
      userQuoteTokenAccount,
      userPoolTokenAccount,
      poolBaseTokenAccount,
      poolQuoteTokenAccount,
      tokenProgram: TOKEN_PROGRAM_ID,
      token2022Program: TOKEN_2022_PROGRAM_ID2,
      eventAuthority,
      program
    };
  }
  async buyInstructionsInternal(swapSolanaState, baseOut, maxQuoteIn) {
    return await this.withFixPoolInstructions(swapSolanaState, async () => {
      return await this.buyInstructionsInternalNoPool(
        swapSolanaState,
        baseOut,
        maxQuoteIn
      );
    });
  }
  async createPoolSolanaState(index, creator, baseMint, quoteMint, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0) {
    const [globalConfigAccountInfo, baseMintAccountInfo, quoteMintAccountInfo] = await this.connection.getMultipleAccountsInfo([
      this.globalConfig,
      baseMint,
      quoteMint
    ]);
    if (globalConfigAccountInfo === null) {
      throw new Error("Global config account not found");
    }
    if (baseMintAccountInfo === null) {
      throw new Error(`baseMint=${baseMint.toString()} not found`);
    }
    if (quoteMintAccountInfo === null) {
      throw new Error(`quoteMint=${quoteMint.toString()} not found`);
    }
    const globalConfig = this.decodeGlobalConfig(globalConfigAccountInfo);
    const [baseTokenProgram, quoteTokenProgram] = [
      baseMintAccountInfo.owner,
      quoteMintAccountInfo.owner
    ];
    const [poolKey] = poolPda(
      index,
      creator,
      baseMint,
      quoteMint,
      this.offlineProgram.programId
    );
    const poolBaseTokenAccount = getAssociatedTokenAddressSync2(
      baseMint,
      poolKey,
      true,
      baseTokenProgram
    );
    const poolQuoteTokenAccount = getAssociatedTokenAddressSync2(
      quoteMint,
      poolKey,
      true,
      quoteTokenProgram
    );
    const [poolBaseAccountInfo, poolQuoteAccountInfo] = await this.connection.getMultipleAccountsInfo([
      poolBaseTokenAccount,
      poolQuoteTokenAccount
    ]);
    if (userBaseTokenAccount === void 0) {
      userBaseTokenAccount = getAssociatedTokenAddressSync2(
        baseMint,
        creator,
        true,
        baseTokenProgram
      );
    }
    if (userQuoteTokenAccount === void 0) {
      userQuoteTokenAccount = getAssociatedTokenAddressSync2(
        quoteMint,
        creator,
        true,
        quoteTokenProgram
      );
    }
    const [userBaseAccountInfo, userQuoteAccountInfo] = await this.connection.getMultipleAccountsInfo([
      userBaseTokenAccount,
      userQuoteTokenAccount
    ]);
    return {
      index,
      creator,
      baseMint,
      quoteMint,
      globalConfig,
      poolKey,
      poolBaseTokenAccount,
      poolQuoteTokenAccount,
      baseTokenProgram,
      quoteTokenProgram,
      userBaseTokenAccount,
      userQuoteTokenAccount,
      userBaseAccountInfo,
      userQuoteAccountInfo,
      poolBaseAccountInfo,
      poolQuoteAccountInfo
    };
  }
  async swapSolanaState(poolKey, user, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0) {
    const [globalConfigAccountInfo, poolAccountInfo] = await this.connection.getMultipleAccountsInfo([
      this.globalConfig,
      poolKey
    ]);
    if (globalConfigAccountInfo === null) {
      throw new Error("Global config account not found");
    }
    if (poolAccountInfo === null) {
      throw new Error("Pool account not found");
    }
    const globalConfig = this.decodeGlobalConfig(globalConfigAccountInfo);
    const pool = this.decodePool(poolAccountInfo);
    const { baseMint, quoteMint, poolBaseTokenAccount, poolQuoteTokenAccount } = pool;
    const [
      baseMintAccountInfo,
      quoteMintAccountInfo,
      poolBaseAccountInfo,
      poolQuoteAccountInfo
    ] = await this.connection.getMultipleAccountsInfo([
      baseMint,
      quoteMint,
      poolBaseTokenAccount,
      poolQuoteTokenAccount
    ]);
    if (baseMintAccountInfo === null) {
      throw new Error(`baseMint=${baseMint.toString()} not found`);
    }
    if (quoteMintAccountInfo === null) {
      throw new Error(`quoteMint=${quoteMint.toString()} not found`);
    }
    if (poolBaseAccountInfo === null) {
      throw new Error(
        `Pool base token account ${poolBaseTokenAccount.toString()} not found`
      );
    }
    if (poolQuoteAccountInfo === null) {
      throw new Error(
        `Pool quote token account ${poolQuoteTokenAccount.toString()} not found`
      );
    }
    const [baseTokenProgram, quoteTokenProgram] = [
      baseMintAccountInfo.owner,
      quoteMintAccountInfo.owner
    ];
    const decodedPoolBaseTokenAccount = AccountLayout.decode(
      poolBaseAccountInfo.data
    );
    const decodedPoolQuoteTokenAccount = AccountLayout.decode(
      poolQuoteAccountInfo.data
    );
    if (userBaseTokenAccount === void 0) {
      userBaseTokenAccount = getAssociatedTokenAddressSync2(
        baseMint,
        user,
        true,
        baseTokenProgram
      );
    }
    if (userQuoteTokenAccount === void 0) {
      userQuoteTokenAccount = getAssociatedTokenAddressSync2(
        quoteMint,
        user,
        true,
        quoteTokenProgram
      );
    }
    const [userBaseAccountInfo, userQuoteAccountInfo] = await this.connection.getMultipleAccountsInfo([
      userBaseTokenAccount,
      userQuoteTokenAccount
    ]);
    return {
      globalConfig,
      poolKey,
      poolAccountInfo,
      pool,
      poolBaseAmount: new BN7(decodedPoolBaseTokenAccount.amount.toString()),
      poolQuoteAmount: new BN7(decodedPoolQuoteTokenAccount.amount.toString()),
      baseTokenProgram,
      quoteTokenProgram,
      user,
      userBaseTokenAccount,
      userQuoteTokenAccount,
      userBaseAccountInfo,
      userQuoteAccountInfo
    };
  }
  async swapSolanaStateNoPool(poolKey, user, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0) {
    const [globalConfigAccountInfo, poolAccountInfo] = await this.connection.getMultipleAccountsInfo([
      this.globalConfig,
      poolKey
    ]);
    if (globalConfigAccountInfo === null) {
      throw new Error("Global config account not found");
    }
    if (poolAccountInfo === null) {
      throw new Error("Pool account not found");
    }
    const globalConfig = this.decodeGlobalConfig(globalConfigAccountInfo);
    const pool = this.decodePool(poolAccountInfo);
    const { baseMint, quoteMint, poolBaseTokenAccount, poolQuoteTokenAccount } = pool;
    const [
      baseMintAccountInfo,
      quoteMintAccountInfo,
      poolBaseAccountInfo,
      poolQuoteAccountInfo
    ] = await this.connection.getMultipleAccountsInfo([
      baseMint,
      quoteMint,
      poolBaseTokenAccount,
      poolQuoteTokenAccount
    ]);
    if (baseMintAccountInfo === null) {
      throw new Error(`baseMint=${baseMint.toString()} not found`);
    }
    if (quoteMintAccountInfo === null) {
      throw new Error(`quoteMint=${quoteMint.toString()} not found`);
    }
    if (poolBaseAccountInfo === null) {
      throw new Error(
        `Pool base token account ${poolBaseTokenAccount.toString()} not found`
      );
    }
    if (poolQuoteAccountInfo === null) {
      throw new Error(
        `Pool quote token account ${poolQuoteTokenAccount.toString()} not found`
      );
    }
    const [baseTokenProgram, quoteTokenProgram] = [
      baseMintAccountInfo.owner,
      quoteMintAccountInfo.owner
    ];
    const decodedPoolBaseTokenAccount = AccountLayout.decode(
      poolBaseAccountInfo.data
    );
    const decodedPoolQuoteTokenAccount = AccountLayout.decode(
      poolQuoteAccountInfo.data
    );
    if (userBaseTokenAccount === void 0) {
      userBaseTokenAccount = getAssociatedTokenAddressSync2(
        baseMint,
        user,
        true,
        baseTokenProgram
      );
    }
    if (userQuoteTokenAccount === void 0) {
      userQuoteTokenAccount = getAssociatedTokenAddressSync2(
        quoteMint,
        user,
        true,
        quoteTokenProgram
      );
    }
    const [userBaseAccountInfo, userQuoteAccountInfo] = await this.connection.getMultipleAccountsInfo([
      userBaseTokenAccount,
      userQuoteTokenAccount
    ]);
    return {
      globalConfig,
      poolKey,
      poolAccountInfo,
      pool,
      poolBaseAmount: new BN7(decodedPoolBaseTokenAccount.amount.toString()),
      poolQuoteAmount: new BN7(decodedPoolQuoteTokenAccount.amount.toString()),
      baseTokenProgram,
      quoteTokenProgram,
      user,
      userBaseTokenAccount,
      userQuoteTokenAccount,
      userBaseAccountInfo,
      userQuoteAccountInfo
    };
  }
  async liquiditySolanaState(poolKey, user, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0, userPoolTokenAccount = void 0) {
    const [globalConfigAccountInfo, poolAccountInfo] = await this.connection.getMultipleAccountsInfo([
      this.globalConfig,
      poolKey
    ]);
    if (globalConfigAccountInfo === null) {
      throw new Error("Global config account not found");
    }
    if (poolAccountInfo === null) {
      throw new Error("Pool account not found");
    }
    const globalConfig = this.decodeGlobalConfig(globalConfigAccountInfo);
    const pool = this.decodePool(poolAccountInfo);
    const {
      baseMint,
      quoteMint,
      lpMint,
      poolBaseTokenAccount,
      poolQuoteTokenAccount
    } = pool;
    const [
      baseMintAccountInfo,
      quoteMintAccountInfo,
      poolBaseAccountInfo,
      poolQuoteAccountInfo
    ] = await this.connection.getMultipleAccountsInfo([
      baseMint,
      quoteMint,
      poolBaseTokenAccount,
      poolQuoteTokenAccount
    ]);
    if (baseMintAccountInfo === null) {
      throw new Error(`baseMint=${baseMint.toString()} not found`);
    }
    if (quoteMintAccountInfo === null) {
      throw new Error(`quoteMint=${quoteMint.toString()} not found`);
    }
    if (poolBaseAccountInfo === null) {
      throw new Error(
        `Pool base token account ${poolBaseTokenAccount.toString()} not found`
      );
    }
    if (poolQuoteAccountInfo === null) {
      throw new Error(
        `Pool quote token account ${poolQuoteTokenAccount.toString()} not found`
      );
    }
    const [baseTokenProgram, quoteTokenProgram] = [
      baseMintAccountInfo.owner,
      quoteMintAccountInfo.owner
    ];
    const decodedPoolBaseTokenAccount = AccountLayout.decode(
      poolBaseAccountInfo.data
    );
    const decodedPoolQuoteTokenAccount = AccountLayout.decode(
      poolQuoteAccountInfo.data
    );
    if (userBaseTokenAccount === void 0) {
      userBaseTokenAccount = getAssociatedTokenAddressSync2(
        baseMint,
        user,
        true,
        baseTokenProgram
      );
    }
    if (userQuoteTokenAccount === void 0) {
      userQuoteTokenAccount = getAssociatedTokenAddressSync2(
        quoteMint,
        user,
        true,
        quoteTokenProgram
      );
    }
    if (userPoolTokenAccount === void 0) {
      userPoolTokenAccount = getAssociatedTokenAddressSync2(
        lpMint,
        user,
        true,
        TOKEN_2022_PROGRAM_ID2
      );
    }
    const [userBaseAccountInfo, userQuoteAccountInfo, userPoolAccountInfo] = await this.connection.getMultipleAccountsInfo([
      userBaseTokenAccount,
      userQuoteTokenAccount,
      userPoolTokenAccount
    ]);
    return {
      globalConfig,
      poolKey,
      poolAccountInfo,
      pool,
      poolBaseTokenAccount: decodedPoolBaseTokenAccount,
      poolQuoteTokenAccount: decodedPoolQuoteTokenAccount,
      baseTokenProgram,
      quoteTokenProgram,
      user,
      userBaseTokenAccount,
      userQuoteTokenAccount,
      userPoolTokenAccount,
      userBaseAccountInfo,
      userQuoteAccountInfo,
      userPoolAccountInfo
    };
  }
  async buyInstructionsInternalNoPool(swapSolanaState, baseOut, maxQuoteIn) {
    const { userBaseAccountInfo, userQuoteAccountInfo } = swapSolanaState;
    const swapAccounts = this.swapAccounts(swapSolanaState);
    const {
      user,
      baseMint,
      quoteMint,
      userBaseTokenAccount,
      userQuoteTokenAccount,
      baseTokenProgram,
      quoteTokenProgram
    } = swapAccounts;
    return this.withWsolAccount(
      user,
      user,
      quoteMint,
      userQuoteTokenAccount,
      this.accountExists(userQuoteAccountInfo, quoteTokenProgram),
      maxQuoteIn,
      async () => {
        const instructions = [];
        if (!this.accountExists(userBaseAccountInfo, baseTokenProgram)) {
          instructions.push(
            createAssociatedTokenAccountIdempotentInstruction(
              user,
              userBaseTokenAccount,
              user,
              baseMint,
              baseTokenProgram
            )
          );
        }
        instructions.push(
          await this.offlineProgram.methods.buy(baseOut, maxQuoteIn).accounts(swapAccounts).instruction()
        );
        if (baseMint.equals(NATIVE_MINT2)) {
          instructions.push(
            createCloseAccountInstruction(
              userBaseTokenAccount,
              user,
              user,
              void 0,
              TOKEN_PROGRAM_ID
            )
          );
        }
        return instructions;
      }
    );
  }
  async buyBaseInput(swapSolanaState, base, slippage) {
    const { pool, globalConfig, poolBaseAmount, poolQuoteAmount } = swapSolanaState;
    const { maxQuote } = buyBaseInputInternal(
      base,
      slippage,
      poolBaseAmount,
      poolQuoteAmount,
      globalConfig,
      pool.coinCreator
    );
    return this.buyInstructionsInternal(swapSolanaState, base, maxQuote);
  }
  async buyQuoteInput(swapSolanaState, quote, slippage) {
    const { globalConfig, pool, poolBaseAmount, poolQuoteAmount } = swapSolanaState;
    const { base, maxQuote } = buyQuoteInputInternal(
      quote,
      slippage,
      poolBaseAmount,
      poolQuoteAmount,
      globalConfig,
      pool.coinCreator
    );
    return this.buyInstructionsInternal(swapSolanaState, base, maxQuote);
  }
  async sellInstructionsInternal(swapSolanaState, baseAmountIn, minQuoteAmountOut) {
    return await this.withFixPoolInstructions(swapSolanaState, async () => {
      return await this.sellInstructionsInternalNoPool(
        swapSolanaState,
        baseAmountIn,
        minQuoteAmountOut
      );
    });
  }
  async withFixPoolInstructions(commonSolanaState, block) {
    const { poolAccountInfo, poolKey, user } = commonSolanaState;
    const instructions = [];
    if (poolAccountInfo === null || poolAccountInfo.data.length < POOL_ACCOUNT_NEW_SIZE) {
      instructions.push(
        await this.offlineProgram.methods.extendAccount().accountsPartial({
          account: poolKey,
          user
        }).instruction()
      );
    }
    return [...instructions, ...await block()];
  }
  async sellInstructionsInternalNoPool(swapSolanaState, baseAmountIn, minQuoteAmountOut) {
    const { userBaseAccountInfo, userQuoteAccountInfo } = swapSolanaState;
    const swapAccounts = this.swapAccounts(swapSolanaState);
    const {
      user,
      baseMint,
      quoteMint,
      userBaseTokenAccount,
      userQuoteTokenAccount,
      baseTokenProgram,
      quoteTokenProgram
    } = swapAccounts;
    return this.withWsolAccount(
      user,
      user,
      baseMint,
      userBaseTokenAccount,
      this.accountExists(userBaseAccountInfo, baseTokenProgram),
      baseAmountIn,
      async () => {
        const instructions = [];
        if (!this.accountExists(userQuoteAccountInfo, quoteTokenProgram)) {
          instructions.push(
            createAssociatedTokenAccountIdempotentInstruction(
              user,
              userQuoteTokenAccount,
              user,
              quoteMint,
              quoteTokenProgram
            )
          );
        }
        instructions.push(
          await this.offlineProgram.methods.sell(baseAmountIn, minQuoteAmountOut).accounts(swapAccounts).instruction()
        );
        if (quoteMint.equals(NATIVE_MINT2)) {
          instructions.push(
            createCloseAccountInstruction(
              userQuoteTokenAccount,
              user,
              user,
              void 0,
              TOKEN_PROGRAM_ID
            )
          );
        }
        return instructions;
      }
    );
  }
  async sellBaseInput(swapSolanaState, base, slippage) {
    const { globalConfig, pool, poolBaseAmount, poolQuoteAmount } = swapSolanaState;
    const { minQuote } = sellBaseInputInternal(
      base,
      slippage,
      poolBaseAmount,
      poolQuoteAmount,
      globalConfig,
      pool.coinCreator
    );
    return this.sellInstructionsInternal(swapSolanaState, base, minQuote);
  }
  async sellQuoteInput(swapSolanaState, quote, slippage) {
    const { globalConfig, pool, poolBaseAmount, poolQuoteAmount } = swapSolanaState;
    const { base, minQuote } = sellQuoteInputInternal(
      quote,
      slippage,
      poolBaseAmount,
      poolQuoteAmount,
      globalConfig,
      pool.coinCreator
    );
    return this.sellInstructionsInternal(swapSolanaState, base, minQuote);
  }
  async extendAccount(account, user) {
    return this.offlineProgram.methods.extendAccount().accountsPartial({
      account,
      user
    }).instruction();
  }
  async collectCoinCreatorFeeSolanaState(coinCreator, coinCreatorTokenAccount = void 0) {
    const quoteMint = NATIVE_MINT2;
    const quoteTokenProgram = TOKEN_PROGRAM_ID;
    let coinCreatorVaultAuthority = this.coinCreatorVaultAuthorityPda(coinCreator);
    let coinCreatorVaultAta = this.coinCreatorVaultAta(
      coinCreatorVaultAuthority,
      quoteMint,
      quoteTokenProgram
    );
    if (coinCreatorTokenAccount === void 0) {
      coinCreatorTokenAccount = getAssociatedTokenAddressSync2(
        quoteMint,
        coinCreator,
        true,
        quoteTokenProgram
      );
    }
    const [coinCreatorVaultAtaAccountInfo, coinCreatorTokenAccountInfo] = await this.connection.getMultipleAccountsInfo([
      coinCreatorVaultAta,
      coinCreatorTokenAccount
    ]);
    return {
      coinCreator,
      quoteMint,
      quoteTokenProgram,
      coinCreatorVaultAuthority,
      coinCreatorVaultAta,
      coinCreatorTokenAccount,
      coinCreatorVaultAtaAccountInfo,
      coinCreatorTokenAccountInfo
    };
  }
  async collectCoinCreatorFee(collectCoinCreatorFeeSolanaState) {
    const {
      coinCreator,
      quoteMint,
      quoteTokenProgram,
      coinCreatorVaultAuthority,
      coinCreatorVaultAta,
      coinCreatorTokenAccount,
      coinCreatorVaultAtaAccountInfo,
      coinCreatorTokenAccountInfo
    } = collectCoinCreatorFeeSolanaState;
    return await this.withWsolAccount(
      coinCreator,
      coinCreatorVaultAuthority,
      quoteMint,
      coinCreatorVaultAta,
      this.accountExists(coinCreatorVaultAtaAccountInfo, quoteTokenProgram),
      new BN7(0),
      async () => {
        return await this.withWsolAccount(
          coinCreator,
          coinCreator,
          quoteMint,
          coinCreatorTokenAccount,
          this.accountExists(coinCreatorTokenAccountInfo, quoteTokenProgram),
          new BN7(0),
          async () => {
            return [
              await this.offlineProgram.methods.collectCoinCreatorFee().accountsPartial({
                coinCreator,
                coinCreatorTokenAccount,
                quoteMint,
                quoteTokenProgram
              }).instruction()
            ];
          }
        );
      },
      false
    );
  }
  async getCoinCreatorVaultBalance(coinCreator) {
    const quoteMint = NATIVE_MINT2;
    const quoteTokenProgram = TOKEN_PROGRAM_ID;
    const coinCreatorVaultAuthority = this.coinCreatorVaultAuthorityPda(coinCreator);
    const coinCreatorVaultAta = this.coinCreatorVaultAta(
      coinCreatorVaultAuthority,
      quoteMint,
      quoteTokenProgram
    );
    try {
      const tokenAccount = await getAccount(
        this.connection,
        coinCreatorVaultAta,
        void 0,
        quoteTokenProgram
      );
      return new BN7(tokenAccount.amount.toString());
    } catch (e) {
      console.error(`Error fetching token account ${coinCreatorVaultAta}:`, e);
      return new BN7(0);
    }
  }
  async setCoinCreator(pool) {
    return this.offlineProgram.methods.setCoinCreator().accountsPartial({
      pool
    }).instruction();
  }
  swapAccounts(swapSolanaState) {
    const {
      globalConfig,
      poolKey,
      pool,
      baseTokenProgram,
      quoteTokenProgram,
      user,
      userBaseTokenAccount,
      userQuoteTokenAccount
    } = swapSolanaState;
    const { protocolFeeRecipients } = globalConfig;
    const protocolFeeRecipient = protocolFeeRecipients[Math.floor(Math.random() * protocolFeeRecipients.length)];
    const {
      baseMint,
      quoteMint,
      poolBaseTokenAccount,
      poolQuoteTokenAccount,
      coinCreator
    } = pool;
    const coinCreatorVaultAuthority = this.coinCreatorVaultAuthorityPda(coinCreator);
    let program = this.programId();
    let [eventAuthority] = pumpAmmEventAuthorityPda(program);
    return {
      pool: poolKey,
      globalConfig: this.globalConfig,
      user,
      baseMint,
      quoteMint,
      userBaseTokenAccount,
      userQuoteTokenAccount,
      poolBaseTokenAccount,
      poolQuoteTokenAccount,
      protocolFeeRecipient,
      protocolFeeRecipientTokenAccount: getAssociatedTokenAddressSync2(
        quoteMint,
        protocolFeeRecipient,
        true,
        quoteTokenProgram
      ),
      baseTokenProgram,
      quoteTokenProgram,
      systemProgram: SystemProgram.programId,
      associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
      eventAuthority,
      program,
      coinCreatorVaultAta: this.coinCreatorVaultAta(
        coinCreatorVaultAuthority,
        quoteMint,
        quoteTokenProgram
      ),
      coinCreatorVaultAuthority
    };
  }
  coinCreatorVaultAuthorityPda(coinCreator) {
    const [coinCreatorVaultAuthority] = PublicKey4.findProgramAddressSync(
      [Buffer.from("creator_vault"), coinCreator.toBuffer()],
      this.programId()
    );
    return coinCreatorVaultAuthority;
  }
  coinCreatorVaultAta(coinCreatorVaultAuthority, quoteMint, quoteTokenProgram) {
    return getAssociatedTokenAddressSync2(
      quoteMint,
      coinCreatorVaultAuthority,
      true,
      quoteTokenProgram
    );
  }
  async claimTokenIncentivesInternal(user, payer, mint = PUMP_MINT, tokenProgram = TOKEN_2022_PROGRAM_ID2) {
    const userPumpAta = getAssociatedTokenAddressSync2(
      mint,
      user,
      true,
      tokenProgram
    );
    return [
      createAssociatedTokenAccountIdempotentInstruction(
        payer,
        userPumpAta,
        user,
        mint,
        tokenProgram
      ),
      await this.offlineProgram.methods.claimTokenIncentives().accountsPartial({
        user,
        payer,
        mint,
        tokenProgram
      }).instruction()
    ];
  }
};

// src/sdk/pumpAmm.ts
import BN8 from "bn.js";
var PumpAmmSdk = class {
  constructor(connection, programId = PUMP_AMM_PROGRAM_ID) {
    this.pumpAmmInternalSdk = new PumpAmmInternalSdk(connection, programId);
  }
  programId() {
    return this.pumpAmmInternalSdk.programId();
  }
  globalConfigKey() {
    return this.pumpAmmInternalSdk.globalConfigKey();
  }
  poolKey(index, creator, baseMint, quoteMint) {
    return this.pumpAmmInternalSdk.poolKey(index, creator, baseMint, quoteMint);
  }
  lpMintKey(pool) {
    return this.pumpAmmInternalSdk.lpMintKey(pool);
  }
  fetchGlobalConfigAccount() {
    return this.pumpAmmInternalSdk.fetchGlobalConfigAccount();
  }
  fetchPool(pool) {
    return this.pumpAmmInternalSdk.fetchPool(pool);
  }
  decodeGlobalConfig(globalConfigAccountInfo) {
    return this.pumpAmmInternalSdk.decodeGlobalConfig(globalConfigAccountInfo);
  }
  decodePool(poolAccountInfo) {
    return this.pumpAmmInternalSdk.decodePool(poolAccountInfo);
  }
  fetchGlobalVolumeAccumulator() {
    return this.pumpAmmInternalSdk.fetchGlobalVolumeAccumulator();
  }
  decodeGlobalVolumeAccumulator(globalVolumeAccumulatorAccountInfo) {
    return this.pumpAmmInternalSdk.decodeGlobalVolumeAccumulator(
      globalVolumeAccumulatorAccountInfo
    );
  }
  fetchUserVolumeAccumulator(user) {
    return this.pumpAmmInternalSdk.fetchUserVolumeAccumulator(user);
  }
  decodeUserVolumeAccumulator(userVolumeAccumulatorAccountInfo) {
    return this.pumpAmmInternalSdk.decodeUserVolumeAccumulator(
      userVolumeAccumulatorAccountInfo
    );
  }
  async createPoolInstructions(createPoolSolanaState, baseIn, quoteIn) {
    return this.pumpAmmInternalSdk.createPoolInstructionsInternal(
      createPoolSolanaState,
      baseIn,
      quoteIn
    );
  }
  async createAutocompleteInitialPoolPrice(initialBase, initialQuote) {
    return initialQuote.div(initialBase);
  }
  async depositInstructions(liquiditySolanaState, lpToken, slippage) {
    const { pool, poolBaseTokenAccount, poolQuoteTokenAccount } = liquiditySolanaState;
    const { maxBase, maxQuote } = depositLpToken(
      lpToken,
      slippage,
      new BN8(poolBaseTokenAccount.amount.toString()),
      new BN8(poolQuoteTokenAccount.amount.toString()),
      pool.lpSupply
    );
    return this.pumpAmmInternalSdk.depositInstructionsInternal(
      liquiditySolanaState,
      lpToken,
      maxBase,
      maxQuote
    );
  }
  depositAutocompleteQuoteAndLpTokenFromBase(liquiditySolanaState, base, slippage) {
    const { quote, lpToken } = this.pumpAmmInternalSdk.depositBaseInputInternal(
      liquiditySolanaState,
      base,
      slippage
    );
    return {
      quote,
      lpToken
    };
  }
  depositAutocompleteBaseAndLpTokenFromQuote(liquiditySolanaState, quote, slippage) {
    const { base, lpToken } = this.pumpAmmInternalSdk.depositQuoteInputInternal(
      liquiditySolanaState,
      quote,
      slippage
    );
    return {
      base,
      lpToken
    };
  }
  async withdrawInstructions(liquiditySolanaState, lpToken, slippage) {
    const { minBase, minQuote } = this.pumpAmmInternalSdk.withdrawInputsInternal(
      liquiditySolanaState,
      lpToken,
      slippage
    );
    return this.pumpAmmInternalSdk.withdrawInstructionsInternal(
      liquiditySolanaState,
      lpToken,
      minBase,
      minQuote
    );
  }
  withdrawAutoCompleteBaseAndQuoteFromLpToken(liquiditySolanaState, lpAmount, slippage) {
    const { base, quote } = this.pumpAmmInternalSdk.withdrawInputsInternal(
      liquiditySolanaState,
      lpAmount,
      slippage
    );
    return {
      base,
      quote
    };
  }
  async extendAccount(account, user) {
    return this.pumpAmmInternalSdk.extendAccount(account, user);
  }
  async collectCoinCreatorFee(collectCoinCreatorFeeSolanaState) {
    return this.pumpAmmInternalSdk.collectCoinCreatorFee(
      collectCoinCreatorFeeSolanaState
    );
  }
  async getCoinCreatorVaultBalance(coinCreator) {
    return this.pumpAmmInternalSdk.getCoinCreatorVaultBalance(coinCreator);
  }
  coinCreatorVaultAuthorityPda(coinCreator) {
    return this.pumpAmmInternalSdk.coinCreatorVaultAuthorityPda(coinCreator);
  }
  coinCreatorVaultAta(coinCreatorVaultAuthority, quoteMint, quoteTokenProgram) {
    return this.pumpAmmInternalSdk.coinCreatorVaultAta(
      coinCreatorVaultAuthority,
      quoteMint,
      quoteTokenProgram
    );
  }
  async setCoinCreator(pool) {
    return this.pumpAmmInternalSdk.setCoinCreator(pool);
  }
  async createPoolSolanaState(index, creator, baseMint, quoteMint, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0) {
    return this.pumpAmmInternalSdk.createPoolSolanaState(
      index,
      creator,
      baseMint,
      quoteMint,
      userBaseTokenAccount,
      userQuoteTokenAccount
    );
  }
  async swapSolanaState(poolKey, user, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0) {
    return this.pumpAmmInternalSdk.swapSolanaState(
      poolKey,
      user,
      userBaseTokenAccount,
      userQuoteTokenAccount
    );
  }
  async liquiditySolanaState(poolKey, user, userBaseTokenAccount = void 0, userQuoteTokenAccount = void 0, userPoolTokenAccount = void 0) {
    return this.pumpAmmInternalSdk.liquiditySolanaState(
      poolKey,
      user,
      userBaseTokenAccount,
      userQuoteTokenAccount,
      userPoolTokenAccount
    );
  }
  async collectCoinCreatorFeeSolanaState(coinCreator, coinCreatorTokenAccount = void 0) {
    return this.pumpAmmInternalSdk.collectCoinCreatorFeeSolanaState(
      coinCreator,
      coinCreatorTokenAccount
    );
  }
  async claimTokenIncentives(user, payer, mint = PUMP_MINT, tokenProgram = TOKEN_2022_PROGRAM_ID3) {
    return this.pumpAmmInternalSdk.claimTokenIncentivesInternal(user, payer, mint, tokenProgram);
  }
};

// src/sdk/pumpAmmAdmin.ts
import BN9 from "bn.js";
import { TOKEN_2022_PROGRAM_ID as TOKEN_2022_PROGRAM_ID4 } from "@solana/spl-token";
var PumpAmmAdminSdk = class {
  constructor(connection, programId = PUMP_AMM_PROGRAM_ID) {
    this.program = getPumpAmmProgram(connection, programId);
    this.globalConfig = globalConfigPda(this.program.programId)[0];
  }
  programId() {
    return this.program.programId;
  }
  fetchGlobalConfigAccount() {
    return this.program.account.globalConfig.fetch(this.globalConfig);
  }
  createConfig(lpFeeBasisPoints, protocolFeeBasisPoints, protocolFeeRecipients, coinCreatorFeeBasisPoints, admin, adminSetCoinCreatorAuthority) {
    return this.program.methods.createConfig(
      lpFeeBasisPoints,
      protocolFeeBasisPoints,
      protocolFeeRecipients,
      coinCreatorFeeBasisPoints,
      adminSetCoinCreatorAuthority
    ).accountsPartial({
      admin
    }).instruction();
  }
  disable(disableCreatePool, disableDeposit, disableWithdraw, disableBuy, disableSell, admin) {
    return this.program.methods.disable(
      disableCreatePool,
      disableDeposit,
      disableWithdraw,
      disableBuy,
      disableSell
    ).accountsPartial({
      admin,
      globalConfig: this.globalConfig
    }).instruction();
  }
  updateAdmin(admin, newAdmin) {
    return this.program.methods.updateAdmin().accountsPartial({
      admin,
      newAdmin,
      globalConfig: this.globalConfig
    }).instruction();
  }
  updateFeeConfig(lpFeeBasisPoints, protocolFeeBasisPoints, protocolFeeRecipients, coinCreatorFeeBasisPoints, admin, adminSetCoinCreatorAuthority) {
    return this.program.methods.updateFeeConfig(
      lpFeeBasisPoints,
      protocolFeeBasisPoints,
      protocolFeeRecipients,
      coinCreatorFeeBasisPoints,
      adminSetCoinCreatorAuthority
    ).accountsPartial({
      admin,
      globalConfig: this.globalConfig
    }).instruction();
  }
  async adminSetCoinCreator(mint, newCoinCreator) {
    const globalConfig = await this.fetchGlobalConfigAccount();
    const [pool] = canonicalPumpPoolPda(mint);
    return this.program.methods.adminSetCoinCreator(newCoinCreator).accountsPartial({
      pool,
      adminSetCoinCreatorAuthority: globalConfig.adminSetCoinCreatorAuthority,
      globalConfig: this.globalConfig
    }).instruction();
  }
  async updateTokenIncentives(admin, startTime, endTime, dayNumber, tokenSupplyPerDay, secondsInADay = new BN9(86400), mint = PUMP_MINT, tokenProgram = TOKEN_2022_PROGRAM_ID4) {
    return this.program.methods.adminUpdateTokenIncentives(
      startTime,
      endTime,
      secondsInADay,
      dayNumber,
      tokenSupplyPerDay
    ).accountsPartial({
      admin,
      globalConfig: this.globalConfig,
      mint,
      tokenProgram
    }).instruction();
  }
};
export {
  CANONICAL_POOL_INDEX,
  PUMP_AMM_PROGRAM_ID,
  PUMP_AMM_PROGRAM_ID_PUBKEY,
  PUMP_MINT,
  PUMP_PROGRAM_ID,
  PUMP_PROGRAM_ID_PUBKEY,
  PumpAmmAdminSdk,
  PumpAmmInternalSdk,
  PumpAmmSdk,
  buyBaseInputInternal,
  buyQuoteInputInternal,
  canonicalPumpPoolPda,
  depositLpToken,
  getPumpAmmProgram,
  globalConfigPda,
  globalVolumeAccumulatorPda,
  lpMintAta,
  lpMintPda,
  poolPda,
  pumpAmmEventAuthorityPda,
  pump_amm_default as pumpAmmJson,
  pumpPoolAuthorityPda,
  sellBaseInputInternal,
  sellQuoteInputInternal,
  userVolumeAccumulatorPda,
  withdrawInternal
};
