var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {enumerable: true, configurable: true, writable: true, value}) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// lib/layoutCircuitJsonWithFlex.ts
import {RootFlexBox} from "@tscircuit/miniflex";
import Debug from "debug";
import {transformPCBElements} from "@tscircuit/circuit-json-util";
import {translate} from "transformation-matrix";
var debug = Debug("tscircuit:circuit-json-flex:layoutCircuitJsonWithFlex");
var toNumber = (v) => typeof v === "number" ? v : typeof v === "string" ? parseFloat(v) : 0;
function layoutCircuitJsonWithFlex(circuitJson, options = {}) {
  var _a, _b;
  const circuitJsonCopy = circuitJson.map((e) => __spreadValues({}, e));
  const subcircuit = circuitJsonCopy.find((e) => e.type === "pcb_board" || e.type === "pcb_group" && e.is_subcircuit);
  if (!subcircuit)
    return circuitJsonCopy;
  const subcircuitWidth = toNumber(subcircuit.width);
  const subcircuitHeight = toNumber(subcircuit.height);
  const root = new RootFlexBox(subcircuitWidth, subcircuitHeight, {
    id: subcircuit.subcircuit_id,
    justifyContent: (_a = options.justifyContent) != null ? _a : "center",
    alignItems: (_b = options.alignItems) != null ? _b : "center"
  });
  const pcbComponents = circuitJsonCopy.filter((e) => e.type === "pcb_component");
  for (const comp of pcbComponents) {
    root.addChild({
      id: comp.pcb_component_id,
      flexBasis: toNumber(comp.width),
      height: toNumber(comp.height)
    });
  }
  root.build();
  const layout = root.getLayout();
  for (const comp of pcbComponents) {
    const l = layout[comp.pcb_component_id];
    if (!l)
      continue;
    const center = {
      x: l.position.x + toNumber(comp.width) / 2 - subcircuitWidth / 2,
      y: -(l.position.y + toNumber(comp.height) / 2) + subcircuitHeight / 2
    };
    transformPCBElements(circuitJsonCopy.filter((e) => "pcb_component_id" in e && e.pcb_component_id === comp.pcb_component_id), translate(center.x, center.y));
  }
  return circuitJsonCopy;
}
export {
  layoutCircuitJsonWithFlex
};
