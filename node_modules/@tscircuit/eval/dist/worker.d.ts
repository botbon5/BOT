import { AnyCircuitElement } from 'circuit-json';
import { RootCircuitEventName } from '@tscircuit/core';
import { PlatformConfig } from '@tscircuit/props';

declare const getImportsFromCode: (code: string) => string[];

interface CircuitRunnerConfiguration {
    snippetsApiBaseUrl: string;
    cjsRegistryUrl: string;
    verbose?: boolean;
    platform?: PlatformConfig;
}
interface WebWorkerConfiguration extends CircuitRunnerConfiguration {
    evalVersion?: string;
    /**
     * @deprecated, renamed to webWorkerBlobUrl
     */
    webWorkerUrl?: URL | string;
    webWorkerBlobUrl?: URL | string;
}
type CircuitWebWorker = {
    execute: (code: string) => Promise<void>;
    executeWithFsMap: (opts: {
        entrypoint?: string;
        mainComponentPath?: string;
        fsMap: Record<string, string>;
    }) => Promise<void>;
    renderUntilSettled: () => Promise<void>;
    getCircuitJson: () => Promise<AnyCircuitElement[]>;
    on: (event: RootCircuitEventName, callback: (...args: any[]) => void) => void;
    clearEventListeners: () => void;
    version: () => Promise<string>;
    kill: () => Promise<void>;
};

declare global {
    interface Window {
        TSCIRCUIT_GLOBAL_CIRCUIT_WORKER: CircuitWebWorker | undefined;
    }
    var TSCIRCUIT_GLOBAL_CIRCUIT_WORKER: CircuitWebWorker | undefined;
}
declare const createCircuitWebWorker: (configuration: Partial<WebWorkerConfiguration>) => Promise<CircuitWebWorker>;

export { type CircuitWebWorker, type WebWorkerConfiguration, createCircuitWebWorker, getImportsFromCode };
