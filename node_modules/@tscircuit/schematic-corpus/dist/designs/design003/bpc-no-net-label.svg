<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="white" />
  <g>
    <circle data-type="point" data-label="schematic_component_0_center
component_center
center_schematic_component_0" data-x="0" data-y="0" cx="53.331598003659906" cy="134.25560439549457" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_0
not_connected
disconnected-0" data-x="0.6" data-y="-0.1" cx="213.31077404757815" cy="160.91880040281427" r="3" fill="rgba(0, 0, 0, 0.2)" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_1
normal
unnamedsubcircuit2829_connectivity_net0" data-x="0.6" data-y="0.1" cx="213.31077404757815" cy="107.59240838817486" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_component_1_center
component_center
center_schematic_component_1" data-x="2" data-y="-1" cx="586.5955181500541" cy="400.88756446869166" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_2
gnd
unnamedsubcircuit2829_connectivity_net1" data-x="2.000273" data-y="-1.493264" cx="586.6683086751541" cy="532.407511622237" r="3" fill="purple" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_3
normal
unnamedsubcircuit2829_connectivity_net0" data-x="1.999727" data-y="-0.506736" cx="586.5227276249541" cy="269.36761731514616" r="3" fill="blue" />
  </g>
  <g>
    <polyline data-points="0.6,0.1 1.999727,-0.506736" data-type="line" data-label="" points="213.31077404757815,107.59240838817486 586.5227276249541,269.36761731514616" fill="none" stroke="hsl(144, 100%, 50%, 0.5)" stroke-width="1" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_0" data-x="0.30000000000000004" data-y="0" x="40.00000000000006" y="94.260810384515" width="186.642372051238" height="79.98958802195915" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.0037504881250000005" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_1" data-x="2" data-y="-1" x="573.1910363001082" y="256.0359393218983" width="26.80896369989182" height="289.7032502935867" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.0037504881250000005" />
  </g>
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 266.6319600731971,
        "c": 0,
        "e": 53.331598003659906,
        "b": 0,
        "d": -266.6319600731971,
        "f": 134.25560439549457
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>