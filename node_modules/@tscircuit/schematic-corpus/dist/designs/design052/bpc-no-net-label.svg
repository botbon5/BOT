<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="white" />
  <g>
    <circle data-type="point" data-label="schematic_component_0_center
component_center
center_schematic_component_0" data-x="0" data-y="0" cx="65.60717261957589" cy="124.7821646424824" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_0
gnd
unnamedsubcircuit1726_connectivity_net1" data-x="0.6" data-y="-0.2" cx="269.0843677615336" cy="192.6078963564683" r="3" fill="purple" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_1
normal
unnamedsubcircuit1726_connectivity_net0" data-x="0.6" data-y="0" cx="269.0843677615336" cy="124.7821646424824" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_2
normal
unnamedsubcircuit1726_connectivity_net2" data-x="0.6" data-y="0.2" cx="269.0843677615336" cy="56.9564329284965" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_component_1_center
component_center
center_schematic_component_1" data-x="1.5" data-y="-0.8" cx="574.3001604744701" cy="396.085091498426" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_3
gnd
unnamedsubcircuit1726_connectivity_net1" data-x="1.499727" data-y="-1.351291" cx="574.2075783506806" cy="583.0436688101009" r="3" fill="purple" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_4
normal
unnamedsubcircuit1726_connectivity_net0" data-x="1.500273" data-y="-0.248709" cx="574.3927425982597" cy="209.126514186751" r="3" fill="blue" />
  </g>
  <g>
    <polyline data-points="0.6,-0.2 1.499727,-1.351291" data-type="line" data-label="" points="269.0843677615336,192.6078963564683 574.2075783506806,583.0436688101009" fill="none" stroke="hsl(72, 100%, 50%, 0.5)" stroke-width="1" />
  </g>
  <g>
    <polyline data-points="0.6,0 1.500273,-0.248709" data-type="line" data-label="" points="269.0843677615336,124.7821646424824 574.3927425982597,209.126514186751" fill="none" stroke="hsl(144, 100%, 50%, 0.5)" stroke-width="1" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_0" data-x="0.30000000000000004" data-y="0" x="48.65073969107942" y="40.00000000000003" width="237.39006099895067" height="169.56432928496474" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.0029487333928571438" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_1" data-x="1.5" data-y="-0.8" x="557.2510606400197" y="192.17018299685202" width="34.098199668900975" height="407.829817003148" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.0029487333928571438" />
  </g>
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 339.1286585699295,
        "c": 0,
        "e": 65.60717261957589,
        "b": 0,
        "d": -339.1286585699295,
        "f": 124.7821646424824
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>