<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="white" />
  <g>
    <circle data-type="point" data-label="schematic_component_0_center
component_center
center_schematic_component_0" data-x="0" data-y="-5" cx="207.99999999999997" cy="320" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_0
vcc
unnamedsubcircuit1922_connectivity_net0" data-x="0.6" data-y="-5.7" cx="431.99999999999994" cy="581.3333333333335" r="3" fill="orange" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_1
gnd
unnamedsubcircuit1922_connectivity_net1" data-x="0.6" data-y="-5.5" cx="431.99999999999994" cy="506.6666666666665" r="3" fill="purple" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_2
gnd
unnamedsubcircuit1922_connectivity_net1" data-x="0.6" data-y="-5.3" cx="431.99999999999994" cy="432" r="3" fill="purple" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_3
vcc
unnamedsubcircuit1922_connectivity_net2" data-x="0.6" data-y="-5.1" cx="431.99999999999994" cy="357.33333333333326" r="3" fill="orange" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_4
vcc
unnamedsubcircuit1922_connectivity_net3" data-x="0.6" data-y="-4.9" cx="431.99999999999994" cy="282.66666666666697" r="3" fill="orange" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_5
normal
unnamedsubcircuit1922_connectivity_net4" data-x="0.6" data-y="-4.7" cx="431.99999999999994" cy="208.00000000000023" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_6
vcc
unnamedsubcircuit1922_connectivity_net3" data-x="0.6" data-y="-4.5" cx="431.99999999999994" cy="133.33333333333348" r="3" fill="orange" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_7
not_connected
disconnected-0" data-x="0.6" data-y="-4.3" cx="431.99999999999994" cy="58.66666666666674" r="3" fill="rgba(0, 0, 0, 0.2)" />
  </g>
  <g>
    <polyline data-points="0.6,-5.5 0.6,-5.3" data-type="line" data-label="" points="431.99999999999994,506.6666666666665 431.99999999999994,432" fill="none" stroke="hsl(102.85714285714286, 100%, 50%, 0.5)" stroke-width="1" />
  </g>
  <g>
    <polyline data-points="0.6,-4.9 0.6,-4.5" data-type="line" data-label="" points="431.99999999999994,282.66666666666697 431.99999999999994,133.33333333333348" fill="none" stroke="hsl(205.71428571428572, 100%, 50%, 0.5)" stroke-width="1" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_0" data-x="0.30000000000000004" data-y="-5" x="189.33333333333331" y="40" width="261.33333333333337" height="560" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.0026785714285714286" />
  </g>
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 373.3333333333333,
        "c": 0,
        "e": 207.99999999999997,
        "b": 0,
        "d": -373.3333333333333,
        "f": -1546.6666666666665
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>