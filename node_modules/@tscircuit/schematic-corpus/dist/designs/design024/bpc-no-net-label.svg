<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="white" />
  <g>
    <circle data-type="point" data-label="schematic_component_0_center
component_center
center_schematic_component_0" data-x="0" data-y="-3.63" cx="231.578947368421" cy="320" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_0
normal
unnamedsubcircuit1989_connectivity_net9" data-x="0.6" data-y="-4.53" cx="408.4210526315789" cy="585.2631578947371" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_1
normal
unnamedsubcircuit1989_connectivity_net8" data-x="0.6" data-y="-4.33" cx="408.4210526315789" cy="526.3157894736844" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_2
normal
unnamedsubcircuit1989_connectivity_net7" data-x="0.6" data-y="-4.13" cx="408.4210526315789" cy="467.3684210526317" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_3
gnd
unnamedsubcircuit1989_connectivity_net6" data-x="0.6" data-y="-3.93" cx="408.4210526315789" cy="408.4210526315792" r="3" fill="purple" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_4
normal
unnamedsubcircuit1989_connectivity_net5" data-x="0.6" data-y="-3.73" cx="408.4210526315789" cy="349.47368421052647" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_5
normal
unnamedsubcircuit1989_connectivity_net4" data-x="0.6" data-y="-3.53" cx="408.4210526315789" cy="290.52631578947376" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_6
normal
unnamedsubcircuit1989_connectivity_net3" data-x="0.6" data-y="-3.33" cx="408.4210526315789" cy="231.57894736842115" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_7
normal
unnamedsubcircuit1989_connectivity_net2" data-x="0.6" data-y="-3.13" cx="408.4210526315789" cy="172.63157894736855" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_8
normal
unnamedsubcircuit1989_connectivity_net1" data-x="0.6" data-y="-2.93" cx="408.4210526315789" cy="113.68421052631595" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_9
normal
unnamedsubcircuit1989_connectivity_net0" data-x="0.6" data-y="-2.73" cx="408.4210526315789" cy="54.736842105263236" r="3" fill="blue" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_0" data-x="0.30000000000000004" data-y="-3.63" x="216.84210526315786" y="40.000000000000114" width="206.31578947368422" height="560.0000000000001" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.0033928571428571428" />
  </g>
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 294.7368421052632,
        "c": 0,
        "e": 231.578947368421,
        "b": 0,
        "d": -294.7368421052632,
        "f": -749.8947368421052
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>