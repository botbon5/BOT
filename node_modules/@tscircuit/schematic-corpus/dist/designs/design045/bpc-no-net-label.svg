<svg width="640" height="640" viewBox="0 0 640 640" xmlns="http://www.w3.org/2000/svg">
  <rect width="100%" height="100%" fill="white" />
  <g>
    <circle data-type="point" data-label="schematic_component_0_center
component_center
center_schematic_component_0" data-x="0" data-y="0" cx="183.27834297159637" cy="506.85174783663876" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_0
normal
unnamedsubcircuit1873_connectivity_net0" data-x="0.6" data-y="0.3" cx="342.96106096592985" cy="427.010388839472" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_1
normal
unnamedsubcircuit1873_connectivity_net3" data-x="0.6" data-y="0.1" cx="342.96106096592985" cy="480.2379615042498" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_2
normal
unnamedsubcircuit1873_connectivity_net4" data-x="0.6" data-y="-0.1" cx="342.96106096592985" cy="533.4655341690277" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_3
gnd
unnamedsubcircuit1873_connectivity_net2" data-x="0.6" data-y="-0.3" cx="342.96106096592985" cy="586.6931068338055" r="3" fill="purple" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_component_1_center
component_center
center_schematic_component_1" data-x="1.027177" data-y="1.152882" cx="456.6490350070389" cy="200.02619569206678" r="3" fill="gray" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_4
normal
unnamedsubcircuit1873_connectivity_net0" data-x="1.026903" data-y="0.601591" cx="456.5761132324881" cy="346.74560450175693" r="3" fill="blue" />
  </g>
  <g>
    <circle data-type="point" data-label="schematic_port_5
vcc
unnamedsubcircuit1873_connectivity_net1" data-x="1.02745" data-y="1.704173" cx="456.7216906437263" cy="53.30678688237657" r="3" fill="orange" />
  </g>
  <g>
    <polyline data-points="0.6,0.3 1.026903,0.601591" data-type="line" data-label="" points="342.96106096592985,427.010388839472 456.5761132324881,346.74560450175693" fill="none" stroke="hsl(51.42857142857143, 100%, 50%, 0.5)" stroke-width="1" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_0" data-x="0.30000000000000004" data-y="0" x="169.9714498054019" y="413.70349567327753" width="186.29650432672247" height="186.29650432672247" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.0037574510725781334" />
  </g>
  <g>
    <rect data-type="rect" data-label="schematic_component_1" data-x="1.02717662369207" data-y="1.1528819006437543" x="443.2693195199029" y="40" width="26.759230674695118" height="320.0524442690514" fill="rgba(0, 0, 0, 0.2)" stroke="black" stroke-width="0.0037574510725781334" />
  </g>
  <g id="crosshair" style="display: none">
    <line id="crosshair-h" y1="0" y2="640" stroke="#666" stroke-width="0.5" />
    <line id="crosshair-v" x1="0" x2="640" stroke="#666" stroke-width="0.5" /><text id="coordinates" font-family="monospace" font-size="12" fill="#666"></text>
  </g>
  <script>
    <![CDATA[
    document.currentScript.parentElement.addEventListener('mousemove', (e) => {
      const svg = e.currentTarget;
      const rect = svg.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      const crosshair = svg.getElementById('crosshair');
      const h = svg.getElementById('crosshair-h');
      const v = svg.getElementById('crosshair-v');
      const coords = svg.getElementById('coordinates');

      crosshair.style.display = 'block';
      h.setAttribute('x1', '0');
      h.setAttribute('x2', '640');
      h.setAttribute('y1', y);
      h.setAttribute('y2', y);
      v.setAttribute('x1', x);
      v.setAttribute('x2', x);
      v.setAttribute('y1', '0');
      v.setAttribute('y2', '640');

      // Calculate real coordinates using inverse transformation
      const matrix = {
        "a": 266.1378633238892,
        "c": 0,
        "e": 183.27834297159637,
        "b": 0,
        "d": -266.1378633238892,
        "f": 506.85174783663876
      };
      // Manually invert and apply the affine transform
      // Since we only use translate and scale, we can directly compute:
      // x' = (x - tx) / sx
      // y' = (y - ty) / sy
      const sx = matrix.a;
      const sy = matrix.d;
      const tx = matrix.e;
      const ty = matrix.f;
      const realPoint = {
        x: (x - tx) / sx,
        y: (y - ty) / sy // Flip y back since we used negative scale
      }

      coords.textContent = `(${realPoint.x.toFixed(2)}, ${realPoint.y.toFixed(2)})`;
      coords.setAttribute('x', (x + 5).toString());
      coords.setAttribute('y', (y - 5).toString());
    });
    document.currentScript.parentElement.addEventListener('mouseleave', () => {
      document.currentScript.parentElement.getElementById('crosshair').style.display = 'none';
    });
    ]]>
  </script>
</svg>