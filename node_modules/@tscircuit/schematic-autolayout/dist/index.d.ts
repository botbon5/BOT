import { AnyCircuitElement } from 'circuit-json';

type Connection = {
    from: string;
    to: string;
};
type Port = {
    port_id: string;
    /** relative x */
    rx: number;
    /** relative y */
    ry: number;
};
type Box = {
    box_id: string;
    x: number;
    y: number;
    ports: Array<Port>;
};
type Net = {
    net_id: string;
    is_power?: boolean;
    is_ground?: boolean;
};

/**
 * Build a scene with a chained builder
 *
 * scene()
 *  .addCcwBox("A", { x: 0, y: 0, leftPorts: 3, rightPorts: 2 })
 *  .addLRBox("B", { x: 0, y: 0 })
 *  .connect("A.1", "B.left")
 *  .build()
 */
declare const scene: () => SceneBuilder;
type Scene = {
    nets: Array<Net>;
    boxes: Array<Box>;
    connections: Array<Connection>;
};
declare class SceneBuilder {
    boxes: Array<Box>;
    connections: Array<Connection>;
    nets: Array<Net>;
    constructor();
    addNet(net_id: string, opts: {
        is_power?: boolean;
        is_ground?: boolean;
    }): this;
    addCcwBox(box_id: string, opts: {
        x: number;
        y: number;
        leftPorts: number;
        rightPorts: number;
    }): this;
    addLrBox(box_id: string, opts: {
        x: number;
        y: number;
    }): this;
    addTbBox(box_id: string, opts: {
        x: number;
        y: number;
    }): this;
    addTBox(box_id: string, opts: {
        x: number;
        y: number;
    }): this;
    addBBox(box_id: string, opts: {
        x: number;
        y: number;
    }): this;
    connect(from: string, to: string): this;
    build(): {
        boxes: Box[];
        connections: Connection[];
        nets: Net[];
    };
}

declare const convertSceneToSoup: (og_soup: AnyCircuitElement[], scene: Scene) => AnyCircuitElement[];
declare const mutateSoupForScene: (og_soup: AnyCircuitElement[], scene: Scene) => AnyCircuitElement[];

/**
 * Convert tscircuit soup to a scene
 */
declare const convertSoupToScene: (soup: AnyCircuitElement[]) => Scene;

type LayoutAlgorithm = (scene: Scene) => Scene;

type BoxWithAscendingIndex = Box & {
    side: "left" | "right";
    /**
     * How high from the bottom w.r.t. port connections
     */
    ascending_port_index: number;
    /**
     * How high from the bottom this box should be ordered
     */
    ascending_box_index: number;
    width: number;
};
declare const ascendingCentralLrBug1: LayoutAlgorithm;

declare const autoRotateTwoPortBoxes: (scene: Scene) => Scene;

export { type BoxWithAscendingIndex, type LayoutAlgorithm, type Scene, ascendingCentralLrBug1, autoRotateTwoPortBoxes, convertSceneToSoup, convertSoupToScene, mutateSoupForScene, scene };
