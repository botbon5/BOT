{"version":3,"sources":["../src/nearest-box.ts"],"sourcesContent":["import type { Point } from \"./common\"\n\nexport type Box = { center: Point; width: number; height: number }\nexport type BoxSet = Box[]\n\nexport type GridCell = { boxes: Box[] }\n\nexport function getBoundingBox(box: Box) {\n  const halfWidth = box.width / 2\n  const halfHeight = box.height / 2\n  return {\n    minX: box.center.x - halfWidth,\n    maxX: box.center.x + halfWidth,\n    minY: box.center.y - halfHeight,\n    maxY: box.center.y + halfHeight,\n  }\n}\n\nexport function computeDistanceBetweenBoxes(\n  boxA: Box,\n  boxB: Box,\n): { distance: number; pointA: Point; pointB: Point } {\n  const a = getBoundingBox(boxA)\n  const b = getBoundingBox(boxB)\n\n  const dx = Math.max(a.minX - b.maxX, b.minX - a.maxX, 0)\n  const dy = Math.max(a.minY - b.maxY, b.minY - a.maxY, 0)\n\n  const pointA: Point = { x: 0, y: 0 }\n  const pointB: Point = { x: 0, y: 0 }\n\n  if (dx === 0 && dy === 0) {\n    // Boxes overlap\n    return { distance: 0, pointA: boxA.center, pointB: boxB.center }\n  }\n\n  // Compute the closest points on the edges\n  pointA.x = clamp(boxA.center.x, b.minX, b.maxX)\n  pointA.y = clamp(boxA.center.y, b.minY, b.maxY)\n\n  pointB.x = clamp(boxB.center.x, a.minX, a.maxX)\n  pointB.y = clamp(boxB.center.y, a.minY, a.maxY)\n\n  const distance = Math.hypot(pointA.x - pointB.x, pointA.y - pointB.y)\n  return { distance, pointA, pointB }\n}\n\nexport function clamp(value: number, min: number, max: number): number {\n  return Math.max(min, Math.min(max, value))\n}\n\nexport function findNearestPointsBetweenBoxSets(\n  boxSetA: BoxSet,\n  boxSetB: BoxSet,\n): { pointA: Point; pointB: Point; distance: number } {\n  let minDistance = Number.POSITIVE_INFINITY\n  let nearestPointA: Point = { x: 0, y: 0 }\n  let nearestPointB: Point = { x: 0, y: 0 }\n\n  for (const boxA of boxSetA) {\n    for (const boxB of boxSetB) {\n      const { distance, pointA, pointB } = computeDistanceBetweenBoxes(\n        boxA,\n        boxB,\n      )\n      if (distance < minDistance) {\n        minDistance = distance\n        nearestPointA = pointA\n        nearestPointB = pointB\n      }\n    }\n  }\n\n  return {\n    pointA: nearestPointA,\n    pointB: nearestPointB,\n    distance: minDistance,\n  }\n}\n"],"mappings":";AAOO,SAAS,eAAe,KAAU;AACvC,QAAM,YAAY,IAAI,QAAQ;AAC9B,QAAM,aAAa,IAAI,SAAS;AAChC,SAAO;AAAA,IACL,MAAM,IAAI,OAAO,IAAI;AAAA,IACrB,MAAM,IAAI,OAAO,IAAI;AAAA,IACrB,MAAM,IAAI,OAAO,IAAI;AAAA,IACrB,MAAM,IAAI,OAAO,IAAI;AAAA,EACvB;AACF;AAEO,SAAS,4BACd,MACA,MACoD;AACpD,QAAM,IAAI,eAAe,IAAI;AAC7B,QAAM,IAAI,eAAe,IAAI;AAE7B,QAAM,KAAK,KAAK,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC;AACvD,QAAM,KAAK,KAAK,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,CAAC;AAEvD,QAAM,SAAgB,EAAE,GAAG,GAAG,GAAG,EAAE;AACnC,QAAM,SAAgB,EAAE,GAAG,GAAG,GAAG,EAAE;AAEnC,MAAI,OAAO,KAAK,OAAO,GAAG;AAExB,WAAO,EAAE,UAAU,GAAG,QAAQ,KAAK,QAAQ,QAAQ,KAAK,OAAO;AAAA,EACjE;AAGA,SAAO,IAAI,MAAM,KAAK,OAAO,GAAG,EAAE,MAAM,EAAE,IAAI;AAC9C,SAAO,IAAI,MAAM,KAAK,OAAO,GAAG,EAAE,MAAM,EAAE,IAAI;AAE9C,SAAO,IAAI,MAAM,KAAK,OAAO,GAAG,EAAE,MAAM,EAAE,IAAI;AAC9C,SAAO,IAAI,MAAM,KAAK,OAAO,GAAG,EAAE,MAAM,EAAE,IAAI;AAE9C,QAAM,WAAW,KAAK,MAAM,OAAO,IAAI,OAAO,GAAG,OAAO,IAAI,OAAO,CAAC;AACpE,SAAO,EAAE,UAAU,QAAQ,OAAO;AACpC;AAEO,SAAS,MAAM,OAAe,KAAa,KAAqB;AACrE,SAAO,KAAK,IAAI,KAAK,KAAK,IAAI,KAAK,KAAK,CAAC;AAC3C;AAEO,SAAS,gCACd,SACA,SACoD;AACpD,MAAI,cAAc,OAAO;AACzB,MAAI,gBAAuB,EAAE,GAAG,GAAG,GAAG,EAAE;AACxC,MAAI,gBAAuB,EAAE,GAAG,GAAG,GAAG,EAAE;AAExC,aAAW,QAAQ,SAAS;AAC1B,eAAW,QAAQ,SAAS;AAC1B,YAAM,EAAE,UAAU,QAAQ,OAAO,IAAI;AAAA,QACnC;AAAA,QACA;AAAA,MACF;AACA,UAAI,WAAW,aAAa;AAC1B,sBAAc;AACd,wBAAgB;AAChB,wBAAgB;AAAA,MAClB;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AAAA,IACL,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,UAAU;AAAA,EACZ;AACF;","names":[]}