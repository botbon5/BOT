import {
  distance
} from "./chunk-3453HRP7.js";
import {
  clamp
} from "./chunk-MHHTZHOJ.js";

// src/point-distance.ts
function pointToBoxDistance(p, box) {
  const halfWidth = box.width / 2;
  const halfHeight = box.height / 2;
  const minX = box.center.x - halfWidth;
  const maxX = box.center.x + halfWidth;
  const minY = box.center.y - halfHeight;
  const maxY = box.center.y + halfHeight;
  if (p.x >= minX && p.x <= maxX && p.y >= minY && p.y <= maxY) {
    return 0;
  }
  const closestX = clamp(p.x, minX, maxX);
  const closestY = clamp(p.y, minY, maxY);
  return distance(p, { x: closestX, y: closestY });
}
function pointToBoundsDistance(p, bounds) {
  if (p.x >= bounds.minX && p.x <= bounds.maxX && p.y >= bounds.minY && p.y <= bounds.maxY) {
    return 0;
  }
  const closestX = clamp(p.x, bounds.minX, bounds.maxX);
  const closestY = clamp(p.y, bounds.minY, bounds.maxY);
  return distance(p, { x: closestX, y: closestY });
}
function midpoint(p1, p2) {
  return {
    x: (p1.x + p2.x) / 2,
    y: (p1.y + p2.y) / 2
  };
}
function distSq(p1, p2) {
  const dx = p1.x - p2.x;
  const dy = p1.y - p2.y;
  return dx * dx + dy * dy;
}

export {
  pointToBoxDistance,
  pointToBoundsDistance,
  midpoint,
  distSq
};
//# sourceMappingURL=chunk-SLG2OU3P.js.map