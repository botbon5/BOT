// lib/typecheck.ts
var expectTypesMatch = (shouldBe) => {
};
expectTypesMatch("extra props b");
expectTypesMatch("missing props b");
expectTypesMatch(true);
expectTypesMatch("property a has mismatched types");

// lib/common/direction.ts
import { z } from "zod";
var direction = z.enum(["up", "down", "left", "right"]);
var directionAlongEdge = z.enum([
  "top-to-bottom",
  "left-to-right",
  "bottom-to-top",
  "right-to-left"
]);
expectTypesMatch(true);
expectTypesMatch(true);

// lib/common/portHints.ts
import { z as z2 } from "zod";
var portHints = z2.array(z2.string().or(z2.number()));
expectTypesMatch(true);

// lib/common/layout.ts
import {
  distance as distance2,
  layer_ref,
  rotation,
  supplier_name
} from "circuit-json";
import { z as z6 } from "zod";

// lib/common/cadModel.ts
import { z as z4 } from "zod";

// lib/common/point3.ts
import { distance } from "circuit-json";
import { z as z3 } from "zod";
var point3 = z3.object({
  x: distance,
  y: distance,
  z: distance
});

// lib/common/cadModel.ts
var rotationPoint3 = z4.object({
  x: z4.union([z4.number(), z4.string()]),
  y: z4.union([z4.number(), z4.string()]),
  z: z4.union([z4.number(), z4.string()])
});
var cadModelBase = z4.object({
  rotationOffset: z4.number().or(rotationPoint3).optional(),
  positionOffset: point3.optional(),
  size: point3.optional()
});
expectTypesMatch(true);
var cadModelStl = cadModelBase.extend({
  stlUrl: z4.string()
});
var cadModelObj = cadModelBase.extend({
  objUrl: z4.string(),
  mtlUrl: z4.string().optional()
});
var cadModelJscad = cadModelBase.extend({
  jscad: z4.record(z4.any())
});
var cadModelProp = z4.union([
  z4.null(),
  z4.string(),
  cadModelStl,
  cadModelObj,
  cadModelJscad
]);
expectTypesMatch(true);

// lib/common/footprintProp.ts
import { z as z5 } from "zod";
var footprintProp = z5.custom((v) => true);

// lib/common/layout.ts
var pcbLayoutProps = z6.object({
  pcbX: distance2.optional(),
  pcbY: distance2.optional(),
  pcbRotation: rotation.optional(),
  layer: layer_ref.optional(),
  pcbRelative: z6.boolean().optional(),
  relative: z6.boolean().optional()
});
expectTypesMatch(true);
var commonLayoutProps = z6.object({
  pcbX: distance2.optional(),
  pcbY: distance2.optional(),
  pcbRotation: rotation.optional(),
  schX: distance2.optional(),
  schY: distance2.optional(),
  schRotation: rotation.optional(),
  layer: layer_ref.optional(),
  footprint: footprintProp.optional(),
  relative: z6.boolean().optional(),
  schRelative: z6.boolean().optional(),
  pcbRelative: z6.boolean().optional()
});
expectTypesMatch(true);
var supplierProps = z6.object({
  supplierPartNumbers: z6.record(supplier_name, z6.array(z6.string())).optional()
});
expectTypesMatch(true);
var pinAttributeMap = z6.object({
  providesPower: z6.boolean().optional(),
  requiresPower: z6.boolean().optional(),
  providesGround: z6.boolean().optional(),
  requiresGround: z6.boolean().optional(),
  providesVoltage: z6.union([z6.string(), z6.number()]).optional(),
  requiresVoltage: z6.union([z6.string(), z6.number()]).optional()
});
expectTypesMatch(true);
var commonComponentProps = commonLayoutProps.merge(supplierProps).extend({
  key: z6.any().optional(),
  name: z6.string(),
  cadModel: cadModelProp.optional(),
  children: z6.any().optional(),
  symbolName: z6.string().optional(),
  doNotPlace: z6.boolean().optional(),
  pinAttributes: z6.record(z6.string(), pinAttributeMap).optional()
});
expectTypesMatch(true);
var componentProps = commonComponentProps;
var lrPins = ["pin1", "left", "pin2", "right"];
var lrPolarPins = [
  "pin1",
  "left",
  "anode",
  "pos",
  "pin2",
  "right",
  "cathode",
  "neg"
];
var distanceOrMultiplier = distance2.or(z6.enum(["2x", "3x", "4x"]));

// lib/common/schematicOrientation.ts
import { z as z7 } from "zod";
var schematicOrientation = z7.enum([
  "vertical",
  "horizontal",
  "pos_top",
  "pos_bottom",
  "pos_left",
  "pos_right",
  "neg_top",
  "neg_bottom",
  "neg_left",
  "neg_right"
]).describe(
  "horizontal means pins go 1->2 rightward and vertical means pins go 1->2 downward (generally, positive on top)"
);
expectTypesMatch(
  true
);

// lib/common/schematicPinDefinitions.ts
import { z as z8 } from "zod";
var explicitPinSideDefinition = z8.object({
  pins: z8.array(z8.union([z8.number(), z8.string()])),
  direction: z8.union([
    z8.literal("top-to-bottom"),
    z8.literal("left-to-right"),
    z8.literal("bottom-to-top"),
    z8.literal("right-to-left")
  ])
});
var schematicPortArrangement = z8.object({
  leftSize: z8.number().optional().describe("@deprecated, use leftPinCount"),
  topSize: z8.number().optional().describe("@deprecated, use topPinCount"),
  rightSize: z8.number().optional().describe("@deprecated, use rightPinCount"),
  bottomSize: z8.number().optional().describe("@deprecated, use bottomPinCount"),
  leftPinCount: z8.number().optional(),
  rightPinCount: z8.number().optional(),
  topPinCount: z8.number().optional(),
  bottomPinCount: z8.number().optional(),
  leftSide: explicitPinSideDefinition.optional(),
  rightSide: explicitPinSideDefinition.optional(),
  topSide: explicitPinSideDefinition.optional(),
  bottomSide: explicitPinSideDefinition.optional()
});
var schematicPinArrangement = schematicPortArrangement;
expectTypesMatch(true);

// lib/common/schematicPinStyle.ts
import { distance as distance3 } from "circuit-json";
import { z as z9 } from "zod";
var schematicPinStyle = z9.record(
  z9.object({
    marginLeft: distance3.optional(),
    marginRight: distance3.optional(),
    marginTop: distance3.optional(),
    marginBottom: distance3.optional(),
    leftMargin: distance3.optional(),
    rightMargin: distance3.optional(),
    topMargin: distance3.optional(),
    bottomMargin: distance3.optional()
  })
);
expectTypesMatch(true);

// lib/common/schematicPinLabel.ts
import { z as z10 } from "zod";
var schematicPinLabel = z10.string().regex(/^[A-Za-z0-9_]+$/);

// lib/components/board.ts
import { z as z24 } from "zod";

// lib/components/group.ts
import { length, distance as distance5 } from "circuit-json";

// lib/common/point.ts
import { distance as distance4 } from "circuit-json";
import { z as z11 } from "zod";
var point = z11.object({
  x: distance4,
  y: distance4
});

// lib/components/group.ts
import { z as z23 } from "zod";

// lib/manual-edits/manual-edit-events/base_manual_edit_event.ts
import { z as z12 } from "zod";
var base_manual_edit_event = z12.object({
  edit_event_id: z12.string(),
  in_progress: z12.boolean().optional(),
  created_at: z12.number()
});
expectTypesMatch(
  true
);

// lib/manual-edits/manual-edit-events/edit_pcb_component_location_event.ts
import { z as z13 } from "zod";
var edit_pcb_component_location_event = base_manual_edit_event.extend({
  pcb_edit_event_type: z13.literal("edit_component_location").describe("deprecated"),
  edit_event_type: z13.literal("edit_pcb_component_location"),
  pcb_component_id: z13.string(),
  original_center: z13.object({ x: z13.number(), y: z13.number() }),
  new_center: z13.object({ x: z13.number(), y: z13.number() })
});
var edit_component_location_event = edit_pcb_component_location_event;
expectTypesMatch(true);

// lib/manual-edits/manual-edit-events/edit_trace_hint_event.ts
import { z as z14 } from "zod";
var edit_trace_hint_event = base_manual_edit_event.extend({
  pcb_edit_event_type: z14.literal("edit_trace_hint").describe("deprecated"),
  edit_event_type: z14.literal("edit_pcb_trace_hint").optional(),
  pcb_port_id: z14.string(),
  pcb_trace_hint_id: z14.string().optional(),
  route: z14.array(
    z14.object({ x: z14.number(), y: z14.number(), via: z14.boolean().optional() })
  )
});
expectTypesMatch(
  true
);

// lib/manual-edits/manual-edit-events/edit_schematic_component_location_event.ts
import { z as z15 } from "zod";
var edit_schematic_component_location_event = base_manual_edit_event.extend({
  edit_event_type: z15.literal("edit_schematic_component_location"),
  schematic_component_id: z15.string(),
  original_center: z15.object({ x: z15.number(), y: z15.number() }),
  new_center: z15.object({ x: z15.number(), y: z15.number() })
});
expectTypesMatch(true);

// lib/manual-edits/manual-edit-events/edit_pcb_group_location_event.ts
import { z as z16 } from "zod";
var edit_pcb_group_location_event = base_manual_edit_event.extend({
  edit_event_type: z16.literal("edit_pcb_group_location"),
  pcb_group_id: z16.string(),
  original_center: z16.object({ x: z16.number(), y: z16.number() }),
  new_center: z16.object({ x: z16.number(), y: z16.number() })
});
expectTypesMatch(true);

// lib/manual-edits/manual-edit-events/edit_schematic_group_location_event.ts
import { z as z17 } from "zod";
var edit_schematic_group_location_event = base_manual_edit_event.extend({
  edit_event_type: z17.literal("edit_schematic_group_location"),
  schematic_group_id: z17.string(),
  original_center: z17.object({ x: z17.number(), y: z17.number() }),
  new_center: z17.object({ x: z17.number(), y: z17.number() })
});
expectTypesMatch(true);

// lib/manual-edits/manual_edit_event.ts
import { z as z18 } from "zod";
var manual_edit_event = z18.union([
  edit_pcb_component_location_event,
  edit_trace_hint_event,
  edit_schematic_component_location_event
]);
expectTypesMatch(true);

// lib/manual-edits/manual_edits_file.ts
import { z as z22 } from "zod";

// lib/manual-edits/manual_pcb_placement.ts
import { z as z19 } from "zod";
import { point as point2 } from "circuit-json";
var manual_pcb_placement = z19.object({
  selector: z19.string(),
  relative_to: z19.string().optional().default("group_center").describe("Can be a selector or 'group_center'"),
  center: point2
});
expectTypesMatch(true);

// lib/manual-edits/manual_trace_hint.ts
import { z as z20 } from "zod";
import { route_hint_point } from "circuit-json";
var manual_trace_hint = z20.object({
  pcb_port_selector: z20.string(),
  offsets: z20.array(route_hint_point)
});
expectTypesMatch(true);

// lib/manual-edits/manual_schematic_placement.ts
import { z as z21 } from "zod";
import { point as point4 } from "circuit-json";
var manual_schematic_placement = z21.object({
  selector: z21.string(),
  relative_to: z21.string().optional().default("group_center").describe("Can be a selector or 'group_center'"),
  center: point4
});
expectTypesMatch(
  true
);

// lib/manual-edits/manual_edits_file.ts
var manual_edits_file = z22.object({
  pcb_placements: z22.array(manual_pcb_placement).optional(),
  manual_trace_hints: z22.array(manual_trace_hint).optional(),
  schematic_placements: z22.array(manual_schematic_placement).optional()
});
expectTypesMatch(true);

// lib/components/group.ts
var layoutConfig = z23.object({
  layoutMode: z23.enum(["grid", "flex", "match-adapt", "relative", "none"]).optional(),
  position: z23.enum(["absolute", "relative"]).optional(),
  grid: z23.boolean().optional(),
  gridCols: z23.number().or(z23.string()).optional(),
  gridRows: z23.number().or(z23.string()).optional(),
  gridTemplateRows: z23.string().optional(),
  gridTemplateColumns: z23.string().optional(),
  gridTemplate: z23.string().optional(),
  gridGap: z23.number().or(z23.string()).optional(),
  flex: z23.boolean().or(z23.string()).optional(),
  flexDirection: z23.enum(["row", "column"]).optional(),
  alignItems: z23.enum(["start", "center", "end", "stretch"]).optional(),
  justifyContent: z23.enum([
    "start",
    "center",
    "end",
    "stretch",
    "space-between",
    "space-around",
    "space-evenly"
  ]).optional(),
  flexRow: z23.boolean().optional(),
  flexColumn: z23.boolean().optional(),
  gap: z23.number().or(z23.string()).optional(),
  pack: z23.boolean().optional().describe("Pack the contents of this group using a packing strategy"),
  packOrderStrategy: z23.enum(["largest_to_smallest"]).optional(),
  packPlacementStrategy: z23.enum(["shortest_connection_along_outline"]).optional(),
  padding: length.optional(),
  paddingLeft: length.optional(),
  paddingRight: length.optional(),
  paddingTop: length.optional(),
  paddingBottom: length.optional(),
  paddingX: length.optional(),
  paddingY: length.optional(),
  width: length.optional(),
  height: length.optional(),
  matchAdapt: z23.boolean().optional(),
  matchAdaptTemplate: z23.any().optional()
});
expectTypesMatch(true);
var border = z23.object({
  strokeWidth: length.optional(),
  dashed: z23.boolean().optional(),
  solid: z23.boolean().optional()
});
var autorouterConfig = z23.object({
  serverUrl: z23.string().optional(),
  inputFormat: z23.enum(["simplified", "circuit-json"]).optional(),
  serverMode: z23.enum(["job", "solve-endpoint"]).optional(),
  serverCacheEnabled: z23.boolean().optional(),
  cache: z23.custom((v) => true).optional(),
  traceClearance: length.optional(),
  groupMode: z23.enum(["sequential-trace", "subcircuit"]).optional(),
  algorithmFn: z23.custom(
    (v) => typeof v === "function" || v === void 0
  ).optional(),
  preset: z23.enum([
    "sequential-trace",
    "subcircuit",
    "auto",
    "auto-local",
    "auto-cloud"
  ]).optional(),
  local: z23.boolean().optional()
});
var autorouterProp = z23.union([
  autorouterConfig,
  z23.literal("sequential-trace"),
  z23.literal("subcircuit"),
  z23.literal("auto"),
  z23.literal("auto-local"),
  z23.literal("auto-cloud")
]);
var baseGroupProps = commonLayoutProps.extend({
  name: z23.string().optional(),
  children: z23.any().optional(),
  schTitle: z23.string().optional(),
  key: z23.any().optional(),
  ...layoutConfig.shape,
  pcbWidth: length.optional(),
  pcbHeight: length.optional(),
  schWidth: length.optional(),
  schHeight: length.optional(),
  pcbLayout: layoutConfig.optional(),
  schLayout: layoutConfig.optional(),
  cellBorder: border.nullable().optional(),
  border: border.nullable().optional(),
  schPadding: length.optional(),
  schPaddingLeft: length.optional(),
  schPaddingRight: length.optional(),
  schPaddingTop: length.optional(),
  schPaddingBottom: length.optional()
});
var partsEngine = z23.custom((v) => "findPart" in v);
var subcircuitGroupProps = baseGroupProps.extend({
  manualEdits: manual_edits_file.optional(),
  schAutoLayoutEnabled: z23.boolean().optional(),
  schTraceAutoLabelEnabled: z23.boolean().optional(),
  routingDisabled: z23.boolean().optional(),
  defaultTraceWidth: length.optional(),
  minTraceWidth: length.optional(),
  partsEngine: partsEngine.optional(),
  pcbRouteCache: z23.custom((v) => true).optional(),
  autorouter: autorouterProp.optional(),
  square: z23.boolean().optional(),
  emptyArea: z23.string().optional(),
  filledArea: z23.string().optional(),
  width: distance5.optional(),
  height: distance5.optional(),
  outline: z23.array(point).optional(),
  outlineOffsetX: distance5.optional(),
  outlineOffsetY: distance5.optional()
});
var subcircuitGroupPropsWithBool = subcircuitGroupProps.extend({
  subcircuit: z23.literal(true)
});
var groupProps = z23.discriminatedUnion("subcircuit", [
  baseGroupProps.extend({ subcircuit: z23.literal(false).optional() }),
  subcircuitGroupPropsWithBool
]);
expectTypesMatch(true);
expectTypesMatch(true);
expectTypesMatch(true);

// lib/components/board.ts
var boardProps = subcircuitGroupProps.extend({
  material: z24.enum(["fr4", "fr1"]).default("fr4"),
  layers: z24.union([z24.literal(2), z24.literal(4)]).default(2)
});
expectTypesMatch(true);

// lib/components/breakout.ts
import { distance as distance6 } from "circuit-json";
import "zod";
var breakoutProps = subcircuitGroupProps.extend({
  padding: distance6.optional(),
  paddingLeft: distance6.optional(),
  paddingRight: distance6.optional(),
  paddingTop: distance6.optional(),
  paddingBottom: distance6.optional()
});
expectTypesMatch(true);

// lib/components/chip.ts
import { distance as distance7, supplier_name as supplier_name2 } from "circuit-json";
import { z as z26 } from "zod";
var connectionTarget = z26.string().or(z26.array(z26.string()).readonly()).or(z26.array(z26.string()));
var connectionsProp = z26.custom().pipe(z26.record(z26.string(), connectionTarget));
var pinLabelsProp = z26.record(
  schematicPinLabel,
  schematicPinLabel.or(z26.array(schematicPinLabel).readonly()).or(z26.array(schematicPinLabel))
);
expectTypesMatch(true);
var pinCompatibleVariant = z26.object({
  manufacturerPartNumber: z26.string().optional(),
  supplierPartNumber: z26.record(supplier_name2, z26.array(z26.string())).optional()
});
var chipProps = commonComponentProps.extend({
  manufacturerPartNumber: z26.string().optional(),
  pinLabels: pinLabelsProp.optional(),
  showPinAliases: z26.boolean().optional(),
  pcbPinLabels: z26.record(z26.string(), z26.string()).optional(),
  internallyConnectedPins: z26.array(z26.array(z26.string())).optional(),
  externallyConnectedPins: z26.array(z26.array(z26.string())).optional(),
  schPinArrangement: schematicPortArrangement.optional(),
  schPortArrangement: schematicPortArrangement.optional(),
  pinCompatibleVariants: z26.array(pinCompatibleVariant).optional(),
  schPinStyle: schematicPinStyle.optional(),
  schPinSpacing: distance7.optional(),
  schWidth: distance7.optional(),
  schHeight: distance7.optional(),
  noSchematicRepresentation: z26.boolean().optional(),
  connections: connectionsProp.optional()
});
var bugProps = chipProps;
expectTypesMatch(true);

// lib/components/jumper.ts
import { distance as distance8 } from "circuit-json";

// lib/common/connectionsProp.ts
import { z as z27 } from "zod";
var connectionTarget2 = z27.string().or(z27.array(z27.string()).readonly()).or(z27.array(z27.string()));
var createConnectionsProp = (labels) => {
  return z27.record(z27.enum(labels), connectionTarget2);
};

// lib/components/jumper.ts
import { z as z28 } from "zod";
var jumperProps = commonComponentProps.extend({
  manufacturerPartNumber: z28.string().optional(),
  pinLabels: z28.record(
    z28.number().or(schematicPinLabel),
    schematicPinLabel.or(z28.array(schematicPinLabel))
  ).optional(),
  schPinStyle: schematicPinStyle.optional(),
  schPinSpacing: distance8.optional(),
  schWidth: distance8.optional(),
  schHeight: distance8.optional(),
  schDirection: z28.enum(["left", "right"]).optional(),
  schPortArrangement: schematicPortArrangement.optional(),
  pcbPinLabels: z28.record(z28.string(), z28.string()).optional(),
  pinCount: z28.union([z28.literal(2), z28.literal(3)]).optional(),
  internallyConnectedPins: z28.array(z28.array(z28.string())).optional(),
  connections: z28.custom().pipe(z28.record(z28.string(), connectionTarget2)).optional()
});
expectTypesMatch(true);

// lib/components/solderjumper.ts
import { z as z29 } from "zod";
var solderjumperProps = jumperProps.extend({
  bridgedPins: z29.array(z29.array(z29.string())).optional(),
  bridged: z29.boolean().optional()
});
expectTypesMatch(true);

// lib/components/connector.ts
import { distance as distance9 } from "circuit-json";
import { z as z30 } from "zod";
var connectorProps = commonComponentProps.extend({
  manufacturerPartNumber: z30.string().optional(),
  pinLabels: z30.record(
    z30.number().or(schematicPinLabel),
    schematicPinLabel.or(z30.array(schematicPinLabel))
  ).optional(),
  schPinStyle: schematicPinStyle.optional(),
  schPinSpacing: distance9.optional(),
  schWidth: distance9.optional(),
  schHeight: distance9.optional(),
  schDirection: z30.enum(["left", "right"]).optional(),
  schPortArrangement: schematicPortArrangement.optional(),
  internallyConnectedPins: z30.array(z30.array(z30.string())).optional(),
  standard: z30.enum(["usb_c", "m2"]).optional()
});
expectTypesMatch(true);

// lib/components/fuse.ts
import { z as z31 } from "zod";
var fusePinLabels = ["pin1", "pin2"];
var fuseProps = commonComponentProps.extend({
  currentRating: z31.union([z31.number(), z31.string()]),
  voltageRating: z31.union([z31.number(), z31.string()]).optional(),
  schShowRatings: z31.boolean().optional(),
  schOrientation: schematicOrientation.optional(),
  connections: z31.record(
    z31.string(),
    z31.union([
      z31.string(),
      z31.array(z31.string()).readonly(),
      z31.array(z31.string())
    ])
  ).optional()
});

// lib/components/platedhole.ts
import { distance as distance10 } from "circuit-json";
import { z as z32 } from "zod";
var distanceHiddenUndefined = z32.custom().transform((a) => {
  if (a === void 0) return void 0;
  return distance10.parse(a);
});
var platedHoleProps = z32.discriminatedUnion("shape", [
  pcbLayoutProps.omit({ pcbRotation: true, layer: true }).extend({
    name: z32.string().optional(),
    connectsTo: z32.string().or(z32.array(z32.string())).optional(),
    shape: z32.literal("circle"),
    holeDiameter: distance10,
    outerDiameter: distance10,
    portHints: portHints.optional()
  }),
  pcbLayoutProps.omit({ pcbRotation: true, layer: true }).extend({
    name: z32.string().optional(),
    connectsTo: z32.string().or(z32.array(z32.string())).optional(),
    shape: z32.literal("oval"),
    outerWidth: distance10,
    outerHeight: distance10,
    holeWidth: distanceHiddenUndefined,
    holeHeight: distanceHiddenUndefined,
    innerWidth: distance10.optional().describe("DEPRECATED use holeWidth"),
    innerHeight: distance10.optional().describe("DEPRECATED use holeHeight"),
    portHints: portHints.optional()
  }),
  pcbLayoutProps.omit({ pcbRotation: true, layer: true }).extend({
    name: z32.string().optional(),
    connectsTo: z32.string().or(z32.array(z32.string())).optional(),
    shape: z32.literal("pill"),
    outerWidth: distance10,
    outerHeight: distance10,
    holeWidth: distanceHiddenUndefined,
    holeHeight: distanceHiddenUndefined,
    innerWidth: distance10.optional().describe("DEPRECATED use holeWidth"),
    innerHeight: distance10.optional().describe("DEPRECATED use holeHeight"),
    portHints: portHints.optional()
  }),
  pcbLayoutProps.omit({ pcbRotation: true, layer: true }).extend({
    name: z32.string().optional(),
    connectsTo: z32.string().or(z32.array(z32.string())).optional(),
    shape: z32.literal("circular_hole_with_rect_pad"),
    holeDiameter: distance10,
    rectPadWidth: distance10,
    rectPadHeight: distance10,
    holeShape: z32.literal("circle").optional(),
    padShape: z32.literal("rect").optional(),
    portHints: portHints.optional()
  }),
  pcbLayoutProps.omit({ pcbRotation: true, layer: true }).extend({
    name: z32.string().optional(),
    connectsTo: z32.string().or(z32.array(z32.string())).optional(),
    shape: z32.literal("pill_hole_with_rect_pad"),
    holeShape: z32.literal("pill"),
    padShape: z32.literal("rect"),
    holeWidth: distance10,
    holeHeight: distance10,
    rectPadWidth: distance10,
    rectPadHeight: distance10,
    portHints: portHints.optional()
  })
]).refine((a) => {
  if ("innerWidth" in a && a.innerWidth !== void 0) {
    a.holeWidth ??= a.innerWidth;
  }
  if ("innerHeight" in a && a.innerHeight !== void 0) {
    a.holeHeight ??= a.innerHeight;
  }
  return a;
});
expectTypesMatch(true);

// lib/components/resistor.ts
import { resistance } from "circuit-json";
import { z as z33 } from "zod";
var resistorPinLabels = ["pin1", "pin2", "pos", "neg"];
var resistorProps = commonComponentProps.extend({
  resistance,
  pullupFor: z33.string().optional(),
  pullupTo: z33.string().optional(),
  pulldownFor: z33.string().optional(),
  pulldownTo: z33.string().optional(),
  schOrientation: schematicOrientation.optional(),
  connections: createConnectionsProp(resistorPinLabels).optional()
});
var resistorPins = lrPins;
expectTypesMatch(true);

// lib/components/potentiometer.ts
import { resistance as resistance2 } from "circuit-json";
import { z as z34 } from "zod";
var potentiometerProps = commonComponentProps.extend({
  maxResistance: resistance2,
  pinVariant: z34.enum(["two_pin", "three_pin"]).optional()
});
expectTypesMatch(true);

// lib/components/crystal.ts
import { frequency, capacitance } from "circuit-json";
import { z as z35 } from "zod";
var crystalProps = commonComponentProps.extend({
  frequency,
  loadCapacitance: capacitance,
  pinVariant: z35.enum(["two_pin", "four_pin"]).optional(),
  schOrientation: schematicOrientation.optional()
});
var crystalPins = lrPins;
expectTypesMatch(true);

// lib/components/resonator.ts
import { frequency as frequency2, capacitance as capacitance2 } from "circuit-json";
import { z as z36 } from "zod";
var resonatorProps = commonComponentProps.extend({
  frequency: frequency2,
  loadCapacitance: capacitance2,
  pinVariant: z36.enum(["no_ground", "ground_pin", "two_ground_pins"]).optional()
});
expectTypesMatch(true);

// lib/components/stampboard.ts
import { distance as distance11 } from "circuit-json";
import { z as z37 } from "zod";
var stampboardProps = boardProps.extend({
  leftPinCount: z37.number().optional(),
  rightPinCount: z37.number().optional(),
  topPinCount: z37.number().optional(),
  bottomPinCount: z37.number().optional(),
  leftPins: z37.array(z37.string()).optional(),
  rightPins: z37.array(z37.string()).optional(),
  topPins: z37.array(z37.string()).optional(),
  bottomPins: z37.array(z37.string()).optional(),
  pinPitch: distance11.optional(),
  innerHoles: z37.boolean().optional()
});
expectTypesMatch(true);

// lib/components/capacitor.ts
import { capacitance as capacitance3, voltage } from "circuit-json";
import { z as z38 } from "zod";
var capacitorPinLabels = [
  "pin1",
  "pin2",
  "pos",
  "neg",
  "anode",
  "cathode"
];
var capacitorProps = commonComponentProps.extend({
  capacitance: capacitance3,
  maxVoltageRating: voltage.optional(),
  schShowRatings: z38.boolean().optional().default(false),
  polarized: z38.boolean().optional().default(false),
  decouplingFor: z38.string().optional(),
  decouplingTo: z38.string().optional(),
  bypassFor: z38.string().optional(),
  bypassTo: z38.string().optional(),
  maxDecouplingTraceLength: z38.number().optional(),
  schOrientation: schematicOrientation.optional(),
  connections: createConnectionsProp(capacitorPinLabels).optional()
});
var capacitorPins = lrPolarPins;
expectTypesMatch(true);

// lib/components/net.ts
import { z as z39 } from "zod";
var netProps = z39.object({
  name: z39.string(),
  connectsTo: z39.string().or(z39.array(z39.string())).optional()
});
expectTypesMatch(true);

// lib/components/constrainedlayout.ts
import { z as z40 } from "zod";
var constrainedLayoutProps = z40.object({
  name: z40.string().optional(),
  pcbOnly: z40.boolean().optional(),
  schOnly: z40.boolean().optional()
});
expectTypesMatch(true);

// lib/common/distance.ts
import "zod";
import { distance as distance12, length as length2 } from "circuit-json";

// lib/components/constraint.ts
import { z as z42 } from "zod";
var pcbXDistConstraintProps = z42.object({
  pcb: z42.literal(true).optional(),
  xDist: distance12,
  left: z42.string(),
  right: z42.string(),
  edgeToEdge: z42.literal(true).optional(),
  centerToCenter: z42.literal(true).optional()
});
expectTypesMatch(
  true
);
var pcbYDistConstraintProps = z42.object({
  pcb: z42.literal(true).optional(),
  yDist: distance12,
  top: z42.string(),
  bottom: z42.string(),
  edgeToEdge: z42.literal(true).optional(),
  centerToCenter: z42.literal(true).optional()
});
expectTypesMatch(
  true
);
var pcbSameYConstraintProps = z42.object({
  pcb: z42.literal(true).optional(),
  sameY: z42.literal(true).optional(),
  for: z42.array(z42.string())
});
expectTypesMatch(
  true
);
var pcbSameXConstraintProps = z42.object({
  pcb: z42.literal(true).optional(),
  sameX: z42.literal(true).optional(),
  for: z42.array(z42.string())
});
expectTypesMatch(
  true
);
var constraintProps = z42.union([
  pcbXDistConstraintProps,
  pcbYDistConstraintProps,
  pcbSameYConstraintProps,
  pcbSameXConstraintProps
]);
expectTypesMatch(true);

// lib/components/cutout.ts
import { z as z43 } from "zod";
var rectCutoutProps = pcbLayoutProps.omit({
  layer: true,
  pcbRotation: true
}).extend({
  name: z43.string().optional(),
  shape: z43.literal("rect"),
  width: distance12,
  height: distance12
});
expectTypesMatch(true);
var circleCutoutProps = pcbLayoutProps.omit({
  layer: true,
  pcbRotation: true
}).extend({
  name: z43.string().optional(),
  shape: z43.literal("circle"),
  radius: distance12
});
expectTypesMatch(true);
var polygonCutoutProps = pcbLayoutProps.omit({
  layer: true,
  pcbRotation: true
}).extend({
  name: z43.string().optional(),
  shape: z43.literal("polygon"),
  points: z43.array(point)
});
expectTypesMatch(true);
var cutoutProps = z43.discriminatedUnion("shape", [
  rectCutoutProps,
  circleCutoutProps,
  polygonCutoutProps
]);

// lib/components/smtpad.ts
import { z as z44 } from "zod";
var rectSmtPadProps = pcbLayoutProps.omit({ pcbRotation: true }).extend({
  name: z44.string().optional(),
  shape: z44.literal("rect"),
  width: distance12,
  height: distance12,
  portHints: portHints.optional()
});
expectTypesMatch(true);
var rotatedRectSmtPadProps = pcbLayoutProps.omit({ pcbRotation: true }).extend({
  name: z44.string().optional(),
  shape: z44.literal("rotated_rect"),
  width: distance12,
  height: distance12,
  ccwRotation: z44.number(),
  portHints: portHints.optional()
});
expectTypesMatch(true);
var circleSmtPadProps = pcbLayoutProps.omit({ pcbRotation: true }).extend({
  name: z44.string().optional(),
  shape: z44.literal("circle"),
  radius: distance12,
  portHints: portHints.optional()
});
expectTypesMatch(true);
var pillSmtPadProps = pcbLayoutProps.omit({ pcbRotation: true }).extend({
  name: z44.string().optional(),
  shape: z44.literal("pill"),
  width: distance12,
  height: distance12,
  radius: distance12,
  portHints: portHints.optional()
});
expectTypesMatch(true);
var polygonSmtPadProps = pcbLayoutProps.omit({ pcbRotation: true }).extend({
  name: z44.string().optional(),
  shape: z44.literal("polygon"),
  points: z44.array(point),
  portHints: portHints.optional()
});
expectTypesMatch(true);
var smtPadProps = z44.discriminatedUnion("shape", [
  circleSmtPadProps,
  rectSmtPadProps,
  rotatedRectSmtPadProps,
  pillSmtPadProps,
  polygonSmtPadProps
]);
expectTypesMatch(true);

// lib/components/solderpaste.ts
import { z as z45 } from "zod";
var rectSolderPasteProps = pcbLayoutProps.omit({ pcbRotation: true }).extend({
  shape: z45.literal("rect"),
  width: distance12,
  height: distance12
});
expectTypesMatch(true);
var circleSolderPasteProps = pcbLayoutProps.omit({ pcbRotation: true }).extend({
  shape: z45.literal("circle"),
  radius: distance12
});
expectTypesMatch(true);
var solderPasteProps = z45.union([
  circleSolderPasteProps,
  rectSolderPasteProps
]);
expectTypesMatch(true);

// lib/components/hole.ts
import { z as z46 } from "zod";
var holeProps = pcbLayoutProps.omit({ pcbRotation: true }).extend({
  name: z46.string().optional(),
  diameter: distance12.optional(),
  radius: distance12.optional()
}).transform((d) => ({
  ...d,
  diameter: d.diameter ?? 2 * d.radius,
  radius: d.radius ?? d.diameter / 2
}));
expectTypesMatch(true);

// lib/components/trace.ts
import { distance as distance13, route_hint_point as route_hint_point2 } from "circuit-json";
import { z as z47 } from "zod";
var portRef = z47.union([
  z47.string(),
  z47.custom(
    (v) => Boolean(v.getPortSelector)
  )
]);
var baseTraceProps = z47.object({
  key: z47.string().optional(),
  thickness: distance13.optional(),
  schematicRouteHints: z47.array(point).optional(),
  pcbRouteHints: z47.array(route_hint_point2).optional(),
  schDisplayLabel: z47.string().optional(),
  maxLength: distance13.optional()
});
var traceProps = z47.union([
  baseTraceProps.extend({
    path: z47.array(portRef)
  }),
  baseTraceProps.extend({
    from: portRef,
    to: portRef
  })
]);

// lib/components/footprint.ts
import { layer_ref as layer_ref4 } from "circuit-json";
import { z as z48 } from "zod";
var footprintProps = z48.object({
  originalLayer: layer_ref4.default("top").optional()
});
expectTypesMatch(true);

// lib/components/battery.ts
import { z as z49 } from "zod";
var capacity = z49.number().or(z49.string().endsWith("mAh")).transform((v) => {
  if (typeof v === "string") {
    const valString = v.replace("mAh", "");
    const num = Number.parseFloat(valString);
    if (Number.isNaN(num)) {
      throw new Error("Invalid capacity");
    }
    return num;
  }
  return v;
}).describe("Battery capacity in mAh");
var batteryProps = commonComponentProps.extend({
  capacity: capacity.optional(),
  schOrientation: schematicOrientation.optional()
});
var batteryPins = lrPolarPins;
expectTypesMatch(true);

// lib/components/pin-header.ts
import { distance as distance14 } from "circuit-json";
import { z as z50 } from "zod";
var pinHeaderProps = commonComponentProps.extend({
  pinCount: z50.number(),
  pitch: distance14.optional(),
  schFacingDirection: z50.enum(["up", "down", "left", "right"]).optional(),
  gender: z50.enum(["male", "female"]).optional().default("male"),
  showSilkscreenPinLabels: z50.boolean().optional(),
  pcbPinLabels: z50.record(z50.string(), z50.string()).optional(),
  doubleRow: z50.boolean().optional(),
  holeDiameter: distance14.optional(),
  platedDiameter: distance14.optional(),
  pinLabels: z50.array(schematicPinLabel).optional(),
  connections: z50.custom().pipe(z50.record(z50.string(), connectionTarget2)).optional(),
  facingDirection: z50.enum(["left", "right"]).optional(),
  schPinArrangement: schematicPinArrangement.optional(),
  schPinStyle: schematicPinStyle.optional(),
  schPinSpacing: distance14.optional(),
  schWidth: distance14.optional(),
  schHeight: distance14.optional()
});
expectTypesMatch(true);

// lib/components/netalias.ts
import { z as z51 } from "zod";
import { rotation as rotation2 } from "circuit-json";
var netAliasProps = z51.object({
  net: z51.string().optional(),
  connection: z51.string().optional(),
  schX: distance12.optional(),
  schY: distance12.optional(),
  schRotation: rotation2.optional(),
  anchorSide: z51.enum(["left", "top", "right", "bottom"]).optional()
});
expectTypesMatch(true);

// lib/components/netlabel.ts
import { z as z52 } from "zod";
import { rotation as rotation3 } from "circuit-json";
var netLabelProps = z52.object({
  net: z52.string().optional(),
  connection: z52.string().optional(),
  connectsTo: z52.string().or(z52.array(z52.string())).optional(),
  schX: distance12.optional(),
  schY: distance12.optional(),
  schRotation: rotation3.optional(),
  anchorSide: z52.enum(["left", "top", "right", "bottom"]).optional()
});
expectTypesMatch(true);

// lib/components/push-button.ts
import "zod";
var pushButtonProps = chipProps.extend({});
expectTypesMatch(true);

// lib/components/subcircuit.ts
var subcircuitProps = subcircuitGroupProps;
expectTypesMatch(true);

// lib/components/transistor.ts
import { z as z54 } from "zod";
var transistorPinsLabels = [
  "pin1",
  "pin2",
  "pin3",
  "emitter",
  "collector",
  "base",
  "gate",
  "source",
  "drain"
];
var transistorProps = commonComponentProps.extend({
  type: z54.enum(["npn", "pnp", "bjt", "jfet", "mosfet", "igbt"]),
  connections: createConnectionsProp(transistorPinsLabels).optional()
});
var transistorPins = [
  "pin1",
  "emitter",
  "pin2",
  "collector",
  "pin3",
  "base"
];
expectTypesMatch(true);

// lib/components/mosfet.ts
import { z as z55 } from "zod";
var mosfetProps = commonComponentProps.extend({
  channelType: z55.enum(["n", "p"]),
  mosfetMode: z55.enum(["enhancement", "depletion"])
});
var mosfetPins = [
  "pin1",
  "drain",
  "pin2",
  "source",
  "pin3",
  "gate"
];
expectTypesMatch(true);

// lib/components/inductor.ts
import { inductance } from "circuit-json";
import { z as z56 } from "zod";
var inductorProps = commonComponentProps.extend({
  inductance,
  maxCurrentRating: z56.union([z56.string(), z56.number()]).optional(),
  schOrientation: schematicOrientation.optional()
});
var inductorPins = lrPins;
expectTypesMatch(true);

// lib/components/diode.ts
import { z as z57 } from "zod";
var diodeConnectionKeys = z57.enum([
  "anode",
  "cathode",
  "pin1",
  "pin2",
  "pos",
  "neg"
]);
var connectionTarget3 = z57.string().or(z57.array(z57.string()).readonly()).or(z57.array(z57.string()));
var connectionsProp2 = z57.record(diodeConnectionKeys, connectionTarget3);
var diodeVariant = z57.enum([
  "standard",
  "schottky",
  "zener",
  "avalanche",
  "photo",
  "tvs"
]);
var diodeProps = commonComponentProps.extend({
  connections: connectionsProp2.optional(),
  variant: diodeVariant.optional().default("standard"),
  standard: z57.boolean().optional(),
  schottky: z57.boolean().optional(),
  zener: z57.boolean().optional(),
  avalanche: z57.boolean().optional(),
  photo: z57.boolean().optional(),
  tvs: z57.boolean().optional(),
  schOrientation: schematicOrientation.optional()
}).superRefine((data, ctx) => {
  const enabledFlags = [
    data.standard,
    data.schottky,
    data.zener,
    data.avalanche,
    data.photo,
    data.tvs
  ].filter(Boolean).length;
  if (enabledFlags > 1) {
    ctx.addIssue({
      code: z57.ZodIssueCode.custom,
      message: "Exactly one diode variant must be enabled",
      path: []
    });
    return z57.INVALID;
  }
}).transform((data) => {
  const result = {
    ...data,
    standard: false,
    schottky: false,
    zener: false,
    avalanche: false,
    photo: false,
    tvs: false
  };
  if (data.standard) result.standard = true;
  else if (data.schottky) result.schottky = true;
  else if (data.zener) result.zener = true;
  else if (data.photo) result.photo = true;
  else if (data.tvs) result.tvs = true;
  else {
    switch (data.variant) {
      case "standard":
        result.standard = true;
        break;
      case "schottky":
        result.schottky = true;
        break;
      case "zener":
        result.zener = true;
        break;
      case "avalanche":
        result.avalanche = true;
        break;
      case "photo":
        result.photo = true;
        break;
      case "tvs":
        result.tvs = true;
        break;
      default:
        result.standard = true;
    }
  }
  return result;
});
var diodePins = lrPolarPins;
expectTypesMatch(true);

// lib/components/led.ts
import { z as z58 } from "zod";
var ledProps = commonComponentProps.extend({
  color: z58.string().optional(),
  wavelength: z58.string().optional(),
  schDisplayValue: z58.string().optional(),
  schOrientation: schematicOrientation.optional(),
  connections: createConnectionsProp(lrPolarPins).optional(),
  laser: z58.boolean().optional()
});
var ledPins = lrPolarPins;

// lib/components/switch.ts
import { z as z59 } from "zod";
var switchProps = commonComponentProps.extend({
  type: z59.enum(["spst", "spdt", "dpst", "dpdt"]).optional(),
  isNormallyClosed: z59.boolean().optional().default(false),
  spst: z59.boolean().optional(),
  spdt: z59.boolean().optional(),
  dpst: z59.boolean().optional(),
  dpdt: z59.boolean().optional()
}).transform((props) => {
  const updatedProps = { ...props };
  if (updatedProps.dpdt) {
    updatedProps.type = "dpdt";
  } else if (updatedProps.spst) {
    updatedProps.type = "spst";
  } else if (updatedProps.spdt) {
    updatedProps.type = "spdt";
  } else if (updatedProps.dpst) {
    updatedProps.type = "dpst";
  }
  switch (updatedProps.type) {
    case "spdt":
      updatedProps.spdt = true;
      break;
    case "spst":
      updatedProps.spst = true;
      break;
    case "dpst":
      updatedProps.dpst = true;
      break;
    case "dpdt":
      updatedProps.dpdt = true;
      break;
  }
  return updatedProps;
});
expectTypesMatch(true);

// lib/components/fabrication-note-text.ts
import { length as length3 } from "circuit-json";
import { z as z60 } from "zod";
var fabricationNoteTextProps = pcbLayoutProps.extend({
  text: z60.string(),
  anchorAlignment: z60.enum(["center", "top_left", "top_right", "bottom_left", "bottom_right"]).default("center"),
  font: z60.enum(["tscircuit2024"]).optional(),
  fontSize: length3.optional(),
  color: z60.string().optional()
});

// lib/components/fabrication-note-path.ts
import { length as length4, route_hint_point as route_hint_point3 } from "circuit-json";
import { z as z61 } from "zod";
var fabricationNotePathProps = pcbLayoutProps.omit({ pcbX: true, pcbY: true, pcbRotation: true }).extend({
  route: z61.array(route_hint_point3),
  strokeWidth: length4.optional(),
  color: z61.string().optional()
});

// lib/components/pcb-trace.ts
import { distance as distance15, route_hint_point as route_hint_point4 } from "circuit-json";
import { z as z62 } from "zod";
var pcbTraceProps = z62.object({
  layer: z62.string().optional(),
  thickness: distance15.optional(),
  route: z62.array(route_hint_point4)
});

// lib/components/via.ts
import { distance as distance16, layer_ref as layer_ref5 } from "circuit-json";
import { z as z63 } from "zod";
var viaProps = commonLayoutProps.extend({
  name: z63.string().optional(),
  fromLayer: layer_ref5,
  toLayer: layer_ref5,
  holeDiameter: distance16,
  outerDiameter: distance16,
  connectsTo: z63.string().or(z63.array(z63.string())).optional()
});
expectTypesMatch(true);

// lib/components/testpoint.ts
import { distance as distance17 } from "circuit-json";
import { z as z64 } from "zod";
var testpointProps = commonComponentProps.extend({
  footprintVariant: z64.enum(["pad", "through_hole"]).optional(),
  padShape: z64.enum(["rect", "circle"]).optional().default("circle"),
  padDiameter: distance17.optional(),
  holeDiameter: distance17.optional(),
  width: distance17.optional(),
  height: distance17.optional()
}).refine(
  (props) => props.footprintVariant !== "through_hole" || props.holeDiameter !== void 0,
  { message: "holeDiameter is required for through_hole testpoints" }
);
expectTypesMatch(true);

// lib/components/breakoutpoint.ts
import { z as z65 } from "zod";
var breakoutPointProps = pcbLayoutProps.omit({ pcbRotation: true, layer: true }).extend({
  connection: z65.string()
});
expectTypesMatch(true);

// lib/components/pcb-keepout.ts
import { distance as distance18 } from "circuit-json";
import { z as z66 } from "zod";
var pcbKeepoutProps = z66.union([
  pcbLayoutProps.omit({ pcbRotation: true }).extend({
    shape: z66.literal("circle"),
    radius: distance18
  }),
  pcbLayoutProps.extend({
    shape: z66.literal("rect"),
    width: distance18,
    height: distance18
  })
]);

// lib/components/power-source.ts
import { voltage as voltage2 } from "circuit-json";
var powerSourceProps = commonComponentProps.extend({
  voltage: voltage2
});

// lib/components/schematic-box.ts
import { distance as distance19 } from "circuit-json";
import { z as z68 } from "zod";

// lib/common/ninePointAnchor.ts
import { z as z67 } from "zod";
var ninePointAnchor = z67.enum([
  "top_left",
  "top_center",
  "top_right",
  "center_left",
  "center",
  "center_right",
  "bottom_left",
  "bottom_center",
  "bottom_right"
]);

// lib/components/schematic-box.ts
var schematicBoxProps = z68.object({
  schX: distance19.optional(),
  schY: distance19.optional(),
  width: distance19.optional(),
  height: distance19.optional(),
  overlay: z68.array(z68.string()).optional(),
  padding: distance19.optional(),
  paddingLeft: distance19.optional(),
  paddingRight: distance19.optional(),
  paddingTop: distance19.optional(),
  paddingBottom: distance19.optional(),
  title: z68.string().optional(),
  titleAlignment: ninePointAnchor.default("top_left"),
  titleColor: z68.string().optional(),
  titleFontSize: distance19.optional(),
  titleInside: z68.boolean().default(false),
  strokeStyle: z68.enum(["solid", "dashed"]).default("solid")
}).refine(
  (elm) => elm.width !== void 0 && elm.height !== void 0 || Array.isArray(elm.overlay) && elm.overlay.length > 0,
  {
    message: "Must provide either both `width` and `height`, or a non-empty `overlay` array."
  }
).refine(
  (elm) => !(elm.width !== void 0 && elm.height !== void 0 && Array.isArray(elm.overlay) && elm.overlay.length > 0),
  {
    message: "Cannot provide both `width`/`height` and `overlay` at the same time."
  }
);

// lib/components/schematic-line.ts
import { distance as distance20 } from "circuit-json";
import { z as z69 } from "zod";
var schematicLineProps = z69.object({
  x1: distance20,
  y1: distance20,
  x2: distance20,
  y2: distance20
});

// lib/components/schematic-text.ts
import { distance as distance21, rotation as rotation4 } from "circuit-json";
import { z as z71 } from "zod";

// lib/common/fivePointAnchor.ts
import { z as z70 } from "zod";
var fivePointAnchor = z70.enum([
  "center",
  "left",
  "right",
  "top",
  "bottom"
]);

// lib/components/schematic-text.ts
var schematicTextProps = z71.object({
  schX: distance21.optional(),
  schY: distance21.optional(),
  text: z71.string(),
  fontSize: z71.number().default(1),
  anchor: z71.union([fivePointAnchor.describe("legacy"), ninePointAnchor]).default("center"),
  color: z71.string().default("#000000"),
  schRotation: rotation4.default(0)
});

// lib/components/schematic-path.ts
import { point as point5 } from "circuit-json";
import { z as z72 } from "zod";
var schematicPathProps = z72.object({
  points: z72.array(point5),
  isFilled: z72.boolean().optional().default(false),
  fillColor: z72.enum(["red", "blue"]).optional()
});

// lib/components/schematic-table.ts
import { distance as distance22 } from "circuit-json";
import { z as z73 } from "zod";
var schematicTableProps = z73.object({
  schX: distance22.optional(),
  schY: distance22.optional(),
  children: z73.any().optional(),
  cellPadding: distance22.optional(),
  borderWidth: distance22.optional(),
  anchor: ninePointAnchor.optional(),
  fontSize: distance22.optional()
});
expectTypesMatch(true);

// lib/components/schematic-row.ts
import { distance as distance23 } from "circuit-json";
import { z as z74 } from "zod";
var schematicRowProps = z74.object({
  children: z74.any().optional(),
  height: distance23.optional()
});
expectTypesMatch(true);

// lib/components/schematic-cell.ts
import { distance as distance24 } from "circuit-json";
import { z as z75 } from "zod";
var schematicCellProps = z75.object({
  children: z75.string().optional(),
  horizontalAlign: z75.enum(["left", "center", "right"]).optional(),
  verticalAlign: z75.enum(["top", "middle", "bottom"]).optional(),
  fontSize: distance24.optional(),
  rowSpan: z75.number().optional(),
  colSpan: z75.number().optional(),
  width: distance24.optional(),
  text: z75.string().optional()
});
expectTypesMatch(true);

// lib/components/silkscreen-text.ts
import { length as length5 } from "circuit-json";
import { z as z76 } from "zod";
var silkscreenTextProps = pcbLayoutProps.extend({
  text: z76.string(),
  anchorAlignment: ninePointAnchor.default("center"),
  font: z76.enum(["tscircuit2024"]).optional(),
  fontSize: length5.optional()
});

// lib/components/silkscreen-path.ts
import { length as length6, route_hint_point as route_hint_point5 } from "circuit-json";
import { z as z77 } from "zod";
var silkscreenPathProps = pcbLayoutProps.omit({ pcbX: true, pcbY: true, pcbRotation: true }).extend({
  route: z77.array(route_hint_point5),
  strokeWidth: length6.optional()
});

// lib/components/silkscreen-line.ts
import { distance as distance25 } from "circuit-json";
var silkscreenLineProps = pcbLayoutProps.omit({ pcbX: true, pcbY: true, pcbRotation: true }).extend({
  strokeWidth: distance25,
  x1: distance25,
  y1: distance25,
  x2: distance25,
  y2: distance25
});

// lib/components/silkscreen-rect.ts
import { distance as distance26 } from "circuit-json";
import { z as z78 } from "zod";
var silkscreenRectProps = pcbLayoutProps.omit({ pcbRotation: true }).extend({
  filled: z78.boolean().default(true).optional(),
  stroke: z78.enum(["dashed", "solid", "none"]).optional(),
  strokeWidth: distance26.optional(),
  width: distance26,
  height: distance26
});

// lib/components/silkscreen-circle.ts
import { distance as distance27 } from "circuit-json";
import { z as z79 } from "zod";
var silkscreenCircleProps = pcbLayoutProps.omit({ pcbRotation: true }).extend({
  isFilled: z79.boolean().optional(),
  isOutline: z79.boolean().optional(),
  strokeWidth: distance27.optional(),
  radius: distance27
});

// lib/components/trace-hint.ts
import { distance as distance28, layer_ref as layer_ref6, route_hint_point as route_hint_point6 } from "circuit-json";
import { z as z80 } from "zod";
var routeHintPointProps = z80.object({
  x: distance28,
  y: distance28,
  via: z80.boolean().optional(),
  toLayer: layer_ref6.optional()
});
var traceHintProps = z80.object({
  for: z80.string().optional().describe(
    "Selector for the port you're targeting, not required if you're inside a trace"
  ),
  order: z80.number().optional(),
  offset: route_hint_point6.or(routeHintPointProps).optional(),
  offsets: z80.array(route_hint_point6).or(z80.array(routeHintPointProps)).optional(),
  traceWidth: z80.number().optional()
});

// lib/components/port.ts
import { z as z81 } from "zod";
var portProps = commonLayoutProps.extend({
  name: z81.string(),
  pinNumber: z81.number().optional(),
  aliases: z81.array(z81.string()).optional(),
  direction
});

// lib/platformConfig.ts
import { z as z82 } from "zod";
var unvalidatedCircuitJson = z82.array(z82.any()).describe("Circuit JSON");
var pathToCircuitJsonFn = z82.function().args(z82.string()).returns(z82.promise(z82.object({ footprintCircuitJson: z82.array(z82.any()) }))).describe("A function that takes a path and returns Circuit JSON");
var platformConfig = z82.object({
  partsEngine: partsEngine.optional(),
  autorouter: autorouterProp.optional(),
  registryApiUrl: z82.string().optional(),
  cloudAutorouterUrl: z82.string().optional(),
  projectName: z82.string().optional(),
  version: z82.string().optional(),
  url: z82.string().optional(),
  printBoardInformationToSilkscreen: z82.boolean().optional(),
  localCacheEngine: z82.any().optional(),
  pcbDisabled: z82.boolean().optional(),
  schematicDisabled: z82.boolean().optional(),
  partsEngineDisabled: z82.boolean().optional(),
  footprintLibraryMap: z82.record(
    z82.string(),
    z82.record(
      z82.string(),
      z82.union([unvalidatedCircuitJson, pathToCircuitJsonFn])
    )
  ).optional()
});
expectTypesMatch(true);
export {
  autorouterConfig,
  autorouterProp,
  baseGroupProps,
  base_manual_edit_event,
  batteryPins,
  batteryProps,
  boardProps,
  border,
  breakoutPointProps,
  breakoutProps,
  bugProps,
  cadModelBase,
  cadModelJscad,
  cadModelObj,
  cadModelProp,
  cadModelStl,
  capacitorPinLabels,
  capacitorPins,
  capacitorProps,
  chipProps,
  circleCutoutProps,
  circleSmtPadProps,
  circleSolderPasteProps,
  commonComponentProps,
  commonLayoutProps,
  componentProps,
  connectorProps,
  constrainedLayoutProps,
  constraintProps,
  crystalPins,
  crystalProps,
  cutoutProps,
  diodePins,
  diodeProps,
  direction,
  directionAlongEdge,
  distanceOrMultiplier,
  edit_component_location_event,
  edit_pcb_component_location_event,
  edit_pcb_group_location_event,
  edit_schematic_component_location_event,
  edit_schematic_group_location_event,
  edit_trace_hint_event,
  explicitPinSideDefinition,
  fabricationNotePathProps,
  fabricationNoteTextProps,
  footprintProp,
  footprintProps,
  fusePinLabels,
  fuseProps,
  groupProps,
  holeProps,
  inductorPins,
  inductorProps,
  jumperProps,
  layoutConfig,
  ledPins,
  ledProps,
  lrPins,
  lrPolarPins,
  manual_edit_event,
  manual_edits_file,
  manual_pcb_placement,
  manual_schematic_placement,
  manual_trace_hint,
  mosfetPins,
  mosfetProps,
  netAliasProps,
  netLabelProps,
  netProps,
  ninePointAnchor,
  partsEngine,
  pcbKeepoutProps,
  pcbLayoutProps,
  pcbSameXConstraintProps,
  pcbSameYConstraintProps,
  pcbTraceProps,
  pcbXDistConstraintProps,
  pcbYDistConstraintProps,
  pillSmtPadProps,
  pinAttributeMap,
  pinCompatibleVariant,
  pinHeaderProps,
  pinLabelsProp,
  platedHoleProps,
  platformConfig,
  point3,
  polygonCutoutProps,
  polygonSmtPadProps,
  portHints,
  portProps,
  portRef,
  potentiometerProps,
  powerSourceProps,
  pushButtonProps,
  rectCutoutProps,
  rectSmtPadProps,
  rectSolderPasteProps,
  resistorPinLabels,
  resistorPins,
  resistorProps,
  resonatorProps,
  rotatedRectSmtPadProps,
  rotationPoint3,
  routeHintPointProps,
  schematicBoxProps,
  schematicCellProps,
  schematicLineProps,
  schematicOrientation,
  schematicPathProps,
  schematicPinArrangement,
  schematicPinLabel,
  schematicPinStyle,
  schematicPortArrangement,
  schematicRowProps,
  schematicTableProps,
  schematicTextProps,
  silkscreenCircleProps,
  silkscreenLineProps,
  silkscreenPathProps,
  silkscreenRectProps,
  silkscreenTextProps,
  smtPadProps,
  solderPasteProps,
  solderjumperProps,
  stampboardProps,
  subcircuitGroupProps,
  subcircuitGroupPropsWithBool,
  subcircuitProps,
  supplierProps,
  switchProps,
  testpointProps,
  traceHintProps,
  traceProps,
  transistorPins,
  transistorPinsLabels,
  transistorProps,
  viaProps
};
//# sourceMappingURL=index.js.map