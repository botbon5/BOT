import { z } from 'zod';
import { LayerRef, LayerRefInput, Point as Point$1, RouteHintPoint, PcbTrace, AnySourceComponent } from 'circuit-json';
import { ReactElement } from 'react';

declare const direction: z.ZodEnum<["up", "down", "left", "right"]>;
type Direction = "up" | "down" | "left" | "right";
type DirectionAlongEdge = "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
declare const directionAlongEdge: z.ZodEnum<["top-to-bottom", "left-to-right", "bottom-to-top", "right-to-left"]>;

declare const portHints: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">;
type PortHints = (string | number)[];

declare const rotationPoint3: z.ZodObject<{
    x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
    y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
    z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
}, "strip", z.ZodTypeAny, {
    x: string | number;
    y: string | number;
    z: string | number;
}, {
    x: string | number;
    y: string | number;
    z: string | number;
}>;
interface CadModelBase {
    rotationOffset?: number | {
        x: number | string;
        y: number | string;
        z: number | string;
    };
    positionOffset?: {
        x: number | string;
        y: number | string;
        z: number | string;
    };
    size?: {
        x: number | string;
        y: number | string;
        z: number | string;
    };
}
declare const cadModelBase: z.ZodObject<{
    rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
        x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        x: string | number;
        y: string | number;
        z: string | number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>]>>;
    positionOffset: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
    size: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
}, "strip", z.ZodTypeAny, {
    rotationOffset?: number | {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    positionOffset?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    size?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
}, {
    rotationOffset?: number | {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    positionOffset?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    size?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
}>;
interface CadModelStl extends CadModelBase {
    stlUrl: string;
}
declare const cadModelStl: z.ZodObject<{
    rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
        x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        x: string | number;
        y: string | number;
        z: string | number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>]>>;
    positionOffset: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
    size: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
} & {
    stlUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
    stlUrl: string;
    rotationOffset?: number | {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    positionOffset?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    size?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
}, {
    stlUrl: string;
    rotationOffset?: number | {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    positionOffset?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    size?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
}>;
interface CadModelObj extends CadModelBase {
    objUrl: string;
    mtlUrl?: string;
}
declare const cadModelObj: z.ZodObject<{
    rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
        x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        x: string | number;
        y: string | number;
        z: string | number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>]>>;
    positionOffset: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
    size: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
} & {
    objUrl: z.ZodString;
    mtlUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    objUrl: string;
    rotationOffset?: number | {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    positionOffset?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    size?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    mtlUrl?: string | undefined;
}, {
    objUrl: string;
    rotationOffset?: number | {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    positionOffset?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    size?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    mtlUrl?: string | undefined;
}>;
interface CadModelJscad extends CadModelBase {
    jscad: Record<string, any>;
}
declare const cadModelJscad: z.ZodObject<{
    rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
        x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        x: string | number;
        y: string | number;
        z: string | number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>]>>;
    positionOffset: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
    size: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
} & {
    jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    jscad: Record<string, any>;
    rotationOffset?: number | {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    positionOffset?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    size?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
}, {
    jscad: Record<string, any>;
    rotationOffset?: number | {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    positionOffset?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    size?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
}>;
type CadModelProp = null | string | CadModelStl | CadModelObj | CadModelJscad;
declare const cadModelProp: z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
    rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
        x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        x: string | number;
        y: string | number;
        z: string | number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>]>>;
    positionOffset: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
    size: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
} & {
    stlUrl: z.ZodString;
}, "strip", z.ZodTypeAny, {
    stlUrl: string;
    rotationOffset?: number | {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    positionOffset?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    size?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
}, {
    stlUrl: string;
    rotationOffset?: number | {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    positionOffset?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    size?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
}>, z.ZodObject<{
    rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
        x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        x: string | number;
        y: string | number;
        z: string | number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>]>>;
    positionOffset: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
    size: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
} & {
    objUrl: z.ZodString;
    mtlUrl: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    objUrl: string;
    rotationOffset?: number | {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    positionOffset?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    size?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    mtlUrl?: string | undefined;
}, {
    objUrl: string;
    rotationOffset?: number | {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    positionOffset?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    size?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    mtlUrl?: string | undefined;
}>, z.ZodObject<{
    rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
        x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
    }, "strip", z.ZodTypeAny, {
        x: string | number;
        y: string | number;
        z: string | number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>]>>;
    positionOffset: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
    size: z.ZodOptional<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        z: number;
    }, {
        x: string | number;
        y: string | number;
        z: string | number;
    }>>;
} & {
    jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    jscad: Record<string, any>;
    rotationOffset?: number | {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    positionOffset?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
    size?: {
        x: number;
        y: number;
        z: number;
    } | undefined;
}, {
    jscad: Record<string, any>;
    rotationOffset?: number | {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    positionOffset?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
    size?: {
        x: string | number;
        y: string | number;
        z: string | number;
    } | undefined;
}>]>;

/**
 * This is an abbreviated definition of the soup elements that you can find here:
 * https://docs.tscircuit.com/api-reference/advanced/soup#pcb-smtpad
 */
type FootprintSoupElements = {
    type: "pcb_smtpad" | "pcb_plated_hole";
    x: string | number;
    y: string | number;
    layer?: LayerRef;
    holeDiameter?: string | number;
    outerDiameter?: string | number;
    shape?: "circle" | "rect";
    width?: string | number;
    height?: string | number;
    portHints?: string[];
};
type FootprintProp = string | ReactElement | FootprintSoupElements[];
declare const footprintProp: z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>;

interface PcbLayoutProps {
    pcbX?: string | number;
    pcbY?: string | number;
    pcbRotation?: string | number;
    layer?: LayerRefInput;
    /**
     * If true, pcbX/pcbY will be interpreted relative to the parent group
     */
    pcbRelative?: boolean;
    /**
     * If true, both pcb and schematic coordinates will be interpreted relative to the parent group
     */
    relative?: boolean;
}
interface CommonLayoutProps {
    pcbX?: string | number;
    pcbY?: string | number;
    pcbRotation?: string | number;
    schX?: string | number;
    schY?: string | number;
    schRotation?: string | number;
    layer?: LayerRefInput;
    footprint?: FootprintProp;
    /**
     * If true, X/Y coordinates will be interpreted relative to the parent group
     */
    relative?: boolean;
    /**
     * If true, schX/schY will be interpreted relative to the parent group
     */
    schRelative?: boolean;
    /**
     * If true, pcbX/pcbY will be interpreted relative to the parent group
     */
    pcbRelative?: boolean;
}
declare const pcbLayoutProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}, {
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}>;
declare const commonLayoutProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
}, {
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
}>;
type SupplierName = "jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc";
type SupplierPartNumbers = {
    [k in SupplierName]?: string[];
};
interface SupplierProps {
    supplierPartNumbers?: SupplierPartNumbers;
}
declare const supplierProps: z.ZodObject<{
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>;
interface PinAttributeMap {
    providesPower?: boolean;
    requiresPower?: boolean;
    providesGround?: boolean;
    requiresGround?: boolean;
    providesVoltage?: string | number;
    requiresVoltage?: string | number;
}
declare const pinAttributeMap: z.ZodObject<{
    providesPower: z.ZodOptional<z.ZodBoolean>;
    requiresPower: z.ZodOptional<z.ZodBoolean>;
    providesGround: z.ZodOptional<z.ZodBoolean>;
    requiresGround: z.ZodOptional<z.ZodBoolean>;
    providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
}, "strip", z.ZodTypeAny, {
    providesPower?: boolean | undefined;
    requiresPower?: boolean | undefined;
    providesGround?: boolean | undefined;
    requiresGround?: boolean | undefined;
    providesVoltage?: string | number | undefined;
    requiresVoltage?: string | number | undefined;
}, {
    providesPower?: boolean | undefined;
    requiresPower?: boolean | undefined;
    providesGround?: boolean | undefined;
    requiresGround?: boolean | undefined;
    providesVoltage?: string | number | undefined;
    requiresVoltage?: string | number | undefined;
}>;
interface CommonComponentProps<PinLabel extends string = string> extends CommonLayoutProps {
    key?: any;
    name: string;
    pinAttributes?: Record<PinLabel, PinAttributeMap>;
    supplierPartNumbers?: SupplierPartNumbers;
    cadModel?: CadModelProp;
    children?: any;
    symbolName?: string;
    doNotPlace?: boolean;
}
declare const commonComponentProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
}, {
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
}>;
declare const componentProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
}, {
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
}>;
type ComponentProps = z.input<typeof componentProps>;
declare const lrPins: readonly ["pin1", "left", "pin2", "right"];
declare const lrPolarPins: readonly ["pin1", "left", "anode", "pos", "pin2", "right", "cathode", "neg"];
declare const distanceOrMultiplier: z.ZodUnion<[z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, z.ZodEnum<["2x", "3x", "4x"]>]>;

declare const point3: z.ZodObject<{
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    z: number;
}, {
    x: string | number;
    y: string | number;
    z: string | number;
}>;

declare const schematicOrientation: z.ZodEnum<["vertical", "horizontal", "pos_top", "pos_bottom", "pos_left", "pos_right", "neg_top", "neg_bottom", "neg_left", "neg_right"]>;
type SchematicOrientation = "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right";

/**
 * @deprecated Use SchematicPortArrangementWithPinCounts instead.
 */
interface SchematicPortArrangementWithSizes {
    leftSize?: number;
    topSize?: number;
    rightSize?: number;
    bottomSize?: number;
}
/**
 * Specifies the number of pins on each side of the schematic box component.
 */
interface SchematicPortArrangementWithPinCounts {
    leftPinCount?: number;
    topPinCount?: number;
    rightPinCount?: number;
    bottomPinCount?: number;
}
interface PinSideDefinition {
    pins: Array<number | string>;
    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
}
interface SchematicPortArrangementWithSides {
    leftSide?: PinSideDefinition;
    topSide?: PinSideDefinition;
    rightSide?: PinSideDefinition;
    bottomSide?: PinSideDefinition;
}
interface SchematicPortArrangement extends SchematicPortArrangementWithSizes, SchematicPortArrangementWithSides, SchematicPortArrangementWithPinCounts {
}
type SchematicPinArrangement = SchematicPortArrangement;
type SchematicPinArrangementWithSizes = SchematicPortArrangementWithSizes;
type SchematicPinArrangementWithSides = SchematicPortArrangementWithSides;
type SchematicPinArrangementWithPinCounts = SchematicPortArrangementWithPinCounts;
declare const explicitPinSideDefinition: z.ZodObject<{
    pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
    direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
}, "strip", z.ZodTypeAny, {
    pins: (string | number)[];
    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
}, {
    pins: (string | number)[];
    direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
}>;
/**
 * @deprecated Use schematicPinArrangement instead.
 */
declare const schematicPortArrangement: z.ZodObject<{
    leftSize: z.ZodOptional<z.ZodNumber>;
    topSize: z.ZodOptional<z.ZodNumber>;
    rightSize: z.ZodOptional<z.ZodNumber>;
    bottomSize: z.ZodOptional<z.ZodNumber>;
    leftPinCount: z.ZodOptional<z.ZodNumber>;
    rightPinCount: z.ZodOptional<z.ZodNumber>;
    topPinCount: z.ZodOptional<z.ZodNumber>;
    bottomPinCount: z.ZodOptional<z.ZodNumber>;
    leftSide: z.ZodOptional<z.ZodObject<{
        pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
        direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
    }, "strip", z.ZodTypeAny, {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    }, {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    }>>;
    rightSide: z.ZodOptional<z.ZodObject<{
        pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
        direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
    }, "strip", z.ZodTypeAny, {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    }, {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    }>>;
    topSide: z.ZodOptional<z.ZodObject<{
        pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
        direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
    }, "strip", z.ZodTypeAny, {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    }, {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    }>>;
    bottomSide: z.ZodOptional<z.ZodObject<{
        pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
        direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
    }, "strip", z.ZodTypeAny, {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    }, {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    }>>;
}, "strip", z.ZodTypeAny, {
    leftSize?: number | undefined;
    topSize?: number | undefined;
    rightSize?: number | undefined;
    bottomSize?: number | undefined;
    leftSide?: {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    } | undefined;
    topSide?: {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    } | undefined;
    rightSide?: {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    } | undefined;
    bottomSide?: {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    } | undefined;
    leftPinCount?: number | undefined;
    rightPinCount?: number | undefined;
    topPinCount?: number | undefined;
    bottomPinCount?: number | undefined;
}, {
    leftSize?: number | undefined;
    topSize?: number | undefined;
    rightSize?: number | undefined;
    bottomSize?: number | undefined;
    leftSide?: {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    } | undefined;
    topSide?: {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    } | undefined;
    rightSide?: {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    } | undefined;
    bottomSide?: {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    } | undefined;
    leftPinCount?: number | undefined;
    rightPinCount?: number | undefined;
    topPinCount?: number | undefined;
    bottomPinCount?: number | undefined;
}>;
declare const schematicPinArrangement: z.ZodObject<{
    leftSize: z.ZodOptional<z.ZodNumber>;
    topSize: z.ZodOptional<z.ZodNumber>;
    rightSize: z.ZodOptional<z.ZodNumber>;
    bottomSize: z.ZodOptional<z.ZodNumber>;
    leftPinCount: z.ZodOptional<z.ZodNumber>;
    rightPinCount: z.ZodOptional<z.ZodNumber>;
    topPinCount: z.ZodOptional<z.ZodNumber>;
    bottomPinCount: z.ZodOptional<z.ZodNumber>;
    leftSide: z.ZodOptional<z.ZodObject<{
        pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
        direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
    }, "strip", z.ZodTypeAny, {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    }, {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    }>>;
    rightSide: z.ZodOptional<z.ZodObject<{
        pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
        direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
    }, "strip", z.ZodTypeAny, {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    }, {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    }>>;
    topSide: z.ZodOptional<z.ZodObject<{
        pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
        direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
    }, "strip", z.ZodTypeAny, {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    }, {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    }>>;
    bottomSide: z.ZodOptional<z.ZodObject<{
        pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
        direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
    }, "strip", z.ZodTypeAny, {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    }, {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    }>>;
}, "strip", z.ZodTypeAny, {
    leftSize?: number | undefined;
    topSize?: number | undefined;
    rightSize?: number | undefined;
    bottomSize?: number | undefined;
    leftSide?: {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    } | undefined;
    topSide?: {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    } | undefined;
    rightSide?: {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    } | undefined;
    bottomSide?: {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    } | undefined;
    leftPinCount?: number | undefined;
    rightPinCount?: number | undefined;
    topPinCount?: number | undefined;
    bottomPinCount?: number | undefined;
}, {
    leftSize?: number | undefined;
    topSize?: number | undefined;
    rightSize?: number | undefined;
    bottomSize?: number | undefined;
    leftSide?: {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    } | undefined;
    topSide?: {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    } | undefined;
    rightSide?: {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    } | undefined;
    bottomSide?: {
        pins: (string | number)[];
        direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
    } | undefined;
    leftPinCount?: number | undefined;
    rightPinCount?: number | undefined;
    topPinCount?: number | undefined;
    bottomPinCount?: number | undefined;
}>;

type SchematicPinStyle = Record<string, {
    marginTop?: number | string;
    marginRight?: number | string;
    marginBottom?: number | string;
    marginLeft?: number | string;
    /** @deprecated use marginLeft */
    leftMargin?: number | string;
    /** @deprecated use marginRight */
    rightMargin?: number | string;
    /** @deprecated use marginTop */
    topMargin?: number | string;
    /** @deprecated use marginBottom */
    bottomMargin?: number | string;
}>;
declare const schematicPinStyle: z.ZodRecord<z.ZodString, z.ZodObject<{
    marginLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    marginRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    marginTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    marginBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    leftMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    rightMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    topMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    bottomMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    marginLeft?: number | undefined;
    marginRight?: number | undefined;
    marginTop?: number | undefined;
    marginBottom?: number | undefined;
    leftMargin?: number | undefined;
    rightMargin?: number | undefined;
    topMargin?: number | undefined;
    bottomMargin?: number | undefined;
}, {
    marginLeft?: string | number | undefined;
    marginRight?: string | number | undefined;
    marginTop?: string | number | undefined;
    marginBottom?: string | number | undefined;
    leftMargin?: string | number | undefined;
    rightMargin?: string | number | undefined;
    topMargin?: string | number | undefined;
    bottomMargin?: string | number | undefined;
}>>;

/**
 * Valid pin label string. Must consist only of letters,
 * numbers, or underscores.
 */
declare const schematicPinLabel: z.ZodString;
type SchematicPinLabel = z.infer<typeof schematicPinLabel>;

type Distance = number | string;

type Point = {
    x: number | string;
    y: number | string;
};

declare const base_manual_edit_event: z.ZodObject<{
    edit_event_id: z.ZodString;
    in_progress: z.ZodOptional<z.ZodBoolean>;
    created_at: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    edit_event_id: string;
    created_at: number;
    in_progress?: boolean | undefined;
}, {
    edit_event_id: string;
    created_at: number;
    in_progress?: boolean | undefined;
}>;
interface BaseManualEditEvent {
    edit_event_id: string;
    in_progress?: boolean;
    created_at: number;
}
type BaseManualEditEventInput = z.input<typeof base_manual_edit_event>;

declare const edit_pcb_component_location_event: z.ZodObject<{
    edit_event_id: z.ZodString;
    in_progress: z.ZodOptional<z.ZodBoolean>;
    created_at: z.ZodNumber;
} & {
    pcb_edit_event_type: z.ZodLiteral<"edit_component_location">;
    edit_event_type: z.ZodLiteral<"edit_pcb_component_location">;
    pcb_component_id: z.ZodString;
    original_center: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>;
    new_center: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>;
}, "strip", z.ZodTypeAny, {
    edit_event_id: string;
    created_at: number;
    pcb_edit_event_type: "edit_component_location";
    edit_event_type: "edit_pcb_component_location";
    pcb_component_id: string;
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
    in_progress?: boolean | undefined;
}, {
    edit_event_id: string;
    created_at: number;
    pcb_edit_event_type: "edit_component_location";
    edit_event_type: "edit_pcb_component_location";
    pcb_component_id: string;
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
    in_progress?: boolean | undefined;
}>;
/** @deprecated use edit_pcb_component_location_event instead */
declare const edit_component_location_event: z.ZodObject<{
    edit_event_id: z.ZodString;
    in_progress: z.ZodOptional<z.ZodBoolean>;
    created_at: z.ZodNumber;
} & {
    pcb_edit_event_type: z.ZodLiteral<"edit_component_location">;
    edit_event_type: z.ZodLiteral<"edit_pcb_component_location">;
    pcb_component_id: z.ZodString;
    original_center: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>;
    new_center: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>;
}, "strip", z.ZodTypeAny, {
    edit_event_id: string;
    created_at: number;
    pcb_edit_event_type: "edit_component_location";
    edit_event_type: "edit_pcb_component_location";
    pcb_component_id: string;
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
    in_progress?: boolean | undefined;
}, {
    edit_event_id: string;
    created_at: number;
    pcb_edit_event_type: "edit_component_location";
    edit_event_type: "edit_pcb_component_location";
    pcb_component_id: string;
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
    in_progress?: boolean | undefined;
}>;
interface EditPcbComponentLocationEvent extends BaseManualEditEvent {
    edit_event_type: "edit_pcb_component_location";
    /** @deprecated */
    pcb_edit_event_type: "edit_component_location";
    pcb_component_id: string;
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
}
type EditPcbComponentLocationEventInput = z.input<typeof edit_pcb_component_location_event>;

declare const edit_trace_hint_event: z.ZodObject<{
    edit_event_id: z.ZodString;
    in_progress: z.ZodOptional<z.ZodBoolean>;
    created_at: z.ZodNumber;
} & {
    pcb_edit_event_type: z.ZodLiteral<"edit_trace_hint">;
    edit_event_type: z.ZodOptional<z.ZodLiteral<"edit_pcb_trace_hint">>;
    pcb_port_id: z.ZodString;
    pcb_trace_hint_id: z.ZodOptional<z.ZodString>;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        via: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        via?: boolean | undefined;
    }, {
        x: number;
        y: number;
        via?: boolean | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    edit_event_id: string;
    created_at: number;
    pcb_edit_event_type: "edit_trace_hint";
    pcb_port_id: string;
    route: {
        x: number;
        y: number;
        via?: boolean | undefined;
    }[];
    in_progress?: boolean | undefined;
    edit_event_type?: "edit_pcb_trace_hint" | undefined;
    pcb_trace_hint_id?: string | undefined;
}, {
    edit_event_id: string;
    created_at: number;
    pcb_edit_event_type: "edit_trace_hint";
    pcb_port_id: string;
    route: {
        x: number;
        y: number;
        via?: boolean | undefined;
    }[];
    in_progress?: boolean | undefined;
    edit_event_type?: "edit_pcb_trace_hint" | undefined;
    pcb_trace_hint_id?: string | undefined;
}>;
interface EditTraceHintEvent extends BaseManualEditEvent {
    /** @deprecated */
    pcb_edit_event_type: "edit_trace_hint";
    edit_event_type?: "edit_pcb_trace_hint";
    pcb_port_id: string;
    pcb_trace_hint_id?: string;
    route: Array<{
        x: number;
        y: number;
        via?: boolean;
    }>;
}
type EditTraceHintEventInput = z.input<typeof edit_trace_hint_event>;

declare const edit_schematic_component_location_event: z.ZodObject<{
    edit_event_id: z.ZodString;
    in_progress: z.ZodOptional<z.ZodBoolean>;
    created_at: z.ZodNumber;
} & {
    edit_event_type: z.ZodLiteral<"edit_schematic_component_location">;
    schematic_component_id: z.ZodString;
    original_center: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>;
    new_center: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>;
}, "strip", z.ZodTypeAny, {
    edit_event_id: string;
    created_at: number;
    edit_event_type: "edit_schematic_component_location";
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
    schematic_component_id: string;
    in_progress?: boolean | undefined;
}, {
    edit_event_id: string;
    created_at: number;
    edit_event_type: "edit_schematic_component_location";
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
    schematic_component_id: string;
    in_progress?: boolean | undefined;
}>;
interface EditSchematicComponentLocationEvent extends BaseManualEditEvent {
    edit_event_type: "edit_schematic_component_location";
    schematic_component_id: string;
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
}
type EditSchematicComponentLocationEventInput = z.input<typeof edit_schematic_component_location_event>;

declare const edit_pcb_group_location_event: z.ZodObject<{
    edit_event_id: z.ZodString;
    in_progress: z.ZodOptional<z.ZodBoolean>;
    created_at: z.ZodNumber;
} & {
    edit_event_type: z.ZodLiteral<"edit_pcb_group_location">;
    pcb_group_id: z.ZodString;
    original_center: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>;
    new_center: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>;
}, "strip", z.ZodTypeAny, {
    edit_event_id: string;
    created_at: number;
    edit_event_type: "edit_pcb_group_location";
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
    pcb_group_id: string;
    in_progress?: boolean | undefined;
}, {
    edit_event_id: string;
    created_at: number;
    edit_event_type: "edit_pcb_group_location";
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
    pcb_group_id: string;
    in_progress?: boolean | undefined;
}>;
interface EditPcbGroupLocationEvent extends BaseManualEditEvent {
    edit_event_type: "edit_pcb_group_location";
    pcb_group_id: string;
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
}
type EditPcbGroupLocationEventInput = z.input<typeof edit_pcb_group_location_event>;

declare const edit_schematic_group_location_event: z.ZodObject<{
    edit_event_id: z.ZodString;
    in_progress: z.ZodOptional<z.ZodBoolean>;
    created_at: z.ZodNumber;
} & {
    edit_event_type: z.ZodLiteral<"edit_schematic_group_location">;
    schematic_group_id: z.ZodString;
    original_center: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>;
    new_center: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>;
}, "strip", z.ZodTypeAny, {
    edit_event_id: string;
    created_at: number;
    edit_event_type: "edit_schematic_group_location";
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
    schematic_group_id: string;
    in_progress?: boolean | undefined;
}, {
    edit_event_id: string;
    created_at: number;
    edit_event_type: "edit_schematic_group_location";
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
    schematic_group_id: string;
    in_progress?: boolean | undefined;
}>;
interface EditSchematicGroupLocationEvent extends BaseManualEditEvent {
    edit_event_type: "edit_schematic_group_location";
    schematic_group_id: string;
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
}
type EditSchematicGroupLocationEventInput = z.input<typeof edit_schematic_group_location_event>;

type ManualEditEvent = EditPcbComponentLocationEvent | EditTraceHintEvent | EditSchematicComponentLocationEvent;
declare const manual_edit_event: z.ZodUnion<[z.ZodObject<{
    edit_event_id: z.ZodString;
    in_progress: z.ZodOptional<z.ZodBoolean>;
    created_at: z.ZodNumber;
} & {
    pcb_edit_event_type: z.ZodLiteral<"edit_component_location">;
    edit_event_type: z.ZodLiteral<"edit_pcb_component_location">;
    pcb_component_id: z.ZodString;
    original_center: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>;
    new_center: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>;
}, "strip", z.ZodTypeAny, {
    edit_event_id: string;
    created_at: number;
    pcb_edit_event_type: "edit_component_location";
    edit_event_type: "edit_pcb_component_location";
    pcb_component_id: string;
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
    in_progress?: boolean | undefined;
}, {
    edit_event_id: string;
    created_at: number;
    pcb_edit_event_type: "edit_component_location";
    edit_event_type: "edit_pcb_component_location";
    pcb_component_id: string;
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
    in_progress?: boolean | undefined;
}>, z.ZodObject<{
    edit_event_id: z.ZodString;
    in_progress: z.ZodOptional<z.ZodBoolean>;
    created_at: z.ZodNumber;
} & {
    pcb_edit_event_type: z.ZodLiteral<"edit_trace_hint">;
    edit_event_type: z.ZodOptional<z.ZodLiteral<"edit_pcb_trace_hint">>;
    pcb_port_id: z.ZodString;
    pcb_trace_hint_id: z.ZodOptional<z.ZodString>;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
        via: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        via?: boolean | undefined;
    }, {
        x: number;
        y: number;
        via?: boolean | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    edit_event_id: string;
    created_at: number;
    pcb_edit_event_type: "edit_trace_hint";
    pcb_port_id: string;
    route: {
        x: number;
        y: number;
        via?: boolean | undefined;
    }[];
    in_progress?: boolean | undefined;
    edit_event_type?: "edit_pcb_trace_hint" | undefined;
    pcb_trace_hint_id?: string | undefined;
}, {
    edit_event_id: string;
    created_at: number;
    pcb_edit_event_type: "edit_trace_hint";
    pcb_port_id: string;
    route: {
        x: number;
        y: number;
        via?: boolean | undefined;
    }[];
    in_progress?: boolean | undefined;
    edit_event_type?: "edit_pcb_trace_hint" | undefined;
    pcb_trace_hint_id?: string | undefined;
}>, z.ZodObject<{
    edit_event_id: z.ZodString;
    in_progress: z.ZodOptional<z.ZodBoolean>;
    created_at: z.ZodNumber;
} & {
    edit_event_type: z.ZodLiteral<"edit_schematic_component_location">;
    schematic_component_id: z.ZodString;
    original_center: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>;
    new_center: z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>;
}, "strip", z.ZodTypeAny, {
    edit_event_id: string;
    created_at: number;
    edit_event_type: "edit_schematic_component_location";
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
    schematic_component_id: string;
    in_progress?: boolean | undefined;
}, {
    edit_event_id: string;
    created_at: number;
    edit_event_type: "edit_schematic_component_location";
    original_center: {
        x: number;
        y: number;
    };
    new_center: {
        x: number;
        y: number;
    };
    schematic_component_id: string;
    in_progress?: boolean | undefined;
}>]>;
type ManualEditEventInput = z.input<typeof manual_edit_event>;

declare const manual_pcb_placement: z.ZodObject<{
    selector: z.ZodString;
    relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
}, "strip", z.ZodTypeAny, {
    selector: string;
    relative_to: string;
    center: {
        x: number;
        y: number;
    };
}, {
    selector: string;
    center: {
        x: string | number;
        y: string | number;
    };
    relative_to?: string | undefined;
}>;
interface ManualPcbPlacement {
    selector: string;
    relative_to: string;
    center: Point$1;
}
type ManualPcbPlacementInput = z.input<typeof manual_pcb_placement>;

declare const manual_trace_hint: z.ZodObject<{
    pcb_port_selector: z.ZodString;
    offsets: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        via: z.ZodOptional<z.ZodBoolean>;
        to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>>;
        trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }, {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    pcb_port_selector: string;
    offsets: {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }[];
}, {
    pcb_port_selector: string;
    offsets: {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }[];
}>;
interface ManualTraceHint {
    pcb_port_selector: string;
    offsets: Array<RouteHintPoint>;
}
type ManualTraceHintInput = z.input<typeof manual_trace_hint>;

declare const manual_schematic_placement: z.ZodObject<{
    selector: z.ZodString;
    relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    center: z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>;
}, "strip", z.ZodTypeAny, {
    selector: string;
    relative_to: string;
    center: {
        x: number;
        y: number;
    };
}, {
    selector: string;
    center: {
        x: string | number;
        y: string | number;
    };
    relative_to?: string | undefined;
}>;
interface ManualSchematicPlacement {
    selector: string;
    relative_to: string;
    center: Point$1;
}
type ManualSchematicPlacementInput = z.input<typeof manual_schematic_placement>;

declare const manual_edits_file: z.ZodObject<{
    pcb_placements: z.ZodOptional<z.ZodArray<z.ZodObject<{
        selector: z.ZodString;
        relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
        center: z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: string | number;
            y: string | number;
        }>;
    }, "strip", z.ZodTypeAny, {
        selector: string;
        relative_to: string;
        center: {
            x: number;
            y: number;
        };
    }, {
        selector: string;
        center: {
            x: string | number;
            y: string | number;
        };
        relative_to?: string | undefined;
    }>, "many">>;
    manual_trace_hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
        pcb_port_selector: z.ZodString;
        offsets: z.ZodArray<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            via: z.ZodOptional<z.ZodBoolean>;
            to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
                name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
            }, "strip", z.ZodTypeAny, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }, {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            }>>;
            trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            via?: boolean | undefined;
            to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            trace_width?: number | undefined;
        }, {
            x: string | number;
            y: string | number;
            via?: boolean | undefined;
            to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            trace_width?: string | number | undefined;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        pcb_port_selector: string;
        offsets: {
            x: number;
            y: number;
            via?: boolean | undefined;
            to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            trace_width?: number | undefined;
        }[];
    }, {
        pcb_port_selector: string;
        offsets: {
            x: string | number;
            y: string | number;
            via?: boolean | undefined;
            to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            trace_width?: string | number | undefined;
        }[];
    }>, "many">>;
    schematic_placements: z.ZodOptional<z.ZodArray<z.ZodObject<{
        selector: z.ZodString;
        relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
        center: z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
        }, {
            x: string | number;
            y: string | number;
        }>;
    }, "strip", z.ZodTypeAny, {
        selector: string;
        relative_to: string;
        center: {
            x: number;
            y: number;
        };
    }, {
        selector: string;
        center: {
            x: string | number;
            y: string | number;
        };
        relative_to?: string | undefined;
    }>, "many">>;
}, "strip", z.ZodTypeAny, {
    pcb_placements?: {
        selector: string;
        relative_to: string;
        center: {
            x: number;
            y: number;
        };
    }[] | undefined;
    manual_trace_hints?: {
        pcb_port_selector: string;
        offsets: {
            x: number;
            y: number;
            via?: boolean | undefined;
            to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
            trace_width?: number | undefined;
        }[];
    }[] | undefined;
    schematic_placements?: {
        selector: string;
        relative_to: string;
        center: {
            x: number;
            y: number;
        };
    }[] | undefined;
}, {
    pcb_placements?: {
        selector: string;
        center: {
            x: string | number;
            y: string | number;
        };
        relative_to?: string | undefined;
    }[] | undefined;
    manual_trace_hints?: {
        pcb_port_selector: string;
        offsets: {
            x: string | number;
            y: string | number;
            via?: boolean | undefined;
            to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
            } | undefined;
            trace_width?: string | number | undefined;
        }[];
    }[] | undefined;
    schematic_placements?: {
        selector: string;
        center: {
            x: string | number;
            y: string | number;
        };
        relative_to?: string | undefined;
    }[] | undefined;
}>;
interface ManualEditsFile {
    pcb_placements?: ManualPcbPlacement[];
    manual_trace_hints?: ManualTraceHint[];
    schematic_placements?: ManualSchematicPlacement[];
}
type ManualEditsFileInput = z.input<typeof manual_edits_file>;

declare const layoutConfig: z.ZodObject<{
    layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
    position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
    grid: z.ZodOptional<z.ZodBoolean>;
    gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridTemplateRows: z.ZodOptional<z.ZodString>;
    gridTemplateColumns: z.ZodOptional<z.ZodString>;
    gridTemplate: z.ZodOptional<z.ZodString>;
    gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
    flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
    alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
    justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
    flexRow: z.ZodOptional<z.ZodBoolean>;
    flexColumn: z.ZodOptional<z.ZodBoolean>;
    gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    pack: z.ZodOptional<z.ZodBoolean>;
    packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
    packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
    padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    matchAdapt: z.ZodOptional<z.ZodBoolean>;
    matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: number | undefined;
    paddingLeft?: number | undefined;
    paddingRight?: number | undefined;
    paddingTop?: number | undefined;
    paddingBottom?: number | undefined;
    paddingX?: number | undefined;
    paddingY?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
}, {
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: string | number | undefined;
    paddingLeft?: string | number | undefined;
    paddingRight?: string | number | undefined;
    paddingTop?: string | number | undefined;
    paddingBottom?: string | number | undefined;
    paddingX?: string | number | undefined;
    paddingY?: string | number | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
}>;
interface LayoutConfig {
    layoutMode?: "grid" | "flex" | "match-adapt" | "relative" | "none";
    position?: "absolute" | "relative";
    grid?: boolean;
    gridCols?: number | string;
    gridRows?: number | string;
    gridTemplateRows?: string;
    gridTemplateColumns?: string;
    gridTemplate?: string;
    gridGap?: number | string;
    flex?: boolean | string;
    flexDirection?: "row" | "column";
    alignItems?: "start" | "center" | "end" | "stretch";
    justifyContent?: "start" | "center" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly";
    flexRow?: boolean;
    flexColumn?: boolean;
    gap?: number | string;
    pack?: boolean;
    packOrderStrategy?: "largest_to_smallest";
    packPlacementStrategy?: "shortest_connection_along_outline";
    padding?: Distance;
    paddingLeft?: Distance;
    paddingRight?: Distance;
    paddingTop?: Distance;
    paddingBottom?: Distance;
    paddingX?: Distance;
    paddingY?: Distance;
    width?: Distance;
    height?: Distance;
    matchAdapt?: boolean;
    matchAdaptTemplate?: any;
}
interface Border {
    strokeWidth?: Distance;
    dashed?: boolean;
    solid?: boolean;
}
declare const border: z.ZodObject<{
    strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    dashed: z.ZodOptional<z.ZodBoolean>;
    solid: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    strokeWidth?: number | undefined;
    dashed?: boolean | undefined;
    solid?: boolean | undefined;
}, {
    strokeWidth?: string | number | undefined;
    dashed?: boolean | undefined;
    solid?: boolean | undefined;
}>;
interface BaseGroupProps extends CommonLayoutProps, LayoutConfig {
    name?: string;
    key?: any;
    children?: any;
    /**
     * Title to display above this group in the schematic view
     */
    schTitle?: string;
    pcbWidth?: Distance;
    pcbHeight?: Distance;
    schWidth?: Distance;
    schHeight?: Distance;
    pcbLayout?: LayoutConfig;
    schLayout?: LayoutConfig;
    cellBorder?: Border | null;
    border?: Border | null;
    schPadding?: Distance;
    schPaddingLeft?: Distance;
    schPaddingRight?: Distance;
    schPaddingTop?: Distance;
    schPaddingBottom?: Distance;
}
type PartsEngine = {
    findPart: (params: {
        sourceComponent: AnySourceComponent;
        footprinterString?: string;
    }) => Promise<SupplierPartNumbers> | SupplierPartNumbers;
};
interface PcbRouteCache {
    pcbTraces: PcbTrace[];
    cacheKey: string;
}
interface AutorouterConfig {
    serverUrl?: string;
    inputFormat?: "simplified" | "circuit-json";
    serverMode?: "job" | "solve-endpoint";
    serverCacheEnabled?: boolean;
    cache?: PcbRouteCache;
    traceClearance?: Distance;
    groupMode?: "sequential-trace" | "subcircuit";
    local?: boolean;
    algorithmFn?: (simpleRouteJson: any) => Promise<any>;
    preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud";
}
type AutorouterProp = AutorouterConfig | "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud";
declare const autorouterConfig: z.ZodObject<{
    serverUrl: z.ZodOptional<z.ZodString>;
    inputFormat: z.ZodOptional<z.ZodEnum<["simplified", "circuit-json"]>>;
    serverMode: z.ZodOptional<z.ZodEnum<["job", "solve-endpoint"]>>;
    serverCacheEnabled: z.ZodOptional<z.ZodBoolean>;
    cache: z.ZodOptional<z.ZodType<PcbRouteCache, z.ZodTypeDef, PcbRouteCache>>;
    traceClearance: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    groupMode: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit"]>>;
    algorithmFn: z.ZodOptional<z.ZodType<(simpleRouteJson: any) => Promise<any>, z.ZodTypeDef, (simpleRouteJson: any) => Promise<any>>>;
    preset: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit", "auto", "auto-local", "auto-cloud"]>>;
    local: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    serverUrl?: string | undefined;
    inputFormat?: "simplified" | "circuit-json" | undefined;
    serverMode?: "job" | "solve-endpoint" | undefined;
    serverCacheEnabled?: boolean | undefined;
    cache?: PcbRouteCache | undefined;
    traceClearance?: number | undefined;
    groupMode?: "sequential-trace" | "subcircuit" | undefined;
    algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
    preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
    local?: boolean | undefined;
}, {
    serverUrl?: string | undefined;
    inputFormat?: "simplified" | "circuit-json" | undefined;
    serverMode?: "job" | "solve-endpoint" | undefined;
    serverCacheEnabled?: boolean | undefined;
    cache?: PcbRouteCache | undefined;
    traceClearance?: string | number | undefined;
    groupMode?: "sequential-trace" | "subcircuit" | undefined;
    algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
    preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
    local?: boolean | undefined;
}>;
declare const autorouterProp: z.ZodUnion<[z.ZodObject<{
    serverUrl: z.ZodOptional<z.ZodString>;
    inputFormat: z.ZodOptional<z.ZodEnum<["simplified", "circuit-json"]>>;
    serverMode: z.ZodOptional<z.ZodEnum<["job", "solve-endpoint"]>>;
    serverCacheEnabled: z.ZodOptional<z.ZodBoolean>;
    cache: z.ZodOptional<z.ZodType<PcbRouteCache, z.ZodTypeDef, PcbRouteCache>>;
    traceClearance: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    groupMode: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit"]>>;
    algorithmFn: z.ZodOptional<z.ZodType<(simpleRouteJson: any) => Promise<any>, z.ZodTypeDef, (simpleRouteJson: any) => Promise<any>>>;
    preset: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit", "auto", "auto-local", "auto-cloud"]>>;
    local: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    serverUrl?: string | undefined;
    inputFormat?: "simplified" | "circuit-json" | undefined;
    serverMode?: "job" | "solve-endpoint" | undefined;
    serverCacheEnabled?: boolean | undefined;
    cache?: PcbRouteCache | undefined;
    traceClearance?: number | undefined;
    groupMode?: "sequential-trace" | "subcircuit" | undefined;
    algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
    preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
    local?: boolean | undefined;
}, {
    serverUrl?: string | undefined;
    inputFormat?: "simplified" | "circuit-json" | undefined;
    serverMode?: "job" | "solve-endpoint" | undefined;
    serverCacheEnabled?: boolean | undefined;
    cache?: PcbRouteCache | undefined;
    traceClearance?: string | number | undefined;
    groupMode?: "sequential-trace" | "subcircuit" | undefined;
    algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
    preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
    local?: boolean | undefined;
}>, z.ZodLiteral<"sequential-trace">, z.ZodLiteral<"subcircuit">, z.ZodLiteral<"auto">, z.ZodLiteral<"auto-local">, z.ZodLiteral<"auto-cloud">]>;
interface SubcircuitGroupProps extends BaseGroupProps {
    manualEdits?: ManualEditsFileInput;
    routingDisabled?: boolean;
    defaultTraceWidth?: Distance;
    minTraceWidth?: Distance;
    pcbRouteCache?: PcbRouteCache;
    autorouter?: AutorouterProp;
    /**
     * If true, we'll automatically layout the schematic for this group. Must be
     * a subcircuit (currently). This is eventually going to be replaced with more
     * sophisticated layout options/modes and will be enabled by default.
     */
    schAutoLayoutEnabled?: boolean;
    /**
     * If true, net labels will automatically be created for complex traces
     */
    schTraceAutoLabelEnabled?: boolean;
    partsEngine?: PartsEngine;
    /** When autosizing, the board will be made square */
    square?: boolean;
    /** Desired empty area of the board e.g. "22mm^2" or "20%" */
    emptyArea?: string;
    /** Desired filled area of the board e.g. "22mm^2" or "20%" */
    filledArea?: string;
    width?: number | string;
    height?: number | string;
    outline?: Point[];
    outlineOffsetX?: number | string;
    outlineOffsetY?: number | string;
}
interface SubcircuitGroupPropsWithBool extends SubcircuitGroupProps {
    subcircuit: true;
}
interface NonSubcircuitGroupProps extends BaseGroupProps {
    subcircuit?: false | undefined;
}
type GroupProps = SubcircuitGroupPropsWithBool | NonSubcircuitGroupProps;
declare const baseGroupProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    pcbWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    schLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    cellBorder: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    border: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    schPadding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
    position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
    grid: z.ZodOptional<z.ZodBoolean>;
    gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridTemplateRows: z.ZodOptional<z.ZodString>;
    gridTemplateColumns: z.ZodOptional<z.ZodString>;
    gridTemplate: z.ZodOptional<z.ZodString>;
    gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
    flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
    alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
    justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
    flexRow: z.ZodOptional<z.ZodBoolean>;
    flexColumn: z.ZodOptional<z.ZodBoolean>;
    gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    pack: z.ZodOptional<z.ZodBoolean>;
    packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
    packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
    padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    matchAdapt: z.ZodOptional<z.ZodBoolean>;
    matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    name: z.ZodOptional<z.ZodString>;
    children: z.ZodOptional<z.ZodAny>;
    schTitle: z.ZodOptional<z.ZodString>;
    key: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: number | undefined;
    paddingLeft?: number | undefined;
    paddingRight?: number | undefined;
    paddingTop?: number | undefined;
    paddingBottom?: number | undefined;
    paddingX?: number | undefined;
    paddingY?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: number | undefined;
    pcbHeight?: number | undefined;
    schWidth?: number | undefined;
    schHeight?: number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: number | undefined;
    schPaddingLeft?: number | undefined;
    schPaddingRight?: number | undefined;
    schPaddingTop?: number | undefined;
    schPaddingBottom?: number | undefined;
}, {
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: string | number | undefined;
    paddingLeft?: string | number | undefined;
    paddingRight?: string | number | undefined;
    paddingTop?: string | number | undefined;
    paddingBottom?: string | number | undefined;
    paddingX?: string | number | undefined;
    paddingY?: string | number | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: string | number | undefined;
    pcbHeight?: string | number | undefined;
    schWidth?: string | number | undefined;
    schHeight?: string | number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: string | number | undefined;
    schPaddingLeft?: string | number | undefined;
    schPaddingRight?: string | number | undefined;
    schPaddingTop?: string | number | undefined;
    schPaddingBottom?: string | number | undefined;
}>;
declare const partsEngine: z.ZodType<PartsEngine, z.ZodTypeDef, PartsEngine>;
declare const subcircuitGroupProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    pcbWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    schLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    cellBorder: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    border: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    schPadding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
    position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
    grid: z.ZodOptional<z.ZodBoolean>;
    gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridTemplateRows: z.ZodOptional<z.ZodString>;
    gridTemplateColumns: z.ZodOptional<z.ZodString>;
    gridTemplate: z.ZodOptional<z.ZodString>;
    gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
    flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
    alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
    justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
    flexRow: z.ZodOptional<z.ZodBoolean>;
    flexColumn: z.ZodOptional<z.ZodBoolean>;
    gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    pack: z.ZodOptional<z.ZodBoolean>;
    packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
    packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
    padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    matchAdapt: z.ZodOptional<z.ZodBoolean>;
    matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    name: z.ZodOptional<z.ZodString>;
    children: z.ZodOptional<z.ZodAny>;
    schTitle: z.ZodOptional<z.ZodString>;
    key: z.ZodOptional<z.ZodAny>;
} & {
    manualEdits: z.ZodOptional<z.ZodObject<{
        pcb_placements: z.ZodOptional<z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
            center: z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }, {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }>, "many">>;
        manual_trace_hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
            pcb_port_selector: z.ZodString;
            offsets: z.ZodArray<z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                via: z.ZodOptional<z.ZodBoolean>;
                to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
                    name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
                }, "strip", z.ZodTypeAny, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>>;
                trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }, {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }, {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }>, "many">>;
        schematic_placements: z.ZodOptional<z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
            center: z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }, {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        pcb_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
    }, {
        pcb_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
    }>>;
    schAutoLayoutEnabled: z.ZodOptional<z.ZodBoolean>;
    schTraceAutoLabelEnabled: z.ZodOptional<z.ZodBoolean>;
    routingDisabled: z.ZodOptional<z.ZodBoolean>;
    defaultTraceWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    minTraceWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    partsEngine: z.ZodOptional<z.ZodType<PartsEngine, z.ZodTypeDef, PartsEngine>>;
    pcbRouteCache: z.ZodOptional<z.ZodType<PcbRouteCache, z.ZodTypeDef, PcbRouteCache>>;
    autorouter: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        serverUrl: z.ZodOptional<z.ZodString>;
        inputFormat: z.ZodOptional<z.ZodEnum<["simplified", "circuit-json"]>>;
        serverMode: z.ZodOptional<z.ZodEnum<["job", "solve-endpoint"]>>;
        serverCacheEnabled: z.ZodOptional<z.ZodBoolean>;
        cache: z.ZodOptional<z.ZodType<PcbRouteCache, z.ZodTypeDef, PcbRouteCache>>;
        traceClearance: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        groupMode: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit"]>>;
        algorithmFn: z.ZodOptional<z.ZodType<(simpleRouteJson: any) => Promise<any>, z.ZodTypeDef, (simpleRouteJson: any) => Promise<any>>>;
        preset: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit", "auto", "auto-local", "auto-cloud"]>>;
        local: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    }, {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: string | number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    }>, z.ZodLiteral<"sequential-trace">, z.ZodLiteral<"subcircuit">, z.ZodLiteral<"auto">, z.ZodLiteral<"auto-local">, z.ZodLiteral<"auto-cloud">]>>;
    square: z.ZodOptional<z.ZodBoolean>;
    emptyArea: z.ZodOptional<z.ZodString>;
    filledArea: z.ZodOptional<z.ZodString>;
    width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    outline: z.ZodOptional<z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">>;
    outlineOffsetX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    outlineOffsetY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: number | undefined;
    paddingLeft?: number | undefined;
    paddingRight?: number | undefined;
    paddingTop?: number | undefined;
    paddingBottom?: number | undefined;
    paddingX?: number | undefined;
    paddingY?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: number | undefined;
    pcbHeight?: number | undefined;
    schWidth?: number | undefined;
    schHeight?: number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: number | undefined;
    schPaddingLeft?: number | undefined;
    schPaddingRight?: number | undefined;
    schPaddingTop?: number | undefined;
    schPaddingBottom?: number | undefined;
    manualEdits?: {
        pcb_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
    } | undefined;
    routingDisabled?: boolean | undefined;
    defaultTraceWidth?: number | undefined;
    minTraceWidth?: number | undefined;
    pcbRouteCache?: PcbRouteCache | undefined;
    autorouter?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    } | undefined;
    schAutoLayoutEnabled?: boolean | undefined;
    schTraceAutoLabelEnabled?: boolean | undefined;
    partsEngine?: PartsEngine | undefined;
    square?: boolean | undefined;
    emptyArea?: string | undefined;
    filledArea?: string | undefined;
    outline?: {
        x: number;
        y: number;
    }[] | undefined;
    outlineOffsetX?: number | undefined;
    outlineOffsetY?: number | undefined;
}, {
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: string | number | undefined;
    paddingLeft?: string | number | undefined;
    paddingRight?: string | number | undefined;
    paddingTop?: string | number | undefined;
    paddingBottom?: string | number | undefined;
    paddingX?: string | number | undefined;
    paddingY?: string | number | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: string | number | undefined;
    pcbHeight?: string | number | undefined;
    schWidth?: string | number | undefined;
    schHeight?: string | number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: string | number | undefined;
    schPaddingLeft?: string | number | undefined;
    schPaddingRight?: string | number | undefined;
    schPaddingTop?: string | number | undefined;
    schPaddingBottom?: string | number | undefined;
    manualEdits?: {
        pcb_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
    } | undefined;
    routingDisabled?: boolean | undefined;
    defaultTraceWidth?: string | number | undefined;
    minTraceWidth?: string | number | undefined;
    pcbRouteCache?: PcbRouteCache | undefined;
    autorouter?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: string | number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    } | undefined;
    schAutoLayoutEnabled?: boolean | undefined;
    schTraceAutoLabelEnabled?: boolean | undefined;
    partsEngine?: PartsEngine | undefined;
    square?: boolean | undefined;
    emptyArea?: string | undefined;
    filledArea?: string | undefined;
    outline?: {
        x: string | number;
        y: string | number;
    }[] | undefined;
    outlineOffsetX?: string | number | undefined;
    outlineOffsetY?: string | number | undefined;
}>;
declare const subcircuitGroupPropsWithBool: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    pcbWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    schLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    cellBorder: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    border: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    schPadding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
    position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
    grid: z.ZodOptional<z.ZodBoolean>;
    gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridTemplateRows: z.ZodOptional<z.ZodString>;
    gridTemplateColumns: z.ZodOptional<z.ZodString>;
    gridTemplate: z.ZodOptional<z.ZodString>;
    gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
    flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
    alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
    justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
    flexRow: z.ZodOptional<z.ZodBoolean>;
    flexColumn: z.ZodOptional<z.ZodBoolean>;
    gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    pack: z.ZodOptional<z.ZodBoolean>;
    packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
    packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
    padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    matchAdapt: z.ZodOptional<z.ZodBoolean>;
    matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    name: z.ZodOptional<z.ZodString>;
    children: z.ZodOptional<z.ZodAny>;
    schTitle: z.ZodOptional<z.ZodString>;
    key: z.ZodOptional<z.ZodAny>;
} & {
    manualEdits: z.ZodOptional<z.ZodObject<{
        pcb_placements: z.ZodOptional<z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
            center: z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }, {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }>, "many">>;
        manual_trace_hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
            pcb_port_selector: z.ZodString;
            offsets: z.ZodArray<z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                via: z.ZodOptional<z.ZodBoolean>;
                to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
                    name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
                }, "strip", z.ZodTypeAny, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>>;
                trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }, {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }, {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }>, "many">>;
        schematic_placements: z.ZodOptional<z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
            center: z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }, {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        pcb_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
    }, {
        pcb_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
    }>>;
    schAutoLayoutEnabled: z.ZodOptional<z.ZodBoolean>;
    schTraceAutoLabelEnabled: z.ZodOptional<z.ZodBoolean>;
    routingDisabled: z.ZodOptional<z.ZodBoolean>;
    defaultTraceWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    minTraceWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    partsEngine: z.ZodOptional<z.ZodType<PartsEngine, z.ZodTypeDef, PartsEngine>>;
    pcbRouteCache: z.ZodOptional<z.ZodType<PcbRouteCache, z.ZodTypeDef, PcbRouteCache>>;
    autorouter: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        serverUrl: z.ZodOptional<z.ZodString>;
        inputFormat: z.ZodOptional<z.ZodEnum<["simplified", "circuit-json"]>>;
        serverMode: z.ZodOptional<z.ZodEnum<["job", "solve-endpoint"]>>;
        serverCacheEnabled: z.ZodOptional<z.ZodBoolean>;
        cache: z.ZodOptional<z.ZodType<PcbRouteCache, z.ZodTypeDef, PcbRouteCache>>;
        traceClearance: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        groupMode: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit"]>>;
        algorithmFn: z.ZodOptional<z.ZodType<(simpleRouteJson: any) => Promise<any>, z.ZodTypeDef, (simpleRouteJson: any) => Promise<any>>>;
        preset: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit", "auto", "auto-local", "auto-cloud"]>>;
        local: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    }, {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: string | number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    }>, z.ZodLiteral<"sequential-trace">, z.ZodLiteral<"subcircuit">, z.ZodLiteral<"auto">, z.ZodLiteral<"auto-local">, z.ZodLiteral<"auto-cloud">]>>;
    square: z.ZodOptional<z.ZodBoolean>;
    emptyArea: z.ZodOptional<z.ZodString>;
    filledArea: z.ZodOptional<z.ZodString>;
    width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    outline: z.ZodOptional<z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">>;
    outlineOffsetX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    outlineOffsetY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
} & {
    subcircuit: z.ZodLiteral<true>;
}, "strip", z.ZodTypeAny, {
    subcircuit: true;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: number | undefined;
    paddingLeft?: number | undefined;
    paddingRight?: number | undefined;
    paddingTop?: number | undefined;
    paddingBottom?: number | undefined;
    paddingX?: number | undefined;
    paddingY?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: number | undefined;
    pcbHeight?: number | undefined;
    schWidth?: number | undefined;
    schHeight?: number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: number | undefined;
    schPaddingLeft?: number | undefined;
    schPaddingRight?: number | undefined;
    schPaddingTop?: number | undefined;
    schPaddingBottom?: number | undefined;
    manualEdits?: {
        pcb_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
    } | undefined;
    routingDisabled?: boolean | undefined;
    defaultTraceWidth?: number | undefined;
    minTraceWidth?: number | undefined;
    pcbRouteCache?: PcbRouteCache | undefined;
    autorouter?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    } | undefined;
    schAutoLayoutEnabled?: boolean | undefined;
    schTraceAutoLabelEnabled?: boolean | undefined;
    partsEngine?: PartsEngine | undefined;
    square?: boolean | undefined;
    emptyArea?: string | undefined;
    filledArea?: string | undefined;
    outline?: {
        x: number;
        y: number;
    }[] | undefined;
    outlineOffsetX?: number | undefined;
    outlineOffsetY?: number | undefined;
}, {
    subcircuit: true;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: string | number | undefined;
    paddingLeft?: string | number | undefined;
    paddingRight?: string | number | undefined;
    paddingTop?: string | number | undefined;
    paddingBottom?: string | number | undefined;
    paddingX?: string | number | undefined;
    paddingY?: string | number | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: string | number | undefined;
    pcbHeight?: string | number | undefined;
    schWidth?: string | number | undefined;
    schHeight?: string | number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: string | number | undefined;
    schPaddingLeft?: string | number | undefined;
    schPaddingRight?: string | number | undefined;
    schPaddingTop?: string | number | undefined;
    schPaddingBottom?: string | number | undefined;
    manualEdits?: {
        pcb_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
    } | undefined;
    routingDisabled?: boolean | undefined;
    defaultTraceWidth?: string | number | undefined;
    minTraceWidth?: string | number | undefined;
    pcbRouteCache?: PcbRouteCache | undefined;
    autorouter?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: string | number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    } | undefined;
    schAutoLayoutEnabled?: boolean | undefined;
    schTraceAutoLabelEnabled?: boolean | undefined;
    partsEngine?: PartsEngine | undefined;
    square?: boolean | undefined;
    emptyArea?: string | undefined;
    filledArea?: string | undefined;
    outline?: {
        x: string | number;
        y: string | number;
    }[] | undefined;
    outlineOffsetX?: string | number | undefined;
    outlineOffsetY?: string | number | undefined;
}>;
declare const groupProps: z.ZodDiscriminatedUnion<"subcircuit", [z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    pcbWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    schLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    cellBorder: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    border: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    schPadding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
    position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
    grid: z.ZodOptional<z.ZodBoolean>;
    gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridTemplateRows: z.ZodOptional<z.ZodString>;
    gridTemplateColumns: z.ZodOptional<z.ZodString>;
    gridTemplate: z.ZodOptional<z.ZodString>;
    gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
    flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
    alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
    justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
    flexRow: z.ZodOptional<z.ZodBoolean>;
    flexColumn: z.ZodOptional<z.ZodBoolean>;
    gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    pack: z.ZodOptional<z.ZodBoolean>;
    packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
    packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
    padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    matchAdapt: z.ZodOptional<z.ZodBoolean>;
    matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    name: z.ZodOptional<z.ZodString>;
    children: z.ZodOptional<z.ZodAny>;
    schTitle: z.ZodOptional<z.ZodString>;
    key: z.ZodOptional<z.ZodAny>;
} & {
    subcircuit: z.ZodOptional<z.ZodLiteral<false>>;
}, "strip", z.ZodTypeAny, {
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: number | undefined;
    paddingLeft?: number | undefined;
    paddingRight?: number | undefined;
    paddingTop?: number | undefined;
    paddingBottom?: number | undefined;
    paddingX?: number | undefined;
    paddingY?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: number | undefined;
    pcbHeight?: number | undefined;
    schWidth?: number | undefined;
    schHeight?: number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: number | undefined;
    schPaddingLeft?: number | undefined;
    schPaddingRight?: number | undefined;
    schPaddingTop?: number | undefined;
    schPaddingBottom?: number | undefined;
    subcircuit?: false | undefined;
}, {
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: string | number | undefined;
    paddingLeft?: string | number | undefined;
    paddingRight?: string | number | undefined;
    paddingTop?: string | number | undefined;
    paddingBottom?: string | number | undefined;
    paddingX?: string | number | undefined;
    paddingY?: string | number | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: string | number | undefined;
    pcbHeight?: string | number | undefined;
    schWidth?: string | number | undefined;
    schHeight?: string | number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: string | number | undefined;
    schPaddingLeft?: string | number | undefined;
    schPaddingRight?: string | number | undefined;
    schPaddingTop?: string | number | undefined;
    schPaddingBottom?: string | number | undefined;
    subcircuit?: false | undefined;
}>, z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    pcbWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    schLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    cellBorder: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    border: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    schPadding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
    position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
    grid: z.ZodOptional<z.ZodBoolean>;
    gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridTemplateRows: z.ZodOptional<z.ZodString>;
    gridTemplateColumns: z.ZodOptional<z.ZodString>;
    gridTemplate: z.ZodOptional<z.ZodString>;
    gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
    flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
    alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
    justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
    flexRow: z.ZodOptional<z.ZodBoolean>;
    flexColumn: z.ZodOptional<z.ZodBoolean>;
    gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    pack: z.ZodOptional<z.ZodBoolean>;
    packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
    packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
    padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    matchAdapt: z.ZodOptional<z.ZodBoolean>;
    matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    name: z.ZodOptional<z.ZodString>;
    children: z.ZodOptional<z.ZodAny>;
    schTitle: z.ZodOptional<z.ZodString>;
    key: z.ZodOptional<z.ZodAny>;
} & {
    manualEdits: z.ZodOptional<z.ZodObject<{
        pcb_placements: z.ZodOptional<z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
            center: z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }, {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }>, "many">>;
        manual_trace_hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
            pcb_port_selector: z.ZodString;
            offsets: z.ZodArray<z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                via: z.ZodOptional<z.ZodBoolean>;
                to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
                    name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
                }, "strip", z.ZodTypeAny, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>>;
                trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }, {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }, {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }>, "many">>;
        schematic_placements: z.ZodOptional<z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
            center: z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }, {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        pcb_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
    }, {
        pcb_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
    }>>;
    schAutoLayoutEnabled: z.ZodOptional<z.ZodBoolean>;
    schTraceAutoLabelEnabled: z.ZodOptional<z.ZodBoolean>;
    routingDisabled: z.ZodOptional<z.ZodBoolean>;
    defaultTraceWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    minTraceWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    partsEngine: z.ZodOptional<z.ZodType<PartsEngine, z.ZodTypeDef, PartsEngine>>;
    pcbRouteCache: z.ZodOptional<z.ZodType<PcbRouteCache, z.ZodTypeDef, PcbRouteCache>>;
    autorouter: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        serverUrl: z.ZodOptional<z.ZodString>;
        inputFormat: z.ZodOptional<z.ZodEnum<["simplified", "circuit-json"]>>;
        serverMode: z.ZodOptional<z.ZodEnum<["job", "solve-endpoint"]>>;
        serverCacheEnabled: z.ZodOptional<z.ZodBoolean>;
        cache: z.ZodOptional<z.ZodType<PcbRouteCache, z.ZodTypeDef, PcbRouteCache>>;
        traceClearance: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        groupMode: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit"]>>;
        algorithmFn: z.ZodOptional<z.ZodType<(simpleRouteJson: any) => Promise<any>, z.ZodTypeDef, (simpleRouteJson: any) => Promise<any>>>;
        preset: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit", "auto", "auto-local", "auto-cloud"]>>;
        local: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    }, {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: string | number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    }>, z.ZodLiteral<"sequential-trace">, z.ZodLiteral<"subcircuit">, z.ZodLiteral<"auto">, z.ZodLiteral<"auto-local">, z.ZodLiteral<"auto-cloud">]>>;
    square: z.ZodOptional<z.ZodBoolean>;
    emptyArea: z.ZodOptional<z.ZodString>;
    filledArea: z.ZodOptional<z.ZodString>;
    width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    outline: z.ZodOptional<z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">>;
    outlineOffsetX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    outlineOffsetY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
} & {
    subcircuit: z.ZodLiteral<true>;
}, "strip", z.ZodTypeAny, {
    subcircuit: true;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: number | undefined;
    paddingLeft?: number | undefined;
    paddingRight?: number | undefined;
    paddingTop?: number | undefined;
    paddingBottom?: number | undefined;
    paddingX?: number | undefined;
    paddingY?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: number | undefined;
    pcbHeight?: number | undefined;
    schWidth?: number | undefined;
    schHeight?: number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: number | undefined;
    schPaddingLeft?: number | undefined;
    schPaddingRight?: number | undefined;
    schPaddingTop?: number | undefined;
    schPaddingBottom?: number | undefined;
    manualEdits?: {
        pcb_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
    } | undefined;
    routingDisabled?: boolean | undefined;
    defaultTraceWidth?: number | undefined;
    minTraceWidth?: number | undefined;
    pcbRouteCache?: PcbRouteCache | undefined;
    autorouter?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    } | undefined;
    schAutoLayoutEnabled?: boolean | undefined;
    schTraceAutoLabelEnabled?: boolean | undefined;
    partsEngine?: PartsEngine | undefined;
    square?: boolean | undefined;
    emptyArea?: string | undefined;
    filledArea?: string | undefined;
    outline?: {
        x: number;
        y: number;
    }[] | undefined;
    outlineOffsetX?: number | undefined;
    outlineOffsetY?: number | undefined;
}, {
    subcircuit: true;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: string | number | undefined;
    paddingLeft?: string | number | undefined;
    paddingRight?: string | number | undefined;
    paddingTop?: string | number | undefined;
    paddingBottom?: string | number | undefined;
    paddingX?: string | number | undefined;
    paddingY?: string | number | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: string | number | undefined;
    pcbHeight?: string | number | undefined;
    schWidth?: string | number | undefined;
    schHeight?: string | number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: string | number | undefined;
    schPaddingLeft?: string | number | undefined;
    schPaddingRight?: string | number | undefined;
    schPaddingTop?: string | number | undefined;
    schPaddingBottom?: string | number | undefined;
    manualEdits?: {
        pcb_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
    } | undefined;
    routingDisabled?: boolean | undefined;
    defaultTraceWidth?: string | number | undefined;
    minTraceWidth?: string | number | undefined;
    pcbRouteCache?: PcbRouteCache | undefined;
    autorouter?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: string | number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    } | undefined;
    schAutoLayoutEnabled?: boolean | undefined;
    schTraceAutoLabelEnabled?: boolean | undefined;
    partsEngine?: PartsEngine | undefined;
    square?: boolean | undefined;
    emptyArea?: string | undefined;
    filledArea?: string | undefined;
    outline?: {
        x: string | number;
        y: string | number;
    }[] | undefined;
    outlineOffsetX?: string | number | undefined;
    outlineOffsetY?: string | number | undefined;
}>]>;

interface BoardProps extends Omit<SubcircuitGroupProps, "subcircuit"> {
    material?: "fr4" | "fr1";
    /** Number of layers for the PCB */
    layers?: 2 | 4;
}
declare const boardProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    pcbWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    schLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    cellBorder: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    border: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    schPadding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
    position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
    grid: z.ZodOptional<z.ZodBoolean>;
    gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridTemplateRows: z.ZodOptional<z.ZodString>;
    gridTemplateColumns: z.ZodOptional<z.ZodString>;
    gridTemplate: z.ZodOptional<z.ZodString>;
    gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
    flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
    alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
    justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
    flexRow: z.ZodOptional<z.ZodBoolean>;
    flexColumn: z.ZodOptional<z.ZodBoolean>;
    gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    pack: z.ZodOptional<z.ZodBoolean>;
    packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
    packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
    padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    matchAdapt: z.ZodOptional<z.ZodBoolean>;
    matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    name: z.ZodOptional<z.ZodString>;
    children: z.ZodOptional<z.ZodAny>;
    schTitle: z.ZodOptional<z.ZodString>;
    key: z.ZodOptional<z.ZodAny>;
} & {
    manualEdits: z.ZodOptional<z.ZodObject<{
        pcb_placements: z.ZodOptional<z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
            center: z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }, {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }>, "many">>;
        manual_trace_hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
            pcb_port_selector: z.ZodString;
            offsets: z.ZodArray<z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                via: z.ZodOptional<z.ZodBoolean>;
                to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
                    name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
                }, "strip", z.ZodTypeAny, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>>;
                trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }, {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }, {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }>, "many">>;
        schematic_placements: z.ZodOptional<z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
            center: z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }, {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        pcb_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
    }, {
        pcb_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
    }>>;
    schAutoLayoutEnabled: z.ZodOptional<z.ZodBoolean>;
    schTraceAutoLabelEnabled: z.ZodOptional<z.ZodBoolean>;
    routingDisabled: z.ZodOptional<z.ZodBoolean>;
    defaultTraceWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    minTraceWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    partsEngine: z.ZodOptional<z.ZodType<PartsEngine, z.ZodTypeDef, PartsEngine>>;
    pcbRouteCache: z.ZodOptional<z.ZodType<PcbRouteCache, z.ZodTypeDef, PcbRouteCache>>;
    autorouter: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        serverUrl: z.ZodOptional<z.ZodString>;
        inputFormat: z.ZodOptional<z.ZodEnum<["simplified", "circuit-json"]>>;
        serverMode: z.ZodOptional<z.ZodEnum<["job", "solve-endpoint"]>>;
        serverCacheEnabled: z.ZodOptional<z.ZodBoolean>;
        cache: z.ZodOptional<z.ZodType<PcbRouteCache, z.ZodTypeDef, PcbRouteCache>>;
        traceClearance: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        groupMode: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit"]>>;
        algorithmFn: z.ZodOptional<z.ZodType<(simpleRouteJson: any) => Promise<any>, z.ZodTypeDef, (simpleRouteJson: any) => Promise<any>>>;
        preset: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit", "auto", "auto-local", "auto-cloud"]>>;
        local: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    }, {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: string | number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    }>, z.ZodLiteral<"sequential-trace">, z.ZodLiteral<"subcircuit">, z.ZodLiteral<"auto">, z.ZodLiteral<"auto-local">, z.ZodLiteral<"auto-cloud">]>>;
    square: z.ZodOptional<z.ZodBoolean>;
    emptyArea: z.ZodOptional<z.ZodString>;
    filledArea: z.ZodOptional<z.ZodString>;
    width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    outline: z.ZodOptional<z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">>;
    outlineOffsetX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    outlineOffsetY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
} & {
    material: z.ZodDefault<z.ZodEnum<["fr4", "fr1"]>>;
    layers: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
}, "strip", z.ZodTypeAny, {
    material: "fr4" | "fr1";
    layers: 2 | 4;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: number | undefined;
    paddingLeft?: number | undefined;
    paddingRight?: number | undefined;
    paddingTop?: number | undefined;
    paddingBottom?: number | undefined;
    paddingX?: number | undefined;
    paddingY?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: number | undefined;
    pcbHeight?: number | undefined;
    schWidth?: number | undefined;
    schHeight?: number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: number | undefined;
    schPaddingLeft?: number | undefined;
    schPaddingRight?: number | undefined;
    schPaddingTop?: number | undefined;
    schPaddingBottom?: number | undefined;
    manualEdits?: {
        pcb_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
    } | undefined;
    routingDisabled?: boolean | undefined;
    defaultTraceWidth?: number | undefined;
    minTraceWidth?: number | undefined;
    pcbRouteCache?: PcbRouteCache | undefined;
    autorouter?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    } | undefined;
    schAutoLayoutEnabled?: boolean | undefined;
    schTraceAutoLabelEnabled?: boolean | undefined;
    partsEngine?: PartsEngine | undefined;
    square?: boolean | undefined;
    emptyArea?: string | undefined;
    filledArea?: string | undefined;
    outline?: {
        x: number;
        y: number;
    }[] | undefined;
    outlineOffsetX?: number | undefined;
    outlineOffsetY?: number | undefined;
}, {
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: string | number | undefined;
    paddingLeft?: string | number | undefined;
    paddingRight?: string | number | undefined;
    paddingTop?: string | number | undefined;
    paddingBottom?: string | number | undefined;
    paddingX?: string | number | undefined;
    paddingY?: string | number | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: string | number | undefined;
    pcbHeight?: string | number | undefined;
    schWidth?: string | number | undefined;
    schHeight?: string | number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: string | number | undefined;
    schPaddingLeft?: string | number | undefined;
    schPaddingRight?: string | number | undefined;
    schPaddingTop?: string | number | undefined;
    schPaddingBottom?: string | number | undefined;
    manualEdits?: {
        pcb_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
    } | undefined;
    routingDisabled?: boolean | undefined;
    defaultTraceWidth?: string | number | undefined;
    minTraceWidth?: string | number | undefined;
    pcbRouteCache?: PcbRouteCache | undefined;
    autorouter?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: string | number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    } | undefined;
    schAutoLayoutEnabled?: boolean | undefined;
    schTraceAutoLabelEnabled?: boolean | undefined;
    partsEngine?: PartsEngine | undefined;
    square?: boolean | undefined;
    emptyArea?: string | undefined;
    filledArea?: string | undefined;
    outline?: {
        x: string | number;
        y: string | number;
    }[] | undefined;
    outlineOffsetX?: string | number | undefined;
    outlineOffsetY?: string | number | undefined;
    material?: "fr4" | "fr1" | undefined;
    layers?: 2 | 4 | undefined;
}>;

interface BreakoutProps extends Omit<SubcircuitGroupProps, "subcircuit"> {
    padding?: Distance;
    paddingLeft?: Distance;
    paddingRight?: Distance;
    paddingTop?: Distance;
    paddingBottom?: Distance;
}
declare const breakoutProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    pcbWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    schLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    cellBorder: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    border: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    schPadding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
    position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
    grid: z.ZodOptional<z.ZodBoolean>;
    gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridTemplateRows: z.ZodOptional<z.ZodString>;
    gridTemplateColumns: z.ZodOptional<z.ZodString>;
    gridTemplate: z.ZodOptional<z.ZodString>;
    gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
    flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
    alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
    justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
    flexRow: z.ZodOptional<z.ZodBoolean>;
    flexColumn: z.ZodOptional<z.ZodBoolean>;
    gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    pack: z.ZodOptional<z.ZodBoolean>;
    packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
    packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
    paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    matchAdapt: z.ZodOptional<z.ZodBoolean>;
    matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    name: z.ZodOptional<z.ZodString>;
    children: z.ZodOptional<z.ZodAny>;
    schTitle: z.ZodOptional<z.ZodString>;
    key: z.ZodOptional<z.ZodAny>;
    manualEdits: z.ZodOptional<z.ZodObject<{
        pcb_placements: z.ZodOptional<z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
            center: z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }, {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }>, "many">>;
        manual_trace_hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
            pcb_port_selector: z.ZodString;
            offsets: z.ZodArray<z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                via: z.ZodOptional<z.ZodBoolean>;
                to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
                    name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
                }, "strip", z.ZodTypeAny, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>>;
                trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }, {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }, {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }>, "many">>;
        schematic_placements: z.ZodOptional<z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
            center: z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }, {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        pcb_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
    }, {
        pcb_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
    }>>;
    schAutoLayoutEnabled: z.ZodOptional<z.ZodBoolean>;
    schTraceAutoLabelEnabled: z.ZodOptional<z.ZodBoolean>;
    routingDisabled: z.ZodOptional<z.ZodBoolean>;
    defaultTraceWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    minTraceWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    partsEngine: z.ZodOptional<z.ZodType<PartsEngine, z.ZodTypeDef, PartsEngine>>;
    pcbRouteCache: z.ZodOptional<z.ZodType<PcbRouteCache, z.ZodTypeDef, PcbRouteCache>>;
    autorouter: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        serverUrl: z.ZodOptional<z.ZodString>;
        inputFormat: z.ZodOptional<z.ZodEnum<["simplified", "circuit-json"]>>;
        serverMode: z.ZodOptional<z.ZodEnum<["job", "solve-endpoint"]>>;
        serverCacheEnabled: z.ZodOptional<z.ZodBoolean>;
        cache: z.ZodOptional<z.ZodType<PcbRouteCache, z.ZodTypeDef, PcbRouteCache>>;
        traceClearance: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        groupMode: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit"]>>;
        algorithmFn: z.ZodOptional<z.ZodType<(simpleRouteJson: any) => Promise<any>, z.ZodTypeDef, (simpleRouteJson: any) => Promise<any>>>;
        preset: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit", "auto", "auto-local", "auto-cloud"]>>;
        local: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    }, {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: string | number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    }>, z.ZodLiteral<"sequential-trace">, z.ZodLiteral<"subcircuit">, z.ZodLiteral<"auto">, z.ZodLiteral<"auto-local">, z.ZodLiteral<"auto-cloud">]>>;
    square: z.ZodOptional<z.ZodBoolean>;
    emptyArea: z.ZodOptional<z.ZodString>;
    filledArea: z.ZodOptional<z.ZodString>;
    width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    outline: z.ZodOptional<z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">>;
    outlineOffsetX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    outlineOffsetY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
} & {
    padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: number | undefined;
    paddingLeft?: number | undefined;
    paddingRight?: number | undefined;
    paddingTop?: number | undefined;
    paddingBottom?: number | undefined;
    paddingX?: number | undefined;
    paddingY?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: number | undefined;
    pcbHeight?: number | undefined;
    schWidth?: number | undefined;
    schHeight?: number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: number | undefined;
    schPaddingLeft?: number | undefined;
    schPaddingRight?: number | undefined;
    schPaddingTop?: number | undefined;
    schPaddingBottom?: number | undefined;
    manualEdits?: {
        pcb_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
    } | undefined;
    routingDisabled?: boolean | undefined;
    defaultTraceWidth?: number | undefined;
    minTraceWidth?: number | undefined;
    pcbRouteCache?: PcbRouteCache | undefined;
    autorouter?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    } | undefined;
    schAutoLayoutEnabled?: boolean | undefined;
    schTraceAutoLabelEnabled?: boolean | undefined;
    partsEngine?: PartsEngine | undefined;
    square?: boolean | undefined;
    emptyArea?: string | undefined;
    filledArea?: string | undefined;
    outline?: {
        x: number;
        y: number;
    }[] | undefined;
    outlineOffsetX?: number | undefined;
    outlineOffsetY?: number | undefined;
}, {
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: string | number | undefined;
    paddingLeft?: string | number | undefined;
    paddingRight?: string | number | undefined;
    paddingTop?: string | number | undefined;
    paddingBottom?: string | number | undefined;
    paddingX?: string | number | undefined;
    paddingY?: string | number | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: string | number | undefined;
    pcbHeight?: string | number | undefined;
    schWidth?: string | number | undefined;
    schHeight?: string | number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: string | number | undefined;
    schPaddingLeft?: string | number | undefined;
    schPaddingRight?: string | number | undefined;
    schPaddingTop?: string | number | undefined;
    schPaddingBottom?: string | number | undefined;
    manualEdits?: {
        pcb_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
    } | undefined;
    routingDisabled?: boolean | undefined;
    defaultTraceWidth?: string | number | undefined;
    minTraceWidth?: string | number | undefined;
    pcbRouteCache?: PcbRouteCache | undefined;
    autorouter?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: string | number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    } | undefined;
    schAutoLayoutEnabled?: boolean | undefined;
    schTraceAutoLabelEnabled?: boolean | undefined;
    partsEngine?: PartsEngine | undefined;
    square?: boolean | undefined;
    emptyArea?: string | undefined;
    filledArea?: string | undefined;
    outline?: {
        x: string | number;
        y: string | number;
    }[] | undefined;
    outlineOffsetX?: string | number | undefined;
    outlineOffsetY?: string | number | undefined;
}>;

type ConnectionTarget = string;
/**
 * Defines a mapping of strings to connection paths e.g.
 *
 * const connections: Connections = {
 *   GND: ".U1 > .GND",
 *   VCC: ".U1 > .VCC",
 * }
 *
 * Connections are used as both inputs and outputs. For example, you might
 * receive connections when using `sel` to select a chip.
 *
 * const u1Connections = sel.U1(MyChip)
 *
 * You can also define a module with connections like this:
 *
 * export const MyModule = (props: { connections: { GND: string, VCC: string } }) => {
 *   return (
 *     <group>
 *       <capacitor name="C1" connections={{
 *         anode: props.connections.GND,
 *         cathode: props.connections.VCC,
 *       }} />
 *     </group>
 *   )
 * }
 */
type Connections<PinLabel extends string = string> = Partial<Record<PinLabel, ConnectionTarget | ConnectionTarget[] | readonly ConnectionTarget[]>>;
/**
 * Defines a mapping of strings (usually chip names) to connections e.g.
 *
 * const selectors: Selectors = {
 *   U1: { GND: ".U1 > .GND", VCC: ".U1 > .VCC" },
 *   U2: {
 *     GND: ".U2 > .pin1",
 *     VCC: ".U2 > .pin2",
 *     CUSTOM_DATA_1: ".U2 > .pin3",
 *     CUSTOM_DATA_2: ".U2 > .pin4",
 *   },
 * }
 *
 * A user can also use selectors to define the connections, this is helpful when
 * there's multiple chips in the group.
 *
 * ```tsx
 * const MyModule = (props: {
 *   selectors: {
 *     U1: { GND: string, VCC: string },
 *     R1: { GND: string, VCC: string }
 *   }
 * }) => {
 *   return (
 *     <group>
 *       <resistor name="R1" connections={{
 *         pin1: props.selectors.R1.GND,
 *         pin2: props.selectors.R1.VCC,
 *       }} />
 *       <capacitor name="C1" connections={{
 *         anode: props.selectors.U1.GND,
 *         cathode: props.selectors.U1.VCC,
 *       }} />
 *     </group>
 *   )
 * }
 * ```
 *
 * These selectors can also be used with "sel":
 *
 * sel.M1(MyModule).U1.GND // ".M1 > .C1 > .anode"
 */
type Selectors = Record<string, Connections>;

type PinLabelsProp<PinNumber extends string = string, PinLabel extends string = string> = Record<PinNumber, PinLabel | readonly PinLabel[] | PinLabel[]>;
type PinLabelFromPinLabelMap<PinLabelMap extends PinLabelsProp> = PinLabelMap extends PinLabelsProp<infer PinNumber, infer PinLabel> ? PinLabel : never;
interface PinCompatibleVariant {
    manufacturerPartNumber?: string;
    supplierPartNumber?: SupplierPartNumbers;
}
interface ChipPropsSU<PinLabel extends SchematicPinLabel = SchematicPinLabel> extends CommonComponentProps<PinLabel> {
    manufacturerPartNumber?: string;
    pinLabels?: PinLabelsProp<SchematicPinLabel, PinLabel>;
    /**
     * Whether to show pin aliases in the schematic
     */
    showPinAliases?: boolean;
    /**
     * Labels for PCB pins
     */
    pcbPinLabels?: Record<string, string>;
    schPinArrangement?: SchematicPortArrangement;
    /** @deprecated Use schPinArrangement instead. */
    schPortArrangement?: SchematicPortArrangement;
    pinCompatibleVariants?: PinCompatibleVariant[];
    schPinStyle?: SchematicPinStyle;
    schPinSpacing?: Distance;
    schWidth?: Distance;
    schHeight?: Distance;
    noSchematicRepresentation?: boolean;
    internallyConnectedPins?: string[][];
    externallyConnectedPins?: string[][];
    connections?: Connections<PinLabel>;
}
type ChipProps<PinLabelMap extends PinLabelsProp | string = string> = ChipPropsSU<PinLabelMap extends PinLabelsProp ? PinLabelFromPinLabelMap<PinLabelMap> | keyof PinLabelMap : PinLabelMap>;
/**
 * Get the pin labels for a component
 *
 *   const pinLabels = { pin1: "VCC", pin2: "GND", pin3: "DATA" } as const
 *   export const MyChip = (props: ChipProps<typeof pinLabels>) => {
 *     // ...
 *   }
 *   type MyChipPinLabels = ChipPinLabels<typeof MyChip>
 *   // MyChipPinLabels is "VCC" | "GND" | "DATA"
 *
 */
type ChipPinLabels<T extends (props: ChipProps<any>) => any> = T extends (props: infer Props) => any ? Props extends ChipProps<infer PinLabelMap> ? PinLabelMap extends PinLabelsProp ? PinLabelFromPinLabelMap<PinLabelMap> : PinLabelMap extends string ? PinLabelMap : never : never : never;
/**
 * Get the connection prop type for a component
 *
 *   const pinLabels = { pin1: "VCC", pin2: "GND", pin3: "DATA" } as const
 *   export const MyChip = (props: ChipProps<typeof pinLabels>) => {
 *     // ...
 *   }
 *   const connections: ChipConnections<typeof MyChip> = {
 *     VCC: "...",
 *     GND: "...",
 *     DATA: "...",
 *   }
 *
 */
type ChipConnections<T extends (props: ChipProps<any>) => any> = {
    [K in ChipPinLabels<T>]: string;
};
declare const pinLabelsProp: z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodReadonly<z.ZodArray<z.ZodString, "many">>]>, z.ZodArray<z.ZodString, "many">]>>;
declare const pinCompatibleVariant: z.ZodObject<{
    manufacturerPartNumber: z.ZodOptional<z.ZodString>;
    supplierPartNumber: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    manufacturerPartNumber?: string | undefined;
    supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}, {
    manufacturerPartNumber?: string | undefined;
    supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
}>;
declare const chipProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    manufacturerPartNumber: z.ZodOptional<z.ZodString>;
    pinLabels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodReadonly<z.ZodArray<z.ZodString, "many">>]>, z.ZodArray<z.ZodString, "many">]>>>;
    showPinAliases: z.ZodOptional<z.ZodBoolean>;
    pcbPinLabels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    internallyConnectedPins: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    externallyConnectedPins: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    schPinArrangement: z.ZodOptional<z.ZodObject<{
        leftSize: z.ZodOptional<z.ZodNumber>;
        topSize: z.ZodOptional<z.ZodNumber>;
        rightSize: z.ZodOptional<z.ZodNumber>;
        bottomSize: z.ZodOptional<z.ZodNumber>;
        leftPinCount: z.ZodOptional<z.ZodNumber>;
        rightPinCount: z.ZodOptional<z.ZodNumber>;
        topPinCount: z.ZodOptional<z.ZodNumber>;
        bottomPinCount: z.ZodOptional<z.ZodNumber>;
        leftSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        rightSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        topSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        bottomSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
    }, "strip", z.ZodTypeAny, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }>>;
    schPortArrangement: z.ZodOptional<z.ZodObject<{
        leftSize: z.ZodOptional<z.ZodNumber>;
        topSize: z.ZodOptional<z.ZodNumber>;
        rightSize: z.ZodOptional<z.ZodNumber>;
        bottomSize: z.ZodOptional<z.ZodNumber>;
        leftPinCount: z.ZodOptional<z.ZodNumber>;
        rightPinCount: z.ZodOptional<z.ZodNumber>;
        topPinCount: z.ZodOptional<z.ZodNumber>;
        bottomPinCount: z.ZodOptional<z.ZodNumber>;
        leftSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        rightSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        topSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        bottomSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
    }, "strip", z.ZodTypeAny, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }>>;
    pinCompatibleVariants: z.ZodOptional<z.ZodArray<z.ZodObject<{
        manufacturerPartNumber: z.ZodOptional<z.ZodString>;
        supplierPartNumber: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        manufacturerPartNumber?: string | undefined;
        supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    }, {
        manufacturerPartNumber?: string | undefined;
        supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    }>, "many">>;
    schPinStyle: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        marginLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        leftMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        rightMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        topMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        bottomMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        marginLeft?: number | undefined;
        marginRight?: number | undefined;
        marginTop?: number | undefined;
        marginBottom?: number | undefined;
        leftMargin?: number | undefined;
        rightMargin?: number | undefined;
        topMargin?: number | undefined;
        bottomMargin?: number | undefined;
    }, {
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        marginTop?: string | number | undefined;
        marginBottom?: string | number | undefined;
        leftMargin?: string | number | undefined;
        rightMargin?: string | number | undefined;
        topMargin?: string | number | undefined;
        bottomMargin?: string | number | undefined;
    }>>>;
    schPinSpacing: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    noSchematicRepresentation: z.ZodOptional<z.ZodBoolean>;
    connections: z.ZodOptional<z.ZodPipeline<z.ZodType<Partial<Record<string, string | string[] | readonly string[]>>, z.ZodTypeDef, Partial<Record<string, string | string[] | readonly string[]>>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodReadonly<z.ZodArray<z.ZodString, "many">>]>, z.ZodArray<z.ZodString, "many">]>>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schWidth?: number | undefined;
    schHeight?: number | undefined;
    manufacturerPartNumber?: string | undefined;
    pinLabels?: Record<string, string | readonly string[] | string[]> | undefined;
    showPinAliases?: boolean | undefined;
    pcbPinLabels?: Record<string, string> | undefined;
    internallyConnectedPins?: string[][] | undefined;
    externallyConnectedPins?: string[][] | undefined;
    schPinArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    schPortArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    pinCompatibleVariants?: {
        manufacturerPartNumber?: string | undefined;
        supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    }[] | undefined;
    schPinStyle?: Record<string, {
        marginLeft?: number | undefined;
        marginRight?: number | undefined;
        marginTop?: number | undefined;
        marginBottom?: number | undefined;
        leftMargin?: number | undefined;
        rightMargin?: number | undefined;
        topMargin?: number | undefined;
        bottomMargin?: number | undefined;
    }> | undefined;
    schPinSpacing?: number | undefined;
    noSchematicRepresentation?: boolean | undefined;
    connections?: Record<string, string | readonly string[] | string[]> | undefined;
}, {
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schWidth?: string | number | undefined;
    schHeight?: string | number | undefined;
    manufacturerPartNumber?: string | undefined;
    pinLabels?: Record<string, string | readonly string[] | string[]> | undefined;
    showPinAliases?: boolean | undefined;
    pcbPinLabels?: Record<string, string> | undefined;
    internallyConnectedPins?: string[][] | undefined;
    externallyConnectedPins?: string[][] | undefined;
    schPinArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    schPortArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    pinCompatibleVariants?: {
        manufacturerPartNumber?: string | undefined;
        supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    }[] | undefined;
    schPinStyle?: Record<string, {
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        marginTop?: string | number | undefined;
        marginBottom?: string | number | undefined;
        leftMargin?: string | number | undefined;
        rightMargin?: string | number | undefined;
        topMargin?: string | number | undefined;
        bottomMargin?: string | number | undefined;
    }> | undefined;
    schPinSpacing?: string | number | undefined;
    noSchematicRepresentation?: boolean | undefined;
    connections?: Partial<Record<string, string | string[] | readonly string[]>> | undefined;
}>;
/**
 * @deprecated Use ChipProps instead.
 */
declare const bugProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    manufacturerPartNumber: z.ZodOptional<z.ZodString>;
    pinLabels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodReadonly<z.ZodArray<z.ZodString, "many">>]>, z.ZodArray<z.ZodString, "many">]>>>;
    showPinAliases: z.ZodOptional<z.ZodBoolean>;
    pcbPinLabels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    internallyConnectedPins: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    externallyConnectedPins: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    schPinArrangement: z.ZodOptional<z.ZodObject<{
        leftSize: z.ZodOptional<z.ZodNumber>;
        topSize: z.ZodOptional<z.ZodNumber>;
        rightSize: z.ZodOptional<z.ZodNumber>;
        bottomSize: z.ZodOptional<z.ZodNumber>;
        leftPinCount: z.ZodOptional<z.ZodNumber>;
        rightPinCount: z.ZodOptional<z.ZodNumber>;
        topPinCount: z.ZodOptional<z.ZodNumber>;
        bottomPinCount: z.ZodOptional<z.ZodNumber>;
        leftSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        rightSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        topSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        bottomSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
    }, "strip", z.ZodTypeAny, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }>>;
    schPortArrangement: z.ZodOptional<z.ZodObject<{
        leftSize: z.ZodOptional<z.ZodNumber>;
        topSize: z.ZodOptional<z.ZodNumber>;
        rightSize: z.ZodOptional<z.ZodNumber>;
        bottomSize: z.ZodOptional<z.ZodNumber>;
        leftPinCount: z.ZodOptional<z.ZodNumber>;
        rightPinCount: z.ZodOptional<z.ZodNumber>;
        topPinCount: z.ZodOptional<z.ZodNumber>;
        bottomPinCount: z.ZodOptional<z.ZodNumber>;
        leftSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        rightSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        topSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        bottomSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
    }, "strip", z.ZodTypeAny, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }>>;
    pinCompatibleVariants: z.ZodOptional<z.ZodArray<z.ZodObject<{
        manufacturerPartNumber: z.ZodOptional<z.ZodString>;
        supplierPartNumber: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        manufacturerPartNumber?: string | undefined;
        supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    }, {
        manufacturerPartNumber?: string | undefined;
        supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    }>, "many">>;
    schPinStyle: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        marginLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        leftMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        rightMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        topMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        bottomMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        marginLeft?: number | undefined;
        marginRight?: number | undefined;
        marginTop?: number | undefined;
        marginBottom?: number | undefined;
        leftMargin?: number | undefined;
        rightMargin?: number | undefined;
        topMargin?: number | undefined;
        bottomMargin?: number | undefined;
    }, {
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        marginTop?: string | number | undefined;
        marginBottom?: string | number | undefined;
        leftMargin?: string | number | undefined;
        rightMargin?: string | number | undefined;
        topMargin?: string | number | undefined;
        bottomMargin?: string | number | undefined;
    }>>>;
    schPinSpacing: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    noSchematicRepresentation: z.ZodOptional<z.ZodBoolean>;
    connections: z.ZodOptional<z.ZodPipeline<z.ZodType<Partial<Record<string, string | string[] | readonly string[]>>, z.ZodTypeDef, Partial<Record<string, string | string[] | readonly string[]>>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodReadonly<z.ZodArray<z.ZodString, "many">>]>, z.ZodArray<z.ZodString, "many">]>>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schWidth?: number | undefined;
    schHeight?: number | undefined;
    manufacturerPartNumber?: string | undefined;
    pinLabels?: Record<string, string | readonly string[] | string[]> | undefined;
    showPinAliases?: boolean | undefined;
    pcbPinLabels?: Record<string, string> | undefined;
    internallyConnectedPins?: string[][] | undefined;
    externallyConnectedPins?: string[][] | undefined;
    schPinArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    schPortArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    pinCompatibleVariants?: {
        manufacturerPartNumber?: string | undefined;
        supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    }[] | undefined;
    schPinStyle?: Record<string, {
        marginLeft?: number | undefined;
        marginRight?: number | undefined;
        marginTop?: number | undefined;
        marginBottom?: number | undefined;
        leftMargin?: number | undefined;
        rightMargin?: number | undefined;
        topMargin?: number | undefined;
        bottomMargin?: number | undefined;
    }> | undefined;
    schPinSpacing?: number | undefined;
    noSchematicRepresentation?: boolean | undefined;
    connections?: Record<string, string | readonly string[] | string[]> | undefined;
}, {
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schWidth?: string | number | undefined;
    schHeight?: string | number | undefined;
    manufacturerPartNumber?: string | undefined;
    pinLabels?: Record<string, string | readonly string[] | string[]> | undefined;
    showPinAliases?: boolean | undefined;
    pcbPinLabels?: Record<string, string> | undefined;
    internallyConnectedPins?: string[][] | undefined;
    externallyConnectedPins?: string[][] | undefined;
    schPinArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    schPortArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    pinCompatibleVariants?: {
        manufacturerPartNumber?: string | undefined;
        supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    }[] | undefined;
    schPinStyle?: Record<string, {
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        marginTop?: string | number | undefined;
        marginBottom?: string | number | undefined;
        leftMargin?: string | number | undefined;
        rightMargin?: string | number | undefined;
        topMargin?: string | number | undefined;
        bottomMargin?: string | number | undefined;
    }> | undefined;
    schPinSpacing?: string | number | undefined;
    noSchematicRepresentation?: boolean | undefined;
    connections?: Partial<Record<string, string | string[] | readonly string[]>> | undefined;
}>;
type InferredChipProps = z.input<typeof chipProps>;

interface JumperProps extends CommonComponentProps {
    manufacturerPartNumber?: string;
    pinLabels?: Record<number | SchematicPinLabel, SchematicPinLabel | SchematicPinLabel[]>;
    schPinStyle?: SchematicPinStyle;
    schPinSpacing?: number | string;
    schWidth?: number | string;
    schHeight?: number | string;
    schDirection?: "left" | "right";
    schPortArrangement?: SchematicPortArrangement;
    /**
     * Labels for PCB pins
     */
    pcbPinLabels?: Record<string, string>;
    /**
     * Number of pins on the jumper (2 or 3)
     */
    pinCount?: 2 | 3;
    /**
     * Groups of pins that are internally connected
     * e.g., [["1","2"], ["2","3"]]
     */
    internallyConnectedPins?: string[][];
    /**
     * Connections to other components
     */
    connections?: Connections<string>;
}
declare const jumperProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    manufacturerPartNumber: z.ZodOptional<z.ZodString>;
    pinLabels: z.ZodOptional<z.ZodRecord<z.ZodUnion<[z.ZodNumber, z.ZodString]>, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>>;
    schPinStyle: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        marginLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        leftMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        rightMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        topMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        bottomMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        marginLeft?: number | undefined;
        marginRight?: number | undefined;
        marginTop?: number | undefined;
        marginBottom?: number | undefined;
        leftMargin?: number | undefined;
        rightMargin?: number | undefined;
        topMargin?: number | undefined;
        bottomMargin?: number | undefined;
    }, {
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        marginTop?: string | number | undefined;
        marginBottom?: string | number | undefined;
        leftMargin?: string | number | undefined;
        rightMargin?: string | number | undefined;
        topMargin?: string | number | undefined;
        bottomMargin?: string | number | undefined;
    }>>>;
    schPinSpacing: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schDirection: z.ZodOptional<z.ZodEnum<["left", "right"]>>;
    schPortArrangement: z.ZodOptional<z.ZodObject<{
        leftSize: z.ZodOptional<z.ZodNumber>;
        topSize: z.ZodOptional<z.ZodNumber>;
        rightSize: z.ZodOptional<z.ZodNumber>;
        bottomSize: z.ZodOptional<z.ZodNumber>;
        leftPinCount: z.ZodOptional<z.ZodNumber>;
        rightPinCount: z.ZodOptional<z.ZodNumber>;
        topPinCount: z.ZodOptional<z.ZodNumber>;
        bottomPinCount: z.ZodOptional<z.ZodNumber>;
        leftSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        rightSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        topSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        bottomSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
    }, "strip", z.ZodTypeAny, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }>>;
    pcbPinLabels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    pinCount: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<2>, z.ZodLiteral<3>]>>;
    internallyConnectedPins: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    connections: z.ZodOptional<z.ZodPipeline<z.ZodType<Partial<Record<string, string | string[] | readonly string[]>>, z.ZodTypeDef, Partial<Record<string, string | string[] | readonly string[]>>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodReadonly<z.ZodArray<z.ZodString, "many">>]>, z.ZodArray<z.ZodString, "many">]>>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schWidth?: number | undefined;
    schHeight?: number | undefined;
    manufacturerPartNumber?: string | undefined;
    pinLabels?: Record<string | number, string | string[]> | undefined;
    pcbPinLabels?: Record<string, string> | undefined;
    internallyConnectedPins?: string[][] | undefined;
    schPortArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    schPinStyle?: Record<string, {
        marginLeft?: number | undefined;
        marginRight?: number | undefined;
        marginTop?: number | undefined;
        marginBottom?: number | undefined;
        leftMargin?: number | undefined;
        rightMargin?: number | undefined;
        topMargin?: number | undefined;
        bottomMargin?: number | undefined;
    }> | undefined;
    schPinSpacing?: number | undefined;
    connections?: Record<string, string | readonly string[] | string[]> | undefined;
    schDirection?: "left" | "right" | undefined;
    pinCount?: 2 | 3 | undefined;
}, {
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schWidth?: string | number | undefined;
    schHeight?: string | number | undefined;
    manufacturerPartNumber?: string | undefined;
    pinLabels?: Record<string | number, string | string[]> | undefined;
    pcbPinLabels?: Record<string, string> | undefined;
    internallyConnectedPins?: string[][] | undefined;
    schPortArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    schPinStyle?: Record<string, {
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        marginTop?: string | number | undefined;
        marginBottom?: string | number | undefined;
        leftMargin?: string | number | undefined;
        rightMargin?: string | number | undefined;
        topMargin?: string | number | undefined;
        bottomMargin?: string | number | undefined;
    }> | undefined;
    schPinSpacing?: string | number | undefined;
    connections?: Partial<Record<string, string | string[] | readonly string[]>> | undefined;
    schDirection?: "left" | "right" | undefined;
    pinCount?: 2 | 3 | undefined;
}>;

interface SolderJumperProps extends JumperProps {
    /**
     * Pins that are bridged with solder by default
     */
    bridgedPins?: string[][];
    /**
     * If true, all pins are connected with cuttable traces
     */
    bridged?: boolean;
}
declare const solderjumperProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    manufacturerPartNumber: z.ZodOptional<z.ZodString>;
    pinLabels: z.ZodOptional<z.ZodRecord<z.ZodUnion<[z.ZodNumber, z.ZodString]>, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>>;
    schPinStyle: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        marginLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        leftMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        rightMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        topMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        bottomMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        marginLeft?: number | undefined;
        marginRight?: number | undefined;
        marginTop?: number | undefined;
        marginBottom?: number | undefined;
        leftMargin?: number | undefined;
        rightMargin?: number | undefined;
        topMargin?: number | undefined;
        bottomMargin?: number | undefined;
    }, {
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        marginTop?: string | number | undefined;
        marginBottom?: string | number | undefined;
        leftMargin?: string | number | undefined;
        rightMargin?: string | number | undefined;
        topMargin?: string | number | undefined;
        bottomMargin?: string | number | undefined;
    }>>>;
    schPinSpacing: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schDirection: z.ZodOptional<z.ZodEnum<["left", "right"]>>;
    schPortArrangement: z.ZodOptional<z.ZodObject<{
        leftSize: z.ZodOptional<z.ZodNumber>;
        topSize: z.ZodOptional<z.ZodNumber>;
        rightSize: z.ZodOptional<z.ZodNumber>;
        bottomSize: z.ZodOptional<z.ZodNumber>;
        leftPinCount: z.ZodOptional<z.ZodNumber>;
        rightPinCount: z.ZodOptional<z.ZodNumber>;
        topPinCount: z.ZodOptional<z.ZodNumber>;
        bottomPinCount: z.ZodOptional<z.ZodNumber>;
        leftSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        rightSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        topSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        bottomSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
    }, "strip", z.ZodTypeAny, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }>>;
    pcbPinLabels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    pinCount: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<2>, z.ZodLiteral<3>]>>;
    internallyConnectedPins: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    connections: z.ZodOptional<z.ZodPipeline<z.ZodType<Partial<Record<string, string | string[] | readonly string[]>>, z.ZodTypeDef, Partial<Record<string, string | string[] | readonly string[]>>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodReadonly<z.ZodArray<z.ZodString, "many">>]>, z.ZodArray<z.ZodString, "many">]>>>>;
} & {
    bridgedPins: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    bridged: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name: string;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schWidth?: number | undefined;
    schHeight?: number | undefined;
    manufacturerPartNumber?: string | undefined;
    pinLabels?: Record<string | number, string | string[]> | undefined;
    pcbPinLabels?: Record<string, string> | undefined;
    internallyConnectedPins?: string[][] | undefined;
    schPortArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    schPinStyle?: Record<string, {
        marginLeft?: number | undefined;
        marginRight?: number | undefined;
        marginTop?: number | undefined;
        marginBottom?: number | undefined;
        leftMargin?: number | undefined;
        rightMargin?: number | undefined;
        topMargin?: number | undefined;
        bottomMargin?: number | undefined;
    }> | undefined;
    schPinSpacing?: number | undefined;
    connections?: Record<string, string | readonly string[] | string[]> | undefined;
    schDirection?: "left" | "right" | undefined;
    pinCount?: 2 | 3 | undefined;
    bridgedPins?: string[][] | undefined;
    bridged?: boolean | undefined;
}, {
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schWidth?: string | number | undefined;
    schHeight?: string | number | undefined;
    manufacturerPartNumber?: string | undefined;
    pinLabels?: Record<string | number, string | string[]> | undefined;
    pcbPinLabels?: Record<string, string> | undefined;
    internallyConnectedPins?: string[][] | undefined;
    schPortArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    schPinStyle?: Record<string, {
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        marginTop?: string | number | undefined;
        marginBottom?: string | number | undefined;
        leftMargin?: string | number | undefined;
        rightMargin?: string | number | undefined;
        topMargin?: string | number | undefined;
        bottomMargin?: string | number | undefined;
    }> | undefined;
    schPinSpacing?: string | number | undefined;
    connections?: Partial<Record<string, string | string[] | readonly string[]>> | undefined;
    schDirection?: "left" | "right" | undefined;
    pinCount?: 2 | 3 | undefined;
    bridgedPins?: string[][] | undefined;
    bridged?: boolean | undefined;
}>;

interface ConnectorProps extends CommonComponentProps {
    manufacturerPartNumber?: string;
    pinLabels?: Record<number | SchematicPinLabel, SchematicPinLabel | SchematicPinLabel[]>;
    schPinStyle?: SchematicPinStyle;
    schPinSpacing?: number | string;
    schWidth?: number | string;
    schHeight?: number | string;
    schDirection?: "left" | "right";
    schPortArrangement?: SchematicPortArrangement;
    /**
     * Groups of pins that are internally connected
     * e.g., [["1","2"], ["2","3"]]
     */
    internallyConnectedPins?: string[][];
    /**
     * Connector standard, e.g. usb_c, m2
     */
    standard?: "usb_c" | "m2";
}
declare const connectorProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    manufacturerPartNumber: z.ZodOptional<z.ZodString>;
    pinLabels: z.ZodOptional<z.ZodRecord<z.ZodUnion<[z.ZodNumber, z.ZodString]>, z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>>;
    schPinStyle: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        marginLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        leftMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        rightMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        topMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        bottomMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        marginLeft?: number | undefined;
        marginRight?: number | undefined;
        marginTop?: number | undefined;
        marginBottom?: number | undefined;
        leftMargin?: number | undefined;
        rightMargin?: number | undefined;
        topMargin?: number | undefined;
        bottomMargin?: number | undefined;
    }, {
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        marginTop?: string | number | undefined;
        marginBottom?: string | number | undefined;
        leftMargin?: string | number | undefined;
        rightMargin?: string | number | undefined;
        topMargin?: string | number | undefined;
        bottomMargin?: string | number | undefined;
    }>>>;
    schPinSpacing: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schDirection: z.ZodOptional<z.ZodEnum<["left", "right"]>>;
    schPortArrangement: z.ZodOptional<z.ZodObject<{
        leftSize: z.ZodOptional<z.ZodNumber>;
        topSize: z.ZodOptional<z.ZodNumber>;
        rightSize: z.ZodOptional<z.ZodNumber>;
        bottomSize: z.ZodOptional<z.ZodNumber>;
        leftPinCount: z.ZodOptional<z.ZodNumber>;
        rightPinCount: z.ZodOptional<z.ZodNumber>;
        topPinCount: z.ZodOptional<z.ZodNumber>;
        bottomPinCount: z.ZodOptional<z.ZodNumber>;
        leftSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        rightSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        topSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        bottomSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
    }, "strip", z.ZodTypeAny, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }>>;
    internallyConnectedPins: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    standard: z.ZodOptional<z.ZodEnum<["usb_c", "m2"]>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schWidth?: number | undefined;
    schHeight?: number | undefined;
    manufacturerPartNumber?: string | undefined;
    pinLabels?: Record<string | number, string | string[]> | undefined;
    internallyConnectedPins?: string[][] | undefined;
    schPortArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    schPinStyle?: Record<string, {
        marginLeft?: number | undefined;
        marginRight?: number | undefined;
        marginTop?: number | undefined;
        marginBottom?: number | undefined;
        leftMargin?: number | undefined;
        rightMargin?: number | undefined;
        topMargin?: number | undefined;
        bottomMargin?: number | undefined;
    }> | undefined;
    schPinSpacing?: number | undefined;
    schDirection?: "left" | "right" | undefined;
    standard?: "usb_c" | "m2" | undefined;
}, {
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schWidth?: string | number | undefined;
    schHeight?: string | number | undefined;
    manufacturerPartNumber?: string | undefined;
    pinLabels?: Record<string | number, string | string[]> | undefined;
    internallyConnectedPins?: string[][] | undefined;
    schPortArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    schPinStyle?: Record<string, {
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        marginTop?: string | number | undefined;
        marginBottom?: string | number | undefined;
        leftMargin?: string | number | undefined;
        rightMargin?: string | number | undefined;
        topMargin?: string | number | undefined;
        bottomMargin?: string | number | undefined;
    }> | undefined;
    schPinSpacing?: string | number | undefined;
    schDirection?: "left" | "right" | undefined;
    standard?: "usb_c" | "m2" | undefined;
}>;

/**
 * Pin labels for fuse component
 */
declare const fusePinLabels: readonly ["pin1", "pin2"];
type FusePinLabels = (typeof fusePinLabels)[number];
interface FuseProps<PinLabel extends string = string> extends CommonComponentProps<PinLabel> {
    /**
     * Current rating of the fuse in amperes
     */
    currentRating: number | string;
    /**
     * Voltage rating of the fuse
     */
    voltageRating?: number | string;
    /**
     * Whether to show ratings on schematic
     */
    schShowRatings?: boolean;
    schOrientation?: SchematicOrientation;
    /**
     * Connections to other components
     */
    connections?: Connections<PinLabel>;
}
/**
 * Schema for validating fuse props
 */
declare const fuseProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    currentRating: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
    voltageRating: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    schShowRatings: z.ZodOptional<z.ZodBoolean>;
    schOrientation: z.ZodOptional<z.ZodEnum<["vertical", "horizontal", "pos_top", "pos_bottom", "pos_left", "pos_right", "neg_top", "neg_bottom", "neg_left", "neg_right"]>>;
    connections: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodString, z.ZodReadonly<z.ZodArray<z.ZodString, "many">>, z.ZodArray<z.ZodString, "many">]>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    currentRating: string | number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    connections?: Record<string, string | readonly string[] | string[]> | undefined;
    voltageRating?: string | number | undefined;
    schShowRatings?: boolean | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
}, {
    name: string;
    currentRating: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    connections?: Record<string, string | readonly string[] | string[]> | undefined;
    voltageRating?: string | number | undefined;
    schShowRatings?: boolean | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
}>;
type InferredFuseProps = z.input<typeof fuseProps>;

interface CirclePlatedHoleProps extends Omit<PcbLayoutProps, "pcbRotation" | "layer"> {
    name?: string;
    connectsTo?: string | string[];
    shape: "circle";
    holeDiameter: number | string;
    outerDiameter: number | string;
    portHints?: PortHints;
}
interface OvalPlatedHoleProps extends Omit<PcbLayoutProps, "pcbRotation" | "layer"> {
    name?: string;
    connectsTo?: string | string[];
    shape: "oval";
    outerWidth: number | string;
    outerHeight: number | string;
    holeWidth: number | string;
    holeHeight: number | string;
    portHints?: PortHints;
    /** @deprecated use holeWidth */
    innerWidth?: number | string;
    /** @deprecated use holeHeight */
    innerHeight?: number | string;
}
interface PillPlatedHoleProps extends Omit<PcbLayoutProps, "pcbRotation" | "layer"> {
    name?: string;
    connectsTo?: string | string[];
    shape: "pill";
    outerWidth: number | string;
    outerHeight: number | string;
    holeWidth: number | string;
    holeHeight: number | string;
    /** @deprecated use holeWidth */
    innerWidth?: number | string;
    /** @deprecated use holeHeight */
    innerHeight?: number | string;
    portHints?: PortHints;
}
interface CircularHoleWithRectPlatedProps extends Omit<PcbLayoutProps, "pcbRotation" | "layer"> {
    name?: string;
    connectsTo?: string | string[];
    shape: "circular_hole_with_rect_pad";
    holeDiameter: number | string;
    rectPadWidth: number | string;
    rectPadHeight: number | string;
    holeShape?: "circle";
    padShape?: "rect";
    portHints?: PortHints;
}
interface PillWithRectPadPlatedHoleProps extends Omit<PcbLayoutProps, "pcbRotation" | "layer"> {
    name?: string;
    connectsTo?: string | string[];
    shape: "pill_hole_with_rect_pad";
    holeShape: "pill";
    padShape: "rect";
    holeWidth: number | string;
    holeHeight: number | string;
    rectPadWidth: number | string;
    rectPadHeight: number | string;
    portHints?: PortHints;
}
type PlatedHoleProps = CirclePlatedHoleProps | OvalPlatedHoleProps | PillPlatedHoleProps | CircularHoleWithRectPlatedProps | PillWithRectPadPlatedHoleProps;
declare const platedHoleProps: z.ZodEffects<z.ZodDiscriminatedUnion<"shape", [z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation" | "layer"> & {
    name: z.ZodOptional<z.ZodString>;
    connectsTo: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    shape: z.ZodLiteral<"circle">;
    holeDiameter: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    outerDiameter: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    portHints: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">>;
}, "strip", z.ZodTypeAny, {
    shape: "circle";
    holeDiameter: number;
    outerDiameter: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
}, {
    shape: "circle";
    holeDiameter: string | number;
    outerDiameter: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
}>, z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation" | "layer"> & {
    name: z.ZodOptional<z.ZodString>;
    connectsTo: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    shape: z.ZodLiteral<"oval">;
    outerWidth: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    outerHeight: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    holeWidth: z.ZodEffects<z.ZodType<string | number, z.ZodTypeDef, string | number>, number | undefined, string | number>;
    holeHeight: z.ZodEffects<z.ZodType<string | number, z.ZodTypeDef, string | number>, number | undefined, string | number>;
    innerWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    innerHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    portHints: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">>;
}, "strip", z.ZodTypeAny, {
    shape: "oval";
    outerWidth: number;
    outerHeight: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
    holeWidth?: number | undefined;
    holeHeight?: number | undefined;
    innerWidth?: number | undefined;
    innerHeight?: number | undefined;
}, {
    shape: "oval";
    outerWidth: string | number;
    outerHeight: string | number;
    holeWidth: string | number;
    holeHeight: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
    innerWidth?: string | number | undefined;
    innerHeight?: string | number | undefined;
}>, z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation" | "layer"> & {
    name: z.ZodOptional<z.ZodString>;
    connectsTo: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    shape: z.ZodLiteral<"pill">;
    outerWidth: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    outerHeight: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    holeWidth: z.ZodEffects<z.ZodType<string | number, z.ZodTypeDef, string | number>, number | undefined, string | number>;
    holeHeight: z.ZodEffects<z.ZodType<string | number, z.ZodTypeDef, string | number>, number | undefined, string | number>;
    innerWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    innerHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    portHints: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">>;
}, "strip", z.ZodTypeAny, {
    shape: "pill";
    outerWidth: number;
    outerHeight: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
    holeWidth?: number | undefined;
    holeHeight?: number | undefined;
    innerWidth?: number | undefined;
    innerHeight?: number | undefined;
}, {
    shape: "pill";
    outerWidth: string | number;
    outerHeight: string | number;
    holeWidth: string | number;
    holeHeight: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
    innerWidth?: string | number | undefined;
    innerHeight?: string | number | undefined;
}>, z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation" | "layer"> & {
    name: z.ZodOptional<z.ZodString>;
    connectsTo: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    shape: z.ZodLiteral<"circular_hole_with_rect_pad">;
    holeDiameter: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    rectPadWidth: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    rectPadHeight: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    holeShape: z.ZodOptional<z.ZodLiteral<"circle">>;
    padShape: z.ZodOptional<z.ZodLiteral<"rect">>;
    portHints: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">>;
}, "strip", z.ZodTypeAny, {
    shape: "circular_hole_with_rect_pad";
    holeDiameter: number;
    rectPadWidth: number;
    rectPadHeight: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
    holeShape?: "circle" | undefined;
    padShape?: "rect" | undefined;
}, {
    shape: "circular_hole_with_rect_pad";
    holeDiameter: string | number;
    rectPadWidth: string | number;
    rectPadHeight: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
    holeShape?: "circle" | undefined;
    padShape?: "rect" | undefined;
}>, z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation" | "layer"> & {
    name: z.ZodOptional<z.ZodString>;
    connectsTo: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    shape: z.ZodLiteral<"pill_hole_with_rect_pad">;
    holeShape: z.ZodLiteral<"pill">;
    padShape: z.ZodLiteral<"rect">;
    holeWidth: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    holeHeight: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    rectPadWidth: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    rectPadHeight: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    portHints: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">>;
}, "strip", z.ZodTypeAny, {
    shape: "pill_hole_with_rect_pad";
    holeWidth: number;
    holeHeight: number;
    rectPadWidth: number;
    rectPadHeight: number;
    holeShape: "pill";
    padShape: "rect";
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
}, {
    shape: "pill_hole_with_rect_pad";
    holeWidth: string | number;
    holeHeight: string | number;
    rectPadWidth: string | number;
    rectPadHeight: string | number;
    holeShape: "pill";
    padShape: "rect";
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
}>]>, {
    shape: "circle";
    holeDiameter: number;
    outerDiameter: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
} | {
    shape: "oval";
    outerWidth: number;
    outerHeight: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
    holeWidth?: number | undefined;
    holeHeight?: number | undefined;
    innerWidth?: number | undefined;
    innerHeight?: number | undefined;
} | {
    shape: "pill";
    outerWidth: number;
    outerHeight: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
    holeWidth?: number | undefined;
    holeHeight?: number | undefined;
    innerWidth?: number | undefined;
    innerHeight?: number | undefined;
} | {
    shape: "circular_hole_with_rect_pad";
    holeDiameter: number;
    rectPadWidth: number;
    rectPadHeight: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
    holeShape?: "circle" | undefined;
    padShape?: "rect" | undefined;
} | {
    shape: "pill_hole_with_rect_pad";
    holeWidth: number;
    holeHeight: number;
    rectPadWidth: number;
    rectPadHeight: number;
    holeShape: "pill";
    padShape: "rect";
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
}, {
    shape: "circle";
    holeDiameter: string | number;
    outerDiameter: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
} | {
    shape: "oval";
    outerWidth: string | number;
    outerHeight: string | number;
    holeWidth: string | number;
    holeHeight: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
    innerWidth?: string | number | undefined;
    innerHeight?: string | number | undefined;
} | {
    shape: "pill";
    outerWidth: string | number;
    outerHeight: string | number;
    holeWidth: string | number;
    holeHeight: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
    innerWidth?: string | number | undefined;
    innerHeight?: string | number | undefined;
} | {
    shape: "circular_hole_with_rect_pad";
    holeDiameter: string | number;
    rectPadWidth: string | number;
    rectPadHeight: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
    holeShape?: "circle" | undefined;
    padShape?: "rect" | undefined;
} | {
    shape: "pill_hole_with_rect_pad";
    holeWidth: string | number;
    holeHeight: string | number;
    rectPadWidth: string | number;
    rectPadHeight: string | number;
    holeShape: "pill";
    padShape: "rect";
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
    portHints?: (string | number)[] | undefined;
}>;

declare const resistorPinLabels: readonly ["pin1", "pin2", "pos", "neg"];
type ResistorPinLabels = (typeof resistorPinLabels)[number];
interface ResistorProps<PinLabel extends string = string> extends CommonComponentProps<PinLabel> {
    resistance: number | string;
    pullupFor?: string;
    pullupTo?: string;
    pulldownFor?: string;
    pulldownTo?: string;
    schOrientation?: SchematicOrientation;
    connections?: Connections<ResistorPinLabels>;
}
declare const resistorProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    resistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    pullupFor: z.ZodOptional<z.ZodString>;
    pullupTo: z.ZodOptional<z.ZodString>;
    pulldownFor: z.ZodOptional<z.ZodString>;
    pulldownTo: z.ZodOptional<z.ZodString>;
    schOrientation: z.ZodOptional<z.ZodEnum<["vertical", "horizontal", "pos_top", "pos_bottom", "pos_left", "pos_right", "neg_top", "neg_bottom", "neg_left", "neg_right"]>>;
    connections: z.ZodOptional<z.ZodRecord<z.ZodEnum<["pin1", "pin2", "pos", "neg"]>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodReadonly<z.ZodArray<z.ZodString, "many">>]>, z.ZodArray<z.ZodString, "many">]>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    resistance: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    connections?: Partial<Record<"pin1" | "pin2" | "pos" | "neg", string | readonly string[] | string[]>> | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
    pullupFor?: string | undefined;
    pullupTo?: string | undefined;
    pulldownFor?: string | undefined;
    pulldownTo?: string | undefined;
}, {
    name: string;
    resistance: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    connections?: Partial<Record<"pin1" | "pin2" | "pos" | "neg", string | readonly string[] | string[]>> | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
    pullupFor?: string | undefined;
    pullupTo?: string | undefined;
    pulldownFor?: string | undefined;
    pulldownTo?: string | undefined;
}>;
declare const resistorPins: readonly ["pin1", "left", "pin2", "right"];

type PotentiometerPinVariant = "two_pin" | "three_pin";
interface PotentiometerProps extends CommonComponentProps {
    maxResistance: number | string;
    pinVariant?: PotentiometerPinVariant;
}
declare const potentiometerProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    maxResistance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    pinVariant: z.ZodOptional<z.ZodEnum<["two_pin", "three_pin"]>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    maxResistance: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    pinVariant?: "two_pin" | "three_pin" | undefined;
}, {
    name: string;
    maxResistance: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    pinVariant?: "two_pin" | "three_pin" | undefined;
}>;

type PinVariant = "two_pin" | "four_pin";
interface CrystalProps<PinLabel extends string = string> extends CommonComponentProps<PinLabel> {
    frequency: number | string;
    loadCapacitance: number | string;
    pinVariant?: PinVariant;
    schOrientation?: SchematicOrientation;
}
declare const crystalProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    frequency: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    loadCapacitance: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, number, string | number>;
    pinVariant: z.ZodOptional<z.ZodEnum<["two_pin", "four_pin"]>>;
    schOrientation: z.ZodOptional<z.ZodEnum<["vertical", "horizontal", "pos_top", "pos_bottom", "pos_left", "pos_right", "neg_top", "neg_bottom", "neg_left", "neg_right"]>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    frequency: number;
    loadCapacitance: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
    pinVariant?: "two_pin" | "four_pin" | undefined;
}, {
    name: string;
    frequency: string | number;
    loadCapacitance: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
    pinVariant?: "two_pin" | "four_pin" | undefined;
}>;
declare const crystalPins: readonly ["pin1", "left", "pin2", "right"];
type CrystalPinLabels = (typeof crystalPins)[number];

type ResonatorPinVariant = "no_ground" | "ground_pin" | "two_ground_pins";
interface ResonatorProps extends CommonComponentProps {
    frequency: number | string;
    loadCapacitance: number | string;
    pinVariant?: ResonatorPinVariant;
}
declare const resonatorProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    frequency: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    loadCapacitance: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, number, string | number>;
    pinVariant: z.ZodOptional<z.ZodEnum<["no_ground", "ground_pin", "two_ground_pins"]>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    frequency: number;
    loadCapacitance: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    pinVariant?: "no_ground" | "ground_pin" | "two_ground_pins" | undefined;
}, {
    name: string;
    frequency: string | number;
    loadCapacitance: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    pinVariant?: "no_ground" | "ground_pin" | "two_ground_pins" | undefined;
}>;

interface StampboardProps extends BoardProps {
    leftPinCount?: number;
    rightPinCount?: number;
    topPinCount?: number;
    bottomPinCount?: number;
    leftPins?: string[];
    rightPins?: string[];
    topPins?: string[];
    bottomPins?: string[];
    pinPitch?: number | string;
    innerHoles?: boolean;
}
declare const stampboardProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    pcbWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    schLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    cellBorder: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    border: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    schPadding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
    position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
    grid: z.ZodOptional<z.ZodBoolean>;
    gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridTemplateRows: z.ZodOptional<z.ZodString>;
    gridTemplateColumns: z.ZodOptional<z.ZodString>;
    gridTemplate: z.ZodOptional<z.ZodString>;
    gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
    flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
    alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
    justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
    flexRow: z.ZodOptional<z.ZodBoolean>;
    flexColumn: z.ZodOptional<z.ZodBoolean>;
    gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    pack: z.ZodOptional<z.ZodBoolean>;
    packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
    packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
    padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    matchAdapt: z.ZodOptional<z.ZodBoolean>;
    matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    name: z.ZodOptional<z.ZodString>;
    children: z.ZodOptional<z.ZodAny>;
    schTitle: z.ZodOptional<z.ZodString>;
    key: z.ZodOptional<z.ZodAny>;
} & {
    manualEdits: z.ZodOptional<z.ZodObject<{
        pcb_placements: z.ZodOptional<z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
            center: z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }, {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }>, "many">>;
        manual_trace_hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
            pcb_port_selector: z.ZodString;
            offsets: z.ZodArray<z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                via: z.ZodOptional<z.ZodBoolean>;
                to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
                    name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
                }, "strip", z.ZodTypeAny, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>>;
                trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }, {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }, {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }>, "many">>;
        schematic_placements: z.ZodOptional<z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
            center: z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }, {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        pcb_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
    }, {
        pcb_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
    }>>;
    schAutoLayoutEnabled: z.ZodOptional<z.ZodBoolean>;
    schTraceAutoLabelEnabled: z.ZodOptional<z.ZodBoolean>;
    routingDisabled: z.ZodOptional<z.ZodBoolean>;
    defaultTraceWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    minTraceWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    partsEngine: z.ZodOptional<z.ZodType<PartsEngine, z.ZodTypeDef, PartsEngine>>;
    pcbRouteCache: z.ZodOptional<z.ZodType<PcbRouteCache, z.ZodTypeDef, PcbRouteCache>>;
    autorouter: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        serverUrl: z.ZodOptional<z.ZodString>;
        inputFormat: z.ZodOptional<z.ZodEnum<["simplified", "circuit-json"]>>;
        serverMode: z.ZodOptional<z.ZodEnum<["job", "solve-endpoint"]>>;
        serverCacheEnabled: z.ZodOptional<z.ZodBoolean>;
        cache: z.ZodOptional<z.ZodType<PcbRouteCache, z.ZodTypeDef, PcbRouteCache>>;
        traceClearance: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        groupMode: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit"]>>;
        algorithmFn: z.ZodOptional<z.ZodType<(simpleRouteJson: any) => Promise<any>, z.ZodTypeDef, (simpleRouteJson: any) => Promise<any>>>;
        preset: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit", "auto", "auto-local", "auto-cloud"]>>;
        local: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    }, {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: string | number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    }>, z.ZodLiteral<"sequential-trace">, z.ZodLiteral<"subcircuit">, z.ZodLiteral<"auto">, z.ZodLiteral<"auto-local">, z.ZodLiteral<"auto-cloud">]>>;
    square: z.ZodOptional<z.ZodBoolean>;
    emptyArea: z.ZodOptional<z.ZodString>;
    filledArea: z.ZodOptional<z.ZodString>;
    width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    outline: z.ZodOptional<z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">>;
    outlineOffsetX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    outlineOffsetY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
} & {
    material: z.ZodDefault<z.ZodEnum<["fr4", "fr1"]>>;
    layers: z.ZodDefault<z.ZodUnion<[z.ZodLiteral<2>, z.ZodLiteral<4>]>>;
} & {
    leftPinCount: z.ZodOptional<z.ZodNumber>;
    rightPinCount: z.ZodOptional<z.ZodNumber>;
    topPinCount: z.ZodOptional<z.ZodNumber>;
    bottomPinCount: z.ZodOptional<z.ZodNumber>;
    leftPins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    rightPins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    topPins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    bottomPins: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    pinPitch: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    innerHoles: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    material: "fr4" | "fr1";
    layers: 2 | 4;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    leftPinCount?: number | undefined;
    rightPinCount?: number | undefined;
    topPinCount?: number | undefined;
    bottomPinCount?: number | undefined;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: number | undefined;
    paddingLeft?: number | undefined;
    paddingRight?: number | undefined;
    paddingTop?: number | undefined;
    paddingBottom?: number | undefined;
    paddingX?: number | undefined;
    paddingY?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: number | undefined;
    pcbHeight?: number | undefined;
    schWidth?: number | undefined;
    schHeight?: number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: number | undefined;
    schPaddingLeft?: number | undefined;
    schPaddingRight?: number | undefined;
    schPaddingTop?: number | undefined;
    schPaddingBottom?: number | undefined;
    manualEdits?: {
        pcb_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
    } | undefined;
    routingDisabled?: boolean | undefined;
    defaultTraceWidth?: number | undefined;
    minTraceWidth?: number | undefined;
    pcbRouteCache?: PcbRouteCache | undefined;
    autorouter?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    } | undefined;
    schAutoLayoutEnabled?: boolean | undefined;
    schTraceAutoLabelEnabled?: boolean | undefined;
    partsEngine?: PartsEngine | undefined;
    square?: boolean | undefined;
    emptyArea?: string | undefined;
    filledArea?: string | undefined;
    outline?: {
        x: number;
        y: number;
    }[] | undefined;
    outlineOffsetX?: number | undefined;
    outlineOffsetY?: number | undefined;
    leftPins?: string[] | undefined;
    rightPins?: string[] | undefined;
    topPins?: string[] | undefined;
    bottomPins?: string[] | undefined;
    pinPitch?: number | undefined;
    innerHoles?: boolean | undefined;
}, {
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    leftPinCount?: number | undefined;
    rightPinCount?: number | undefined;
    topPinCount?: number | undefined;
    bottomPinCount?: number | undefined;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: string | number | undefined;
    paddingLeft?: string | number | undefined;
    paddingRight?: string | number | undefined;
    paddingTop?: string | number | undefined;
    paddingBottom?: string | number | undefined;
    paddingX?: string | number | undefined;
    paddingY?: string | number | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: string | number | undefined;
    pcbHeight?: string | number | undefined;
    schWidth?: string | number | undefined;
    schHeight?: string | number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: string | number | undefined;
    schPaddingLeft?: string | number | undefined;
    schPaddingRight?: string | number | undefined;
    schPaddingTop?: string | number | undefined;
    schPaddingBottom?: string | number | undefined;
    manualEdits?: {
        pcb_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
    } | undefined;
    routingDisabled?: boolean | undefined;
    defaultTraceWidth?: string | number | undefined;
    minTraceWidth?: string | number | undefined;
    pcbRouteCache?: PcbRouteCache | undefined;
    autorouter?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: string | number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    } | undefined;
    schAutoLayoutEnabled?: boolean | undefined;
    schTraceAutoLabelEnabled?: boolean | undefined;
    partsEngine?: PartsEngine | undefined;
    square?: boolean | undefined;
    emptyArea?: string | undefined;
    filledArea?: string | undefined;
    outline?: {
        x: string | number;
        y: string | number;
    }[] | undefined;
    outlineOffsetX?: string | number | undefined;
    outlineOffsetY?: string | number | undefined;
    material?: "fr4" | "fr1" | undefined;
    layers?: 2 | 4 | undefined;
    leftPins?: string[] | undefined;
    rightPins?: string[] | undefined;
    topPins?: string[] | undefined;
    bottomPins?: string[] | undefined;
    pinPitch?: string | number | undefined;
    innerHoles?: boolean | undefined;
}>;

declare const capacitorPinLabels: readonly ["pin1", "pin2", "pos", "neg", "anode", "cathode"];
type CapacitorPinLabels = (typeof capacitorPinLabels)[number];
interface CapacitorProps<PinLabel extends string = string> extends CommonComponentProps<PinLabel> {
    capacitance: number | string;
    maxVoltageRating?: number | string;
    schShowRatings?: boolean;
    polarized?: boolean;
    decouplingFor?: string;
    decouplingTo?: string;
    bypassFor?: string;
    bypassTo?: string;
    maxDecouplingTraceLength?: number;
    schOrientation?: SchematicOrientation;
    connections?: Connections<CapacitorPinLabels>;
}
declare const capacitorProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    capacitance: z.ZodEffects<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>, number, string | number>;
    maxVoltageRating: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schShowRatings: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    polarized: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    decouplingFor: z.ZodOptional<z.ZodString>;
    decouplingTo: z.ZodOptional<z.ZodString>;
    bypassFor: z.ZodOptional<z.ZodString>;
    bypassTo: z.ZodOptional<z.ZodString>;
    maxDecouplingTraceLength: z.ZodOptional<z.ZodNumber>;
    schOrientation: z.ZodOptional<z.ZodEnum<["vertical", "horizontal", "pos_top", "pos_bottom", "pos_left", "pos_right", "neg_top", "neg_bottom", "neg_left", "neg_right"]>>;
    connections: z.ZodOptional<z.ZodRecord<z.ZodEnum<["pin1", "pin2", "pos", "neg", "anode", "cathode"]>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodReadonly<z.ZodArray<z.ZodString, "many">>]>, z.ZodArray<z.ZodString, "many">]>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    capacitance: number;
    schShowRatings: boolean;
    polarized: boolean;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    connections?: Partial<Record<"pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
    maxVoltageRating?: number | undefined;
    decouplingFor?: string | undefined;
    decouplingTo?: string | undefined;
    bypassFor?: string | undefined;
    bypassTo?: string | undefined;
    maxDecouplingTraceLength?: number | undefined;
}, {
    name: string;
    capacitance: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    connections?: Partial<Record<"pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
    schShowRatings?: boolean | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
    maxVoltageRating?: string | number | undefined;
    polarized?: boolean | undefined;
    decouplingFor?: string | undefined;
    decouplingTo?: string | undefined;
    bypassFor?: string | undefined;
    bypassTo?: string | undefined;
    maxDecouplingTraceLength?: number | undefined;
}>;
declare const capacitorPins: readonly ["pin1", "left", "anode", "pos", "pin2", "right", "cathode", "neg"];

interface NetProps {
    name: string;
    connectsTo?: string | string[];
}
declare const netProps: z.ZodObject<{
    name: z.ZodString;
    connectsTo: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    connectsTo?: string | string[] | undefined;
}, {
    name: string;
    connectsTo?: string | string[] | undefined;
}>;

interface ConstrainedLayoutProps {
    name?: string;
    pcbOnly?: boolean;
    schOnly?: boolean;
}
declare const constrainedLayoutProps: z.ZodObject<{
    name: z.ZodOptional<z.ZodString>;
    pcbOnly: z.ZodOptional<z.ZodBoolean>;
    schOnly: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name?: string | undefined;
    pcbOnly?: boolean | undefined;
    schOnly?: boolean | undefined;
}, {
    name?: string | undefined;
    pcbOnly?: boolean | undefined;
    schOnly?: boolean | undefined;
}>;
type InferredConstrainedLayoutProps = z.input<typeof constrainedLayoutProps>;

type PcbXDistConstraint = {
    pcb?: true;
    xDist: Distance;
    /**
     * Selector for left component, e.g. ".U1" or ".R1", you can also specify the
     * edge or center of the component e.g. ".R1 leftedge", ".R1 center"
     */
    left: string;
    /**
     * Selector for right component, e.g. ".U1" or ".R1", you can also specify the
     * edge or center of the component e.g. ".R1 leftedge", ".R1 center"
     */
    right: string;
    /**
     * If true, the provided distance is the distance between the closest edges of
     * the left and right components
     */
    edgeToEdge?: true;
    /**
     * If true, the provided distance is the distance between the centers of the
     * left and right components
     */
    centerToCenter?: true;
};
type PcbYDistConstraint = {
    pcb?: true;
    yDist: Distance;
    /**
     * Selector for top component, e.g. ".U1" or ".R1", you can also specify the
     * edge or center of the component e.g. ".R1 topedge", ".R1 center"
     */
    top: string;
    /**
     * Selector for bottom component, e.g. ".U1" or ".R1", you can also specify the
     * edge or center of the component e.g. ".R1 bottomedge", ".R1 center"
     */
    bottom: string;
    edgeToEdge?: true;
    centerToCenter?: true;
};
type PcbSameYConstraint = {
    pcb?: true;
    sameY?: true;
    /**
     * Selector for components, e.g. [".U1", ".R1"], you can also specify the
     * edge or center of the component e.g. [".R1 leftedge", ".U1 center"]
     */
    for: string[];
};
type PcbSameXConstraint = {
    pcb?: true;
    sameX?: true;
    /**
     * Selector for components, e.g. [".U1", ".R1"], you can also specify the
     * edge or center of the component e.g. [".R1 leftedge", ".U1 center"]
     */
    for: string[];
};
type ConstraintProps = PcbXDistConstraint | PcbYDistConstraint | PcbSameYConstraint | PcbSameXConstraint;
declare const pcbXDistConstraintProps: z.ZodObject<{
    pcb: z.ZodOptional<z.ZodLiteral<true>>;
    xDist: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    left: z.ZodString;
    right: z.ZodString;
    edgeToEdge: z.ZodOptional<z.ZodLiteral<true>>;
    centerToCenter: z.ZodOptional<z.ZodLiteral<true>>;
}, "strip", z.ZodTypeAny, {
    left: string;
    right: string;
    xDist: number;
    pcb?: true | undefined;
    edgeToEdge?: true | undefined;
    centerToCenter?: true | undefined;
}, {
    left: string;
    right: string;
    xDist: string | number;
    pcb?: true | undefined;
    edgeToEdge?: true | undefined;
    centerToCenter?: true | undefined;
}>;
declare const pcbYDistConstraintProps: z.ZodObject<{
    pcb: z.ZodOptional<z.ZodLiteral<true>>;
    yDist: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    top: z.ZodString;
    bottom: z.ZodString;
    edgeToEdge: z.ZodOptional<z.ZodLiteral<true>>;
    centerToCenter: z.ZodOptional<z.ZodLiteral<true>>;
}, "strip", z.ZodTypeAny, {
    top: string;
    bottom: string;
    yDist: number;
    pcb?: true | undefined;
    edgeToEdge?: true | undefined;
    centerToCenter?: true | undefined;
}, {
    top: string;
    bottom: string;
    yDist: string | number;
    pcb?: true | undefined;
    edgeToEdge?: true | undefined;
    centerToCenter?: true | undefined;
}>;
declare const pcbSameYConstraintProps: z.ZodObject<{
    pcb: z.ZodOptional<z.ZodLiteral<true>>;
    sameY: z.ZodOptional<z.ZodLiteral<true>>;
    for: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    for: string[];
    pcb?: true | undefined;
    sameY?: true | undefined;
}, {
    for: string[];
    pcb?: true | undefined;
    sameY?: true | undefined;
}>;
declare const pcbSameXConstraintProps: z.ZodObject<{
    pcb: z.ZodOptional<z.ZodLiteral<true>>;
    sameX: z.ZodOptional<z.ZodLiteral<true>>;
    for: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    for: string[];
    pcb?: true | undefined;
    sameX?: true | undefined;
}, {
    for: string[];
    pcb?: true | undefined;
    sameX?: true | undefined;
}>;
declare const constraintProps: z.ZodUnion<[z.ZodObject<{
    pcb: z.ZodOptional<z.ZodLiteral<true>>;
    xDist: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    left: z.ZodString;
    right: z.ZodString;
    edgeToEdge: z.ZodOptional<z.ZodLiteral<true>>;
    centerToCenter: z.ZodOptional<z.ZodLiteral<true>>;
}, "strip", z.ZodTypeAny, {
    left: string;
    right: string;
    xDist: number;
    pcb?: true | undefined;
    edgeToEdge?: true | undefined;
    centerToCenter?: true | undefined;
}, {
    left: string;
    right: string;
    xDist: string | number;
    pcb?: true | undefined;
    edgeToEdge?: true | undefined;
    centerToCenter?: true | undefined;
}>, z.ZodObject<{
    pcb: z.ZodOptional<z.ZodLiteral<true>>;
    yDist: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    top: z.ZodString;
    bottom: z.ZodString;
    edgeToEdge: z.ZodOptional<z.ZodLiteral<true>>;
    centerToCenter: z.ZodOptional<z.ZodLiteral<true>>;
}, "strip", z.ZodTypeAny, {
    top: string;
    bottom: string;
    yDist: number;
    pcb?: true | undefined;
    edgeToEdge?: true | undefined;
    centerToCenter?: true | undefined;
}, {
    top: string;
    bottom: string;
    yDist: string | number;
    pcb?: true | undefined;
    edgeToEdge?: true | undefined;
    centerToCenter?: true | undefined;
}>, z.ZodObject<{
    pcb: z.ZodOptional<z.ZodLiteral<true>>;
    sameY: z.ZodOptional<z.ZodLiteral<true>>;
    for: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    for: string[];
    pcb?: true | undefined;
    sameY?: true | undefined;
}, {
    for: string[];
    pcb?: true | undefined;
    sameY?: true | undefined;
}>, z.ZodObject<{
    pcb: z.ZodOptional<z.ZodLiteral<true>>;
    sameX: z.ZodOptional<z.ZodLiteral<true>>;
    for: z.ZodArray<z.ZodString, "many">;
}, "strip", z.ZodTypeAny, {
    for: string[];
    pcb?: true | undefined;
    sameX?: true | undefined;
}, {
    for: string[];
    pcb?: true | undefined;
    sameX?: true | undefined;
}>]>;

interface RectCutoutProps extends Omit<PcbLayoutProps, "layer" | "pcbRotation"> {
    name?: string;
    shape: "rect";
    width: Distance;
    height: Distance;
}
declare const rectCutoutProps: z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation" | "layer"> & {
    name: z.ZodOptional<z.ZodString>;
    shape: z.ZodLiteral<"rect">;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    shape: "rect";
    width: number;
    height: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
}, {
    shape: "rect";
    width: string | number;
    height: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
}>;
interface CircleCutoutProps extends Omit<PcbLayoutProps, "layer" | "pcbRotation"> {
    name?: string;
    shape: "circle";
    radius: Distance;
}
declare const circleCutoutProps: z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation" | "layer"> & {
    name: z.ZodOptional<z.ZodString>;
    shape: z.ZodLiteral<"circle">;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    shape: "circle";
    radius: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
}, {
    shape: "circle";
    radius: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
}>;
interface PolygonCutoutProps extends Omit<PcbLayoutProps, "layer" | "pcbRotation"> {
    name?: string;
    shape: "polygon";
    points: Point[];
}
declare const polygonCutoutProps: z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation" | "layer"> & {
    name: z.ZodOptional<z.ZodString>;
    shape: z.ZodLiteral<"polygon">;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    shape: "polygon";
    points: {
        x: number;
        y: number;
    }[];
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
}, {
    shape: "polygon";
    points: {
        x: string | number;
        y: string | number;
    }[];
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
}>;
type CutoutProps = RectCutoutProps | CircleCutoutProps | PolygonCutoutProps;
declare const cutoutProps: z.ZodDiscriminatedUnion<"shape", [z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation" | "layer"> & {
    name: z.ZodOptional<z.ZodString>;
    shape: z.ZodLiteral<"rect">;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    shape: "rect";
    width: number;
    height: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
}, {
    shape: "rect";
    width: string | number;
    height: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
}>, z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation" | "layer"> & {
    name: z.ZodOptional<z.ZodString>;
    shape: z.ZodLiteral<"circle">;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    shape: "circle";
    radius: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
}, {
    shape: "circle";
    radius: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
}>, z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation" | "layer"> & {
    name: z.ZodOptional<z.ZodString>;
    shape: z.ZodLiteral<"polygon">;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    shape: "polygon";
    points: {
        x: number;
        y: number;
    }[];
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
}, {
    shape: "polygon";
    points: {
        x: string | number;
        y: string | number;
    }[];
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
}>]>;
type CutoutPropsInput = z.input<typeof cutoutProps>;

interface RectSmtPadProps extends Omit<PcbLayoutProps, "pcbRotation"> {
    name?: string;
    shape: "rect";
    width: Distance;
    height: Distance;
    portHints?: PortHints;
}
interface RotatedRectSmtPadProps extends Omit<PcbLayoutProps, "pcbRotation"> {
    name?: string;
    shape: "rotated_rect";
    width: Distance;
    height: Distance;
    ccwRotation: number;
    portHints?: PortHints;
}
interface CircleSmtPadProps extends Omit<PcbLayoutProps, "pcbRotation"> {
    name?: string;
    shape: "circle";
    radius: Distance;
    portHints?: PortHints;
}
interface PillSmtPadProps extends Omit<PcbLayoutProps, "pcbRotation"> {
    name?: string;
    shape: "pill";
    width: Distance;
    height: Distance;
    radius: Distance;
    portHints?: PortHints;
}
interface PolygonSmtPadProps extends Omit<PcbLayoutProps, "pcbRotation"> {
    name?: string;
    shape: "polygon";
    points: Point[];
    portHints?: PortHints;
}
type SmtPadProps = RectSmtPadProps | CircleSmtPadProps | RotatedRectSmtPadProps | PillSmtPadProps | PolygonSmtPadProps;
declare const rectSmtPadProps: z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    name: z.ZodOptional<z.ZodString>;
    shape: z.ZodLiteral<"rect">;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    portHints: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">>;
}, "strip", z.ZodTypeAny, {
    shape: "rect";
    width: number;
    height: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}, {
    shape: "rect";
    width: string | number;
    height: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}>;
declare const rotatedRectSmtPadProps: z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    name: z.ZodOptional<z.ZodString>;
    shape: z.ZodLiteral<"rotated_rect">;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    ccwRotation: z.ZodNumber;
    portHints: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">>;
}, "strip", z.ZodTypeAny, {
    shape: "rotated_rect";
    width: number;
    height: number;
    ccwRotation: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}, {
    shape: "rotated_rect";
    width: string | number;
    height: string | number;
    ccwRotation: number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}>;
declare const circleSmtPadProps: z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    name: z.ZodOptional<z.ZodString>;
    shape: z.ZodLiteral<"circle">;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    portHints: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">>;
}, "strip", z.ZodTypeAny, {
    shape: "circle";
    radius: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}, {
    shape: "circle";
    radius: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}>;
declare const pillSmtPadProps: z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    name: z.ZodOptional<z.ZodString>;
    shape: z.ZodLiteral<"pill">;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    portHints: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">>;
}, "strip", z.ZodTypeAny, {
    shape: "pill";
    width: number;
    height: number;
    radius: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}, {
    shape: "pill";
    width: string | number;
    height: string | number;
    radius: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}>;
declare const polygonSmtPadProps: z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    name: z.ZodOptional<z.ZodString>;
    shape: z.ZodLiteral<"polygon">;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    portHints: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">>;
}, "strip", z.ZodTypeAny, {
    shape: "polygon";
    points: {
        x: number;
        y: number;
    }[];
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}, {
    shape: "polygon";
    points: {
        x: string | number;
        y: string | number;
    }[];
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}>;
declare const smtPadProps: z.ZodDiscriminatedUnion<"shape", [z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    name: z.ZodOptional<z.ZodString>;
    shape: z.ZodLiteral<"circle">;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    portHints: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">>;
}, "strip", z.ZodTypeAny, {
    shape: "circle";
    radius: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}, {
    shape: "circle";
    radius: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}>, z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    name: z.ZodOptional<z.ZodString>;
    shape: z.ZodLiteral<"rect">;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    portHints: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">>;
}, "strip", z.ZodTypeAny, {
    shape: "rect";
    width: number;
    height: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}, {
    shape: "rect";
    width: string | number;
    height: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}>, z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    name: z.ZodOptional<z.ZodString>;
    shape: z.ZodLiteral<"rotated_rect">;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    ccwRotation: z.ZodNumber;
    portHints: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">>;
}, "strip", z.ZodTypeAny, {
    shape: "rotated_rect";
    width: number;
    height: number;
    ccwRotation: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}, {
    shape: "rotated_rect";
    width: string | number;
    height: string | number;
    ccwRotation: number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}>, z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    name: z.ZodOptional<z.ZodString>;
    shape: z.ZodLiteral<"pill">;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    portHints: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">>;
}, "strip", z.ZodTypeAny, {
    shape: "pill";
    width: number;
    height: number;
    radius: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}, {
    shape: "pill";
    width: string | number;
    height: string | number;
    radius: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}>, z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    name: z.ZodOptional<z.ZodString>;
    shape: z.ZodLiteral<"polygon">;
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    portHints: z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">>;
}, "strip", z.ZodTypeAny, {
    shape: "polygon";
    points: {
        x: number;
        y: number;
    }[];
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}, {
    shape: "polygon";
    points: {
        x: string | number;
        y: string | number;
    }[];
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    portHints?: (string | number)[] | undefined;
}>]>;
type InferredSmtPadProps = z.input<typeof smtPadProps>;

interface RectSolderPasteProps extends Omit<PcbLayoutProps, "pcbRotation"> {
    shape: "rect";
    width: Distance;
    height: Distance;
}
interface CircleSolderPasteProps extends Omit<PcbLayoutProps, "pcbRotation"> {
    shape: "circle";
    radius: Distance;
}
type SolderPasteProps = RectSolderPasteProps | CircleSolderPasteProps;
declare const rectSolderPasteProps: z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    shape: z.ZodLiteral<"rect">;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    shape: "rect";
    width: number;
    height: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}, {
    shape: "rect";
    width: string | number;
    height: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}>;
declare const circleSolderPasteProps: z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    shape: z.ZodLiteral<"circle">;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    shape: "circle";
    radius: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}, {
    shape: "circle";
    radius: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}>;
declare const solderPasteProps: z.ZodUnion<[z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    shape: z.ZodLiteral<"circle">;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    shape: "circle";
    radius: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}, {
    shape: "circle";
    radius: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}>, z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    shape: z.ZodLiteral<"rect">;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    shape: "rect";
    width: number;
    height: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}, {
    shape: "rect";
    width: string | number;
    height: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}>]>;
type InferredSolderPasteProps = z.input<typeof solderPasteProps>;

interface HoleProps extends Omit<PcbLayoutProps, "pcbRotation"> {
    name?: string;
    diameter?: Distance;
    radius?: Distance;
}
declare const holeProps: z.ZodEffects<z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    name: z.ZodOptional<z.ZodString>;
    diameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    radius: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    radius?: number | undefined;
    diameter?: number | undefined;
}, {
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    radius?: string | number | undefined;
    diameter?: string | number | undefined;
}>, {
    diameter: number;
    radius: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
}, {
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    name?: string | undefined;
    radius?: string | number | undefined;
    diameter?: string | number | undefined;
}>;
type InferredHoleProps = z.input<typeof holeProps>;

declare const portRef: z.ZodUnion<[z.ZodString, z.ZodType<{
    getPortSelector: () => string;
}, z.ZodTypeDef, {
    getPortSelector: () => string;
}>]>;
declare const traceProps: z.ZodUnion<[z.ZodObject<{
    key: z.ZodOptional<z.ZodString>;
    thickness: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schematicRouteHints: z.ZodOptional<z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">>;
    pcbRouteHints: z.ZodOptional<z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        via: z.ZodOptional<z.ZodBoolean>;
        to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>>;
        trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }, {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }>, "many">>;
    schDisplayLabel: z.ZodOptional<z.ZodString>;
    maxLength: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
} & {
    path: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodType<{
        getPortSelector: () => string;
    }, z.ZodTypeDef, {
        getPortSelector: () => string;
    }>]>, "many">;
}, "strip", z.ZodTypeAny, {
    path: (string | {
        getPortSelector: () => string;
    })[];
    key?: string | undefined;
    maxLength?: number | undefined;
    thickness?: number | undefined;
    schematicRouteHints?: {
        x: number;
        y: number;
    }[] | undefined;
    pcbRouteHints?: {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }[] | undefined;
    schDisplayLabel?: string | undefined;
}, {
    path: (string | {
        getPortSelector: () => string;
    })[];
    key?: string | undefined;
    maxLength?: string | number | undefined;
    thickness?: string | number | undefined;
    schematicRouteHints?: {
        x: string | number;
        y: string | number;
    }[] | undefined;
    pcbRouteHints?: {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }[] | undefined;
    schDisplayLabel?: string | undefined;
}>, z.ZodObject<{
    key: z.ZodOptional<z.ZodString>;
    thickness: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schematicRouteHints: z.ZodOptional<z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">>;
    pcbRouteHints: z.ZodOptional<z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        via: z.ZodOptional<z.ZodBoolean>;
        to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>>;
        trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }, {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }>, "many">>;
    schDisplayLabel: z.ZodOptional<z.ZodString>;
    maxLength: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
} & {
    from: z.ZodUnion<[z.ZodString, z.ZodType<{
        getPortSelector: () => string;
    }, z.ZodTypeDef, {
        getPortSelector: () => string;
    }>]>;
    to: z.ZodUnion<[z.ZodString, z.ZodType<{
        getPortSelector: () => string;
    }, z.ZodTypeDef, {
        getPortSelector: () => string;
    }>]>;
}, "strip", z.ZodTypeAny, {
    from: string | {
        getPortSelector: () => string;
    };
    to: string | {
        getPortSelector: () => string;
    };
    key?: string | undefined;
    maxLength?: number | undefined;
    thickness?: number | undefined;
    schematicRouteHints?: {
        x: number;
        y: number;
    }[] | undefined;
    pcbRouteHints?: {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }[] | undefined;
    schDisplayLabel?: string | undefined;
}, {
    from: string | {
        getPortSelector: () => string;
    };
    to: string | {
        getPortSelector: () => string;
    };
    key?: string | undefined;
    maxLength?: string | number | undefined;
    thickness?: string | number | undefined;
    schematicRouteHints?: {
        x: string | number;
        y: string | number;
    }[] | undefined;
    pcbRouteHints?: {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }[] | undefined;
    schDisplayLabel?: string | undefined;
}>]>;
type TraceProps = z.input<typeof traceProps>;

interface FootprintProps {
    /**
     * The layer that the footprint is designed for. If you set this to "top"
     * then it means the children were intended to represent the top layer. If
     * the <chip /> with this footprint is moved to the bottom layer, then the
     * components will be mirrored.
     *
     * Generally, you shouldn't set this except where it can help prevent
     * confusion because you have a complex multi-layer footprint. Default is
     * "top" and this is most intuitive.
     */
    originalLayer?: LayerRef;
}
declare const footprintProps: z.ZodObject<{
    originalLayer: z.ZodOptional<z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>>;
}, "strip", z.ZodTypeAny, {
    originalLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
}, {
    originalLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
}>;
type FootprintPropsInput = z.input<typeof footprintProps>;

interface BatteryProps<PinLabel extends string = string> extends CommonComponentProps<PinLabel> {
    capacity?: number | string;
    schOrientation?: SchematicOrientation;
}
declare const batteryProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    capacity: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodNumber, z.ZodString]>, number, string | number>>;
    schOrientation: z.ZodOptional<z.ZodEnum<["vertical", "horizontal", "pos_top", "pos_bottom", "pos_left", "pos_right", "neg_top", "neg_bottom", "neg_left", "neg_right"]>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    capacity?: number | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
}, {
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    capacity?: string | number | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
}>;
declare const batteryPins: readonly ["pin1", "left", "anode", "pos", "pin2", "right", "cathode", "neg"];
type BatteryPinLabels = (typeof batteryPins)[number];

interface PinHeaderProps extends CommonComponentProps {
    /**
     * Number of pins in the header
     */
    pinCount: number;
    /**
     * Distance between pins
     */
    pitch?: number | string;
    /**
     * Schematic facing direction
     */
    schFacingDirection?: "up" | "down" | "left" | "right";
    /**
     * Whether the header is male or female
     */
    gender?: "male" | "female";
    /**
     * Whether to show pin labels in silkscreen
     */
    showSilkscreenPinLabels?: boolean;
    /**
     * Labels for PCB pins
     */
    pcbPinLabels?: Record<string, string>;
    /**
     * Whether the header has two rows of pins
     */
    doubleRow?: boolean;
    /**
     * Diameter of the through-hole for each pin
     */
    holeDiameter?: number | string;
    /**
     * Diameter of the plated area around each hole
     */
    platedDiameter?: number | string;
    /**
     * Labels for each pin
     */
    pinLabels?: SchematicPinLabel[];
    /**
     * Connections to other components
     */
    connections?: Connections<string>;
    /**
     * Direction the header is facing
     */
    facingDirection?: "left" | "right";
    /**
     * Pin arrangement in schematic view
     */
    schPinArrangement?: SchematicPinArrangement;
    /**
     * Schematic pin style (margins, etc)
     */
    schPinStyle?: SchematicPinStyle;
    /**
     * Schematic pin spacing
     */
    schPinSpacing?: number | string;
    /**
     * Schematic width
     */
    schWidth?: number | string;
    /**
     * Schematic height
     */
    schHeight?: number | string;
}
declare const pinHeaderProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    pinCount: z.ZodNumber;
    pitch: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schFacingDirection: z.ZodOptional<z.ZodEnum<["up", "down", "left", "right"]>>;
    gender: z.ZodDefault<z.ZodOptional<z.ZodEnum<["male", "female"]>>>;
    showSilkscreenPinLabels: z.ZodOptional<z.ZodBoolean>;
    pcbPinLabels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    doubleRow: z.ZodOptional<z.ZodBoolean>;
    holeDiameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    platedDiameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pinLabels: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    connections: z.ZodOptional<z.ZodPipeline<z.ZodType<Partial<Record<string, string | string[] | readonly string[]>>, z.ZodTypeDef, Partial<Record<string, string | string[] | readonly string[]>>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodReadonly<z.ZodArray<z.ZodString, "many">>]>, z.ZodArray<z.ZodString, "many">]>>>>;
    facingDirection: z.ZodOptional<z.ZodEnum<["left", "right"]>>;
    schPinArrangement: z.ZodOptional<z.ZodObject<{
        leftSize: z.ZodOptional<z.ZodNumber>;
        topSize: z.ZodOptional<z.ZodNumber>;
        rightSize: z.ZodOptional<z.ZodNumber>;
        bottomSize: z.ZodOptional<z.ZodNumber>;
        leftPinCount: z.ZodOptional<z.ZodNumber>;
        rightPinCount: z.ZodOptional<z.ZodNumber>;
        topPinCount: z.ZodOptional<z.ZodNumber>;
        bottomPinCount: z.ZodOptional<z.ZodNumber>;
        leftSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        rightSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        topSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        bottomSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
    }, "strip", z.ZodTypeAny, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }>>;
    schPinStyle: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        marginLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        leftMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        rightMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        topMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        bottomMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        marginLeft?: number | undefined;
        marginRight?: number | undefined;
        marginTop?: number | undefined;
        marginBottom?: number | undefined;
        leftMargin?: number | undefined;
        rightMargin?: number | undefined;
        topMargin?: number | undefined;
        bottomMargin?: number | undefined;
    }, {
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        marginTop?: string | number | undefined;
        marginBottom?: string | number | undefined;
        leftMargin?: string | number | undefined;
        rightMargin?: string | number | undefined;
        topMargin?: string | number | undefined;
        bottomMargin?: string | number | undefined;
    }>>>;
    schPinSpacing: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    gender: "male" | "female";
    pinCount: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schWidth?: number | undefined;
    schHeight?: number | undefined;
    pinLabels?: string[] | undefined;
    pcbPinLabels?: Record<string, string> | undefined;
    schPinArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    schPinStyle?: Record<string, {
        marginLeft?: number | undefined;
        marginRight?: number | undefined;
        marginTop?: number | undefined;
        marginBottom?: number | undefined;
        leftMargin?: number | undefined;
        rightMargin?: number | undefined;
        topMargin?: number | undefined;
        bottomMargin?: number | undefined;
    }> | undefined;
    schPinSpacing?: number | undefined;
    connections?: Record<string, string | readonly string[] | string[]> | undefined;
    holeDiameter?: number | undefined;
    pitch?: number | undefined;
    schFacingDirection?: "up" | "down" | "left" | "right" | undefined;
    showSilkscreenPinLabels?: boolean | undefined;
    doubleRow?: boolean | undefined;
    platedDiameter?: number | undefined;
    facingDirection?: "left" | "right" | undefined;
}, {
    name: string;
    pinCount: number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schWidth?: string | number | undefined;
    schHeight?: string | number | undefined;
    gender?: "male" | "female" | undefined;
    pinLabels?: string[] | undefined;
    pcbPinLabels?: Record<string, string> | undefined;
    schPinArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    schPinStyle?: Record<string, {
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        marginTop?: string | number | undefined;
        marginBottom?: string | number | undefined;
        leftMargin?: string | number | undefined;
        rightMargin?: string | number | undefined;
        topMargin?: string | number | undefined;
        bottomMargin?: string | number | undefined;
    }> | undefined;
    schPinSpacing?: string | number | undefined;
    connections?: Partial<Record<string, string | string[] | readonly string[]>> | undefined;
    holeDiameter?: string | number | undefined;
    pitch?: string | number | undefined;
    schFacingDirection?: "up" | "down" | "left" | "right" | undefined;
    showSilkscreenPinLabels?: boolean | undefined;
    doubleRow?: boolean | undefined;
    platedDiameter?: string | number | undefined;
    facingDirection?: "left" | "right" | undefined;
}>;

/**
 * @deprecated Use NetLabelProps instead.
 */
interface NetAliasProps {
    net?: string;
    connection?: string;
    schX?: number | string;
    schY?: number | string;
    schRotation?: number | string;
    anchorSide?: "left" | "top" | "right" | "bottom";
}
/** @deprecated Use netLabelProps instead. */
declare const netAliasProps: z.ZodObject<{
    net: z.ZodOptional<z.ZodString>;
    connection: z.ZodOptional<z.ZodString>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    anchorSide: z.ZodOptional<z.ZodEnum<["left", "top", "right", "bottom"]>>;
}, "strip", z.ZodTypeAny, {
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    net?: string | undefined;
    connection?: string | undefined;
    anchorSide?: "left" | "right" | "top" | "bottom" | undefined;
}, {
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    net?: string | undefined;
    connection?: string | undefined;
    anchorSide?: "left" | "right" | "top" | "bottom" | undefined;
}>;

interface NetLabelProps {
    net?: string;
    connection?: string;
    connectsTo?: string | string[];
    schX?: number | string;
    schY?: number | string;
    schRotation?: number | string;
    anchorSide?: "left" | "top" | "right" | "bottom";
}
declare const netLabelProps: z.ZodObject<{
    net: z.ZodOptional<z.ZodString>;
    connection: z.ZodOptional<z.ZodString>;
    connectsTo: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    anchorSide: z.ZodOptional<z.ZodEnum<["left", "top", "right", "bottom"]>>;
}, "strip", z.ZodTypeAny, {
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    connectsTo?: string | string[] | undefined;
    net?: string | undefined;
    connection?: string | undefined;
    anchorSide?: "left" | "right" | "top" | "bottom" | undefined;
}, {
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    connectsTo?: string | string[] | undefined;
    net?: string | undefined;
    connection?: string | undefined;
    anchorSide?: "left" | "right" | "top" | "bottom" | undefined;
}>;

type PushButtonProps<T extends PinLabelsProp | string = string> = ChipProps<T>;
declare const pushButtonProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    manufacturerPartNumber: z.ZodOptional<z.ZodString>;
    pinLabels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodReadonly<z.ZodArray<z.ZodString, "many">>]>, z.ZodArray<z.ZodString, "many">]>>>;
    showPinAliases: z.ZodOptional<z.ZodBoolean>;
    pcbPinLabels: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    internallyConnectedPins: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    externallyConnectedPins: z.ZodOptional<z.ZodArray<z.ZodArray<z.ZodString, "many">, "many">>;
    schPinArrangement: z.ZodOptional<z.ZodObject<{
        leftSize: z.ZodOptional<z.ZodNumber>;
        topSize: z.ZodOptional<z.ZodNumber>;
        rightSize: z.ZodOptional<z.ZodNumber>;
        bottomSize: z.ZodOptional<z.ZodNumber>;
        leftPinCount: z.ZodOptional<z.ZodNumber>;
        rightPinCount: z.ZodOptional<z.ZodNumber>;
        topPinCount: z.ZodOptional<z.ZodNumber>;
        bottomPinCount: z.ZodOptional<z.ZodNumber>;
        leftSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        rightSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        topSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        bottomSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
    }, "strip", z.ZodTypeAny, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }>>;
    schPortArrangement: z.ZodOptional<z.ZodObject<{
        leftSize: z.ZodOptional<z.ZodNumber>;
        topSize: z.ZodOptional<z.ZodNumber>;
        rightSize: z.ZodOptional<z.ZodNumber>;
        bottomSize: z.ZodOptional<z.ZodNumber>;
        leftPinCount: z.ZodOptional<z.ZodNumber>;
        rightPinCount: z.ZodOptional<z.ZodNumber>;
        topPinCount: z.ZodOptional<z.ZodNumber>;
        bottomPinCount: z.ZodOptional<z.ZodNumber>;
        leftSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        rightSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        topSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
        bottomSide: z.ZodOptional<z.ZodObject<{
            pins: z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">;
            direction: z.ZodUnion<[z.ZodLiteral<"top-to-bottom">, z.ZodLiteral<"left-to-right">, z.ZodLiteral<"bottom-to-top">, z.ZodLiteral<"right-to-left">]>;
        }, "strip", z.ZodTypeAny, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }, {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        }>>;
    }, "strip", z.ZodTypeAny, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }, {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    }>>;
    pinCompatibleVariants: z.ZodOptional<z.ZodArray<z.ZodObject<{
        manufacturerPartNumber: z.ZodOptional<z.ZodString>;
        supplierPartNumber: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
    }, "strip", z.ZodTypeAny, {
        manufacturerPartNumber?: string | undefined;
        supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    }, {
        manufacturerPartNumber?: string | undefined;
        supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    }>, "many">>;
    schPinStyle: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        marginLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        marginBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        leftMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        rightMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        topMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        bottomMargin: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        marginLeft?: number | undefined;
        marginRight?: number | undefined;
        marginTop?: number | undefined;
        marginBottom?: number | undefined;
        leftMargin?: number | undefined;
        rightMargin?: number | undefined;
        topMargin?: number | undefined;
        bottomMargin?: number | undefined;
    }, {
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        marginTop?: string | number | undefined;
        marginBottom?: string | number | undefined;
        leftMargin?: string | number | undefined;
        rightMargin?: string | number | undefined;
        topMargin?: string | number | undefined;
        bottomMargin?: string | number | undefined;
    }>>>;
    schPinSpacing: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    noSchematicRepresentation: z.ZodOptional<z.ZodBoolean>;
    connections: z.ZodOptional<z.ZodPipeline<z.ZodType<Partial<Record<string, string | string[] | readonly string[]>>, z.ZodTypeDef, Partial<Record<string, string | string[] | readonly string[]>>>, z.ZodRecord<z.ZodString, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodReadonly<z.ZodArray<z.ZodString, "many">>]>, z.ZodArray<z.ZodString, "many">]>>>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schWidth?: number | undefined;
    schHeight?: number | undefined;
    manufacturerPartNumber?: string | undefined;
    pinLabels?: Record<string, string | readonly string[] | string[]> | undefined;
    showPinAliases?: boolean | undefined;
    pcbPinLabels?: Record<string, string> | undefined;
    internallyConnectedPins?: string[][] | undefined;
    externallyConnectedPins?: string[][] | undefined;
    schPinArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    schPortArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    pinCompatibleVariants?: {
        manufacturerPartNumber?: string | undefined;
        supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    }[] | undefined;
    schPinStyle?: Record<string, {
        marginLeft?: number | undefined;
        marginRight?: number | undefined;
        marginTop?: number | undefined;
        marginBottom?: number | undefined;
        leftMargin?: number | undefined;
        rightMargin?: number | undefined;
        topMargin?: number | undefined;
        bottomMargin?: number | undefined;
    }> | undefined;
    schPinSpacing?: number | undefined;
    noSchematicRepresentation?: boolean | undefined;
    connections?: Record<string, string | readonly string[] | string[]> | undefined;
}, {
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schWidth?: string | number | undefined;
    schHeight?: string | number | undefined;
    manufacturerPartNumber?: string | undefined;
    pinLabels?: Record<string, string | readonly string[] | string[]> | undefined;
    showPinAliases?: boolean | undefined;
    pcbPinLabels?: Record<string, string> | undefined;
    internallyConnectedPins?: string[][] | undefined;
    externallyConnectedPins?: string[][] | undefined;
    schPinArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    schPortArrangement?: {
        leftSize?: number | undefined;
        topSize?: number | undefined;
        rightSize?: number | undefined;
        bottomSize?: number | undefined;
        leftSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        topSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        rightSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        bottomSide?: {
            pins: (string | number)[];
            direction: "top-to-bottom" | "left-to-right" | "bottom-to-top" | "right-to-left";
        } | undefined;
        leftPinCount?: number | undefined;
        rightPinCount?: number | undefined;
        topPinCount?: number | undefined;
        bottomPinCount?: number | undefined;
    } | undefined;
    pinCompatibleVariants?: {
        manufacturerPartNumber?: string | undefined;
        supplierPartNumber?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    }[] | undefined;
    schPinStyle?: Record<string, {
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        marginTop?: string | number | undefined;
        marginBottom?: string | number | undefined;
        leftMargin?: string | number | undefined;
        rightMargin?: string | number | undefined;
        topMargin?: string | number | undefined;
        bottomMargin?: string | number | undefined;
    }> | undefined;
    schPinSpacing?: string | number | undefined;
    noSchematicRepresentation?: boolean | undefined;
    connections?: Partial<Record<string, string | string[] | readonly string[]>> | undefined;
}>;

type SubcircuitProps = SubcircuitGroupProps;
declare const subcircuitProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    pcbWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schHeight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    schLayout: z.ZodOptional<z.ZodObject<{
        layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
        position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
        grid: z.ZodOptional<z.ZodBoolean>;
        gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        gridTemplateRows: z.ZodOptional<z.ZodString>;
        gridTemplateColumns: z.ZodOptional<z.ZodString>;
        gridTemplate: z.ZodOptional<z.ZodString>;
        gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
        flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
        alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
        justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
        flexRow: z.ZodOptional<z.ZodBoolean>;
        flexColumn: z.ZodOptional<z.ZodBoolean>;
        gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
        pack: z.ZodOptional<z.ZodBoolean>;
        packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
        packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
        padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        matchAdapt: z.ZodOptional<z.ZodBoolean>;
        matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }, {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    }>>;
    cellBorder: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    border: z.ZodOptional<z.ZodNullable<z.ZodObject<{
        strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        dashed: z.ZodOptional<z.ZodBoolean>;
        solid: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }, {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    }>>>;
    schPadding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schPaddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layoutMode: z.ZodOptional<z.ZodEnum<["grid", "flex", "match-adapt", "relative", "none"]>>;
    position: z.ZodOptional<z.ZodEnum<["absolute", "relative"]>>;
    grid: z.ZodOptional<z.ZodBoolean>;
    gridCols: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridRows: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    gridTemplateRows: z.ZodOptional<z.ZodString>;
    gridTemplateColumns: z.ZodOptional<z.ZodString>;
    gridTemplate: z.ZodOptional<z.ZodString>;
    gridGap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    flex: z.ZodOptional<z.ZodUnion<[z.ZodBoolean, z.ZodString]>>;
    flexDirection: z.ZodOptional<z.ZodEnum<["row", "column"]>>;
    alignItems: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch"]>>;
    justifyContent: z.ZodOptional<z.ZodEnum<["start", "center", "end", "stretch", "space-between", "space-around", "space-evenly"]>>;
    flexRow: z.ZodOptional<z.ZodBoolean>;
    flexColumn: z.ZodOptional<z.ZodBoolean>;
    gap: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodString]>>;
    pack: z.ZodOptional<z.ZodBoolean>;
    packOrderStrategy: z.ZodOptional<z.ZodEnum<["largest_to_smallest"]>>;
    packPlacementStrategy: z.ZodOptional<z.ZodEnum<["shortest_connection_along_outline"]>>;
    padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    matchAdapt: z.ZodOptional<z.ZodBoolean>;
    matchAdaptTemplate: z.ZodOptional<z.ZodAny>;
    name: z.ZodOptional<z.ZodString>;
    children: z.ZodOptional<z.ZodAny>;
    schTitle: z.ZodOptional<z.ZodString>;
    key: z.ZodOptional<z.ZodAny>;
} & {
    manualEdits: z.ZodOptional<z.ZodObject<{
        pcb_placements: z.ZodOptional<z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
            center: z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }, {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }>, "many">>;
        manual_trace_hints: z.ZodOptional<z.ZodArray<z.ZodObject<{
            pcb_port_selector: z.ZodString;
            offsets: z.ZodArray<z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                via: z.ZodOptional<z.ZodBoolean>;
                to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
                    name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
                }, "strip", z.ZodTypeAny, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }, {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                }>>;
                trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }, {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }, {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }>, "many">>;
        schematic_placements: z.ZodOptional<z.ZodArray<z.ZodObject<{
            selector: z.ZodString;
            relative_to: z.ZodDefault<z.ZodOptional<z.ZodString>>;
            center: z.ZodObject<{
                x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
                y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            }, "strip", z.ZodTypeAny, {
                x: number;
                y: number;
            }, {
                x: string | number;
                y: string | number;
            }>;
        }, "strip", z.ZodTypeAny, {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }, {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }>, "many">>;
    }, "strip", z.ZodTypeAny, {
        pcb_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
    }, {
        pcb_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
    }>>;
    schAutoLayoutEnabled: z.ZodOptional<z.ZodBoolean>;
    schTraceAutoLabelEnabled: z.ZodOptional<z.ZodBoolean>;
    routingDisabled: z.ZodOptional<z.ZodBoolean>;
    defaultTraceWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    minTraceWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    partsEngine: z.ZodOptional<z.ZodType<PartsEngine, z.ZodTypeDef, PartsEngine>>;
    pcbRouteCache: z.ZodOptional<z.ZodType<PcbRouteCache, z.ZodTypeDef, PcbRouteCache>>;
    autorouter: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        serverUrl: z.ZodOptional<z.ZodString>;
        inputFormat: z.ZodOptional<z.ZodEnum<["simplified", "circuit-json"]>>;
        serverMode: z.ZodOptional<z.ZodEnum<["job", "solve-endpoint"]>>;
        serverCacheEnabled: z.ZodOptional<z.ZodBoolean>;
        cache: z.ZodOptional<z.ZodType<PcbRouteCache, z.ZodTypeDef, PcbRouteCache>>;
        traceClearance: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
        groupMode: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit"]>>;
        algorithmFn: z.ZodOptional<z.ZodType<(simpleRouteJson: any) => Promise<any>, z.ZodTypeDef, (simpleRouteJson: any) => Promise<any>>>;
        preset: z.ZodOptional<z.ZodEnum<["sequential-trace", "subcircuit", "auto", "auto-local", "auto-cloud"]>>;
        local: z.ZodOptional<z.ZodBoolean>;
    }, "strip", z.ZodTypeAny, {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    }, {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: string | number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    }>, z.ZodLiteral<"sequential-trace">, z.ZodLiteral<"subcircuit">, z.ZodLiteral<"auto">, z.ZodLiteral<"auto-local">, z.ZodLiteral<"auto-cloud">]>>;
    square: z.ZodOptional<z.ZodBoolean>;
    emptyArea: z.ZodOptional<z.ZodString>;
    filledArea: z.ZodOptional<z.ZodString>;
    width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    outline: z.ZodOptional<z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">>;
    outlineOffsetX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    outlineOffsetY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: number | undefined;
    paddingLeft?: number | undefined;
    paddingRight?: number | undefined;
    paddingTop?: number | undefined;
    paddingBottom?: number | undefined;
    paddingX?: number | undefined;
    paddingY?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: number | undefined;
    pcbHeight?: number | undefined;
    schWidth?: number | undefined;
    schHeight?: number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: number | undefined;
        paddingLeft?: number | undefined;
        paddingRight?: number | undefined;
        paddingTop?: number | undefined;
        paddingBottom?: number | undefined;
        paddingX?: number | undefined;
        paddingY?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: number | undefined;
    schPaddingLeft?: number | undefined;
    schPaddingRight?: number | undefined;
    schPaddingTop?: number | undefined;
    schPaddingBottom?: number | undefined;
    manualEdits?: {
        pcb_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: number;
                y: number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
                trace_width?: number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            relative_to: string;
            center: {
                x: number;
                y: number;
            };
        }[] | undefined;
    } | undefined;
    routingDisabled?: boolean | undefined;
    defaultTraceWidth?: number | undefined;
    minTraceWidth?: number | undefined;
    pcbRouteCache?: PcbRouteCache | undefined;
    autorouter?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    } | undefined;
    schAutoLayoutEnabled?: boolean | undefined;
    schTraceAutoLabelEnabled?: boolean | undefined;
    partsEngine?: PartsEngine | undefined;
    square?: boolean | undefined;
    emptyArea?: string | undefined;
    filledArea?: string | undefined;
    outline?: {
        x: number;
        y: number;
    }[] | undefined;
    outlineOffsetX?: number | undefined;
    outlineOffsetY?: number | undefined;
}, {
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    key?: any;
    name?: string | undefined;
    children?: any;
    grid?: boolean | undefined;
    flex?: string | boolean | undefined;
    layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
    position?: "relative" | "absolute" | undefined;
    gridCols?: string | number | undefined;
    gridRows?: string | number | undefined;
    gridTemplateRows?: string | undefined;
    gridTemplateColumns?: string | undefined;
    gridTemplate?: string | undefined;
    gridGap?: string | number | undefined;
    flexDirection?: "row" | "column" | undefined;
    alignItems?: "center" | "start" | "end" | "stretch" | undefined;
    justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
    flexRow?: boolean | undefined;
    flexColumn?: boolean | undefined;
    gap?: string | number | undefined;
    pack?: boolean | undefined;
    packOrderStrategy?: "largest_to_smallest" | undefined;
    packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
    padding?: string | number | undefined;
    paddingLeft?: string | number | undefined;
    paddingRight?: string | number | undefined;
    paddingTop?: string | number | undefined;
    paddingBottom?: string | number | undefined;
    paddingX?: string | number | undefined;
    paddingY?: string | number | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    matchAdapt?: boolean | undefined;
    matchAdaptTemplate?: any;
    schTitle?: string | undefined;
    pcbWidth?: string | number | undefined;
    pcbHeight?: string | number | undefined;
    schWidth?: string | number | undefined;
    schHeight?: string | number | undefined;
    pcbLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    schLayout?: {
        grid?: boolean | undefined;
        flex?: string | boolean | undefined;
        layoutMode?: "relative" | "grid" | "flex" | "match-adapt" | "none" | undefined;
        position?: "relative" | "absolute" | undefined;
        gridCols?: string | number | undefined;
        gridRows?: string | number | undefined;
        gridTemplateRows?: string | undefined;
        gridTemplateColumns?: string | undefined;
        gridTemplate?: string | undefined;
        gridGap?: string | number | undefined;
        flexDirection?: "row" | "column" | undefined;
        alignItems?: "center" | "start" | "end" | "stretch" | undefined;
        justifyContent?: "center" | "start" | "end" | "stretch" | "space-between" | "space-around" | "space-evenly" | undefined;
        flexRow?: boolean | undefined;
        flexColumn?: boolean | undefined;
        gap?: string | number | undefined;
        pack?: boolean | undefined;
        packOrderStrategy?: "largest_to_smallest" | undefined;
        packPlacementStrategy?: "shortest_connection_along_outline" | undefined;
        padding?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingX?: string | number | undefined;
        paddingY?: string | number | undefined;
        width?: string | number | undefined;
        height?: string | number | undefined;
        matchAdapt?: boolean | undefined;
        matchAdaptTemplate?: any;
    } | undefined;
    cellBorder?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    border?: {
        strokeWidth?: string | number | undefined;
        dashed?: boolean | undefined;
        solid?: boolean | undefined;
    } | null | undefined;
    schPadding?: string | number | undefined;
    schPaddingLeft?: string | number | undefined;
    schPaddingRight?: string | number | undefined;
    schPaddingTop?: string | number | undefined;
    schPaddingBottom?: string | number | undefined;
    manualEdits?: {
        pcb_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
        manual_trace_hints?: {
            pcb_port_selector: string;
            offsets: {
                x: string | number;
                y: string | number;
                via?: boolean | undefined;
                to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
                    name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
                } | undefined;
                trace_width?: string | number | undefined;
            }[];
        }[] | undefined;
        schematic_placements?: {
            selector: string;
            center: {
                x: string | number;
                y: string | number;
            };
            relative_to?: string | undefined;
        }[] | undefined;
    } | undefined;
    routingDisabled?: boolean | undefined;
    defaultTraceWidth?: string | number | undefined;
    minTraceWidth?: string | number | undefined;
    pcbRouteCache?: PcbRouteCache | undefined;
    autorouter?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | {
        serverUrl?: string | undefined;
        inputFormat?: "simplified" | "circuit-json" | undefined;
        serverMode?: "job" | "solve-endpoint" | undefined;
        serverCacheEnabled?: boolean | undefined;
        cache?: PcbRouteCache | undefined;
        traceClearance?: string | number | undefined;
        groupMode?: "sequential-trace" | "subcircuit" | undefined;
        algorithmFn?: ((simpleRouteJson: any) => Promise<any>) | undefined;
        preset?: "sequential-trace" | "subcircuit" | "auto" | "auto-local" | "auto-cloud" | undefined;
        local?: boolean | undefined;
    } | undefined;
    schAutoLayoutEnabled?: boolean | undefined;
    schTraceAutoLabelEnabled?: boolean | undefined;
    partsEngine?: PartsEngine | undefined;
    square?: boolean | undefined;
    emptyArea?: string | undefined;
    filledArea?: string | undefined;
    outline?: {
        x: string | number;
        y: string | number;
    }[] | undefined;
    outlineOffsetX?: string | number | undefined;
    outlineOffsetY?: string | number | undefined;
}>;

declare const transistorPinsLabels: readonly ["pin1", "pin2", "pin3", "emitter", "collector", "base", "gate", "source", "drain"];
type transistorPinsLabels = (typeof transistorPinsLabels)[number];
interface TransistorProps<PinLabel extends string = string> extends CommonComponentProps<PinLabel> {
    type: "npn" | "pnp" | "bjt" | "jfet" | "mosfet" | "igbt";
    connections?: Connections<transistorPinsLabels>;
}
declare const transistorProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    type: z.ZodEnum<["npn", "pnp", "bjt", "jfet", "mosfet", "igbt"]>;
    connections: z.ZodOptional<z.ZodRecord<z.ZodEnum<["pin1", "pin2", "pin3", "emitter", "collector", "base", "gate", "source", "drain"]>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodReadonly<z.ZodArray<z.ZodString, "many">>]>, z.ZodArray<z.ZodString, "many">]>>>;
}, "strip", z.ZodTypeAny, {
    type: "npn" | "pnp" | "bjt" | "jfet" | "mosfet" | "igbt";
    name: string;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    connections?: Partial<Record<"pin1" | "pin2" | "pin3" | "emitter" | "collector" | "base" | "gate" | "source" | "drain", string | readonly string[] | string[]>> | undefined;
}, {
    type: "npn" | "pnp" | "bjt" | "jfet" | "mosfet" | "igbt";
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    connections?: Partial<Record<"pin1" | "pin2" | "pin3" | "emitter" | "collector" | "base" | "gate" | "source" | "drain", string | readonly string[] | string[]>> | undefined;
}>;
declare const transistorPins: readonly ["pin1", "emitter", "pin2", "collector", "pin3", "base"];
type TransistorPinLabels = (typeof transistorPins)[number];

interface MosfetProps<PinLabel extends string = string> extends CommonComponentProps<PinLabel> {
    channelType: "n" | "p";
    mosfetMode: "enhancement" | "depletion";
}
declare const mosfetProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    channelType: z.ZodEnum<["n", "p"]>;
    mosfetMode: z.ZodEnum<["enhancement", "depletion"]>;
}, "strip", z.ZodTypeAny, {
    name: string;
    channelType: "n" | "p";
    mosfetMode: "enhancement" | "depletion";
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
}, {
    name: string;
    channelType: "n" | "p";
    mosfetMode: "enhancement" | "depletion";
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
}>;
declare const mosfetPins: readonly ["pin1", "drain", "pin2", "source", "pin3", "gate"];
type MosfetPinLabels = (typeof mosfetPins)[number];

interface InductorProps<PinLabel extends string = string> extends CommonComponentProps<PinLabel> {
    inductance: number | string;
    maxCurrentRating?: number | string;
    schOrientation?: SchematicOrientation;
}
declare const inductorProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    inductance: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    maxCurrentRating: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    schOrientation: z.ZodOptional<z.ZodEnum<["vertical", "horizontal", "pos_top", "pos_bottom", "pos_left", "pos_right", "neg_top", "neg_bottom", "neg_left", "neg_right"]>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    inductance: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
    maxCurrentRating?: string | number | undefined;
}, {
    name: string;
    inductance: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
    maxCurrentRating?: string | number | undefined;
}>;
declare const inductorPins: readonly ["pin1", "left", "pin2", "right"];
type InductorPinLabels = (typeof inductorPins)[number];

declare const diodeProps: z.ZodEffects<z.ZodEffects<z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    connections: z.ZodOptional<z.ZodRecord<z.ZodEnum<["anode", "cathode", "pin1", "pin2", "pos", "neg"]>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodReadonly<z.ZodArray<z.ZodString, "many">>]>, z.ZodArray<z.ZodString, "many">]>>>;
    variant: z.ZodDefault<z.ZodOptional<z.ZodEnum<["standard", "schottky", "zener", "avalanche", "photo", "tvs"]>>>;
    standard: z.ZodOptional<z.ZodBoolean>;
    schottky: z.ZodOptional<z.ZodBoolean>;
    zener: z.ZodOptional<z.ZodBoolean>;
    avalanche: z.ZodOptional<z.ZodBoolean>;
    photo: z.ZodOptional<z.ZodBoolean>;
    tvs: z.ZodOptional<z.ZodBoolean>;
    schOrientation: z.ZodOptional<z.ZodEnum<["vertical", "horizontal", "pos_top", "pos_bottom", "pos_left", "pos_right", "neg_top", "neg_bottom", "neg_left", "neg_right"]>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    variant: "standard" | "schottky" | "zener" | "avalanche" | "photo" | "tvs";
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    connections?: Partial<Record<"pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
    standard?: boolean | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
    schottky?: boolean | undefined;
    zener?: boolean | undefined;
    avalanche?: boolean | undefined;
    photo?: boolean | undefined;
    tvs?: boolean | undefined;
}, {
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    connections?: Partial<Record<"pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
    standard?: boolean | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
    schottky?: boolean | undefined;
    zener?: boolean | undefined;
    avalanche?: boolean | undefined;
    photo?: boolean | undefined;
    tvs?: boolean | undefined;
    variant?: "standard" | "schottky" | "zener" | "avalanche" | "photo" | "tvs" | undefined;
}>, {
    name: string;
    variant: "standard" | "schottky" | "zener" | "avalanche" | "photo" | "tvs";
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    connections?: Partial<Record<"pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
    standard?: boolean | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
    schottky?: boolean | undefined;
    zener?: boolean | undefined;
    avalanche?: boolean | undefined;
    photo?: boolean | undefined;
    tvs?: boolean | undefined;
}, {
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    connections?: Partial<Record<"pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
    standard?: boolean | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
    schottky?: boolean | undefined;
    zener?: boolean | undefined;
    avalanche?: boolean | undefined;
    photo?: boolean | undefined;
    tvs?: boolean | undefined;
    variant?: "standard" | "schottky" | "zener" | "avalanche" | "photo" | "tvs" | undefined;
}>, {
    standard: boolean;
    schottky: boolean;
    zener: boolean;
    avalanche: boolean;
    photo: boolean;
    tvs: boolean;
    name: string;
    variant: "standard" | "schottky" | "zener" | "avalanche" | "photo" | "tvs";
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    connections?: Partial<Record<"pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
}, {
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    connections?: Partial<Record<"pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
    standard?: boolean | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
    schottky?: boolean | undefined;
    zener?: boolean | undefined;
    avalanche?: boolean | undefined;
    photo?: boolean | undefined;
    tvs?: boolean | undefined;
    variant?: "standard" | "schottky" | "zener" | "avalanche" | "photo" | "tvs" | undefined;
}>;
declare const diodePins: readonly ["pin1", "left", "anode", "pos", "pin2", "right", "cathode", "neg"];
type DiodePinLabels = (typeof diodePins)[number];
interface DiodeProps<PinLabel extends string = string> extends CommonComponentProps<PinLabel> {
    connections?: {
        anode?: string | string[] | readonly string[];
        cathode?: string | string[] | readonly string[];
        pin1?: string | string[] | readonly string[];
        pin2?: string | string[] | readonly string[];
        pos?: string | string[] | readonly string[];
        neg?: string | string[] | readonly string[];
    };
    variant?: "standard" | "schottky" | "zener" | "avalanche" | "photo" | "tvs";
    standard?: boolean;
    schottky?: boolean;
    zener?: boolean;
    avalanche?: boolean;
    photo?: boolean;
    tvs?: boolean;
    schOrientation?: SchematicOrientation;
}
type InferredDiodeProps = z.input<typeof diodeProps>;

type LedPinLabels = (typeof lrPolarPins)[number];
declare const ledProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    color: z.ZodOptional<z.ZodString>;
    wavelength: z.ZodOptional<z.ZodString>;
    schDisplayValue: z.ZodOptional<z.ZodString>;
    schOrientation: z.ZodOptional<z.ZodEnum<["vertical", "horizontal", "pos_top", "pos_bottom", "pos_left", "pos_right", "neg_top", "neg_bottom", "neg_left", "neg_right"]>>;
    connections: z.ZodOptional<z.ZodRecord<z.ZodEnum<["pin1", "left", "anode", "pos", "pin2", "right", "cathode", "neg"]>, z.ZodUnion<[z.ZodUnion<[z.ZodString, z.ZodReadonly<z.ZodArray<z.ZodString, "many">>]>, z.ZodArray<z.ZodString, "many">]>>>;
    laser: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name: string;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    color?: string | undefined;
    wavelength?: string | undefined;
    connections?: Partial<Record<"left" | "right" | "pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
    schDisplayValue?: string | undefined;
    laser?: boolean | undefined;
}, {
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    color?: string | undefined;
    wavelength?: string | undefined;
    connections?: Partial<Record<"left" | "right" | "pin1" | "pin2" | "anode" | "pos" | "cathode" | "neg", string | readonly string[] | string[]>> | undefined;
    schOrientation?: "vertical" | "horizontal" | "pos_top" | "pos_bottom" | "pos_left" | "pos_right" | "neg_top" | "neg_bottom" | "neg_left" | "neg_right" | undefined;
    schDisplayValue?: string | undefined;
    laser?: boolean | undefined;
}>;
declare const ledPins: readonly ["pin1", "left", "anode", "pos", "pin2", "right", "cathode", "neg"];
type LedProps = z.input<typeof ledProps>;

interface SwitchProps extends CommonComponentProps {
    type?: "spst" | "spdt" | "dpst" | "dpdt";
    isNormallyClosed?: boolean;
    spdt?: boolean;
    spst?: boolean;
    dpst?: boolean;
    dpdt?: boolean;
}
declare const switchProps: z.ZodEffects<z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    type: z.ZodOptional<z.ZodEnum<["spst", "spdt", "dpst", "dpdt"]>>;
    isNormallyClosed: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    spst: z.ZodOptional<z.ZodBoolean>;
    spdt: z.ZodOptional<z.ZodBoolean>;
    dpst: z.ZodOptional<z.ZodBoolean>;
    dpdt: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    name: string;
    isNormallyClosed: boolean;
    type?: "spst" | "spdt" | "dpst" | "dpdt" | undefined;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    spst?: boolean | undefined;
    spdt?: boolean | undefined;
    dpst?: boolean | undefined;
    dpdt?: boolean | undefined;
}, {
    name: string;
    type?: "spst" | "spdt" | "dpst" | "dpdt" | undefined;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    spst?: boolean | undefined;
    spdt?: boolean | undefined;
    dpst?: boolean | undefined;
    dpdt?: boolean | undefined;
    isNormallyClosed?: boolean | undefined;
}>, SwitchProps, {
    name: string;
    type?: "spst" | "spdt" | "dpst" | "dpdt" | undefined;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    spst?: boolean | undefined;
    spdt?: boolean | undefined;
    dpst?: boolean | undefined;
    dpdt?: boolean | undefined;
    isNormallyClosed?: boolean | undefined;
}>;
type InferredSwitchProps = z.infer<typeof switchProps>;

declare const fabricationNoteTextProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
} & {
    text: z.ZodString;
    anchorAlignment: z.ZodDefault<z.ZodEnum<["center", "top_left", "top_right", "bottom_left", "bottom_right"]>>;
    font: z.ZodOptional<z.ZodEnum<["tscircuit2024"]>>;
    fontSize: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    color: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    text: string;
    anchorAlignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right";
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    color?: string | undefined;
    font?: "tscircuit2024" | undefined;
    fontSize?: number | undefined;
}, {
    text: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    color?: string | undefined;
    anchorAlignment?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | undefined;
    font?: "tscircuit2024" | undefined;
    fontSize?: string | number | undefined;
}>;
type FabricationNoteTextProps = z.input<typeof fabricationNoteTextProps>;

declare const fabricationNotePathProps: z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbX" | "pcbY" | "pcbRotation"> & {
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        via: z.ZodOptional<z.ZodBoolean>;
        to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>>;
        trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }, {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }>, "many">;
    strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    color: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    route: {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }[];
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    strokeWidth?: number | undefined;
    color?: string | undefined;
}, {
    route: {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }[];
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    strokeWidth?: string | number | undefined;
    color?: string | undefined;
}>;
type FabricationNotePathProps = z.input<typeof fabricationNotePathProps>;

declare const pcbTraceProps: z.ZodObject<{
    layer: z.ZodOptional<z.ZodString>;
    thickness: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        via: z.ZodOptional<z.ZodBoolean>;
        to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>>;
        trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }, {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    route: {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }[];
    layer?: string | undefined;
    thickness?: number | undefined;
}, {
    route: {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }[];
    layer?: string | undefined;
    thickness?: string | number | undefined;
}>;
type PcbTraceProps = z.input<typeof pcbTraceProps>;

interface ViaProps extends CommonLayoutProps {
    name?: string;
    fromLayer: LayerRefInput;
    toLayer: LayerRefInput;
    holeDiameter: number | string;
    outerDiameter: number | string;
    connectsTo?: string | string[];
}
declare const viaProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    name: z.ZodOptional<z.ZodString>;
    fromLayer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    toLayer: z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>;
    holeDiameter: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    outerDiameter: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    connectsTo: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodString, "many">]>>;
}, "strip", z.ZodTypeAny, {
    holeDiameter: number;
    outerDiameter: number;
    fromLayer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    toLayer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
}, {
    holeDiameter: string | number;
    outerDiameter: string | number;
    fromLayer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    toLayer: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    };
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    name?: string | undefined;
    connectsTo?: string | string[] | undefined;
}>;
type InferredViaProps = z.input<typeof viaProps>;

interface TestpointProps extends CommonComponentProps {
    /**
     * The footprint variant of the testpoint either a surface pad or through-hole
     */
    footprintVariant?: "pad" | "through_hole";
    /**
     * The shape of the pad if using a pad variant
     */
    padShape?: "rect" | "circle";
    /**
     * Diameter of the copper pad (applies to both SMD pads and plated holes)
     */
    padDiameter?: number | string;
    /**
     * Diameter of the hole if using a through-hole testpoint
     */
    holeDiameter?: number | string;
    /**
     * Width of the pad when padShape is rect
     */
    width?: number | string;
    /**
     * Height of the pad when padShape is rect
     */
    height?: number | string;
}
declare const testpointProps: z.ZodEffects<z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    footprintVariant: z.ZodOptional<z.ZodEnum<["pad", "through_hole"]>>;
    padShape: z.ZodDefault<z.ZodOptional<z.ZodEnum<["rect", "circle"]>>>;
    padDiameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    holeDiameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    name: string;
    padShape: "circle" | "rect";
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    width?: number | undefined;
    height?: number | undefined;
    holeDiameter?: number | undefined;
    footprintVariant?: "pad" | "through_hole" | undefined;
    padDiameter?: number | undefined;
}, {
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    holeDiameter?: string | number | undefined;
    padShape?: "circle" | "rect" | undefined;
    footprintVariant?: "pad" | "through_hole" | undefined;
    padDiameter?: string | number | undefined;
}>, {
    name: string;
    padShape: "circle" | "rect";
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    width?: number | undefined;
    height?: number | undefined;
    holeDiameter?: number | undefined;
    footprintVariant?: "pad" | "through_hole" | undefined;
    padDiameter?: number | undefined;
}, {
    name: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    holeDiameter?: string | number | undefined;
    padShape?: "circle" | "rect" | undefined;
    footprintVariant?: "pad" | "through_hole" | undefined;
    padDiameter?: string | number | undefined;
}>;
type InferredTestpointProps = z.input<typeof testpointProps>;

interface BreakoutPointProps extends Omit<PcbLayoutProps, "pcbRotation" | "layer"> {
    connection: string;
}
declare const breakoutPointProps: z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation" | "layer"> & {
    connection: z.ZodString;
}, "strip", z.ZodTypeAny, {
    connection: string;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}, {
    connection: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}>;

declare const pcbKeepoutProps: z.ZodUnion<[z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    shape: z.ZodLiteral<"circle">;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    shape: "circle";
    radius: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}, {
    shape: "circle";
    radius: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}>, z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
} & {
    shape: z.ZodLiteral<"rect">;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    shape: "rect";
    width: number;
    height: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}, {
    shape: "rect";
    width: string | number;
    height: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}>]>;
type PcbKeepoutProps = z.input<typeof pcbKeepoutProps>;

declare const powerSourceProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    supplierPartNumbers: z.ZodOptional<z.ZodRecord<z.ZodEnum<["jlcpcb", "macrofab", "pcbway", "digikey", "mouser", "lcsc"]>, z.ZodArray<z.ZodString, "many">>>;
} & {
    key: z.ZodOptional<z.ZodAny>;
    name: z.ZodString;
    cadModel: z.ZodOptional<z.ZodUnion<[z.ZodNull, z.ZodString, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        stlUrl: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        objUrl: z.ZodString;
        mtlUrl: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    }, {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    }>, z.ZodObject<{
        rotationOffset: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodObject<{
            x: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            y: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
            z: z.ZodUnion<[z.ZodNumber, z.ZodString]>;
        }, "strip", z.ZodTypeAny, {
            x: string | number;
            y: string | number;
            z: string | number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>]>>;
        positionOffset: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
        size: z.ZodOptional<z.ZodObject<{
            x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
            z: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        }, "strip", z.ZodTypeAny, {
            x: number;
            y: number;
            z: number;
        }, {
            x: string | number;
            y: string | number;
            z: string | number;
        }>>;
    } & {
        jscad: z.ZodRecord<z.ZodString, z.ZodAny>;
    }, "strip", z.ZodTypeAny, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    }, {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    }>]>>;
    children: z.ZodOptional<z.ZodAny>;
    symbolName: z.ZodOptional<z.ZodString>;
    doNotPlace: z.ZodOptional<z.ZodBoolean>;
    pinAttributes: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodObject<{
        providesPower: z.ZodOptional<z.ZodBoolean>;
        requiresPower: z.ZodOptional<z.ZodBoolean>;
        providesGround: z.ZodOptional<z.ZodBoolean>;
        requiresGround: z.ZodOptional<z.ZodBoolean>;
        providesVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
        requiresVoltage: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    }, "strip", z.ZodTypeAny, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }>>>;
} & {
    voltage: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    name: string;
    voltage: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
        size?: {
            x: number;
            y: number;
            z: number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
}, {
    name: string;
    voltage: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    supplierPartNumbers?: Partial<Record<"jlcpcb" | "macrofab" | "pcbway" | "digikey" | "mouser" | "lcsc", string[]>> | undefined;
    key?: any;
    pinAttributes?: Record<string, {
        providesPower?: boolean | undefined;
        requiresPower?: boolean | undefined;
        providesGround?: boolean | undefined;
        requiresGround?: boolean | undefined;
        providesVoltage?: string | number | undefined;
        requiresVoltage?: string | number | undefined;
    }> | undefined;
    cadModel?: string | {
        stlUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | {
        objUrl: string;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        mtlUrl?: string | undefined;
    } | {
        jscad: Record<string, any>;
        rotationOffset?: number | {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        positionOffset?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
        size?: {
            x: string | number;
            y: string | number;
            z: string | number;
        } | undefined;
    } | null | undefined;
    children?: any;
    symbolName?: string | undefined;
    doNotPlace?: boolean | undefined;
}>;
type PowerSourceProps = z.input<typeof powerSourceProps>;

declare const schematicBoxProps: z.ZodEffects<z.ZodEffects<z.ZodObject<{
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    overlay: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    padding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingLeft: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingRight: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingTop: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    paddingBottom: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    title: z.ZodOptional<z.ZodString>;
    titleAlignment: z.ZodDefault<z.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>>;
    titleColor: z.ZodOptional<z.ZodString>;
    titleFontSize: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    titleInside: z.ZodDefault<z.ZodBoolean>;
    strokeStyle: z.ZodDefault<z.ZodEnum<["solid", "dashed"]>>;
}, "strip", z.ZodTypeAny, {
    titleAlignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center";
    titleInside: boolean;
    strokeStyle: "dashed" | "solid";
    schX?: number | undefined;
    schY?: number | undefined;
    padding?: number | undefined;
    paddingLeft?: number | undefined;
    paddingRight?: number | undefined;
    paddingTop?: number | undefined;
    paddingBottom?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    overlay?: string[] | undefined;
    title?: string | undefined;
    titleColor?: string | undefined;
    titleFontSize?: number | undefined;
}, {
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    padding?: string | number | undefined;
    paddingLeft?: string | number | undefined;
    paddingRight?: string | number | undefined;
    paddingTop?: string | number | undefined;
    paddingBottom?: string | number | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    overlay?: string[] | undefined;
    title?: string | undefined;
    titleAlignment?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center" | undefined;
    titleColor?: string | undefined;
    titleFontSize?: string | number | undefined;
    titleInside?: boolean | undefined;
    strokeStyle?: "dashed" | "solid" | undefined;
}>, {
    titleAlignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center";
    titleInside: boolean;
    strokeStyle: "dashed" | "solid";
    schX?: number | undefined;
    schY?: number | undefined;
    padding?: number | undefined;
    paddingLeft?: number | undefined;
    paddingRight?: number | undefined;
    paddingTop?: number | undefined;
    paddingBottom?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    overlay?: string[] | undefined;
    title?: string | undefined;
    titleColor?: string | undefined;
    titleFontSize?: number | undefined;
}, {
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    padding?: string | number | undefined;
    paddingLeft?: string | number | undefined;
    paddingRight?: string | number | undefined;
    paddingTop?: string | number | undefined;
    paddingBottom?: string | number | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    overlay?: string[] | undefined;
    title?: string | undefined;
    titleAlignment?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center" | undefined;
    titleColor?: string | undefined;
    titleFontSize?: string | number | undefined;
    titleInside?: boolean | undefined;
    strokeStyle?: "dashed" | "solid" | undefined;
}>, {
    titleAlignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center";
    titleInside: boolean;
    strokeStyle: "dashed" | "solid";
    schX?: number | undefined;
    schY?: number | undefined;
    padding?: number | undefined;
    paddingLeft?: number | undefined;
    paddingRight?: number | undefined;
    paddingTop?: number | undefined;
    paddingBottom?: number | undefined;
    width?: number | undefined;
    height?: number | undefined;
    overlay?: string[] | undefined;
    title?: string | undefined;
    titleColor?: string | undefined;
    titleFontSize?: number | undefined;
}, {
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    padding?: string | number | undefined;
    paddingLeft?: string | number | undefined;
    paddingRight?: string | number | undefined;
    paddingTop?: string | number | undefined;
    paddingBottom?: string | number | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    overlay?: string[] | undefined;
    title?: string | undefined;
    titleAlignment?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center" | undefined;
    titleColor?: string | undefined;
    titleFontSize?: string | number | undefined;
    titleInside?: boolean | undefined;
    strokeStyle?: "dashed" | "solid" | undefined;
}>;
type SchematicBoxProps = z.input<typeof schematicBoxProps>;

declare const schematicLineProps: z.ZodObject<{
    x1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    x2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    x1: number;
    y1: number;
    x2: number;
    y2: number;
}, {
    x1: string | number;
    y1: string | number;
    x2: string | number;
    y2: string | number;
}>;
type SchematicLineProps = z.input<typeof schematicLineProps>;

declare const schematicTextProps: z.ZodObject<{
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    text: z.ZodString;
    fontSize: z.ZodDefault<z.ZodNumber>;
    anchor: z.ZodDefault<z.ZodUnion<[z.ZodEnum<["center", "left", "right", "top", "bottom"]>, z.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>]>>;
    color: z.ZodDefault<z.ZodString>;
    schRotation: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    anchor: "left" | "right" | "top" | "bottom" | "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center";
    schRotation: number;
    color: string;
    text: string;
    fontSize: number;
    schX?: number | undefined;
    schY?: number | undefined;
}, {
    text: string;
    anchor?: "left" | "right" | "top" | "bottom" | "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center" | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    color?: string | undefined;
    fontSize?: number | undefined;
}>;
type SchematicTextProps = z.input<typeof schematicTextProps>;

declare const schematicPathProps: z.ZodObject<{
    points: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: string | number;
        y: string | number;
    }>, "many">;
    isFilled: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    fillColor: z.ZodOptional<z.ZodEnum<["red", "blue"]>>;
}, "strip", z.ZodTypeAny, {
    points: {
        x: number;
        y: number;
    }[];
    isFilled: boolean;
    fillColor?: "red" | "blue" | undefined;
}, {
    points: {
        x: string | number;
        y: string | number;
    }[];
    isFilled?: boolean | undefined;
    fillColor?: "red" | "blue" | undefined;
}>;
type SchematicPathProps = z.input<typeof schematicPathProps>;

declare const ninePointAnchor: z.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>;

declare const schematicTableProps: z.ZodObject<{
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    children: z.ZodOptional<z.ZodAny>;
    cellPadding: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    borderWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    anchor: z.ZodOptional<z.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>>;
    fontSize: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    anchor?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center" | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    children?: any;
    fontSize?: number | undefined;
    cellPadding?: number | undefined;
    borderWidth?: number | undefined;
}, {
    anchor?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center" | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    children?: any;
    fontSize?: string | number | undefined;
    cellPadding?: string | number | undefined;
    borderWidth?: string | number | undefined;
}>;
interface SchematicTableProps {
    schX?: number | string;
    schY?: number | string;
    children?: any;
    cellPadding?: number | string;
    borderWidth?: number | string;
    anchor?: z.infer<typeof ninePointAnchor>;
    fontSize?: number | string;
}

declare const schematicRowProps: z.ZodObject<{
    children: z.ZodOptional<z.ZodAny>;
    height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    children?: any;
    height?: number | undefined;
}, {
    children?: any;
    height?: string | number | undefined;
}>;
interface SchematicRowProps {
    children?: any;
    height?: number | string;
}

declare const schematicCellProps: z.ZodObject<{
    children: z.ZodOptional<z.ZodString>;
    horizontalAlign: z.ZodOptional<z.ZodEnum<["left", "center", "right"]>>;
    verticalAlign: z.ZodOptional<z.ZodEnum<["top", "middle", "bottom"]>>;
    fontSize: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    rowSpan: z.ZodOptional<z.ZodNumber>;
    colSpan: z.ZodOptional<z.ZodNumber>;
    width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    text: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    children?: string | undefined;
    width?: number | undefined;
    text?: string | undefined;
    fontSize?: number | undefined;
    horizontalAlign?: "left" | "right" | "center" | undefined;
    verticalAlign?: "top" | "bottom" | "middle" | undefined;
    rowSpan?: number | undefined;
    colSpan?: number | undefined;
}, {
    children?: string | undefined;
    width?: string | number | undefined;
    text?: string | undefined;
    fontSize?: string | number | undefined;
    horizontalAlign?: "left" | "right" | "center" | undefined;
    verticalAlign?: "top" | "bottom" | "middle" | undefined;
    rowSpan?: number | undefined;
    colSpan?: number | undefined;
}>;
interface SchematicCellProps {
    children?: string;
    horizontalAlign?: "left" | "center" | "right";
    verticalAlign?: "top" | "middle" | "bottom";
    fontSize?: number | string;
    rowSpan?: number;
    colSpan?: number;
    width?: number | string;
    text?: string;
}

declare const silkscreenTextProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
} & {
    text: z.ZodString;
    anchorAlignment: z.ZodDefault<z.ZodEnum<["top_left", "top_center", "top_right", "center_left", "center", "center_right", "bottom_left", "bottom_center", "bottom_right"]>>;
    font: z.ZodOptional<z.ZodEnum<["tscircuit2024"]>>;
    fontSize: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    text: string;
    anchorAlignment: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center";
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    font?: "tscircuit2024" | undefined;
    fontSize?: number | undefined;
}, {
    text: string;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    anchorAlignment?: "center" | "top_left" | "top_right" | "bottom_left" | "bottom_right" | "top_center" | "center_left" | "center_right" | "bottom_center" | undefined;
    font?: "tscircuit2024" | undefined;
    fontSize?: string | number | undefined;
}>;
type SilkscreenTextProps = z.input<typeof silkscreenTextProps>;

declare const silkscreenPathProps: z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbX" | "pcbY" | "pcbRotation"> & {
    route: z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        via: z.ZodOptional<z.ZodBoolean>;
        to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>>;
        trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }, {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }>, "many">;
    strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    route: {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }[];
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    strokeWidth?: number | undefined;
}, {
    route: {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }[];
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    strokeWidth?: string | number | undefined;
}>;
type SilkscreenPathProps = z.input<typeof silkscreenPathProps>;

declare const silkscreenLineProps: z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbX" | "pcbY" | "pcbRotation"> & {
    strokeWidth: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    x1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y1: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    x2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y2: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    strokeWidth: number;
    x1: number;
    y1: number;
    x2: number;
    y2: number;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}, {
    strokeWidth: string | number;
    x1: string | number;
    y1: string | number;
    x2: string | number;
    y2: string | number;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
}>;
type SilkscreenLineProps = z.input<typeof silkscreenLineProps>;

declare const silkscreenRectProps: z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    filled: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    stroke: z.ZodOptional<z.ZodEnum<["dashed", "solid", "none"]>>;
    strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    width: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    height: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    width: number;
    height: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    strokeWidth?: number | undefined;
    filled?: boolean | undefined;
    stroke?: "none" | "dashed" | "solid" | undefined;
}, {
    width: string | number;
    height: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    strokeWidth?: string | number | undefined;
    filled?: boolean | undefined;
    stroke?: "none" | "dashed" | "solid" | undefined;
}>;
type SilkscreenRectProps = z.input<typeof silkscreenRectProps>;

declare const silkscreenCircleProps: z.ZodObject<Omit<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
    relative: z.ZodOptional<z.ZodBoolean>;
}, "pcbRotation"> & {
    isFilled: z.ZodOptional<z.ZodBoolean>;
    isOutline: z.ZodOptional<z.ZodBoolean>;
    strokeWidth: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    radius: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    radius: number;
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    strokeWidth?: number | undefined;
    isFilled?: boolean | undefined;
    isOutline?: boolean | undefined;
}, {
    radius: string | number;
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    strokeWidth?: string | number | undefined;
    isFilled?: boolean | undefined;
    isOutline?: boolean | undefined;
}>;
type SilkscreenCircleProps = z.input<typeof silkscreenCircleProps>;

declare const routeHintPointProps: z.ZodObject<{
    x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    via: z.ZodOptional<z.ZodBoolean>;
    toLayer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
}, "strip", z.ZodTypeAny, {
    x: number;
    y: number;
    via?: boolean | undefined;
    toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
}, {
    x: string | number;
    y: string | number;
    via?: boolean | undefined;
    toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
}>;
declare const traceHintProps: z.ZodObject<{
    for: z.ZodOptional<z.ZodString>;
    order: z.ZodOptional<z.ZodNumber>;
    offset: z.ZodOptional<z.ZodUnion<[z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        via: z.ZodOptional<z.ZodBoolean>;
        to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>>;
        trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }, {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }>, z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        via: z.ZodOptional<z.ZodBoolean>;
        toLayer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        via?: boolean | undefined;
        toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    }, {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
    }>]>>;
    offsets: z.ZodOptional<z.ZodUnion<[z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        via: z.ZodOptional<z.ZodBoolean>;
        to_layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>>;
        trace_width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }, {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }>, "many">, z.ZodArray<z.ZodObject<{
        x: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        y: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
        via: z.ZodOptional<z.ZodBoolean>;
        toLayer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
            name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
        }, "strip", z.ZodTypeAny, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }, {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        }>>;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
        via?: boolean | undefined;
        toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    }, {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
    }>, "many">]>>;
    traceWidth: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    offsets?: {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    }[] | {
        x: number;
        y: number;
        via?: boolean | undefined;
        toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    }[] | undefined;
    for?: string | undefined;
    order?: number | undefined;
    offset?: {
        x: number;
        y: number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
        trace_width?: number | undefined;
    } | {
        x: number;
        y: number;
        via?: boolean | undefined;
        toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    } | undefined;
    traceWidth?: number | undefined;
}, {
    offsets?: {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    }[] | {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
    }[] | undefined;
    for?: string | undefined;
    order?: number | undefined;
    offset?: {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        to_layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
        trace_width?: string | number | undefined;
    } | {
        x: string | number;
        y: string | number;
        via?: boolean | undefined;
        toLayer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
            name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
        } | undefined;
    } | undefined;
    traceWidth?: number | undefined;
}>;
type TraceHintProps = z.input<typeof traceHintProps>;

declare const portProps: z.ZodObject<{
    pcbX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pcbRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schX: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schY: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    schRotation: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    layer: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>, z.ZodObject<{
        name: z.ZodEnum<["top", "bottom", "inner1", "inner2", "inner3", "inner4", "inner5", "inner6"]>;
    }, "strip", z.ZodTypeAny, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }, {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>]>, "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6", "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    }>>;
    footprint: z.ZodOptional<z.ZodType<FootprintProp, z.ZodTypeDef, FootprintProp>>;
    relative: z.ZodOptional<z.ZodBoolean>;
    schRelative: z.ZodOptional<z.ZodBoolean>;
    pcbRelative: z.ZodOptional<z.ZodBoolean>;
} & {
    name: z.ZodString;
    pinNumber: z.ZodOptional<z.ZodNumber>;
    aliases: z.ZodOptional<z.ZodArray<z.ZodString, "many">>;
    direction: z.ZodEnum<["up", "down", "left", "right"]>;
}, "strip", z.ZodTypeAny, {
    name: string;
    direction: "up" | "down" | "left" | "right";
    pcbX?: number | undefined;
    pcbY?: number | undefined;
    pcbRotation?: number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: number | undefined;
    schY?: number | undefined;
    schRotation?: number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    pinNumber?: number | undefined;
    aliases?: string[] | undefined;
}, {
    name: string;
    direction: "up" | "down" | "left" | "right";
    pcbX?: string | number | undefined;
    pcbY?: string | number | undefined;
    pcbRotation?: string | number | undefined;
    layer?: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6" | {
        name: "top" | "bottom" | "inner1" | "inner2" | "inner3" | "inner4" | "inner5" | "inner6";
    } | undefined;
    pcbRelative?: boolean | undefined;
    relative?: boolean | undefined;
    schX?: string | number | undefined;
    schY?: string | number | undefined;
    schRotation?: string | number | undefined;
    footprint?: FootprintProp | undefined;
    schRelative?: boolean | undefined;
    pinNumber?: number | undefined;
    aliases?: string[] | undefined;
}>;
type PortProps = z.input<typeof portProps>;

interface PlatformConfig {
    partsEngine?: PartsEngine;
    autorouter?: AutorouterProp;
    localCacheEngine?: any;
    registryApiUrl?: string;
    cloudAutorouterUrl?: string;
    projectName?: string;
    version?: string;
    url?: string;
    printBoardInformationToSilkscreen?: boolean;
    pcbDisabled?: boolean;
    schematicDisabled?: boolean;
    partsEngineDisabled?: boolean;
    footprintLibraryMap?: Record<string, Record<string, any[] | ((path: string) => Promise<{
        footprintCircuitJson: any[];
    }>)>>;
}
declare const platformConfig: z.ZodType<PlatformConfig>;

export { type AutorouterConfig, type AutorouterProp, type BaseGroupProps, type BaseManualEditEvent, type BaseManualEditEventInput, type BatteryPinLabels, type BatteryProps, type BoardProps, type Border, type BreakoutPointProps, type BreakoutProps, type CadModelBase, type CadModelJscad, type CadModelObj, type CadModelProp, type CadModelStl, type CapacitorPinLabels, type CapacitorProps, type ChipConnections, type ChipPinLabels, type ChipProps, type ChipPropsSU, type CircleCutoutProps, type CirclePlatedHoleProps, type CircleSmtPadProps, type CircleSolderPasteProps, type CircularHoleWithRectPlatedProps, type CommonComponentProps, type CommonLayoutProps, type ComponentProps, type ConnectionTarget, type Connections, type ConnectorProps, type ConstrainedLayoutProps, type ConstraintProps, type CrystalPinLabels, type CrystalProps, type CutoutProps, type CutoutPropsInput, type DiodePinLabels, type DiodeProps, type Direction, type DirectionAlongEdge, type EditPcbComponentLocationEvent, type EditPcbComponentLocationEventInput, type EditPcbGroupLocationEvent, type EditPcbGroupLocationEventInput, type EditSchematicComponentLocationEvent, type EditSchematicComponentLocationEventInput, type EditSchematicGroupLocationEvent, type EditSchematicGroupLocationEventInput, type EditTraceHintEvent, type EditTraceHintEventInput, type FabricationNotePathProps, type FabricationNoteTextProps, type FootprintProp, type FootprintProps, type FootprintPropsInput, type FootprintSoupElements, type FusePinLabels, type FuseProps, type GroupProps, type HoleProps, type InductorPinLabels, type InductorProps, type InferredChipProps, type InferredConstrainedLayoutProps, type InferredDiodeProps, type InferredFuseProps, type InferredHoleProps, type InferredSmtPadProps, type InferredSolderPasteProps, type InferredSwitchProps, type InferredTestpointProps, type InferredViaProps, type JumperProps, type LayoutConfig, type LedPinLabels, type LedProps, type ManualEditEvent, type ManualEditEventInput, type ManualEditsFile, type ManualEditsFileInput, type ManualPcbPlacement, type ManualPcbPlacementInput, type ManualSchematicPlacement, type ManualSchematicPlacementInput, type ManualTraceHint, type ManualTraceHintInput, type MosfetPinLabels, type MosfetProps, type NetAliasProps, type NetLabelProps, type NetProps, type NonSubcircuitGroupProps, type OvalPlatedHoleProps, type PartsEngine, type PcbKeepoutProps, type PcbLayoutProps, type PcbRouteCache, type PcbSameXConstraint, type PcbSameYConstraint, type PcbTraceProps, type PcbXDistConstraint, type PcbYDistConstraint, type PillPlatedHoleProps, type PillSmtPadProps, type PillWithRectPadPlatedHoleProps, type PinAttributeMap, type PinCompatibleVariant, type PinHeaderProps, type PinLabelFromPinLabelMap, type PinLabelsProp, type PinSideDefinition, type PinVariant, type PlatedHoleProps, type PlatformConfig, type PolygonCutoutProps, type PolygonSmtPadProps, type PortHints, type PortProps, type PotentiometerPinVariant, type PotentiometerProps, type PowerSourceProps, type PushButtonProps, type RectCutoutProps, type RectSmtPadProps, type RectSolderPasteProps, type ResistorPinLabels, type ResistorProps, type ResonatorPinVariant, type ResonatorProps, type RotatedRectSmtPadProps, type SchematicBoxProps, type SchematicCellProps, type SchematicLineProps, type SchematicOrientation, type SchematicPathProps, type SchematicPinArrangement, type SchematicPinArrangementWithPinCounts, type SchematicPinArrangementWithSides, type SchematicPinArrangementWithSizes, type SchematicPinLabel, type SchematicPinStyle, type SchematicPortArrangement, type SchematicPortArrangementWithPinCounts, type SchematicPortArrangementWithSides, type SchematicPortArrangementWithSizes, type SchematicRowProps, type SchematicTableProps, type SchematicTextProps, type Selectors, type SilkscreenCircleProps, type SilkscreenLineProps, type SilkscreenPathProps, type SilkscreenRectProps, type SilkscreenTextProps, type SmtPadProps, type SolderJumperProps, type SolderPasteProps, type StampboardProps, type SubcircuitGroupProps, type SubcircuitGroupPropsWithBool, type SubcircuitProps, type SupplierName, type SupplierPartNumbers, type SupplierProps, type SwitchProps, type TestpointProps, type TraceHintProps, type TraceProps, type TransistorPinLabels, type TransistorProps, type ViaProps, autorouterConfig, autorouterProp, baseGroupProps, base_manual_edit_event, batteryPins, batteryProps, boardProps, border, breakoutPointProps, breakoutProps, bugProps, cadModelBase, cadModelJscad, cadModelObj, cadModelProp, cadModelStl, capacitorPinLabels, capacitorPins, capacitorProps, chipProps, circleCutoutProps, circleSmtPadProps, circleSolderPasteProps, commonComponentProps, commonLayoutProps, componentProps, connectorProps, constrainedLayoutProps, constraintProps, crystalPins, crystalProps, cutoutProps, diodePins, diodeProps, direction, directionAlongEdge, distanceOrMultiplier, edit_component_location_event, edit_pcb_component_location_event, edit_pcb_group_location_event, edit_schematic_component_location_event, edit_schematic_group_location_event, edit_trace_hint_event, explicitPinSideDefinition, fabricationNotePathProps, fabricationNoteTextProps, footprintProp, footprintProps, fusePinLabels, fuseProps, groupProps, holeProps, inductorPins, inductorProps, jumperProps, layoutConfig, ledPins, ledProps, lrPins, lrPolarPins, manual_edit_event, manual_edits_file, manual_pcb_placement, manual_schematic_placement, manual_trace_hint, mosfetPins, mosfetProps, netAliasProps, netLabelProps, netProps, ninePointAnchor, partsEngine, pcbKeepoutProps, pcbLayoutProps, pcbSameXConstraintProps, pcbSameYConstraintProps, pcbTraceProps, pcbXDistConstraintProps, pcbYDistConstraintProps, pillSmtPadProps, pinAttributeMap, pinCompatibleVariant, pinHeaderProps, pinLabelsProp, platedHoleProps, platformConfig, point3, polygonCutoutProps, polygonSmtPadProps, portHints, portProps, portRef, potentiometerProps, powerSourceProps, pushButtonProps, rectCutoutProps, rectSmtPadProps, rectSolderPasteProps, resistorPinLabels, resistorPins, resistorProps, resonatorProps, rotatedRectSmtPadProps, rotationPoint3, routeHintPointProps, schematicBoxProps, schematicCellProps, schematicLineProps, schematicOrientation, schematicPathProps, schematicPinArrangement, schematicPinLabel, schematicPinStyle, schematicPortArrangement, schematicRowProps, schematicTableProps, schematicTextProps, silkscreenCircleProps, silkscreenLineProps, silkscreenPathProps, silkscreenRectProps, silkscreenTextProps, smtPadProps, solderPasteProps, solderjumperProps, stampboardProps, subcircuitGroupProps, subcircuitGroupPropsWithBool, subcircuitProps, supplierProps, switchProps, testpointProps, traceHintProps, traceProps, transistorPins, transistorPinsLabels, transistorProps, viaProps };
