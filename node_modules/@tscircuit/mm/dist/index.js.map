{"version":3,"sources":["../index.ts"],"sourcesContent":["const unitToMm: { [key: string]: number } = {\n  in: 25.4,\n  inch: 25.4,\n  mil: 0.0254,\n  mm: 1,\n  m: 1000,\n  cm: 10,\n  ft: 304.8,\n  feet: 304.8,\n}\n\nexport const mm = (n: number | string): number => {\n  let unit =\n    typeof n === \"number\" ? \"mm\" : n.replace(/^[^a-zA-Z]+/g, \"\").toLowerCase()\n  if (!unit) unit = \"mm\"\n  const val = typeof n === \"number\" ? n : Number.parseFloat(n.split(unit)[0])\n\n  if (unit in unitToMm) {\n    return val * unitToMm[unit]\n  }\n  throw new Error(`Unsupported unit: ${unit}`)\n}\n\nexport const mmStr = (n: number | string): string => {\n  return `${mm(n)}mm`\n}\n\nexport default mm\n"],"mappings":";AAAA,IAAM,WAAsC;AAAA,EAC1C,IAAI;AAAA,EACJ,MAAM;AAAA,EACN,KAAK;AAAA,EACL,IAAI;AAAA,EACJ,GAAG;AAAA,EACH,IAAI;AAAA,EACJ,IAAI;AAAA,EACJ,MAAM;AACR;AAEO,IAAM,KAAK,CAAC,MAA+B;AAChD,MAAI,OACF,OAAO,MAAM,WAAW,OAAO,EAAE,QAAQ,gBAAgB,EAAE,EAAE,YAAY;AAC3E,MAAI,CAAC;AAAM,WAAO;AAClB,QAAM,MAAM,OAAO,MAAM,WAAW,IAAI,OAAO,WAAW,EAAE,MAAM,IAAI,EAAE,CAAC,CAAC;AAE1E,MAAI,QAAQ,UAAU;AACpB,WAAO,MAAM,SAAS,IAAI;AAAA,EAC5B;AACA,QAAM,IAAI,MAAM,qBAAqB,IAAI,EAAE;AAC7C;AAEO,IAAM,QAAQ,CAAC,MAA+B;AACnD,SAAO,GAAG,GAAG,CAAC,CAAC;AACjB;AAEA,IAAO,aAAQ;","names":[]}