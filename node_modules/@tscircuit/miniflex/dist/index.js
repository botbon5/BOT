// lib/minimal-flexbox.ts
var defaultStyle = {
  flexGrow: 0,
  flexShrink: 1,
  flexBasis: 0,
  alignSelf: "auto",
  width: void 0,
  height: void 0
};
var FlexNode = class {
  id;
  /** Computed layout values */
  size = { width: 0, height: 0 };
  position = { x: 0, y: 0 };
  /** Incoming flex style (grow / shrink / basis / alignSelf) */
  style;
  constructor(style = {}) {
    this.style = { ...defaultStyle, ...style };
    this.id = style.id;
  }
};
var FlexElement = class extends FlexNode {
  build() {
  }
};
var FlexBox = class _FlexBox extends FlexNode {
  children = [];
  // Containerâ€‘level layout options (with sensible defaults)
  direction = "row";
  columnGap = 0;
  rowGap = 0;
  justifyContent = "flex-start";
  alignItems = "stretch";
  constructor(width, height, opts = {}) {
    super({});
    this.size.width = width;
    this.size.height = height;
    this.id = opts.id;
    Object.assign(this, opts);
  }
  addChild(arg1, arg2) {
    if (arg1 instanceof _FlexBox) {
      const box = arg1;
      if (arg2) box.style = { ...defaultStyle, ...arg2 };
      this.children.push(box);
      return box;
    }
    const elem = new FlexElement(arg1);
    this.children.push(elem);
    return elem;
  }
  // --------------- Layout algorithm ------------------------
  build() {
    const horizontal = this.direction.startsWith("row");
    const mainProp = horizontal ? "width" : "height";
    const crossProp = horizontal ? "height" : "width";
    const mainGap = horizontal ? this.columnGap : this.rowGap;
    const crossGap = horizontal ? this.rowGap : this.columnGap;
    const gapTotal = mainGap * Math.max(0, this.children.length - 1);
    const containerMain = this.size[mainProp];
    const containerCross = this.size[crossProp];
    let totalBasis = 0;
    let totalGrow = 0;
    let totalShrink = 0;
    for (const child of this.children) {
      totalBasis += child.style.flexBasis;
      totalGrow += child.style.flexGrow;
      totalShrink += child.style.flexShrink;
    }
    const freeSpace = containerMain - totalBasis - gapTotal;
    for (const child of this.children) {
      let main = child.style.flexBasis;
      if (freeSpace > 0 && totalGrow > 0) {
        main += freeSpace * child.style.flexGrow / totalGrow;
      } else if (freeSpace < 0 && totalShrink > 0) {
        main += freeSpace * child.style.flexShrink / totalShrink;
        if (main < 0) main = 0;
      }
      child.size[mainProp] = main;
      const alignSelf = child.style.alignSelf !== "auto" ? child.style.alignSelf : this.alignItems;
      const explicitCrossSize = horizontal ? child.style.height : child.style.width;
      if (explicitCrossSize !== void 0) {
        child.size[crossProp] = explicitCrossSize;
      } else if (alignSelf === "stretch") {
        child.size[crossProp] = containerCross;
      } else {
      }
    }
    const occupied = this.children.reduce((sum, c) => sum + c.size[mainProp], 0) + gapTotal;
    const remaining = containerMain - occupied;
    let leading = 0;
    let between = mainGap;
    const n = this.children.length;
    switch (this.justifyContent) {
      case "flex-start":
        break;
      // defaults are fine
      case "flex-end":
        leading = remaining;
        break;
      case "center":
        leading = remaining / 2;
        break;
      case "space-between":
        between = n > 1 ? mainGap + remaining / (n - 1) : 0;
        break;
      case "space-around":
        between = mainGap + remaining / n;
        leading = between / 2;
        break;
      case "space-evenly":
        between = mainGap + remaining / (n + 1);
        leading = between;
        break;
    }
    const ordered = this.direction.endsWith("reverse") ? [...this.children].reverse() : this.children;
    let cursor = leading;
    for (const child of ordered) {
      if (horizontal) {
        child.position.x = this.direction === "row" ? cursor : containerMain - cursor - child.size.width;
        child.position.y = computeCross(
          child,
          crossProp,
          containerCross,
          this.alignItems
        );
      } else {
        child.position.y = this.direction === "column" ? cursor : containerMain - cursor - child.size.height;
        child.position.x = computeCross(
          child,
          crossProp,
          containerCross,
          this.alignItems
        );
      }
      cursor += child.size[mainProp] + between;
    }
    for (const child of this.children) {
      if (child instanceof _FlexBox) {
        child.build();
      }
    }
    function computeCross(child, prop, containerCross2, alignItems) {
      const alignSelf = child.style.alignSelf !== "auto" ? child.style.alignSelf : alignItems;
      switch (alignSelf) {
        case "flex-start":
          return 0;
        case "flex-end":
          return containerCross2 - child.size[prop];
        case "center":
          return (containerCross2 - child.size[prop]) / 2;
        case "stretch":
        default:
          return 0;
      }
    }
  }
};
var RootFlexBox = class extends FlexBox {
  constructor(width, height, opts = {}) {
    super(width, height, opts);
  }
  getLayout() {
    this.build();
    const layoutMap = {};
    this._collectLayout(this, layoutMap);
    return layoutMap;
  }
  _collectLayout(box, map, counterRef = { counter: 0 }) {
    for (const child of box.children) {
      const id = child.id ?? `_$$${counterRef.counter++}`;
      map[id] = { position: child.position, size: child.size };
      if (child instanceof FlexBox) {
        this._collectLayout(child, map, counterRef);
      }
    }
  }
};

// lib/flexBoxLayout.ts
function _getFlexBoxOptions(item) {
  const opts = { id: item.id };
  opts.direction = item.direction ?? "row";
  opts.columnGap = item.columnGap ?? 0;
  opts.rowGap = item.rowGap ?? 0;
  opts.justifyContent = item.justifyContent ?? "flex-start";
  opts.alignItems = item.alignItems ?? "stretch";
  return opts;
}
function _populateFlexBoxRecursive(flexContainer, items) {
  if (!items) {
    return;
  }
  for (const item of items) {
    if (item.children && item.children.length > 0) {
      const nestedBoxOptions = _getFlexBoxOptions(item);
      const initialWidth = item.width ?? 0;
      const initialHeight = item.height ?? 0;
      const nestedFlexBox = new FlexBox(
        initialWidth,
        initialHeight,
        nestedBoxOptions
      );
      flexContainer.addChild(nestedFlexBox, item);
      _populateFlexBoxRecursive(nestedFlexBox, item.children);
    } else {
      flexContainer.addChild(item);
    }
  }
}
var flexBoxLayout = (parent) => {
  const rootWidth = parent.width ?? 0;
  const rootHeight = parent.height ?? 0;
  const rootOpts = _getFlexBoxOptions(parent);
  const root = new RootFlexBox(rootWidth, rootHeight, rootOpts);
  _populateFlexBoxRecursive(root, parent.children);
  return root.getLayout();
};
export {
  FlexBox,
  FlexElement,
  RootFlexBox,
  flexBoxLayout
};
//# sourceMappingURL=data:application/json;base64,