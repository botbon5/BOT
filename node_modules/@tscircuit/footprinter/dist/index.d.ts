import { AnySoupElement, AnyCircuitElement } from 'circuit-json';
import { z } from 'zod';

type NowDefined<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;

declare const any_footprinter_def: z.ZodUnion<[z.ZodObject<{
    fn: z.ZodString;
    p: z.ZodDefault<z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>>;
    id: z.ZodDefault<z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>>;
    od: z.ZodDefault<z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    p: number;
    id: number;
    od: number;
}, {
    fn: string;
    p?: string | number | undefined;
    id?: string | number | undefined;
    od?: string | number | undefined;
}>, z.ZodEffects<z.ZodObject<{
    fn: z.ZodString;
    num_pins: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    grid: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodString, {
        x: number;
        y: number;
    }, string>, z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>>>;
    p: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    w: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    h: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    ball: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pad: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    circularpads: z.ZodOptional<z.ZodBoolean>;
    tlorigin: z.ZodOptional<z.ZodBoolean>;
    blorigin: z.ZodOptional<z.ZodBoolean>;
    trorigin: z.ZodOptional<z.ZodBoolean>;
    brorigin: z.ZodOptional<z.ZodBoolean>;
    missing: z.ZodDefault<z.ZodPipeline<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodAny, "many">]>, any[], string | any[]>, z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodNumber]>, "many">>>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: number;
    p: number;
    missing: (string | number)[];
    w?: number | undefined;
    pad?: number | undefined;
    h?: number | undefined;
    grid?: {
        x: number;
        y: number;
    } | undefined;
    ball?: number | undefined;
    circularpads?: boolean | undefined;
    tlorigin?: boolean | undefined;
    blorigin?: boolean | undefined;
    trorigin?: boolean | undefined;
    brorigin?: boolean | undefined;
}, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pad?: string | number | undefined;
    h?: string | number | undefined;
    grid?: string | undefined;
    ball?: string | number | undefined;
    circularpads?: boolean | undefined;
    tlorigin?: boolean | undefined;
    blorigin?: boolean | undefined;
    trorigin?: boolean | undefined;
    brorigin?: boolean | undefined;
    missing?: string | any[] | undefined;
}>, NowDefined<{
    origin: "tl" | "bl" | "tr" | "br";
    fn: string;
    num_pins: number;
    p: number;
    missing: (string | number)[];
    w?: number | undefined;
    pad?: number | undefined;
    h?: number | undefined;
    grid?: {
        x: number;
        y: number;
    } | undefined;
    ball?: number | undefined;
    circularpads?: boolean | undefined;
    tlorigin?: boolean | undefined;
    blorigin?: boolean | undefined;
    trorigin?: boolean | undefined;
    brorigin?: boolean | undefined;
}, "w" | "h" | "grid">, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pad?: string | number | undefined;
    h?: string | number | undefined;
    grid?: string | undefined;
    ball?: string | number | undefined;
    circularpads?: boolean | undefined;
    tlorigin?: boolean | undefined;
    blorigin?: boolean | undefined;
    trorigin?: boolean | undefined;
    brorigin?: boolean | undefined;
    missing?: string | any[] | undefined;
}>, z.ZodEffects<z.ZodObject<{
    fn: z.ZodString;
    num_pins: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    w: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    p: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pw: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pl: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    legsoutside: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: number;
    w: number;
    p: number;
    pw: number;
    pl: number;
    legsoutside: boolean;
}, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
}>, NowDefined<{
    fn: string;
    num_pins: number;
    w: number;
    p: number;
    pw: number;
    pl: number;
    legsoutside: boolean;
}, "w" | "p" | "pw" | "pl">, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
}>, z.ZodEffects<z.ZodObject<{
    fn: z.ZodString;
    num_pins: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    wide: z.ZodOptional<z.ZodBoolean>;
    narrow: z.ZodOptional<z.ZodBoolean>;
    w: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    p: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    id: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    od: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: number;
    p: number;
    wide?: boolean | undefined;
    narrow?: boolean | undefined;
    w?: number | undefined;
    id?: number | undefined;
    od?: number | undefined;
}, {
    fn: string;
    num_pins?: number | undefined;
    wide?: boolean | undefined;
    narrow?: boolean | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    id?: string | number | undefined;
    od?: string | number | undefined;
}>, NowDefined<{
    fn: string;
    num_pins: number;
    p: number;
    wide?: boolean | undefined;
    narrow?: boolean | undefined;
    w?: number | undefined;
    id?: number | undefined;
    od?: number | undefined;
}, "w" | "p" | "id" | "od">, {
    fn: string;
    num_pins?: number | undefined;
    wide?: boolean | undefined;
    narrow?: boolean | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    id?: string | number | undefined;
    od?: string | number | undefined;
}>, z.ZodEffects<z.ZodObject<{
    fn: z.ZodString;
    cc: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    ccw: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    startingpin: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodEnum<["leftside", "topside", "rightside", "bottomside", "toppin", "bottompin", "leftpin", "rightpin"]>, "many">]>, string[], string | ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[]>, z.ZodArray<z.ZodEnum<["leftside", "topside", "rightside", "bottomside", "toppin", "bottompin", "leftpin", "rightpin"]>, "many">>>;
    num_pins: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    w: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    h: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    p: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pw: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pl: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    thermalpad: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<true>, z.ZodPipeline<z.ZodEffects<z.ZodString, {
        x: number;
        y: number;
    }, string>, z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>>]>>;
    legsoutside: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: number;
    p: number;
    legsoutside: boolean;
    w?: number | undefined;
    pw?: number | undefined;
    h?: number | undefined;
    pl?: number | undefined;
    ccw?: boolean | undefined;
    startingpin?: ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[] | undefined;
    cc?: boolean | undefined;
    thermalpad?: true | {
        x: number;
        y: number;
    } | undefined;
}, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    h?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
    ccw?: boolean | undefined;
    startingpin?: string | ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[] | undefined;
    cc?: boolean | undefined;
    thermalpad?: string | true | undefined;
}>, NowDefined<{
    fn: string;
    num_pins: number;
    p: number;
    legsoutside: boolean;
    w?: number | undefined;
    pw?: number | undefined;
    h?: number | undefined;
    pl?: number | undefined;
    ccw?: boolean | undefined;
    startingpin?: ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[] | undefined;
    cc?: boolean | undefined;
    thermalpad?: true | {
        x: number;
        y: number;
    } | undefined;
}, "w" | "p" | "pw" | "h" | "pl">, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    h?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
    ccw?: boolean | undefined;
    startingpin?: string | ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[] | undefined;
    cc?: boolean | undefined;
    thermalpad?: string | true | undefined;
}>, z.ZodEffects<z.ZodObject<{
    fn: z.ZodString;
    num_pins: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    w: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    p: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pw: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pl: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    legsoutside: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: number;
    w: number;
    p: number;
    pw: number;
    pl: number;
    legsoutside: boolean;
}, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
}>, NowDefined<{
    fn: string;
    num_pins: number;
    w: number;
    p: number;
    pw: number;
    pl: number;
    legsoutside: boolean;
}, "w" | "p" | "pw" | "pl">, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
}>, z.ZodEffects<z.ZodObject<{
    fn: z.ZodString;
    num_pins: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    w: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    p: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pw: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pl: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    legsoutside: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: number;
    w: number;
    p: number;
    pw: number;
    pl: number;
    legsoutside: boolean;
}, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
}>, NowDefined<{
    fn: string;
    num_pins: number;
    w: number;
    p: number;
    pw: number;
    pl: number;
    legsoutside: boolean;
}, "w" | "p" | "pw" | "pl">, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
}>, z.ZodEffects<z.ZodEffects<z.ZodObject<{
    fn: z.ZodString;
    num_pins: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    rows: z.ZodDefault<z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>>;
    p: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    id: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    od: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    male: z.ZodOptional<z.ZodBoolean>;
    female: z.ZodOptional<z.ZodBoolean>;
    pinlabeltextalignleft: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    pinlabeltextaligncenter: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    pinlabeltextalignright: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    pinlabelverticallyinverted: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    pinlabelorthogonal: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    nosquareplating: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    nopinlabels: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    doublesidedpinlabel: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
    bottomsidepinlabel: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: number;
    p: number;
    id: number;
    od: number;
    pinlabeltextalignleft: boolean;
    pinlabeltextalignright: boolean;
    pinlabelorthogonal: boolean;
    rows: number;
    pinlabeltextaligncenter: boolean;
    pinlabelverticallyinverted: boolean;
    nosquareplating: boolean;
    nopinlabels: boolean;
    doublesidedpinlabel: boolean;
    bottomsidepinlabel: boolean;
    male?: boolean | undefined;
    female?: boolean | undefined;
}, {
    fn: string;
    num_pins?: number | undefined;
    p?: string | number | undefined;
    id?: string | number | undefined;
    od?: string | number | undefined;
    male?: boolean | undefined;
    female?: boolean | undefined;
    pinlabeltextalignleft?: boolean | undefined;
    pinlabeltextalignright?: boolean | undefined;
    pinlabelorthogonal?: boolean | undefined;
    rows?: string | number | undefined;
    pinlabeltextaligncenter?: boolean | undefined;
    pinlabelverticallyinverted?: boolean | undefined;
    nosquareplating?: boolean | undefined;
    nopinlabels?: boolean | undefined;
    doublesidedpinlabel?: boolean | undefined;
    bottomsidepinlabel?: boolean | undefined;
}>, {
    pinlabelAnchorSide: "top" | "bottom" | "left" | "right";
    male: boolean;
    female: boolean;
    fn: string;
    num_pins: number;
    p: number;
    id: number;
    od: number;
    pinlabeltextalignleft: boolean;
    pinlabeltextalignright: boolean;
    pinlabelorthogonal: boolean;
    rows: number;
    pinlabeltextaligncenter: boolean;
    pinlabelverticallyinverted: boolean;
    nosquareplating: boolean;
    nopinlabels: boolean;
    doublesidedpinlabel: boolean;
    bottomsidepinlabel: boolean;
}, {
    fn: string;
    num_pins?: number | undefined;
    p?: string | number | undefined;
    id?: string | number | undefined;
    od?: string | number | undefined;
    male?: boolean | undefined;
    female?: boolean | undefined;
    pinlabeltextalignleft?: boolean | undefined;
    pinlabeltextalignright?: boolean | undefined;
    pinlabelorthogonal?: boolean | undefined;
    rows?: string | number | undefined;
    pinlabeltextaligncenter?: boolean | undefined;
    pinlabelverticallyinverted?: boolean | undefined;
    nosquareplating?: boolean | undefined;
    nopinlabels?: boolean | undefined;
    doublesidedpinlabel?: boolean | undefined;
    bottomsidepinlabel?: boolean | undefined;
}>, {
    pinlabelAnchorSide: "top" | "bottom" | "left" | "right";
    male: boolean;
    female: boolean;
    fn: string;
    num_pins: number;
    p: number;
    id: number;
    od: number;
    pinlabeltextalignleft: boolean;
    pinlabeltextalignright: boolean;
    pinlabelorthogonal: boolean;
    rows: number;
    pinlabeltextaligncenter: boolean;
    pinlabelverticallyinverted: boolean;
    nosquareplating: boolean;
    nopinlabels: boolean;
    doublesidedpinlabel: boolean;
    bottomsidepinlabel: boolean;
}, {
    fn: string;
    num_pins?: number | undefined;
    p?: string | number | undefined;
    id?: string | number | undefined;
    od?: string | number | undefined;
    male?: boolean | undefined;
    female?: boolean | undefined;
    pinlabeltextalignleft?: boolean | undefined;
    pinlabeltextalignright?: boolean | undefined;
    pinlabelorthogonal?: boolean | undefined;
    rows?: string | number | undefined;
    pinlabeltextaligncenter?: boolean | undefined;
    pinlabelverticallyinverted?: boolean | undefined;
    nosquareplating?: boolean | undefined;
    nopinlabels?: boolean | undefined;
    doublesidedpinlabel?: boolean | undefined;
    bottomsidepinlabel?: boolean | undefined;
}>, z.ZodEffects<z.ZodObject<{
    fn: z.ZodString;
    cc: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    ccw: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    startingpin: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodEnum<["leftside", "topside", "rightside", "bottomside", "toppin", "bottompin", "leftpin", "rightpin"]>, "many">]>, string[], string | ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[]>, z.ZodArray<z.ZodEnum<["leftside", "topside", "rightside", "bottomside", "toppin", "bottompin", "leftpin", "rightpin"]>, "many">>>;
    num_pins: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    w: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    h: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    p: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pw: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pl: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    thermalpad: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<true>, z.ZodPipeline<z.ZodEffects<z.ZodString, {
        x: number;
        y: number;
    }, string>, z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>>]>>;
    legsoutside: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: number;
    p: number;
    legsoutside: boolean;
    w?: number | undefined;
    pw?: number | undefined;
    h?: number | undefined;
    pl?: number | undefined;
    ccw?: boolean | undefined;
    startingpin?: ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[] | undefined;
    cc?: boolean | undefined;
    thermalpad?: true | {
        x: number;
        y: number;
    } | undefined;
}, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    h?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
    ccw?: boolean | undefined;
    startingpin?: string | ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[] | undefined;
    cc?: boolean | undefined;
    thermalpad?: string | true | undefined;
}>, NowDefined<{
    fn: string;
    num_pins: number;
    p: number;
    legsoutside: boolean;
    w?: number | undefined;
    pw?: number | undefined;
    h?: number | undefined;
    pl?: number | undefined;
    ccw?: boolean | undefined;
    startingpin?: ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[] | undefined;
    cc?: boolean | undefined;
    thermalpad?: true | {
        x: number;
        y: number;
    } | undefined;
}, "w" | "p" | "pw" | "h" | "pl">, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    h?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
    ccw?: boolean | undefined;
    startingpin?: string | ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[] | undefined;
    cc?: boolean | undefined;
    thermalpad?: string | true | undefined;
}>, z.ZodEffects<z.ZodObject<{
    fn: z.ZodString;
    cc: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    ccw: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    startingpin: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodEnum<["leftside", "topside", "rightside", "bottomside", "toppin", "bottompin", "leftpin", "rightpin"]>, "many">]>, string[], string | ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[]>, z.ZodArray<z.ZodEnum<["leftside", "topside", "rightside", "bottomside", "toppin", "bottompin", "leftpin", "rightpin"]>, "many">>>;
    num_pins: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    w: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    h: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    p: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pw: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pl: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    thermalpad: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<true>, z.ZodPipeline<z.ZodEffects<z.ZodString, {
        x: number;
        y: number;
    }, string>, z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>>]>>;
    legsoutside: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: number;
    p: number;
    legsoutside: boolean;
    w?: number | undefined;
    pw?: number | undefined;
    h?: number | undefined;
    pl?: number | undefined;
    ccw?: boolean | undefined;
    startingpin?: ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[] | undefined;
    cc?: boolean | undefined;
    thermalpad?: true | {
        x: number;
        y: number;
    } | undefined;
}, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    h?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
    ccw?: boolean | undefined;
    startingpin?: string | ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[] | undefined;
    cc?: boolean | undefined;
    thermalpad?: string | true | undefined;
}>, NowDefined<{
    fn: string;
    num_pins: number;
    p: number;
    legsoutside: boolean;
    w?: number | undefined;
    pw?: number | undefined;
    h?: number | undefined;
    pl?: number | undefined;
    ccw?: boolean | undefined;
    startingpin?: ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[] | undefined;
    cc?: boolean | undefined;
    thermalpad?: true | {
        x: number;
        y: number;
    } | undefined;
}, "w" | "p" | "pw" | "h" | "pl">, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    h?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
    ccw?: boolean | undefined;
    startingpin?: string | ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[] | undefined;
    cc?: boolean | undefined;
    thermalpad?: string | true | undefined;
}>, z.ZodEffects<z.ZodObject<{
    fn: z.ZodString;
    cc: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    ccw: z.ZodOptional<z.ZodDefault<z.ZodBoolean>>;
    startingpin: z.ZodOptional<z.ZodPipeline<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodArray<z.ZodEnum<["leftside", "topside", "rightside", "bottomside", "toppin", "bottompin", "leftpin", "rightpin"]>, "many">]>, string[], string | ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[]>, z.ZodArray<z.ZodEnum<["leftside", "topside", "rightside", "bottomside", "toppin", "bottompin", "leftpin", "rightpin"]>, "many">>>;
    num_pins: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    w: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    h: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    p: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pw: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pl: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    thermalpad: z.ZodOptional<z.ZodUnion<[z.ZodLiteral<true>, z.ZodPipeline<z.ZodEffects<z.ZodString, {
        x: number;
        y: number;
    }, string>, z.ZodObject<{
        x: z.ZodNumber;
        y: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        x: number;
        y: number;
    }, {
        x: number;
        y: number;
    }>>]>>;
    legsoutside: z.ZodDefault<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: number;
    p: number;
    legsoutside: boolean;
    w?: number | undefined;
    pw?: number | undefined;
    h?: number | undefined;
    pl?: number | undefined;
    ccw?: boolean | undefined;
    startingpin?: ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[] | undefined;
    cc?: boolean | undefined;
    thermalpad?: true | {
        x: number;
        y: number;
    } | undefined;
}, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    h?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
    ccw?: boolean | undefined;
    startingpin?: string | ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[] | undefined;
    cc?: boolean | undefined;
    thermalpad?: string | true | undefined;
}>, NowDefined<{
    fn: string;
    num_pins: number;
    p: number;
    legsoutside: boolean;
    w?: number | undefined;
    pw?: number | undefined;
    h?: number | undefined;
    pl?: number | undefined;
    ccw?: boolean | undefined;
    startingpin?: ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[] | undefined;
    cc?: boolean | undefined;
    thermalpad?: true | {
        x: number;
        y: number;
    } | undefined;
}, "w" | "p" | "pw" | "h" | "pl">, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    h?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
    ccw?: boolean | undefined;
    startingpin?: string | ("leftside" | "topside" | "rightside" | "bottomside" | "toppin" | "bottompin" | "leftpin" | "rightpin")[] | undefined;
    cc?: boolean | undefined;
    thermalpad?: string | true | undefined;
}>, z.ZodObject<{
    fn: z.ZodString;
    num_pins: z.ZodDefault<z.ZodLiteral<2>>;
    w: z.ZodDefault<z.ZodString>;
    h: z.ZodDefault<z.ZodString>;
    pl: z.ZodDefault<z.ZodString>;
    pw: z.ZodDefault<z.ZodString>;
    p: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: 2;
    w: string;
    p: string;
    pw: string;
    h: string;
    pl: string;
}, {
    fn: string;
    num_pins?: 2 | undefined;
    w?: string | undefined;
    p?: string | undefined;
    pw?: string | undefined;
    h?: string | undefined;
    pl?: string | undefined;
}>, z.ZodEffects<z.ZodObject<{
    fn: z.ZodString;
    num_pins: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    w: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    p: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pw: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pl: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    legsoutside: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: number;
    w: number;
    p: number;
    pw: number;
    pl: number;
    legsoutside: boolean;
}, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
}>, NowDefined<{
    fn: string;
    num_pins: number;
    w: number;
    p: number;
    pw: number;
    pl: number;
    legsoutside: boolean;
}, "w" | "p" | "pw" | "pl">, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
}>, z.ZodObject<{
    fn: z.ZodString;
    num_pins: z.ZodDefault<z.ZodNumber>;
    w: z.ZodDefault<z.ZodString>;
    h: z.ZodDefault<z.ZodString>;
    pl: z.ZodDefault<z.ZodString>;
    pw: z.ZodDefault<z.ZodString>;
    p: z.ZodDefault<z.ZodString>;
    string: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: number;
    w: string;
    p: string;
    pw: string;
    h: string;
    pl: string;
    string?: string | undefined;
}, {
    fn: string;
    string?: string | undefined;
    num_pins?: number | undefined;
    w?: string | undefined;
    p?: string | undefined;
    pw?: string | undefined;
    h?: string | undefined;
    pl?: string | undefined;
}>, z.ZodEffects<z.ZodObject<{
    fn: z.ZodString;
    num_pins: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    w: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    p: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pw: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pl: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    legsoutside: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: number;
    w: number;
    p: number;
    pw: number;
    pl: number;
    legsoutside: boolean;
}, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
}>, NowDefined<{
    fn: string;
    num_pins: number;
    w: number;
    p: number;
    pw: number;
    pl: number;
    legsoutside: boolean;
}, "w" | "p" | "pw" | "pl">, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
}>, z.ZodEffects<z.ZodObject<{
    fn: z.ZodString;
    num_pins: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    w: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    p: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pw: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pl: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    legsoutside: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: number;
    w: number;
    p: number;
    pw: number;
    pl: number;
    legsoutside: boolean;
}, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
}>, NowDefined<{
    fn: string;
    num_pins: number;
    w: number;
    p: number;
    pw: number;
    pl: number;
    legsoutside: boolean;
}, "w" | "p" | "pw" | "pl">, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
}>, z.ZodObject<{
    fn: z.ZodString;
    num_pins: z.ZodDefault<z.ZodLiteral<3>>;
    w: z.ZodDefault<z.ZodString>;
    h: z.ZodDefault<z.ZodString>;
    pl: z.ZodDefault<z.ZodString>;
    pw: z.ZodDefault<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: 3;
    w: string;
    pw: string;
    h: string;
    pl: string;
}, {
    fn: string;
    num_pins?: 3 | undefined;
    w?: string | undefined;
    pw?: string | undefined;
    h?: string | undefined;
    pl?: string | undefined;
}>, z.ZodEffects<z.ZodObject<{
    fn: z.ZodString;
    num_pins: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    w: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    p: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pw: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pl: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    legsoutside: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: number;
    w: number;
    p: number;
    pw: number;
    pl: number;
    legsoutside: boolean;
}, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
}>, NowDefined<{
    fn: string;
    num_pins: number;
    w: number;
    p: number;
    pw: number;
    pl: number;
    legsoutside: boolean;
}, "w" | "p" | "pw" | "pl">, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
}>, z.ZodEffects<z.ZodObject<{
    fn: z.ZodString;
    num_pins: z.ZodDefault<z.ZodOptional<z.ZodNumber>>;
    w: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    p: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pw: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pl: z.ZodDefault<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    legsoutside: z.ZodDefault<z.ZodOptional<z.ZodBoolean>>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    num_pins: number;
    w: number;
    p: number;
    pw: number;
    pl: number;
    legsoutside: boolean;
}, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
}>, NowDefined<{
    fn: string;
    num_pins: number;
    w: number;
    p: number;
    pw: number;
    pl: number;
    legsoutside: boolean;
}, "w" | "p" | "pw" | "pl">, {
    fn: string;
    num_pins?: number | undefined;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    pl?: string | number | undefined;
    legsoutside?: boolean | undefined;
}>, z.ZodObject<{
    tht: z.ZodBoolean;
    p: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pw: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    ph: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    metric: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    imperial: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    w: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    h: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    textbottom: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    tht: boolean;
    w?: number | undefined;
    p?: number | undefined;
    pw?: number | undefined;
    ph?: number | undefined;
    metric?: number | undefined;
    imperial?: number | undefined;
    h?: number | undefined;
    textbottom?: boolean | undefined;
}, {
    tht: boolean;
    w?: string | number | undefined;
    p?: string | number | undefined;
    pw?: string | number | undefined;
    ph?: string | number | undefined;
    metric?: string | number | undefined;
    imperial?: string | number | undefined;
    h?: string | number | undefined;
    textbottom?: boolean | undefined;
}>, z.ZodObject<{
    w: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
    h: z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>;
}, "strip", z.ZodTypeAny, {
    w: number;
    h: number;
}, {
    w: string | number;
    h: string | number;
}>, z.ZodEffects<z.ZodObject<{
    fn: z.ZodString;
    circle: z.ZodOptional<z.ZodBoolean>;
    rect: z.ZodOptional<z.ZodBoolean>;
    square: z.ZodOptional<z.ZodBoolean>;
    d: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pd: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    diameter: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    r: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pr: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    radius: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    w: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    pw: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    width: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    h: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    ph: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    height: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    s: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    size: z.ZodOptional<z.ZodEffects<z.ZodUnion<[z.ZodString, z.ZodNumber]>, number, string | number>>;
    string: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    fn: string;
    string?: string | undefined;
    circle?: boolean | undefined;
    w?: number | undefined;
    rect?: boolean | undefined;
    width?: number | undefined;
    height?: number | undefined;
    radius?: number | undefined;
    pw?: number | undefined;
    ph?: number | undefined;
    h?: number | undefined;
    square?: boolean | undefined;
    d?: number | undefined;
    pd?: number | undefined;
    diameter?: number | undefined;
    r?: number | undefined;
    pr?: number | undefined;
    s?: number | undefined;
    size?: number | undefined;
}, {
    fn: string;
    string?: string | undefined;
    circle?: boolean | undefined;
    w?: string | number | undefined;
    rect?: boolean | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    radius?: string | number | undefined;
    pw?: string | number | undefined;
    ph?: string | number | undefined;
    h?: string | number | undefined;
    square?: boolean | undefined;
    d?: string | number | undefined;
    pd?: string | number | undefined;
    diameter?: string | number | undefined;
    r?: string | number | undefined;
    pr?: string | number | undefined;
    s?: string | number | undefined;
    size?: string | number | undefined;
}>, {
    fn: string;
    shape: "circle" | "rect" | "square";
    radius: number | undefined;
    width: number | undefined;
    height: number | undefined;
}, {
    fn: string;
    string?: string | undefined;
    circle?: boolean | undefined;
    w?: string | number | undefined;
    rect?: boolean | undefined;
    width?: string | number | undefined;
    height?: string | number | undefined;
    radius?: string | number | undefined;
    pw?: string | number | undefined;
    ph?: string | number | undefined;
    h?: string | number | undefined;
    square?: boolean | undefined;
    d?: string | number | undefined;
    pd?: string | number | undefined;
    diameter?: string | number | undefined;
    r?: string | number | undefined;
    pr?: string | number | undefined;
    s?: string | number | undefined;
    size?: string | number | undefined;
}>]>;
type AnyFootprinterDefinitionOutput = z.infer<typeof any_footprinter_def>;

type StandardSize = {
    imperial: string;
    metric: string;
    p_mm_min: number;
    ph_mm_min: number;
    pw_mm_min: number;
    h_mm_min: number;
    w_mm_min: number;
};
declare const footprintSizes: StandardSize[];

type FootprinterParamsBuilder<K extends string> = {
    [P in K | "params" | "soup" | "circuitJson"]: P extends "params" | "soup" | "circuitJson" ? Footprinter[P] : (v?: number | string | boolean) => FootprinterParamsBuilder<K>;
};
type CommonPassiveOptionKey = "metric" | "imperial" | "tht" | "p" | "pw" | "ph" | "w" | "h" | "textbottom";
type Footprinter = {
    dip: (num_pins?: number) => FootprinterParamsBuilder<"w" | "p" | "id" | "od" | "wide" | "narrow">;
    cap: () => FootprinterParamsBuilder<CommonPassiveOptionKey>;
    res: () => FootprinterParamsBuilder<CommonPassiveOptionKey>;
    diode: () => FootprinterParamsBuilder<CommonPassiveOptionKey>;
    led: () => FootprinterParamsBuilder<CommonPassiveOptionKey>;
    lr: (num_pins?: number) => FootprinterParamsBuilder<"w" | "l" | "pl" | "pr">;
    qfp: (num_pins?: number) => FootprinterParamsBuilder<"w" | "p" | "id" | "od" | "wide" | "narrow">;
    quad: (num_pins?: number) => FootprinterParamsBuilder<"w" | "l" | "square" | "pl" | "pr" | "pb" | "pt" | "p" | "pw" | "ph">;
    bga: (num_pins?: number) => FootprinterParamsBuilder<"grid" | "p" | "w" | "h" | "ball" | "pad" | "missing" | "tlorigin" | "blorigin" | "trorigin" | "brorigin" | "circularpads">;
    qfn: (num_pins?: number) => FootprinterParamsBuilder<"w" | "h" | "p">;
    soic: (num_pins?: number) => FootprinterParamsBuilder<"w" | "p" | "id" | "od">;
    mlp: (num_pins?: number) => FootprinterParamsBuilder<"w" | "h" | "p">;
    ssop: (num_pins?: number) => FootprinterParamsBuilder<"w" | "p">;
    tssop: (num_pins?: number) => FootprinterParamsBuilder<"w" | "p">;
    dfn: (num_pins?: number) => FootprinterParamsBuilder<"w" | "p">;
    pinrow: (num_pins?: number) => FootprinterParamsBuilder<"p" | "id" | "od" | "male" | "female" | "rows" | "pinlabeltextalignleft" | "pinlabeltextaligncenter" | "pinlabeltextalignright" | "pinlabelverticallyinverted" | "pinlabelorthogonal" | "nosquareplating" | "nopinlabels" | "doublesidedpinlabel" | "bottomsidepinlabel">;
    axial: () => FootprinterParamsBuilder<"p" | "id" | "od">;
    hc49: () => FootprinterParamsBuilder<"p" | "id" | "od" | "w" | "h">;
    to220: () => FootprinterParamsBuilder<"w" | "h" | "p" | "id" | "od">;
    sot363: () => FootprinterParamsBuilder<"w" | "p" | "pl" | "pw">;
    sot457: () => FootprinterParamsBuilder<"w" | "p" | "h" | "pl" | "pw" | "wave" | "reflow" | "pillr" | "pillh" | "pillw">;
    sot563: () => FootprinterParamsBuilder<"w" | "p" | "pl" | "pw">;
    sot723: () => FootprinterParamsBuilder<"w" | "h" | "pl" | "pw">;
    sot23: () => FootprinterParamsBuilder<"w" | "h" | "pl" | "pw">;
    sot25: () => FootprinterParamsBuilder<"w" | "h" | "pl" | "pw">;
    sot: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    sot323: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    sot89: () => FootprinterParamsBuilder<"w" | "p" | "pl" | "pw" | "h">;
    sod323w: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    smc: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pw" | "pl">;
    minimelf: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pw" | "pl">;
    melf: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pw" | "pl">;
    jst: () => FootprinterParamsBuilder<"w" | "h" | "p" | "id" | "pw" | "pl" | "ph" | "sh">;
    micromelf: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pw" | "pl">;
    ms013: () => FootprinterParamsBuilder<"w" | "p">;
    ms012: () => FootprinterParamsBuilder<"w" | "p">;
    lqfp: (num_pins?: number) => FootprinterParamsBuilder<"w" | "h" | "pl" | "pw">;
    sma: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    smf: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    smb: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    smbf: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    potentiometer: () => FootprinterParamsBuilder<"w" | "h" | "p" | "id" | "od" | "pw" | "ca">;
    electrolytic: () => FootprinterParamsBuilder<"d" | "p" | "id" | "od">;
    sod923: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    sod323: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    sod80: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    sod882: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    sod882d: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    sod723: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    sod523: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    sod323f: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    sod323fl: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    sod128: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    sod123f: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    sod123fl: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    sod123: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    sod123w: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    sod110: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    to92: () => FootprinterParamsBuilder<"w" | "h" | "p" | "id" | "od" | "inline">;
    to92s: () => FootprinterParamsBuilder<"w" | "h" | "p" | "id" | "od">;
    sot223: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    son: (num_pins?: number) => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw" | "epw" | "eph" | "ep">;
    vssop: (num_pins?: number) => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    msop: (num_pins?: number) => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    sot23w: () => FootprinterParamsBuilder<"w" | "h" | "p" | "pl" | "pw">;
    pushbutton: () => FootprinterParamsBuilder<"tllabel" | "trlabel" | "bllabel" | "brlabel">;
    stampboard: () => FootprinterParamsBuilder<"w" | "h" | "left" | "right" | "top" | "bottom" | "p" | "pw" | "pl" | "innerhole" | "innerholeedgedistance">;
    stampreceiver: () => FootprinterParamsBuilder<"w" | "h" | "left" | "right" | "top" | "bottom" | "p" | "pw" | "pl" | "innerhole" | "innerholeedgedistance">;
    breakoutheaders: () => FootprinterParamsBuilder<"w" | "h" | "left" | "right" | "top" | "bottom" | "p" | "id" | "od">;
    smtpad: () => FootprinterParamsBuilder<"circle" | "rect" | "square" | "d" | "pd" | "diameter" | "r" | "pr" | "radius" | "w" | "pw" | "width" | "h" | "ph" | "height" | "s" | "size"> & {
        params: () => any;
        soup: () => AnySoupElement[];
        circuitJson: () => AnyCircuitElement[];
    };
    platedhole: () => FootprinterParamsBuilder<"d" | "hd" | "r" | "hr" | "pd" | "pr">;
    pad: () => FootprinterParamsBuilder<"w" | "h"> & {
        params: () => any;
        soup: () => AnySoupElement[];
        circuitJson: () => AnyCircuitElement[];
    };
    solderjumper: (num_pins?: number) => FootprinterParamsBuilder<"bridged" | "p" | "pw" | "ph">;
    params: () => any;
    /** @deprecated use circuitJson() instead */
    soup: () => AnySoupElement[];
    circuitJson: () => AnyCircuitElement[];
    json: () => AnyFootprinterDefinitionOutput[];
    getFootprintNames: () => string[];
};
declare const string: (def: string) => Footprinter;
declare const getFootprintNames: () => string[];
declare const getFootprintSizes: () => typeof footprintSizes;
declare const getFootprintNamesByType: () => {
    passiveFootprintNames: string[];
    normalFootprintNames: string[];
};
declare const footprinter: {
    (): Footprinter & {
        string: typeof string;
        getFootprintNames: string[];
        setString: (string: any) => void;
    };
    string: (def: string) => Footprinter;
    getFootprintNames: () => string[];
};
declare const fp: {
    (): Footprinter & {
        string: typeof string;
        getFootprintNames: string[];
        setString: (string: any) => void;
    };
    string: (def: string) => Footprinter;
    getFootprintNames: () => string[];
};

export { type Footprinter, type FootprinterParamsBuilder, footprinter, fp, getFootprintNames, getFootprintNamesByType, getFootprintSizes, string };
