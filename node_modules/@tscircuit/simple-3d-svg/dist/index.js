// lib/index.ts
function colorToCss(c) {
  return typeof c === "string" ? c : `rgba(${c[0]},${c[1]},${c[2]},${c[3]})`;
}
function add(a, b) {
  return { x: a.x + b.x, y: a.y + b.y, z: a.z + b.z };
}
function sub(a, b) {
  return { x: a.x - b.x, y: a.y - b.y, z: a.z - b.z };
}
function dot(a, b) {
  return a.x * b.x + a.y * b.y + a.z * b.z;
}
function cross(a, b) {
  return {
    x: a.y * b.z - a.z * b.y,
    y: a.z * b.x - a.x * b.z,
    z: a.x * b.y - a.y * b.x
  };
}
function scale(v, k) {
  return { x: v.x * k, y: v.y * k, z: v.z * k };
}
function len(v) {
  return Math.sqrt(dot(v, v));
}
function norm(v) {
  const l = len(v) || 1;
  return scale(v, 1 / l);
}
function rotLocal(p, r = { x: 0, y: 0, z: 0 }) {
  let { x, y, z } = p;
  if (r.x) {
    const c = Math.cos(r.x);
    const s = Math.sin(r.x);
    const y2 = y * c - z * s;
    z = y * s + z * c;
    y = y2;
  }
  if (r.y) {
    const c = Math.cos(r.y);
    const s = Math.sin(r.y);
    const x2 = x * c + z * s;
    z = -x * s + z * c;
    x = x2;
  }
  if (r.z) {
    const c = Math.cos(r.z);
    const s = Math.sin(r.z);
    const x2 = x * c - y * s;
    y = x * s + y * c;
    x = x2;
  }
  return { x, y, z };
}
var W_DEF = 400;
var H_DEF = 400;
var FOCAL = 2;
function axes(cam) {
  const f = norm(sub(cam.lookAt, cam.position));
  const wUp = { x: 0, y: 1, z: 0 };
  let r = norm(cross(f, wUp));
  if (!len(r)) r = { x: 1, y: 0, z: 0 };
  const u = cross(r, f);
  return { r, u, f };
}
function toCam(p, cam) {
  const { r, u, f } = axes(cam);
  const d = sub(p, cam.position);
  return { x: dot(d, r), y: dot(d, u), z: dot(d, f) };
}
function proj(p, w, h, focal) {
  if (p.z <= 0) return null;
  const s = focal / p.z;
  return { x: p.x * s * w / 2, y: -p.y * s * h / 2, z: p.z };
}
var FACES = [
  [0, 1, 2, 3],
  [4, 5, 6, 7],
  [0, 1, 5, 4],
  [3, 2, 6, 7],
  [1, 2, 6, 5],
  [0, 3, 7, 4]
];
var TOP = [3, 2, 6, 7];
function verts(b) {
  const {
    size: { x: sx, y: sy, z: sz },
    center,
    rotation
  } = b;
  const offs = [
    { x: -sx / 2, y: -sy / 2, z: -sz / 2 },
    { x: sx / 2, y: -sy / 2, z: -sz / 2 },
    { x: sx / 2, y: sy / 2, z: -sz / 2 },
    { x: -sx / 2, y: sy / 2, z: -sz / 2 },
    { x: -sx / 2, y: -sy / 2, z: sz / 2 },
    { x: sx / 2, y: -sy / 2, z: sz / 2 },
    { x: sx / 2, y: sy / 2, z: sz / 2 },
    { x: -sx / 2, y: sy / 2, z: sz / 2 }
  ];
  return offs.map((o) => add(center, rotLocal(o, rotation)));
}
function renderScene(scene, opt = {}) {
  const W = opt.width ?? W_DEF;
  const H = opt.height ?? H_DEF;
  const focal = scene.camera.focalLength ?? FOCAL;
  const faces = [];
  const labels = [];
  for (const box of scene.boxes) {
    const vw = verts(box);
    const vc = vw.map((v) => toCam(v, scene.camera));
    const vp = vc.map((v) => proj(v, W, H, focal));
    for (const idx of FACES) {
      const p4 = [];
      let zMax = -Infinity;
      let behind = false;
      for (const i of idx) {
        const p = vp[i];
        if (!p) {
          behind = true;
          break;
        }
        p4.push(p);
        zMax = Math.max(zMax, vc[i].z);
      }
      if (behind) continue;
      const [a, b, c] = idx;
      const n = cross(sub(vc[b], vc[a]), sub(vc[c], vc[a]));
      if (n.z >= 0) continue;
      faces.push({
        pts: p4,
        depth: zMax,
        fill: colorToCss(box.color)
      });
    }
    if (box.topLabel) {
      const pts = TOP.map((i) => vp[i]);
      if (pts.every(Boolean)) {
        const p0 = pts[0];
        const p1 = pts[1];
        const p3 = pts[3];
        const u = sub(p1, p0);
        const v = sub(p3, p0);
        const lu = len(u);
        const lv = len(v);
        if (lu && lv) {
          const uN = scale(u, 1 / lu);
          const vN = scale(v, 1 / lv);
          const cx = pts.reduce((s, p) => s + p.x, 0) / 4;
          const cy = pts.reduce((s, p) => s + p.y, 0) / 4;
          const cz = Math.max(...TOP.map((i) => vc[i].z));
          const m = `matrix(${uN.x} ${uN.y} ${vN.x} ${vN.y} ${cx} ${cy})`;
          const fillCol = box.topLabelColor ?? [0, 0, 0, 1];
          labels.push({
            matrix: m,
            depth: cz,
            text: box.topLabel,
            fill: colorToCss(fillCol)
          });
        }
      }
    }
  }
  faces.sort((a, b) => b.depth - a.depth);
  labels.sort((a, b) => b.depth - a.depth);
  const out = [];
  out.push(
    `<svg xmlns="http://www.w3.org/2000/svg" width="${W}" height="${H}" viewBox="${-W / 2} ${-H / 2} ${W} ${H}">`
  );
  if (opt.backgroundColor) {
    out.push(
      `  <rect x="${-W / 2}" y="${-H / 2}" width="${W}" height="${H}" fill="${colorToCss(opt.backgroundColor)}" />
`
    );
  }
  out.push(
    '  <g stroke="#000" stroke-width="1" stroke-linecap="round" stroke-linejoin="round">\n'
  );
  for (const f of faces) {
    out.push(
      `    <polygon fill="${f.fill}" points="${f.pts.map((p) => `${p.x},${p.y}`).join(" ")}" />
`
    );
  }
  out.push("  </g>\n");
  out.push(
    '  <g font-family="sans-serif" font-size="14" text-anchor="middle" dominant-baseline="central">\n'
  );
  for (const l of labels) {
    out.push(
      `    <g transform="${l.matrix}"><text x="0" y="0" fill="${l.fill}">${l.text}</text></g>
`
    );
  }
  out.push("  </g>\n</svg>");
  return out.join("");
}
export {
  renderScene
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vbGliL2luZGV4LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLyBzaW1wbGUtc3ZnLTNkLXJlbmRlcmVyLnRzICh2Mylcbi8vIFRvcCBsYWJlbHMgbm93IGFsaWduIHdpdGggdGhlIGJveCdzIHRvcCBmYWNlIHVzaW5nIGFuIGFmZmluZSB0cmFuc2Zvcm0gKHJvdGF0aW9uICsgc2tldykuXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgVHlwZXMgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cbmV4cG9ydCBpbnRlcmZhY2UgUG9pbnQzIHtcbiAgeDogbnVtYmVyXG4gIHk6IG51bWJlclxuICB6OiBudW1iZXJcbn1cbmV4cG9ydCB0eXBlIFJHQkEgPSBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXVxuZXhwb3J0IHR5cGUgQ29sb3IgPSBSR0JBIHwgc3RyaW5nXG5cbmV4cG9ydCBpbnRlcmZhY2UgQm94IHtcbiAgY2VudGVyOiBQb2ludDNcbiAgc2l6ZTogUG9pbnQzXG4gIGNvbG9yOiBDb2xvclxuICByb3RhdGlvbj86IFBvaW50MyAvLyBFdWxlciByYWRpYW5zXG4gIHRvcExhYmVsPzogc3RyaW5nXG4gIHRvcExhYmVsQ29sb3I/OiBDb2xvclxufVxuZXhwb3J0IGludGVyZmFjZSBDYW1lcmEge1xuICBwb3NpdGlvbjogUG9pbnQzXG4gIGxvb2tBdDogUG9pbnQzXG4gIGZvY2FsTGVuZ3RoPzogbnVtYmVyXG59XG5leHBvcnQgaW50ZXJmYWNlIFNjZW5lIHtcbiAgYm94ZXM6IEJveFtdXG4gIGNhbWVyYTogQ2FtZXJhXG59XG5cbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIENvbG9yIFV0aWxpdHkgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cbmZ1bmN0aW9uIGNvbG9yVG9Dc3MoYzogQ29sb3IpOiBzdHJpbmcge1xuICByZXR1cm4gdHlwZW9mIGMgPT09IFwic3RyaW5nXCIgPyBjIDogYHJnYmEoJHtjWzBdfSwke2NbMV19LCR7Y1syXX0sJHtjWzNdfSlgXG59XG5cbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIFZlYzMgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cbmZ1bmN0aW9uIGFkZChhOiBQb2ludDMsIGI6IFBvaW50Myk6IFBvaW50MyB7XG4gIHJldHVybiB7IHg6IGEueCArIGIueCwgeTogYS55ICsgYi55LCB6OiBhLnogKyBiLnogfVxufVxuZnVuY3Rpb24gc3ViKGE6IFBvaW50MywgYjogUG9pbnQzKTogUG9pbnQzIHtcbiAgcmV0dXJuIHsgeDogYS54IC0gYi54LCB5OiBhLnkgLSBiLnksIHo6IGEueiAtIGIueiB9XG59XG5mdW5jdGlvbiBkb3QoYTogUG9pbnQzLCBiOiBQb2ludDMpOiBudW1iZXIge1xuICByZXR1cm4gYS54ICogYi54ICsgYS55ICogYi55ICsgYS56ICogYi56XG59XG5mdW5jdGlvbiBjcm9zcyhhOiBQb2ludDMsIGI6IFBvaW50Myk6IFBvaW50MyB7XG4gIHJldHVybiB7XG4gICAgeDogYS55ICogYi56IC0gYS56ICogYi55LFxuICAgIHk6IGEueiAqIGIueCAtIGEueCAqIGIueixcbiAgICB6OiBhLnggKiBiLnkgLSBhLnkgKiBiLngsXG4gIH1cbn1cbmZ1bmN0aW9uIHNjYWxlKHY6IFBvaW50MywgazogbnVtYmVyKTogUG9pbnQzIHtcbiAgcmV0dXJuIHsgeDogdi54ICogaywgeTogdi55ICogaywgejogdi56ICogayB9XG59XG5mdW5jdGlvbiBsZW4odjogUG9pbnQzKTogbnVtYmVyIHtcbiAgcmV0dXJuIE1hdGguc3FydChkb3QodiwgdikpXG59XG5mdW5jdGlvbiBub3JtKHY6IFBvaW50Myk6IFBvaW50MyB7XG4gIGNvbnN0IGwgPSBsZW4odikgfHwgMVxuICByZXR1cm4gc2NhbGUodiwgMSAvIGwpXG59XG5cbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIFJvdGF0aW9uIFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCovXG5mdW5jdGlvbiByb3RMb2NhbChwOiBQb2ludDMsIHI6IFBvaW50MyA9IHsgeDogMCwgeTogMCwgejogMCB9KTogUG9pbnQzIHtcbiAgbGV0IHsgeCwgeSwgeiB9ID0gcFxuICBpZiAoci54KSB7XG4gICAgY29uc3QgYyA9IE1hdGguY29zKHIueClcbiAgICBjb25zdCBzID0gTWF0aC5zaW4oci54KVxuICAgIGNvbnN0IHkyID0geSAqIGMgLSB6ICogc1xuICAgIHogPSB5ICogcyArIHogKiBjXG4gICAgeSA9IHkyXG4gIH1cbiAgaWYgKHIueSkge1xuICAgIGNvbnN0IGMgPSBNYXRoLmNvcyhyLnkpXG4gICAgY29uc3QgcyA9IE1hdGguc2luKHIueSlcbiAgICBjb25zdCB4MiA9IHggKiBjICsgeiAqIHNcbiAgICB6ID0gLXggKiBzICsgeiAqIGNcbiAgICB4ID0geDJcbiAgfVxuICBpZiAoci56KSB7XG4gICAgY29uc3QgYyA9IE1hdGguY29zKHIueilcbiAgICBjb25zdCBzID0gTWF0aC5zaW4oci56KVxuICAgIGNvbnN0IHgyID0geCAqIGMgLSB5ICogc1xuICAgIHkgPSB4ICogcyArIHkgKiBjXG4gICAgeCA9IHgyXG4gIH1cbiAgcmV0dXJuIHsgeCwgeSwgeiB9XG59XG5cbi8qXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwIENhbWVyYSAmIFByb2plY3Rpb24gXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cbmNvbnN0IFdfREVGID0gNDAwXG5jb25zdCBIX0RFRiA9IDQwMFxuY29uc3QgRk9DQUwgPSAyXG5pbnRlcmZhY2UgUHJvaiB7XG4gIHg6IG51bWJlclxuICB5OiBudW1iZXJcbiAgejogbnVtYmVyXG59XG5mdW5jdGlvbiBheGVzKGNhbTogQ2FtZXJhKSB7XG4gIGNvbnN0IGYgPSBub3JtKHN1YihjYW0ubG9va0F0LCBjYW0ucG9zaXRpb24pKVxuICBjb25zdCB3VXAgPSB7IHg6IDAsIHk6IDEsIHo6IDAgfVxuICBsZXQgciA9IG5vcm0oY3Jvc3MoZiwgd1VwKSlcbiAgaWYgKCFsZW4ocikpIHIgPSB7IHg6IDEsIHk6IDAsIHo6IDAgfVxuICBjb25zdCB1ID0gY3Jvc3MociwgZilcbiAgcmV0dXJuIHsgciwgdSwgZiB9XG59XG5mdW5jdGlvbiB0b0NhbShwOiBQb2ludDMsIGNhbTogQ2FtZXJhKSB7XG4gIGNvbnN0IHsgciwgdSwgZiB9ID0gYXhlcyhjYW0pXG4gIGNvbnN0IGQgPSBzdWIocCwgY2FtLnBvc2l0aW9uKVxuICByZXR1cm4geyB4OiBkb3QoZCwgciksIHk6IGRvdChkLCB1KSwgejogZG90KGQsIGYpIH1cbn1cbmZ1bmN0aW9uIHByb2oocDogUG9pbnQzLCB3OiBudW1iZXIsIGg6IG51bWJlciwgZm9jYWw6IG51bWJlcik6IFByb2ogfCBudWxsIHtcbiAgaWYgKHAueiA8PSAwKSByZXR1cm4gbnVsbFxuICBjb25zdCBzID0gZm9jYWwgLyBwLnpcbiAgcmV0dXJuIHsgeDogKHAueCAqIHMgKiB3KSAvIDIsIHk6ICgtcC55ICogcyAqIGgpIC8gMiwgejogcC56IH1cbn1cblxuLypcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAgR2VvbWV0cnkgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cbmNvbnN0IEZBQ0VTOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXVtdID0gW1xuICBbMCwgMSwgMiwgM10sXG4gIFs0LCA1LCA2LCA3XSxcbiAgWzAsIDEsIDUsIDRdLFxuICBbMywgMiwgNiwgN10sXG4gIFsxLCAyLCA2LCA1XSxcbiAgWzAsIDMsIDcsIDRdLFxuXSAvLyBmcm9udCxiYWNrLGJvdHRvbSx0b3AscmlnaHQsbGVmdFxuY29uc3QgVE9QID0gWzMsIDIsIDYsIDddXG5mdW5jdGlvbiB2ZXJ0cyhiOiBCb3gpOiBQb2ludDNbXSB7XG4gIGNvbnN0IHtcbiAgICBzaXplOiB7IHg6IHN4LCB5OiBzeSwgejogc3ogfSxcbiAgICBjZW50ZXIsXG4gICAgcm90YXRpb24sXG4gIH0gPSBiXG4gIGNvbnN0IG9mZnMgPSBbXG4gICAgeyB4OiAtc3ggLyAyLCB5OiAtc3kgLyAyLCB6OiAtc3ogLyAyIH0sXG4gICAgeyB4OiBzeCAvIDIsIHk6IC1zeSAvIDIsIHo6IC1zeiAvIDIgfSxcbiAgICB7IHg6IHN4IC8gMiwgeTogc3kgLyAyLCB6OiAtc3ogLyAyIH0sXG4gICAgeyB4OiAtc3ggLyAyLCB5OiBzeSAvIDIsIHo6IC1zeiAvIDIgfSxcbiAgICB7IHg6IC1zeCAvIDIsIHk6IC1zeSAvIDIsIHo6IHN6IC8gMiB9LFxuICAgIHsgeDogc3ggLyAyLCB5OiAtc3kgLyAyLCB6OiBzeiAvIDIgfSxcbiAgICB7IHg6IHN4IC8gMiwgeTogc3kgLyAyLCB6OiBzeiAvIDIgfSxcbiAgICB7IHg6IC1zeCAvIDIsIHk6IHN5IC8gMiwgejogc3ogLyAyIH0sXG4gIF1cbiAgcmV0dXJuIG9mZnMubWFwKChvKSA9PiBhZGQoY2VudGVyLCByb3RMb2NhbChvLCByb3RhdGlvbikpKVxufVxuXG4vKlx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMFx1MjUwMCBSZW5kZXIgXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJTY2VuZShcbiAgc2NlbmU6IFNjZW5lLFxuICBvcHQ6IHsgd2lkdGg/OiBudW1iZXI7IGhlaWdodD86IG51bWJlcjsgYmFja2dyb3VuZENvbG9yPzogQ29sb3IgfSA9IHt9LFxuKTogc3RyaW5nIHtcbiAgY29uc3QgVyA9IG9wdC53aWR0aCA/PyBXX0RFRlxuICBjb25zdCBIID0gb3B0LmhlaWdodCA/PyBIX0RFRlxuICBjb25zdCBmb2NhbCA9IHNjZW5lLmNhbWVyYS5mb2NhbExlbmd0aCA/PyBGT0NBTFxuICB0eXBlIEZhY2UgPSB7IHB0czogUHJvaltdOyBkZXB0aDogbnVtYmVyOyBmaWxsOiBzdHJpbmcgfVxuICB0eXBlIExhYmVsID0geyBtYXRyaXg6IHN0cmluZzsgZGVwdGg6IG51bWJlcjsgdGV4dDogc3RyaW5nOyBmaWxsOiBzdHJpbmcgfVxuICBjb25zdCBmYWNlczogRmFjZVtdID0gW11cbiAgY29uc3QgbGFiZWxzOiBMYWJlbFtdID0gW11cblxuICBmb3IgKGNvbnN0IGJveCBvZiBzY2VuZS5ib3hlcykge1xuICAgIGNvbnN0IHZ3ID0gdmVydHMoYm94KVxuICAgIGNvbnN0IHZjID0gdncubWFwKCh2KSA9PiB0b0NhbSh2LCBzY2VuZS5jYW1lcmEpKVxuICAgIGNvbnN0IHZwID0gdmMubWFwKCh2KSA9PiBwcm9qKHYsIFcsIEgsIGZvY2FsKSlcblxuICAgIC8vIGZhY2VzXG4gICAgZm9yIChjb25zdCBpZHggb2YgRkFDRVMpIHtcbiAgICAgIGNvbnN0IHA0OiBQcm9qW10gPSBbXVxuICAgICAgbGV0IHpNYXggPSAtSW5maW5pdHlcbiAgICAgIGxldCBiZWhpbmQgPSBmYWxzZVxuICAgICAgZm9yIChjb25zdCBpIG9mIGlkeCkge1xuICAgICAgICBjb25zdCBwID0gdnBbaV1cbiAgICAgICAgaWYgKCFwKSB7XG4gICAgICAgICAgYmVoaW5kID0gdHJ1ZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgcDQucHVzaChwKVxuICAgICAgICB6TWF4ID0gTWF0aC5tYXgoek1heCwgdmNbaV0hLnopXG4gICAgICB9XG4gICAgICBpZiAoYmVoaW5kKSBjb250aW51ZVxuICAgICAgY29uc3QgW2EsIGIsIGNdID0gaWR4XG4gICAgICBjb25zdCBuID0gY3Jvc3Moc3ViKHZjW2JdISwgdmNbYV0hKSwgc3ViKHZjW2NdISwgdmNbYV0hKSlcbiAgICAgIGlmIChuLnogPj0gMCkgY29udGludWVcbiAgICAgIGZhY2VzLnB1c2goe1xuICAgICAgICBwdHM6IHA0LFxuICAgICAgICBkZXB0aDogek1heCxcbiAgICAgICAgZmlsbDogY29sb3JUb0Nzcyhib3guY29sb3IpLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyB0b3AgbGFiZWxcbiAgICBpZiAoYm94LnRvcExhYmVsKSB7XG4gICAgICBjb25zdCBwdHMgPSBUT1AubWFwKChpKSA9PiB2cFtpXSlcbiAgICAgIGlmIChwdHMuZXZlcnkoQm9vbGVhbikpIHtcbiAgICAgICAgY29uc3QgcDAgPSBwdHNbMF0gYXMgUHJvalxuICAgICAgICBjb25zdCBwMSA9IHB0c1sxXSBhcyBQcm9qXG4gICAgICAgIGNvbnN0IHAzID0gcHRzWzNdIGFzIFByb2pcbiAgICAgICAgY29uc3QgdSA9IHN1YihwMSwgcDApXG4gICAgICAgIGNvbnN0IHYgPSBzdWIocDMsIHAwKVxuICAgICAgICBjb25zdCBsdSA9IGxlbih1KVxuICAgICAgICBjb25zdCBsdiA9IGxlbih2KVxuICAgICAgICBpZiAobHUgJiYgbHYpIHtcbiAgICAgICAgICBjb25zdCB1TiA9IHNjYWxlKHUsIDEgLyBsdSlcbiAgICAgICAgICBjb25zdCB2TiA9IHNjYWxlKHYsIDEgLyBsdilcbiAgICAgICAgICBjb25zdCBjeCA9IHB0cy5yZWR1Y2UoKHMsIHApID0+IHMgKyAocCBhcyBQcm9qKS54LCAwKSAvIDRcbiAgICAgICAgICBjb25zdCBjeSA9IHB0cy5yZWR1Y2UoKHMsIHApID0+IHMgKyAocCBhcyBQcm9qKS55LCAwKSAvIDRcbiAgICAgICAgICAvLyB1c2UgZnVydGhlc3QgdG9wLWZhY2UgdmVydGV4IHNvIHRoZSBsYWJlbCBmb2xsb3dzIHRoZSBmYWNlIG9yZGVyXG4gICAgICAgICAgY29uc3QgY3ogPSBNYXRoLm1heCguLi5UT1AubWFwKChpKSA9PiB2Y1tpXSEueikpXG4gICAgICAgICAgLy8gU1ZHIHRyYW5zZm9ybSBtYXRyaXg6IFthIGIgYyBkIGUgZl0gd2hlcmVcbiAgICAgICAgICAvLyB4JyA9IGEqeCArIGMqeSArIGUgOyB5JyA9IGIqeCArIGQqeSArIGZcbiAgICAgICAgICBjb25zdCBtID0gYG1hdHJpeCgke3VOLnh9ICR7dU4ueX0gJHt2Ti54fSAke3ZOLnl9ICR7Y3h9ICR7Y3l9KWBcbiAgICAgICAgICBjb25zdCBmaWxsQ29sID0gYm94LnRvcExhYmVsQ29sb3IgPz8gWzAsIDAsIDAsIDFdXG4gICAgICAgICAgbGFiZWxzLnB1c2goe1xuICAgICAgICAgICAgbWF0cml4OiBtLFxuICAgICAgICAgICAgZGVwdGg6IGN6LFxuICAgICAgICAgICAgdGV4dDogYm94LnRvcExhYmVsLFxuICAgICAgICAgICAgZmlsbDogY29sb3JUb0NzcyhmaWxsQ29sKSxcbiAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZmFjZXMuc29ydCgoYSwgYikgPT4gYi5kZXB0aCAtIGEuZGVwdGgpXG4gIGxhYmVscy5zb3J0KChhLCBiKSA9PiBiLmRlcHRoIC0gYS5kZXB0aClcblxuICBjb25zdCBvdXQ6IHN0cmluZ1tdID0gW11cbiAgb3V0LnB1c2goXG4gICAgYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiJHtXfVwiIGhlaWdodD1cIiR7SH1cIiB2aWV3Qm94PVwiJHstVyAvIDJ9ICR7LUggLyAyfSAke1d9ICR7SH1cIj5gLFxuICApXG4gIGlmIChvcHQuYmFja2dyb3VuZENvbG9yKSB7XG4gICAgb3V0LnB1c2goXG4gICAgICBgICA8cmVjdCB4PVwiJHstVyAvIDJ9XCIgeT1cIiR7LUggLyAyfVwiIHdpZHRoPVwiJHtXfVwiIGhlaWdodD1cIiR7SH1cIiBgICtcbiAgICAgICAgYGZpbGw9XCIke2NvbG9yVG9Dc3Mob3B0LmJhY2tncm91bmRDb2xvcil9XCIgLz5cXG5gLFxuICAgIClcbiAgfVxuICBvdXQucHVzaChcbiAgICAnICA8ZyBzdHJva2U9XCIjMDAwXCIgc3Ryb2tlLXdpZHRoPVwiMVwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiPlxcbicsXG4gIClcbiAgZm9yIChjb25zdCBmIG9mIGZhY2VzKSB7XG4gICAgb3V0LnB1c2goXG4gICAgICBgICAgIDxwb2x5Z29uIGZpbGw9XCIke2YuZmlsbH1cIiBwb2ludHM9XCIke2YucHRzLm1hcCgocCkgPT4gYCR7cC54fSwke3AueX1gKS5qb2luKFwiIFwiKX1cIiAvPlxcbmAsXG4gICAgKVxuICB9XG4gIG91dC5wdXNoKFwiICA8L2c+XFxuXCIpXG4gIG91dC5wdXNoKFxuICAgICcgIDxnIGZvbnQtZmFtaWx5PVwic2Fucy1zZXJpZlwiIGZvbnQtc2l6ZT1cIjE0XCIgdGV4dC1hbmNob3I9XCJtaWRkbGVcIiBkb21pbmFudC1iYXNlbGluZT1cImNlbnRyYWxcIj5cXG4nLFxuICApXG4gIGZvciAoY29uc3QgbCBvZiBsYWJlbHMpIHtcbiAgICBvdXQucHVzaChcbiAgICAgIGAgICAgPGcgdHJhbnNmb3JtPVwiJHtsLm1hdHJpeH1cIj48dGV4dCB4PVxcXCIwXFxcIiB5PVxcXCIwXFxcIiBmaWxsPVxcXCIke2wuZmlsbH1cXFwiPiR7bC50ZXh0fTwvdGV4dD48L2c+XFxuYCxcbiAgICApXG4gIH1cbiAgb3V0LnB1c2goXCIgIDwvZz5cXG48L3N2Zz5cIilcbiAgcmV0dXJuIG91dC5qb2luKFwiXCIpXG59XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBZ0NBLFNBQVMsV0FBVyxHQUFrQjtBQUNwQyxTQUFPLE9BQU8sTUFBTSxXQUFXLElBQUksUUFBUSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztBQUN6RTtBQUdBLFNBQVMsSUFBSSxHQUFXLEdBQW1CO0FBQ3pDLFNBQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUNwRDtBQUNBLFNBQVMsSUFBSSxHQUFXLEdBQW1CO0FBQ3pDLFNBQU8sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRTtBQUNwRDtBQUNBLFNBQVMsSUFBSSxHQUFXLEdBQW1CO0FBQ3pDLFNBQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO0FBQ3pDO0FBQ0EsU0FBUyxNQUFNLEdBQVcsR0FBbUI7QUFDM0MsU0FBTztBQUFBLElBQ0wsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFO0FB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